{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-melody/source/melody-favicon.ico","path":"melody-favicon.ico","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-melody/source/css/404.styl","path":"css/404.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-melody/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-melody/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-melody/source/img/algolia.svg","path":"img/algolia.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-melody/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-melody/source/js/copy.js","path":"js/copy.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-melody/source/js/fancybox.js","path":"js/fancybox.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-melody/source/js/fireworks.js","path":"js/fireworks.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-melody/source/js/head.js","path":"js/head.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-melody/source/js/hexo-theme-melody.js","path":"js/hexo-theme-melody.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-melody/source/js/katex.js","path":"js/katex.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-melody/source/js/scroll.js","path":"js/scroll.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-melody/source/js/sidebar.js","path":"js/sidebar.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-melody/source/js/transition.js","path":"js/transition.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-melody/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-melody/source/js/search/algolia.js","path":"js/search/algolia.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-melody/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-melody/source/js/third-party/anime.min.js","path":"js/third-party/anime.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-melody/source/js/third-party/canvas-ribbon.js","path":"js/third-party/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-melody/source/js/third-party/jquery.fancybox.min.js","path":"js/third-party/jquery.fancybox.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-melody/source/js/third-party/jquery.min.js","path":"js/third-party/jquery.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-melody/source/js/third-party/velocity.min.js","path":"js/third-party/velocity.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-melody/source/js/third-party/velocity.ui.min.js","path":"js/third-party/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-melody/source/js/third-party/reveal/head.min.js","path":"js/third-party/reveal/head.min.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/404/index.md","hash":"3be35a66794a9de82ca96b5918f96f58ef7e4ac5","modified":1672306509000},{"_id":"source/_posts/01systemd_service.md","hash":"9af3e37defcd9cdbea9ae4704734c033c4543ebb","modified":1672731384708},{"_id":"source/_posts/02常见网络存储服务搭建方法.md","hash":"927ccc9359c17038ef1384c6e7cf86a0c37c6c9b","modified":1672723772542},{"_id":"source/_posts/03shell_xargs.md","hash":"91cb6c8b064f9269f7101dd16a0c3562193aa723","modified":1672886446024},{"_id":"source/_posts/04IPD.md","hash":"98baa3efa212eef0286fbce75d6c856bca227c52","modified":1672731367133},{"_id":"source/_posts/05Loop_creation_variable.md","hash":"6e96b115b9722f872471bec3c6ab2fa0a655eed0","modified":1672731135193},{"_id":"source/_posts/06JianKongShiMoWenDang.md","hash":"d49220c1bf67ed4a633a7f194fa24016272a059b","modified":1672732118863},{"_id":"source/_posts/08JMeter.md","hash":"51bbbbc3bacf28ddd6df626f540a62682abc8f27","modified":1672800660622},{"_id":"source/_posts/09strtime2timestamp.md","hash":"6fa06e0372082c0376a2067a0a5591af52c0a825","modified":1672826297301},{"_id":"source/_posts/10systemd_analyze.md","hash":"87d03d5da6fe5276fada810d3ce16625c58fb860","modified":1672884502093},{"_id":"source/_posts/11Root_directory_expansion.md","hash":"9c9da33598d806f38096631a3d392911cedf7ce6","modified":1672826928214},{"_id":"source/_posts/e2e_analysis.md","hash":"0f1a40c8669246e7e2c4a398b4ec4943bd49845c","modified":1672460426296},{"_id":"source/_posts/hexo_config_algolia.md","hash":"2960a04a6d75e60deda4b0f0baeb0de7427f1bbd","modified":1672717801621},{"_id":"source/_posts/linuxmodifypasswd.md","hash":"ea4f63ffac56042ed9348c182d738884dc62b639","modified":1672460619861},{"_id":"source/_posts/python调度框架APScheduler使用详解（非阻塞模式）.md","hash":"403279b519865b95f9f042360330dac089049a91","modified":1672460444395},{"_id":"source/_posts/request发送请求405.md","hash":"763fb7b7c96889256a270bee576504918c5d8844","modified":1672460404888},{"_id":"source/categories/index.md","hash":"9d564aac6cb74b206beecbe1fe338fa1ed620f9a","modified":1672305884000},{"_id":"source/tags/index.md","hash":"cec1dd78cc8c8b5fc0bc03e117211daf7e9c1e09","modified":1672305778000},{"_id":"source/_posts/pictures/07python_basic/image-20230103155952284.png","hash":"808c8e94035d4299ed9a93349226220bb6c668a7","modified":1672732792284},{"_id":"source/_posts/pictures/07python_basic/image-20230103160116244.png","hash":"808c8e94035d4299ed9a93349226220bb6c668a7","modified":1672732876251},{"_id":"source/_posts/pictures/07python_basic/image-20230103161103514.png","hash":"244fd18baf781a4c809b925a06110c1444ac4e8d","modified":1672733463513},{"_id":"source/_posts/pictures/07python_basic/image-20230103161555646.png","hash":"a1f120cdcf6f4b8de1c788084179aac646fbeb5a","modified":1672733755648},{"_id":"source/_posts/pictures/07python_basic/image-20230103161614116.png","hash":"35f54dce788cf193b0cb94e52530a87c3033988b","modified":1672733774117},{"_id":"source/_posts/pictures/07python_basic/image-20230103161655636.png","hash":"701d147b71851a8e83bb413d9ec832bfc2906a92","modified":1672733815637},{"_id":"source/_posts/pictures/07python_basic/image-20230103161740574.png","hash":"b6b2bce668db4c100e784dc13fda7399b4549c5b","modified":1672733860574},{"_id":"source/_posts/pictures/07python_basic/继承兼容性.jpg","hash":"0039bb624f481cc00bda4de0c46319f2dcdc0fe4","modified":1672734508432},{"_id":"source/_posts/pictures/11Root_directory_expansion/202205192200407801_UntitledDiagram.png","hash":"5c97e92808aa1b4c074ee705ef21e29b3f77c986","modified":1672826817147},{"_id":"source/_posts/pictures/avatar/avatar.jpg","hash":"e8a9c2e581b618aec332ff4a9b49fa58c36e9be6","modified":1672393889000},{"_id":"source/_posts/pictures/e2e_analysis/01FJX.png","hash":"3f6d8601117f308d91f74e13d552646d5d778b48","modified":1672389289091},{"_id":"source/_posts/pictures/e2e_analysis/05FJX.png","hash":"1c2729ed8365a48aa72a1e7e895cf7238de202d9","modified":1672389304167},{"_id":"source/_posts/pictures/08JMeter/image-20230103174138051.png","hash":"18c133d76616105ab549914241cf2a3f02996ba3","modified":1672738898056},{"_id":"source/_posts/pictures/08JMeter/image-20230103174207519.png","hash":"aedc84973e50b90a5bd0a60902fd367631a2e659","modified":1672738927532},{"_id":"source/_posts/pictures/08JMeter/image-20230103174437006.png","hash":"4bf15609303869e805fd72cf3eb4dcee30091c0b","modified":1672739077010},{"_id":"source/_posts/pictures/08JMeter/image-20230103174430456.png","hash":"1f500d6b6e62535e496ecc0e64d837492b96bf97","modified":1672739070462},{"_id":"source/_posts/pictures/08JMeter/image-20230103174623404.png","hash":"974e278e85a403d9d5ee2e54139701d7ce22a18e","modified":1672739183408},{"_id":"source/_posts/pictures/08JMeter/image-20230103174749845.png","hash":"ead14822375695c894690ed9a2fef35566b7e312","modified":1672739269847},{"_id":"source/_posts/pictures/08JMeter/image-20230103174901916.png","hash":"cf37b504655f2e44a8b14b2b978df8add2b51a63","modified":1672739341934},{"_id":"source/_posts/pictures/08JMeter/image-20230104094605360.png","hash":"b673b938b2b23719ba3e6b24777fa0cdb2ef3385","modified":1672796765375},{"_id":"source/_posts/pictures/08JMeter/image-20230104094816885.png","hash":"3bc6b65688e23e674a204ddbd06f3a7c825c1aeb","modified":1672796896885},{"_id":"source/_posts/pictures/08JMeter/image-20230104095258849.png","hash":"d586eb19fa9dd702a2d304560e827121084d2237","modified":1672797178853},{"_id":"source/_posts/pictures/08JMeter/image-20230104095321272.png","hash":"0499c1888f3132c6b1e47481cc8c45443351f5b9","modified":1672797201277},{"_id":"source/_posts/pictures/08JMeter/image-20230104095421303.png","hash":"7b1d403bbe886b2bce12fc890324195aa97d3f84","modified":1672797261308},{"_id":"source/_posts/pictures/08JMeter/image-20230104100253418.png","hash":"e77ddafefaae02d82f123453bd494f2b20b37f69","modified":1672797773437},{"_id":"source/_posts/pictures/08JMeter/image-20230104100306738.png","hash":"30e24bd7d920fa32f0ddcb1d66f54092924901a7","modified":1672797786745},{"_id":"source/_posts/pictures/08JMeter/image-20230104100320100.png","hash":"7270ad458157fb0cadbf98fd60178d19cbb7ce56","modified":1672797800105},{"_id":"source/_posts/pictures/08JMeter/image-20230104100329839.png","hash":"7270ad458157fb0cadbf98fd60178d19cbb7ce56","modified":1672797809844},{"_id":"source/_posts/pictures/08JMeter/image-20230104100347408.png","hash":"591fff8ce08b2b7c02d5c3e616e3a9bb8ab08417","modified":1672797827408},{"_id":"source/_posts/pictures/08JMeter/image-20230104100355679.png","hash":"d8d0519c140c9e4a20469b5cc9eaf19a49ef736d","modified":1672797835684},{"_id":"source/_posts/pictures/08JMeter/image-20230104100650698.png","hash":"eb30d25bf3a113d4e20976cfd4ce359a70370589","modified":1672798010702},{"_id":"source/_posts/pictures/08JMeter/image-20230104100917874.png","hash":"b085cf14fbd4b57890dc51ea8ed933a431206843","modified":1672798157880},{"_id":"source/_posts/pictures/08JMeter/image-20230104101031073.png","hash":"d3db503fde63c31a016b1bc40f456bb37c584064","modified":1672798231075},{"_id":"source/_posts/pictures/08JMeter/image-20230104101015465.png","hash":"7d23e5436b653a7e83328d12232c3adec5c0929e","modified":1672798215471},{"_id":"source/_posts/pictures/08JMeter/image-20230104101040623.png","hash":"30ce772fe76464b00cebc157fc64affb9191f270","modified":1672798240627},{"_id":"source/_posts/pictures/08JMeter/image-20230104101059830.png","hash":"e14aed17020e2cef84a27253138007d9144e48f7","modified":1672798259831},{"_id":"source/_posts/pictures/08JMeter/image-20230104101113926.png","hash":"06588efc946e81f1c903b5d1815be7524e723288","modified":1672798273931},{"_id":"source/_posts/pictures/08JMeter/image-20230104101354190.png","hash":"31b146328731eb4fdd63ac3fe74a84c1206e6d5c","modified":1672798434197},{"_id":"source/_posts/pictures/08JMeter/image-20230104101402444.png","hash":"fd7e4eb5249e470ea319c04b563d4a2728656e8d","modified":1672798442448},{"_id":"source/_posts/pictures/08JMeter/image-20230104101410482.png","hash":"993742f3f3eb39e179b0c7be0debe6c844d80e14","modified":1672798450480},{"_id":"source/_posts/pictures/08JMeter/image-20230104101419180.png","hash":"a320f13c50550941f849e9e3c05d7faf8298875e","modified":1672798459180},{"_id":"source/_posts/pictures/08JMeter/image-20230104101428004.png","hash":"2fc7066f1d0d829cb6ada9454413debd9715b0e0","modified":1672798468008},{"_id":"source/_posts/pictures/08JMeter/image-20230104101441890.png","hash":"932247f5fd84327ce19fd1053df43b5c3a52fd07","modified":1672798481888},{"_id":"source/_posts/pictures/08JMeter/image-20230104101507912.png","hash":"7b707c735e2e91802f03b2867c2595946d8b3ba6","modified":1672798507908},{"_id":"source/_posts/pictures/08JMeter/image-20230104101513161.png","hash":"7b707c735e2e91802f03b2867c2595946d8b3ba6","modified":1672798513160},{"_id":"source/_posts/pictures/08JMeter/image-20230104101517327.png","hash":"7b707c735e2e91802f03b2867c2595946d8b3ba6","modified":1672798517323},{"_id":"source/_posts/pictures/08JMeter/image-20230104101524299.png","hash":"8e37c8c8e6eb9264be66bae57ad8f1b7d477fce0","modified":1672798524295},{"_id":"source/_posts/pictures/08JMeter/image-20230104101538473.png","hash":"9bb9c6585704acc56c4abc7d87ded74bfc32a3a8","modified":1672798538471},{"_id":"source/_posts/pictures/08JMeter/image-20230104101600808.png","hash":"d1df46c9de41016f445ee851617d1df16394ddaa","modified":1672798560807},{"_id":"source/_posts/pictures/08JMeter/image-20230104101620957.png","hash":"65cb428e23ce4be03f0fd17250ff969c0bf8e7ed","modified":1672798580959},{"_id":"source/_posts/pictures/08JMeter/image-20230104101631888.png","hash":"fbd0901541f3717fbf67f44818015da25bec6a6b","modified":1672798591891},{"_id":"source/_posts/pictures/08JMeter/image-20230104101644480.png","hash":"a5364598ab016a940035d563be46ff87f42418db","modified":1672798604486},{"_id":"source/_posts/pictures/08JMeter/image-20230104101652991.png","hash":"124e11743df4a01474ad9784d040b2b334f1ebd7","modified":1672798612990},{"_id":"source/_posts/pictures/08JMeter/image-20230104101704720.png","hash":"492600f8d6e8f2ba2333882ff28d710d2f2ed179","modified":1672798624722},{"_id":"source/_posts/pictures/08JMeter/image-20230104101717927.png","hash":"a2ae92793df35d760d9b2705cdd643c04241504e","modified":1672798637930},{"_id":"source/_posts/pictures/08JMeter/image-20230104101732576.png","hash":"0dca51857fed53c1aecc2217431242e5d952ded2","modified":1672798652578},{"_id":"source/_posts/pictures/08JMeter/image-20230104101739594.png","hash":"e2e9882c8c04b44fefb8aba00330ab9429f7f28c","modified":1672798659598},{"_id":"source/_posts/pictures/08JMeter/image-20230104101746321.png","hash":"e6d5dacb78eed62aea1d8dc9890ceea4e4d60b71","modified":1672798666326},{"_id":"source/_posts/pictures/08JMeter/image-20230104101754968.png","hash":"566fb95cd187b2d491495a9d6f8d733a3d210144","modified":1672798674969},{"_id":"source/_posts/pictures/08JMeter/image-20230104101805282.png","hash":"af6b79f6449c1d069a6fa386f1220708631c93e9","modified":1672798685289},{"_id":"source/_posts/pictures/08JMeter/image-20230104101812589.png","hash":"322cb4ec43f14736755aba4f3cac44e2108b7d2a","modified":1672798692589},{"_id":"source/_posts/pictures/08JMeter/image-20230104101821321.png","hash":"59308b457e30f978edf2e1b920f11a9ebf06bddf","modified":1672798701329},{"_id":"source/_posts/pictures/08JMeter/image-20230104101829831.png","hash":"af449d62e2c1653c10f05277ec6e5d0416b93a8d","modified":1672798709837},{"_id":"source/_posts/pictures/08JMeter/image-20230104101853765.png","hash":"7357b93c582172cc2a54d0fea8afd9bf019c6c21","modified":1672798733765},{"_id":"source/_posts/07python_basic.md","hash":"5bf27ad30a96c38090be634cc0f65357854556b4","modified":1672799187877},{"_id":"source/_posts/pictures/07python_basic/image-20230103160129679.png","hash":"493302dfeedaac67acee641952376373fe2cfda1","modified":1672732889690},{"_id":"source/_posts/pictures/07python_basic/员工管理器.jpg","hash":"fca798d2361f073373e0c3def00c9dddc70dd6b2","modified":1672734273144},{"_id":"source/_posts/pictures/07python_basic/图形管理器.jpg","hash":"863c11328820f87d4f207dee2398fe94aa6f5434","modified":1672734356760},{"_id":"source/_posts/pictures/07python_basic/手雷爆炸.jpg","hash":"f34934be04a88af5ff0b782f4c733638db05b576","modified":1672734059143},{"_id":"source/_posts/pictures/07python_basic/继承内存图.jpg","hash":"91b626c71cb471d84f2692ebca02be9f615828e8","modified":1672734515120},{"_id":"source/_posts/pictures/07python_basic/老张去东北设计01.jpg","hash":"f24eaefb58edcf286fb8ed09ae56900673ae3fde","modified":1672734436024},{"_id":"source/_posts/pictures/07python_basic/老张去东北设计02.jpg","hash":"303a6500bb44d17a2d4d9d40f863be400d0bc9b6","modified":1672734396548},{"_id":"source/_posts/pictures/11Root_directory_expansion/202205201148141907_image.png","hash":"aea1024774231fd6c198a07a4fc3b7df701c6a78","modified":1672826820691},{"_id":"source/_posts/pictures/11Root_directory_expansion/20220520162047272_2.png","hash":"fd4aab0937a6a10f33522eb43c58102d877980fc","modified":1672826817763},{"_id":"source/_posts/pictures/e2e_analysis/022FJX.png","hash":"4167d4aa6fae5ce25df205a3f49fc4f2524f182e","modified":1672389296047},{"_id":"source/_posts/pictures/hexo_config_algolia/image-20230103113149791.png","hash":"2b49a35d8aa9178f62c8d50af863e672de15ec1e","modified":1672716709858},{"_id":"source/_posts/pictures/hexo_config_algolia/image-20230103113426783.png","hash":"1db09941c073a207e20748e2d3fe534d6a9bcb36","modified":1672716866844},{"_id":"source/_posts/pictures/hexo_config_algolia/image-20230103113638126.png","hash":"02b93d590c1fd22b1d2c4e856dd32844d6e4754a","modified":1672716998187},{"_id":"source/_posts/pictures/08JMeter/image-20230103174223823.png","hash":"b63ca3a41908a5f6116039d4cf3418a5cdb1548e","modified":1672738943832},{"_id":"source/_posts/pictures/08JMeter/image-20230103174236971.png","hash":"26ea25ff647f301cd103cb7e7f0030bf1d0bc40c","modified":1672738956983},{"_id":"source/_posts/pictures/08JMeter/image-20230103174419336.png","hash":"b75ab643ce6833a05969359108761841b7d4f6c5","modified":1672739059342},{"_id":"source/_posts/pictures/08JMeter/image-20230103174657692.png","hash":"d43d51b892dc6003afcdcfc316e0db2758b890c9","modified":1672739217707},{"_id":"source/_posts/pictures/08JMeter/image-20230103174843945.png","hash":"4513b888f46ee8e3c8409ec54c3ca96a16a3c367","modified":1672739323970},{"_id":"source/_posts/pictures/08JMeter/image-20230103174916342.png","hash":"776c83ff3ac23dc5d545188d54ca24003664c6a3","modified":1672739356366},{"_id":"source/_posts/pictures/08JMeter/image-20230103175006565.png","hash":"0081db950a61a955db7eac986607b6336150e403","modified":1672739406593},{"_id":"source/_posts/pictures/08JMeter/image-20230103175024887.png","hash":"e0233521af444fc7111092b0f28d3477155092c4","modified":1672739424913},{"_id":"source/_posts/pictures/08JMeter/image-20230104092545954.png","hash":"983fd55b045c0dc7168075f3968c4c0963cd2e09","modified":1672795545976},{"_id":"source/_posts/pictures/08JMeter/image-20230104092628654.png","hash":"c51697c5d0d025690feae4f22635e19d56e97af5","modified":1672795588687},{"_id":"source/_posts/pictures/08JMeter/image-20230104092652159.png","hash":"cdffebffeb0b7f3ba447191b964f9f3bad7ffa0d","modified":1672795612175},{"_id":"source/_posts/pictures/08JMeter/image-20230104092707205.png","hash":"6fe19b024aa86cda5dc64dc3191e2b2b9a40f6dd","modified":1672795627222},{"_id":"source/_posts/pictures/08JMeter/image-20230104092857441.png","hash":"88cd6c0f4504d9dbac59e0abc551d22a6f255d93","modified":1672795737465},{"_id":"source/_posts/pictures/08JMeter/image-20230104092916211.png","hash":"003e35f2c9504533146842627f7b663ebf8ea076","modified":1672795756244},{"_id":"source/_posts/pictures/08JMeter/image-20230104092938544.png","hash":"a8067ff7964b88f77ac706c1dcf257de725e7279","modified":1672795778580},{"_id":"source/_posts/pictures/08JMeter/image-20230104092956569.png","hash":"534fe738e6f67a2f4d52ae198fddb7d9e1154c6d","modified":1672795796588},{"_id":"source/_posts/pictures/08JMeter/image-20230104094455677.png","hash":"f6cb8824a11087d914048dacc8352b7976700f38","modified":1672796695712},{"_id":"source/_posts/pictures/08JMeter/image-20230104094516722.png","hash":"1267d976d1bd11e93aa50e18b249e33415c3d514","modified":1672796716755},{"_id":"source/_posts/pictures/08JMeter/image-20230104094622810.png","hash":"2cce44b934833905d21b18e642d9c0282ba3c7a9","modified":1672796782826},{"_id":"source/_posts/pictures/08JMeter/image-20230104094646033.png","hash":"d961896d5aeeab9cbd42fc8754216c8e3ca9335f","modified":1672796806054},{"_id":"source/_posts/pictures/08JMeter/image-20230104094701081.png","hash":"ebd964e4bf7f532918882db9de7ba13d115e3706","modified":1672796821098},{"_id":"source/_posts/pictures/08JMeter/image-20230104094718002.png","hash":"330ae8332455cd7cbdff4253f7d237d54aab720f","modified":1672796838022},{"_id":"source/_posts/pictures/08JMeter/image-20230104094756958.png","hash":"4df3d0214239067865694a4e6282a2439271492d","modified":1672796876973},{"_id":"source/_posts/pictures/08JMeter/image-20230104094947187.png","hash":"ffec7269041892ffa9cb046b46645d3990bbfc4e","modified":1672796987203},{"_id":"source/_posts/pictures/08JMeter/image-20230104095127103.png","hash":"39a70c8dd7975330e2fb7088fdf6a1a29f930c20","modified":1672797087122},{"_id":"source/_posts/pictures/08JMeter/image-20230104095202731.png","hash":"6b2b8a499fd00b7b77d0ba1b6922565ef483c5fe","modified":1672797122766},{"_id":"source/_posts/pictures/08JMeter/image-20230104095343945.png","hash":"c7fa986dda3a73c5ab7c192f8f809706f6d0d712","modified":1672797223952},{"_id":"source/_posts/pictures/08JMeter/image-20230104095409344.png","hash":"c7fa986dda3a73c5ab7c192f8f809706f6d0d712","modified":1672797249352},{"_id":"source/_posts/pictures/08JMeter/image-20230104095440597.png","hash":"c7eb326e63497d344916fc9ec0ea216e9c6246f0","modified":1672797280603},{"_id":"source/_posts/pictures/08JMeter/image-20230104100154124.png","hash":"4bfbb485a89b40aadbbb1b477ebcb4eb1b6c5962","modified":1672797714146},{"_id":"source/_posts/pictures/08JMeter/image-20230104100207529.png","hash":"4bfbb485a89b40aadbbb1b477ebcb4eb1b6c5962","modified":1672797727550},{"_id":"source/_posts/pictures/08JMeter/image-20230104100500830.png","hash":"a33d42ac1249da90726582aaaba54d25b3b85189","modified":1672797900847},{"_id":"source/_posts/pictures/08JMeter/image-20230104100513719.png","hash":"c76c9b7103aef2dbc8103232dcdffd9e84a14127","modified":1672797913727},{"_id":"source/_posts/pictures/08JMeter/image-20230104100534974.png","hash":"b57881b450d68ff2ee82f0a7db8a22e6343c0a35","modified":1672797934995},{"_id":"source/_posts/pictures/08JMeter/image-20230104100600278.png","hash":"252f91b6cff5a6bb83b83ad32ea4bedb1d19f94b","modified":1672797960307},{"_id":"source/_posts/pictures/08JMeter/image-20230104100952874.png","hash":"e0d978881a113f72c77f88246b6fba126aae59ef","modified":1672798192884},{"_id":"source/_posts/pictures/08JMeter/image-20230104101000440.png","hash":"eb625b6d1f2a5268df9467ea5c63072c54bada9e","modified":1672798200444},{"_id":"source/_posts/pictures/08JMeter/image-20230104101007977.png","hash":"0afeb7bc111fb064410bf9addad78ffb578647e7","modified":1672798207979},{"_id":"source/_posts/pictures/08JMeter/image-20230104101050000.png","hash":"b6b8b31bc5092f228e1a965d4dbffc85fe196f3b","modified":1672798250007},{"_id":"source/_posts/pictures/08JMeter/image-20230104101134264.png","hash":"a7d015ee3c208a5ef34d088a69aed0a3e35eb1ff","modified":1672798294286},{"_id":"source/_posts/pictures/08JMeter/image-20230104101846545.png","hash":"10daffc86a0ca41ef4770c4836f895ee97d62100","modified":1672798726553},{"_id":"source/_posts/pictures/08JMeter/image-20230104101937127.png","hash":"27cfde8559855e5a99c9ca61f1217e10f156ebb8","modified":1672798777148},{"_id":"source/_posts/pictures/07python_basic/组合复用.jpg","hash":"4c80383f8b4bf03b08fd313a8d5d3b359fa52ac6","modified":1672734098124},{"_id":"source/_posts/pictures/07python_basic/迭代器设计思想.jpg","hash":"7dffe2d55f75bfb51b0571b1e3c6f3a2b3b32c1e","modified":1672734224996},{"_id":"source/_posts/pictures/10systemd_analyze/starttimeanalyze-16728265650381.svg","hash":"ec4391b4132514efc356f14bbed62d321f3fb888","modified":1672826565234},{"_id":"source/_posts/pictures/10systemd_analyze/starttimeanalyze-167288240504020.svg","hash":"ec4391b4132514efc356f14bbed62d321f3fb888","modified":1672882405269},{"_id":"source/_posts/pictures/10systemd_analyze/starttimeanalyze.png","hash":"14c29c88f1a0fda211218bc7fa7a2cf5948ecbba","modified":1672881024769},{"_id":"source/_posts/pictures/11Root_directory_expansion/202205201625447933_7.png","hash":"5bd2eb41055ebb02b4ff6c721e26576fed66d4e9","modified":1672826821499},{"_id":"source/_posts/pictures/11Root_directory_expansion/202205201627504966_10.png","hash":"3457be1b72bf1375738d00b80e8819bb716af055","modified":1672826822783},{"_id":"source/_posts/pictures/11Root_directory_expansion/202205201629343521_13.png","hash":"de892a882faf415407798711a3270ca62f522d9b","modified":1672826823363},{"_id":"source/_posts/pictures/11Root_directory_expansion/202205201630101848_16.png","hash":"bdccfb925c18b2be68b26ef30aa413de274de4a6","modified":1672826824583},{"_id":"source/_posts/pictures/11Root_directory_expansion/202205201630304146_17.png","hash":"77f67d3716865b8cfcf1ed65948ab4e562d123f9","modified":1672826824875},{"_id":"source/_posts/pictures/08JMeter/image-20230103174825289.png","hash":"bfbbaad5898f6bdeed713dd708ec00903bcac1d7","modified":1672739305318},{"_id":"source/_posts/pictures/08JMeter/image-20230103175428021.png","hash":"854269bbf5076873f1b15850a2f924b97be248ea","modified":1672739668054},{"_id":"source/_posts/pictures/08JMeter/image-20230104092735864.png","hash":"3b8dcca94ea3f77844b43417de58915981d37dc9","modified":1672795655906},{"_id":"source/_posts/pictures/08JMeter/image-20230104092807270.png","hash":"79d8e45d5fa291b381be588771636cecd8c80c71","modified":1672795687306},{"_id":"source/_posts/pictures/08JMeter/image-20230104093024788.png","hash":"4709be966d749e4a0ba3ee1f79f643322688e2ef","modified":1672795824823},{"_id":"source/_posts/pictures/08JMeter/image-20230104094422449.png","hash":"e570d91e355e9309f9e91729c034268c1db62394","modified":1672796662488},{"_id":"source/_posts/pictures/08JMeter/image-20230104094437099.png","hash":"d24e26b68f1a4767aeb2555f9508b22b78e53a28","modified":1672796677136},{"_id":"source/_posts/pictures/08JMeter/image-20230104094737517.png","hash":"7d46ebb1b2052854210beadc6bfba3e937f26de8","modified":1672796857549},{"_id":"source/_posts/pictures/08JMeter/image-20230104094926170.png","hash":"c8dd453a3e083f86f14a9a2ce8dd8048ead5b096","modified":1672796966196},{"_id":"source/_posts/pictures/08JMeter/image-20230104095110900.png","hash":"b567b5535ba8d9f4f8d01402d3ca5749534f9f77","modified":1672797070922},{"_id":"source/_posts/pictures/08JMeter/image-20230104095219503.png","hash":"7708455b531223a0db802b21f5ac5592473035e2","modified":1672797139525},{"_id":"source/_posts/pictures/08JMeter/image-20230104095234652.png","hash":"6c2474c1ae1b63d1c5263a0cfee456036b7e21b8","modified":1672797154661},{"_id":"source/_posts/pictures/08JMeter/image-20230104095917593.png","hash":"15f4c02976ab3a5024d4fc1cf332b893df31bc51","modified":1672797557632},{"_id":"source/_posts/pictures/08JMeter/image-20230104100121708.png","hash":"93cf39d49fe5f0b4a41d264f4424141b494df7f3","modified":1672797681734},{"_id":"source/_posts/pictures/08JMeter/image-20230104100133886.png","hash":"8c71f3cff2ba3be324a2b52b73a3f526fa2af93d","modified":1672797693918},{"_id":"source/_posts/pictures/08JMeter/image-20230104100221519.png","hash":"91fb85f8ab031d7b2352b664b761170d270dc8c9","modified":1672797741549},{"_id":"source/_posts/pictures/08JMeter/image-20230104100447101.png","hash":"62ecbd8b6aca913421bb71496b9f8aa2b6bd1ce8","modified":1672797887128},{"_id":"source/_posts/pictures/08JMeter/image-20230104100620418.png","hash":"5a41ba93a9ba8a23e184f20a2454f6b8ce4626b0","modified":1672797980446},{"_id":"source/_posts/pictures/08JMeter/image-20230104100722577.png","hash":"f22eabd8734bd768e03bdbe95f16016b5412a54b","modified":1672798042610},{"_id":"source/_posts/pictures/08JMeter/image-20230104100737832.png","hash":"6fded938054de8e2eeb83187fd9434de4a2fd840","modified":1672798057857},{"_id":"source/_posts/pictures/08JMeter/image-20230104100818008.png","hash":"478fe2d5585089d2af34d123f14bf60e414bbc20","modified":1672798098041},{"_id":"source/_posts/pictures/08JMeter/image-20230104101551634.png","hash":"1b73b5592fcd44ec22a5b493526f6f5bdca956e6","modified":1672798551635},{"_id":"node_modules/hexo-theme-melody/scripts/hexo-plugins.txt","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/js/hexo-theme-melody.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/includes/gallery/script.pug","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1672300004000},{"_id":"source/_posts/image.png","hash":"4fd07577eb7ccb54dfd1391911a74776378c7d4c","modified":1672703734000},{"_id":"source/_posts/pictures/07python_basic/image.png","hash":"4fd07577eb7ccb54dfd1391911a74776378c7d4c","modified":1672733597245},{"_id":"source/_posts/pictures/07python_basic/封装思想.jpg","hash":"ed356439fa1d0de8bdc0b0a9f565f73d3d8d29f7","modified":1672734563836},{"_id":"source/_posts/pictures/07python_basic/面向对象概述.jpg","hash":"e24fcbb7ade1d9fbc770c919feb3340ae08c4816","modified":1672734605764},{"_id":"source/_posts/pictures/11Root_directory_expansion/202205201623177976_4.gif","hash":"aa9733f1aa84b8057864d2bfd673b3d7460dd40b","modified":1672826820499},{"_id":"source/_posts/pictures/hexo_config_algolia/image-20230103113505830.png","hash":"3a0d425dcd30d5f72d8adc3f32faac37d4f8ebe9","modified":1672716905922},{"_id":"source/_posts/pictures/08JMeter/image-20230103174557321.png","hash":"1d56483c391a0ba90750a7d6a608316e27e91c39","modified":1672739157340},{"_id":"source/_posts/pictures/08JMeter/image-20230103175048590.png","hash":"3001477e055285ac7e801afa5ab4dd80385ebe43","modified":1672739448624},{"_id":"source/_posts/pictures/08JMeter/image-20230104092825613.png","hash":"41600deb204d1add3ac0fa19e1ff15d681d68376","modified":1672795705653},{"_id":"source/_posts/pictures/08JMeter/image-20230104094909398.png","hash":"bc7b8a20886127902865fbab78c3b4d4e9a19b1a","modified":1672796949436},{"_id":"source/_posts/pictures/08JMeter/image-20230104095144838.png","hash":"f2cf483021b3b445af1c3c82e3fb0db9d6e6a8ad","modified":1672797104874},{"_id":"source/_posts/pictures/08JMeter/image-20230104095511561.png","hash":"e2e2d50f253b8c78085b622e0bfb22533ac20a14","modified":1672797311607},{"_id":"source/_posts/pictures/08JMeter/image-20230104095932798.png","hash":"9d9b1e06c0c4f76f4d0b82694ab65a507d9cd095","modified":1672797572840},{"_id":"source/_posts/pictures/08JMeter/image-20230104100418411.png","hash":"c7fcb16705fbfc0ab3ef32dc8686875579864fab","modified":1672797858440},{"_id":"source/_posts/pictures/08JMeter/image-20230104100426913.png","hash":"c7fcb16705fbfc0ab3ef32dc8686875579864fab","modified":1672797866940},{"_id":"source/_posts/pictures/08JMeter/image-20230104100705102.png","hash":"94b1d152c2ef1907a2522e35cc3be945413a88ad","modified":1672798025134},{"_id":"source/_posts/pictures/08JMeter/image-20230104100832454.png","hash":"c9322e851400b57e72759f61ae1914073c1865bc","modified":1672798112485},{"_id":"source/_posts/pictures/08JMeter/image-20230104100856535.png","hash":"b80c152cdea059c66d012d2b25da9a70ad670a09","modified":1672798136568},{"_id":"source/_posts/pictures/08JMeter/image-20230104100908487.png","hash":"472ac55798ed46a1516f4059f69868a692c4b3e5","modified":1672798148524},{"_id":"source/_posts/pictures/08JMeter/image-20230104101200409.png","hash":"25542208c7c7210bc1ff7d8e42210d505d93e2fa","modified":1672798320450},{"_id":"node_modules/hexo-theme-melody/.travis.demo.yml","hash":"4482d40a58a035ef96888dfc4ed96c861b8f78a5","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/CHANGELOG.md","hash":"a3fdc0bf95738aa013b0de6dcd1c6523512dcddf","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/FAQ.md","hash":"5984dd5335f8ead64f14d3885de5cc5ef09dfff8","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/LICENSE","hash":"dbbc2e6e42affa5ac962826f01bffa8c7aecd6b8","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/README.md","hash":"f0197363be56ef95b40854c4115bac4c8bbe93e8","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/_config.yml","hash":"5efa43b59d4112bacb83f2a23c50fc20948d57cf","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/package.json","hash":"7ec07ad0717da8ca91fb04d264902edbd2a550c0","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/languages/default.yml","hash":"2af19daf22ec99daf2482af9dac5c3ff641497c4","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/languages/en.yml","hash":"2af19daf22ec99daf2482af9dac5c3ff641497c4","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/languages/zh-Hans.yml","hash":"68c5794ec57227daec2e3afe2c5d502fa0a7092a","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/404.pug","hash":"0ad5d251ba70edad5c04a45d13ca6a8db3bf7b42","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/archive.pug","hash":"2133e9f369dac19b9f843fc956521f864ace7567","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/category.pug","hash":"ea5f82d69e586f293f428f3b237c17bf873b4f03","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/gallery.pug","hash":"c083a7bbf5f46305daed74632aef3403b7d94dc7","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/index.pug","hash":"5e969c09fa5902829ad0b14c0af8d432bd4c7078","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/page.pug","hash":"09c1c7c4ffff114c886b097ec82e046399ab79e1","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/post.pug","hash":"436bb1b7d14e29cba8010d3ea14df19681fbb5fe","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/slides.pug","hash":"1e84a92d5b854dd233e0b511d59c1cd7c8d647a1","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/tag.pug","hash":"ca333911bc97bc9d3eba6e1bc05e96b209ecedfb","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/scripts/gallery-tag.js","hash":"74e2e95f8daec619578f4b7dd1ed77cd5907f37e","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/scripts/replace-config.js","hash":"a8e9a18b2798d3c694a3efa8036f82046c3eb037","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/melody-favicon.ico","hash":"e33c804e570eb238fe095ed28346dd1b3a0666ae","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/includes/additional-js.pug","hash":"c4ca62466684758d5a26e5866f9ed87b5c9401b8","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/includes/config.pug","hash":"66e384b1cfe58a57b80f7dff0388bf00bb8bfdf8","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/includes/footer.pug","hash":"0e9f1778f021f1c205f0b1be83014fba576797af","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/includes/head.pug","hash":"bf287d6440011cb17d15dbaf5945517d36918800","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/includes/header.pug","hash":"f440a9741eeacfa62f0a0e7ef470a104f1cb510c","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/includes/layout.pug","hash":"58856b5048fb64e7dab75a6ae32cc2a0ad94de4f","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/includes/nav.pug","hash":"3f1fe059784df45f923587b81cc972659ed22e01","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/includes/pagination.pug","hash":"fe33a94d90836b767c42654ccc4c4de7d7f227fc","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/includes/recent-posts.pug","hash":"128c448f5bab71f59912516edff9d476ff6b8afe","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/includes/sidebar.pug","hash":"211b8ecfdb7b5dd836c87436def410a52dfa5ecd","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/css/404.styl","hash":"b7a0f8b23cb137b1a6c4fa0f9a35e06e93065b2c","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/css/index.styl","hash":"2053ba56db707e7a03796ba59f77103765b02353","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/css/var.styl","hash":"259feee66bf9c326e781bb63a177627dbe3eb539","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/img/algolia.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/img/avatar.png","hash":"a44601fac9a81dd7e392d05ea5ddc65c96b051df","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/js/copy.js","hash":"ce7f8601c7c75ced79e2e9851beec37299d49fd1","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/js/fancybox.js","hash":"2d3eaa654b2524c41dc5aba1d5e2e7cc9aaefd26","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/js/fireworks.js","hash":"4b6428da34535f0e8fe5a11976b8d89c48736500","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/js/head.js","hash":"555e9caa046d5a174af8d20c75e9e89c25aabb6c","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/js/katex.js","hash":"a5a999b357c0fd9aeacae721bf121f30d40d6726","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/js/scroll.js","hash":"e9aaeeae8958b8a06e016edbd17c84b63aea9255","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/js/sidebar.js","hash":"a42109c5a69dedc87e1aaf8cb2383fd43069677e","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/js/transition.js","hash":"11c3b82a5e9ef2bf7bd712b6c211d86426f9a23e","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/js/utils.js","hash":"f514662ad80803e1bb5f6bc653c4b9ad06ea4932","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/includes/404/404-nav.pug","hash":"4cd894857bb90fe44b55e852864692ed06588b8e","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/includes/404/layout.pug","hash":"9c7cdf16a9b9b4aa251dba9378a0f00d985101de","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/includes/comments/disqus.pug","hash":"e62b73df92566806bfb170f204295cffd7074215","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/includes/comments/gitalk.pug","hash":"86bdbc4a52024c3573bea27817394dd118b70a26","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/includes/comments/gitment.pug","hash":"0b7cd8b0b114876238ca022abda4c1fcdfaee12f","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/includes/comments/index.pug","hash":"30db5b0fb5662ecea0012b21d4de28d3963e272f","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/includes/comments/laibili.pug","hash":"97de1d1fb0459e7a2394ac2f5e449adf9b6986cb","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/includes/comments/valine.pug","hash":"bc58746ed5c8cc001ad47f1db30e3bdb1aab5fa9","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/includes/comments/vssue.pug","hash":"4ee6cea08286cbac2648a6032f73e5f8d2b88380","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/includes/comments/waline.pug","hash":"1b2cfeb2b2c67b49f94107c230a64ed0a35eae8d","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/includes/count/busuanzi.pug","hash":"4df5e63ab0113efb93f05ef781b2a7e3f34ba753","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/includes/gallery/layout.pug","hash":"8ff96c4f9afb416c5fc586c9585ae51cb6129529","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/includes/mixins/article-sort.pug","hash":"297b098dc6bba73b76bac4cf6bcd0c29d5dcb2ed","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/includes/mixins/slide.pug","hash":"91975f700b20131ab4df4d2ea3e1acc8bf2d3eef","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/includes/search/algolia.pug","hash":"44d5a061df53a276d22b3855652645d90117d0b6","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/includes/search/index.pug","hash":"b01828b37d789797aeb5433f1705cff3c540a4d5","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/includes/search/local-search.pug","hash":"f88070a84379bc06fb385e1193448fae6a8a54e1","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/includes/share/add-this.pug","hash":"17a11c1c36c9078639c2a82628ce5fc6584daffb","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/includes/share/index.pug","hash":"a2ec6da33cf5fa0ba6c8c38ec3841a0b0003ce98","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/includes/share/share-js.pug","hash":"e612725ba48711fc119f91c6196287ad13f5a2ba","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/includes/slide/layout.pug","hash":"e6963fb20340f60fe9bd2c9dbfff50decee159b3","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/includes/slide/script.pug","hash":"e19439122c18a8bca10819b635cdfed6e9135e46","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/includes/third-party/canvas-ribbon.pug","hash":"39a03f188ac415642766b062a80b1b710f3ea609","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/includes/third-party/katex.pug","hash":"79b2336ad8d921907a5b1badc10ba1651c92843b","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/includes/third-party/mathjax.pug","hash":"33b350f9826795cd59d9e277a24accc8a9bc9076","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/css/_global/index.styl","hash":"2a6195ce7e822362633ebf403c9438b42fa126bb","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/css/_highlight/diff.styl","hash":"ffdfbf088da7bf33899557395abcac0d2bffd67d","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/css/_highlight/highlight.styl","hash":"016c800bf7a0ef6d520e135ab69ef072760483cb","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/css/_highlight/theme.styl","hash":"7d85860927afa1d93b4a39febff3d95a73de4c36","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/css/_layout/comments.styl","hash":"e58602aad6792f1a5dbda0677ecb04d21ac10e97","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/css/_layout/footer.styl","hash":"ca8c816bdb144503bec7e755344fb0e4e370a7bf","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/css/_layout/head.styl","hash":"73488de3f36369c29ecd5e0be9661bb2b508548c","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/css/_layout/page.styl","hash":"38f0efbc9985d2d4e3699d9ac06ab3dba150ce6e","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/css/_layout/pagination.styl","hash":"a3f52d1f7ff1eaead8df016b2a4def6f7b4e9559","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/css/_layout/post.styl","hash":"34a421a32abb8003d7d83de53f42639be4e54daf","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/css/_layout/sidebar.styl","hash":"e8315401a6c791d00617c031be01f45df70fe7fd","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/css/_search/algolia.styl","hash":"534e5641e3efe2452db95cc25ec8da0111ceadcf","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/css/_search/index.styl","hash":"63cae4465ac54b71361c1795206534c7f2e6e5b1","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/css/_search/local-search.styl","hash":"d7970b385265fef782cdcaaf4fe68a2217625467","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/css/_third-party/jquery.fancybox.min.css","hash":"f9c94ec04062a1bfe1ef894c49e6ec33fa121778","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/css/_third-party/normalize.min.css","hash":"e12eef6d6811c132f4f2fcf6c936be384191bcaf","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/js/search/algolia.js","hash":"8d2cc7ac4a015563344a3981c3040d308489935c","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/js/search/local-search.js","hash":"c58bbe874fcdc512cca5244db487745e6a49ef48","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/js/third-party/anime.min.js","hash":"332031949d78a49e8a18611556253660574e47db","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/js/third-party/canvas-ribbon.js","hash":"8fd084e962fb2028be9f748b5cb5f53d030d1d03","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/js/third-party/jquery.fancybox.min.js","hash":"2ec3ef6c31b971ba5e58eb4a0c5ede902bbdd4af","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/js/third-party/velocity.min.js","hash":"69c85b9d6a931a7d3a5b0657e60112c31fb3b286","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/js/third-party/velocity.ui.min.js","hash":"d8124c091d19fa4072616a44a8897fabc6599fce","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/js/third-party/reveal/head.min.js","hash":"8c9495c76d5aa00d3dfb88653c362fba9f10cbb2","modified":1672300004000},{"_id":"source/_posts/pictures/07python_basic/技能系统.jpg","hash":"9211f842b98617ffd2b66f07053bd445f8a8dbf9","modified":1672734307396},{"_id":"source/_posts/pictures/11Root_directory_expansion/202205201626106018_8.gif","hash":"6537ff11dffebc36ca2b3094824f46c8843aa228","modified":1672826822267},{"_id":"source/_posts/pictures/08JMeter/image-20230104092842121.png","hash":"d2559960a58a73b283885d12e45bf385c5c7fd8e","modified":1672795722177},{"_id":"source/_posts/pictures/08JMeter/image-20230104095453077.png","hash":"ec0a20ba683bac95a82c9ac31d14cbf38d763b90","modified":1672797293131},{"_id":"source/_posts/pictures/08JMeter/image-20230104100053253.png","hash":"a586d9fb1953b2e4078af945930d44c4b0cd9941","modified":1672797653299},{"_id":"source/_posts/pictures/08JMeter/image-20230104100635987.png","hash":"e0ade9e22cae81d928204ac21996d97e407de1d3","modified":1672797996022},{"_id":"source/_posts/pictures/08JMeter/image-20230104100757522.png","hash":"74983109dd834358482b18be888de9597166d9c4","modified":1672798077561},{"_id":"source/_posts/pictures/08JMeter/image-20230104100933098.png","hash":"adad6f4f9f4d04efdfae3a768830d3dc14839e03","modified":1672798173136},{"_id":"node_modules/hexo-theme-melody/source/js/third-party/jquery.min.js","hash":"1055018c28ab41087ef9ccefe411606893dabea2","modified":1672300004000},{"_id":"source/_posts/pictures/11Root_directory_expansion/202205201629096274_12.gif","hash":"de0106c320bb2d98174b9754f6322f8a38483212","modified":1672826823947},{"_id":"source/_posts/pictures/11Root_directory_expansion/202205201629545073_15.gif","hash":"59148d4b40286a0fb321285d16547cf702c384e4","modified":1672826825499},{"_id":"source/_posts/pictures/08JMeter/image-20230104095533363.png","hash":"68a7e5b65ef2c4f2cc2fc9d23dea33cdd582db4d","modified":1672797333415},{"_id":"source/_posts/pictures/11Root_directory_expansion/20220520162711983_9.gif","hash":"29ca2dccdb803aee6d60c13ce9453645ea3fac59","modified":1672826823751},{"_id":"source/_posts/pictures/08JMeter/image-20230104094539586.png","hash":"8ade0bf95403424738104570cf1038e8ea7b2bb2","modified":1672796739683},{"_id":"source/_posts/pictures/11Root_directory_expansion/202205201624567146_6.gif","hash":"6db349ba5c008205b07a426916cdf9f603b6ef9b","modified":1672826822979},{"_id":"source/_posts/pictures/04IPD/image-20230103150736508.png","hash":"40cb369d9814c84867c4f77ba57b1ed1fa9f921f","modified":1672729656601},{"_id":"source/_posts/pictures/04IPD/output.png","hash":"39af8ecf044d2ed8a5cfb3eeeae6d9aaee1ff5c1","modified":1672729609313},{"_id":"source/_posts/pictures/11Root_directory_expansion/202205201618318171_1.gif","hash":"0dc9e1e511349b7ae382c3464209c2ee3129577a","modified":1672826822123},{"_id":"source/_posts/pictures/e2e_analysis/03FJX.png","hash":"1bab1d556bdbe9b0f8607b8f10ac30c36330fec6","modified":1672389297527},{"_id":"source/_posts/pictures/e2e_analysis/04FJX.png","hash":"b8c89b803f2163d458724bde136468771bab0d6c","modified":1672389300263},{"_id":"source/_posts/pictures/e2e_analysis/06FJX.png","hash":"58539f0673802994edf8a49abbac5ad8d3e730c7","modified":1672389307671},{"_id":"source/_posts/pictures/11Root_directory_expansion/202205201621386209_3.png","hash":"eb048b23e4922af472951130dcf74ee79602a8f7","modified":1672826825391},{"_id":"source/_posts/pictures/10systemd_analyze/image-20230105100608640.png","hash":"6015e31f8604e120334dbca8259eb217b3602dea","modified":1672884369011},{"_id":"source/_posts/pictures/11Root_directory_expansion/202205201623434987_5.gif","hash":"758aa3e8cf1b4c6b9d085eb280148fa2c3ff619c","modified":1672826827291},{"_id":"public/404.html","hash":"4ab55f1caa54094e555ea6b70ae8aabd0a7cbe3f","modified":1672886454684},{"_id":"public/categories/index.html","hash":"17504dc194ba5d153db17b9d4cdbeab8707ef03c","modified":1672886454684},{"_id":"public/tags/index.html","hash":"5428aa9a5e09224b0e4a634936aa20bf5ca0c08c","modified":1672886454684},{"_id":"public/2023/01/04/09strtime2timestamp/index.html","hash":"c318533a479700f6d77347c0766f97e221e1b3fd","modified":1672886454684},{"_id":"public/2022/12/22/10systemd_analyze/index.html","hash":"541f8557e50fb7dbee0e374f94f20c73b6ba364a","modified":1672886454684},{"_id":"public/2022/07/20/request发送请求405/index.html","hash":"969257d1c5e54d3d9372a8a9c05aa8d74c8b85ee","modified":1672886454684},{"_id":"public/2022/04/03/04IPD/index.html","hash":"fb6448c0a95c8f919450031004952e4e3c5871d7","modified":1672886454684},{"_id":"public/2022/01/06/linuxmodifypasswd/index.html","hash":"1e50e908337182c3e133d831a6e0550f26698881","modified":1672886454684},{"_id":"public/2021/06/03/03shell_xargs/index.html","hash":"3614872a7bccaba50d23d832f2e88e76877e7499","modified":1672886454684},{"_id":"public/2020/01/03/05Loop_creation_variable/index.html","hash":"412f895f7d93ed452179f0fde30d9b1ca3c9f6e5","modified":1672886454684},{"_id":"public/archives/index.html","hash":"1b93ef1ca8099e9086916dcb1841c3f8aebaf4bf","modified":1672886454684},{"_id":"public/archives/2019/index.html","hash":"0caaf608c528ecfe92c9290e75fd11049809ae96","modified":1672886454684},{"_id":"public/archives/2019/06/index.html","hash":"3ab6d80d580aad62c6c34a619fc94ce7f70c055e","modified":1672886454684},{"_id":"public/archives/2020/index.html","hash":"5d5646691b73da1c9e26f576648b2e340a13823b","modified":1672886454684},{"_id":"public/archives/2020/01/index.html","hash":"df38a13bfb089d9b4a729cccea2881e9930aac49","modified":1672886454684},{"_id":"public/archives/2021/index.html","hash":"4e541ec56c1c88883a0548c4d7ccea847e1bfadf","modified":1672886454684},{"_id":"public/archives/2021/06/index.html","hash":"be2f37bb3ce8dd740fcbe6cb25d428170ba80f5c","modified":1672886454684},{"_id":"public/archives/2021/08/index.html","hash":"c79ec4e4e3d098a45f46be0824acc7f0effd12a3","modified":1672886454684},{"_id":"public/archives/2022/index.html","hash":"1b2990e11635bb84af880fc99373450dc940fd4a","modified":1672886454684},{"_id":"public/archives/2022/01/index.html","hash":"15d3afdd68798bffc37563d01e763fd0b761b0ca","modified":1672886454684},{"_id":"public/archives/2022/04/index.html","hash":"8fe60878b4e32db000c1de85427fc6a2e70d5199","modified":1672886454684},{"_id":"public/archives/2022/06/index.html","hash":"852a80028b7d45b2c06da7e3c3647dea5fba6e17","modified":1672886454684},{"_id":"public/archives/2022/07/index.html","hash":"c6cba85c9654d90fbad447ed3e35e68b0bc765b1","modified":1672886454684},{"_id":"public/archives/2022/09/index.html","hash":"30adaa8374bba147bb17e4993de89fb7290ebac9","modified":1672886454684},{"_id":"public/archives/2022/10/index.html","hash":"58707fb069d17842eb6548dc4fb344505ac10be8","modified":1672886454684},{"_id":"public/archives/2022/11/index.html","hash":"aa4e6716033e1fa2387dfbe20773c6185d61ef08","modified":1672886454684},{"_id":"public/archives/2022/12/index.html","hash":"60e7602f4c79f2b47886fc518960acdb214750f7","modified":1672886454684},{"_id":"public/archives/2023/index.html","hash":"dc2e5b90b432f6438f9295da87244037ee53983c","modified":1672886454684},{"_id":"public/archives/2023/01/index.html","hash":"77699c50c5cfcaea053250393dc53ed4f295c768","modified":1672886454684},{"_id":"public/archives/2024/index.html","hash":"04310ce0398d4af05694d41bae6a36a1147ed0ad","modified":1672886454684},{"_id":"public/archives/2024/01/index.html","hash":"5e65ab11d91f3865838427ab48223450fe4c2020","modified":1672886454684},{"_id":"public/categories/linux/index.html","hash":"0c70001b939f99c25f00003d1bf29a31a71b1c60","modified":1672886454684},{"_id":"public/categories/IPD/index.html","hash":"07df7191d3019a56bccab5ae67feeb80e0e74a5f","modified":1672886454684},{"_id":"public/categories/linux/systemd/index.html","hash":"219893544650a59ed0e13d28f63af39ef814371b","modified":1672886454684},{"_id":"public/categories/python/index.html","hash":"c674d4c8d8ee4f9414fafb16335a8887eccc5cf3","modified":1672886454684},{"_id":"public/categories/linux/存储服务/index.html","hash":"fe13ccd267783e67a0d4d5f1b16963d8383ade7e","modified":1672886454684},{"_id":"public/categories/Jmeter/index.html","hash":"049a0cf47c5bece3253ecdec7471053f190849fc","modified":1672886454684},{"_id":"public/categories/linux/shell/index.html","hash":"5efead04b25e3d23cbaa01462c131140861cd92b","modified":1672886454684},{"_id":"public/categories/测试理论/index.html","hash":"37fae225e6488b64df8aed3b3000f88c945166d3","modified":1672886454684},{"_id":"public/categories/hexo/index.html","hash":"0edbb866620610c2602b8e459f2b3d261ee5a9a4","modified":1672886454684},{"_id":"public/categories/python/变量/index.html","hash":"07dac423c56836de7bf7969630c2b1c412ff7d4a","modified":1672886454684},{"_id":"public/categories/python/爬虫/index.html","hash":"7c33137899f62b8dec3c5fe9162f02f3e03ad9a4","modified":1672886454684},{"_id":"public/categories/python/time/index.html","hash":"3084c206b962e40414e563ca9f32637821c28923","modified":1672886454684},{"_id":"public/page/2/index.html","hash":"d442893139347c5d2ee994706e7355810f4942f7","modified":1672886454684},{"_id":"public/tags/linux/index.html","hash":"a0bb1ad867d762b2ab640f502dca9c5a0c96fc3b","modified":1672886454684},{"_id":"public/tags/ftp/index.html","hash":"b36c210f323c0f689de901a4f8c2fdf7f31c6154","modified":1672886454684},{"_id":"public/tags/NFS/index.html","hash":"9df785b8c35f98c488af04c7cd9a02663262b729","modified":1672886454684},{"_id":"public/tags/shell/index.html","hash":"eef86c1424ac041045c3f30cc60c519e278eaf9a","modified":1672886454684},{"_id":"public/tags/xargs/index.html","hash":"49855dac706e29cdb52cf49a58f48970261b077c","modified":1672886454684},{"_id":"public/tags/IPD/index.html","hash":"bf6f00d1c8dc5635e99c959e861adfedb67c10a9","modified":1672886454684},{"_id":"public/tags/python/index.html","hash":"4428f4c399ac829e33774c3e160520875eb175a8","modified":1672886454684},{"_id":"public/tags/爬虫/index.html","hash":"8873c2d60a7d277517739414c51e4b6d3333d522","modified":1672886454684},{"_id":"public/tags/递归/index.html","hash":"ce8d9ac83be89ece0d2d54f6510e5cd1e347c798","modified":1672886454684},{"_id":"public/tags/requests/index.html","hash":"59ee895ce54453d7a17c45754d5876c1543bb19a","modified":1672886454684},{"_id":"public/tags/shelve/index.html","hash":"a200bb2d2a43a6f7f4232786126cbb2381f84a8e","modified":1672886454684},{"_id":"public/tags/cookie/index.html","hash":"14bbfe839be0e4fa6174d9f85e2a784eb9c659b8","modified":1672886454684},{"_id":"public/tags/session/index.html","hash":"178008d9f2113cc02ed36a687a222e4305412a1f","modified":1672886454684},{"_id":"public/tags/apscheduler/index.html","hash":"5341f877071f903d86cb753917b0d64da920c134","modified":1672886454684},{"_id":"public/tags/重定向/index.html","hash":"e8daa58005c4434d9e7b51b5922146c9e5da5836","modified":1672886454684},{"_id":"public/tags/time/index.html","hash":"f4901a4c182fcc0bcf96766d803802fd66ca7b2b","modified":1672886454684},{"_id":"public/tags/Jmeter/index.html","hash":"364d83265136493b12c9ffd4d47b44939829615d","modified":1672886454684},{"_id":"public/tags/性能测试/index.html","hash":"d458e5b22d5fa72504f2434924927f3072bd39ae","modified":1672886454684},{"_id":"public/tags/systemd/index.html","hash":"ffef75328f94812a837804fde02c061ff6f9a350","modified":1672886454684},{"_id":"public/tags/扩容/index.html","hash":"37806f33c029630a27be137d7cd364c7e14ee8a4","modified":1672886454684},{"_id":"public/tags/面向对象/index.html","hash":"a70cf7ee6607fb79587bbfa96b8156976c6e6f30","modified":1672886454684},{"_id":"public/tags/测试理论/index.html","hash":"cc8ce9855123dc34d663a58021b3cbe30de209c0","modified":1672886454684},{"_id":"public/tags/验收测试/index.html","hash":"12c1cb7ef104ece7f081d921448aebbb3971e1fc","modified":1672886454684},{"_id":"public/tags/hexo/index.html","hash":"eb603140218389011a460083ef20092ceba8b752","modified":1672886454684},{"_id":"public/tags/任务调度/index.html","hash":"98fc9c0c790df0aa6ed66869fd025b9671ea9c57","modified":1672886454684},{"_id":"public/2024/01/20/07python_basic/index.html","hash":"05b8c69acbedbd7bcd56a968c87a961b6bd14d77","modified":1672886454684},{"_id":"public/2023/01/03/hexo_config_algolia/index.html","hash":"fbe1dc66192e861dbafb925dd0f523af3b549420","modified":1672886454684},{"_id":"public/2022/11/03/01systemd_service/index.html","hash":"486b1bbe198190dc658f53cec4d9ba164a62996c","modified":1672886454684},{"_id":"public/2022/10/21/11Root_directory_expansion/index.html","hash":"4776065e8822930ce0faab90e22644883d006992","modified":1672886454684},{"_id":"public/2022/09/26/06JianKongShiMoWenDang/index.html","hash":"63bab4e8f681cd79bceaea960bb2cff8653f8fba","modified":1672886454684},{"_id":"public/2022/06/03/02常见网络存储服务搭建方法/index.html","hash":"0b0c47308b127792ecd29503a29ebf8ea0be8fe4","modified":1672886454684},{"_id":"public/2022/01/20/python调度框架APScheduler使用详解（非阻塞模式）/index.html","hash":"744c784bb8377e85bdedb1fee8bea49c0f0ae90b","modified":1672886454684},{"_id":"public/2021/08/20/e2e_analysis/index.html","hash":"f8723708e12a99b5d396029e68663e2c9804add9","modified":1672886454684},{"_id":"public/2019/06/20/08JMeter/index.html","hash":"37b69db2458931025e4894313853f9850581e7ab","modified":1672886454684},{"_id":"public/index.html","hash":"6a7345077be1ca3006754fe9c3c888b83dd61ba2","modified":1672886454684},{"_id":"public/melody-favicon.ico","hash":"e33c804e570eb238fe095ed28346dd1b3a0666ae","modified":1672886454684},{"_id":"public/img/algolia.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1672886454684},{"_id":"public/img/avatar.png","hash":"a44601fac9a81dd7e392d05ea5ddc65c96b051df","modified":1672886454684},{"_id":"public/assets/algolia/algoliasearchLite.min.js","hash":"284416885e4e80e27fa4eae6fc305f4de15b914c","modified":1672886454684},{"_id":"public/assets/algolia/algoliasearchLite.js","hash":"e56ad6b82caf69066de545201014291fc961635e","modified":1672886454684},{"_id":"public/assets/algolia/algoliasearch.min.js","hash":"a3b131a9a47ccc16f4dd8988fabb6d306548db2f","modified":1672886454684},{"_id":"public/css/404.css","hash":"712ecbf4ac203ab5f1ea92989c0f0062a3d0aca9","modified":1672886454684},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1672886454684},{"_id":"public/js/copy.js","hash":"ce7f8601c7c75ced79e2e9851beec37299d49fd1","modified":1672886454684},{"_id":"public/js/fancybox.js","hash":"2d3eaa654b2524c41dc5aba1d5e2e7cc9aaefd26","modified":1672886454684},{"_id":"public/js/fireworks.js","hash":"4b6428da34535f0e8fe5a11976b8d89c48736500","modified":1672886454684},{"_id":"public/js/head.js","hash":"555e9caa046d5a174af8d20c75e9e89c25aabb6c","modified":1672886454684},{"_id":"public/js/hexo-theme-melody.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1672886454684},{"_id":"public/js/katex.js","hash":"a5a999b357c0fd9aeacae721bf121f30d40d6726","modified":1672886454684},{"_id":"public/js/scroll.js","hash":"e9aaeeae8958b8a06e016edbd17c84b63aea9255","modified":1672886454684},{"_id":"public/js/sidebar.js","hash":"a42109c5a69dedc87e1aaf8cb2383fd43069677e","modified":1672886454684},{"_id":"public/js/transition.js","hash":"11c3b82a5e9ef2bf7bd712b6c211d86426f9a23e","modified":1672886454684},{"_id":"public/js/utils.js","hash":"f514662ad80803e1bb5f6bc653c4b9ad06ea4932","modified":1672886454684},{"_id":"public/js/search/algolia.js","hash":"8d2cc7ac4a015563344a3981c3040d308489935c","modified":1672886454684},{"_id":"public/js/search/local-search.js","hash":"c58bbe874fcdc512cca5244db487745e6a49ef48","modified":1672886454684},{"_id":"public/js/third-party/canvas-ribbon.js","hash":"8fd084e962fb2028be9f748b5cb5f53d030d1d03","modified":1672886454684},{"_id":"public/js/third-party/velocity.ui.min.js","hash":"d8124c091d19fa4072616a44a8897fabc6599fce","modified":1672886454684},{"_id":"public/js/third-party/reveal/head.min.js","hash":"95c9de30444117adbbb3218070fda00af187a76a","modified":1672886454684},{"_id":"public/css/index.css","hash":"0a31457d7a03f887afbfa157da30b79e41a3df05","modified":1672886454684},{"_id":"public/js/third-party/anime.min.js","hash":"332031949d78a49e8a18611556253660574e47db","modified":1672886454684},{"_id":"public/js/third-party/jquery.fancybox.min.js","hash":"2ec3ef6c31b971ba5e58eb4a0c5ede902bbdd4af","modified":1672886454684},{"_id":"public/js/third-party/velocity.min.js","hash":"69c85b9d6a931a7d3a5b0657e60112c31fb3b286","modified":1672886454684},{"_id":"public/js/third-party/jquery.min.js","hash":"1055018c28ab41087ef9ccefe411606893dabea2","modified":1672886454684},{"_id":"public/assets/algolia/algoliasearch.js","hash":"6948fcdf071e4983e784e8c458cf201536f77792","modified":1672886454684}],"Category":[{"name":"linux","_id":"clciheil50004rdxh8ken9c5c"},{"name":"IPD","_id":"clciheilb000jrdxh7hglaqwg"},{"name":"systemd","parent":"clciheil50004rdxh8ken9c5c","_id":"clciheild000nrdxhbrmpaffw"},{"name":"python","_id":"clciheile000vrdxh0a8sb0ml"},{"name":"存储服务","parent":"clciheil50004rdxh8ken9c5c","_id":"clciheilg0018rdxhbiinfiio"},{"name":"Jmeter","_id":"clciheilh001hrdxhai4y7ql4"},{"name":"shell","parent":"clciheil50004rdxh8ken9c5c","_id":"clciheili001mrdxhc44j0anl"},{"name":"测试理论","_id":"clciheili001rrdxh5x1hbkbr"},{"name":"hexo","_id":"clciheilj001wrdxhg90hca3p"},{"name":"变量","parent":"clciheile000vrdxh0a8sb0ml","_id":"clciheilj001zrdxhehae41sn"},{"name":"爬虫","parent":"clciheile000vrdxh0a8sb0ml","_id":"clciheilk0022rdxhdd3c5u9z"},{"name":"time","parent":"clciheile000vrdxh0a8sb0ml","_id":"clciheilk0028rdxh9d164r5h"}],"Data":[],"Page":[{"title":"404","date":"2022-12-29T09:34:33.000Z","layout":"404","_content":"","source":"404/index.md","raw":"---\ntitle: 404\ndate: 2022-12-29 17:34:33\nlayout: 404\npermalink: /404\n---","updated":"2022-12-29T09:35:09.000Z","path":"/404.html","comments":1,"_id":"clciheikz0000rdxhhvt8fbvj","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"分类","date":"2022-12-28T16:00:00.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2022-12-29 00:00:00\ntype: \"categories\"\n---","updated":"2022-12-29T09:24:44.000Z","path":"categories/index.html","comments":1,"layout":"page","_id":"clciheil30002rdxhbr0e070b","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2022-12-29T09:16:52.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate:  2022-12-29 17:16:52\ntype: \"tags\"\n---","updated":"2022-12-29T09:22:58.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"clciheil60006rdxhduto0o1o","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"如何自己写一个开机自启动服务？","date":"2022-11-03T05:30:34.000Z","_content":"# systemd服务介绍\n> systemd 是 Linux 下一个与 SysV 和 LSB 初始化脚本兼容的系统和服务管理器。systemd 使用 socket 和 D-Bus 来开启服务，提供基于守护进程的按需启动策略，保留了 Linux cgroups 的进程追踪功能，支持快照和系统状态恢复，维护挂载和自挂载点，实现了各服务间基于从属关系的一个更为精细的逻辑控制，拥有前卫的并行性能。systemd 无需经过任何修改便可以替代 sysvinit \n\n# service 文件的构成\n> service文件一般分为三个部分:[**Unit**]、[**Service**]、[**Install**]\n\n## Unit\n**用来定义 Unit 的元数据，以及配置与其他 Unit 的关系**\n\n- Description：简短描述\n- Documentation：文档地址\n- Requires：当前 Unit 依赖的其他 Unit，如果它们没有运行，当前 Unit 会启动失败\n- Wants：与当前 Unit 配合的其他 Unit，如果它们没有运行，当前 Unit 不会启动失败\n- BindsTo：与Requires类似，它指定的 Unit 如果退出，会导致当前 Unit 停止运行\n- Before：如果该字段指定的 Unit 也要启动，那么必须在当前 Unit 之后启动\n- After：如果该字段指定的 Unit 也要启动，那么必须在当前 Unit 之前启动\n- Conflicts：这里指定的 Unit 不能与当前 Unit 同时运行\n- Condition…：当前 Unit 运行必须满足的条件，否则不会运行\n- Assert…：当前 Unit 运行必须满足的条件，否则会报启动失败\n\n## Service\n**用来定义Service的配置，只有 Service 类型的 Unit 才有这个部分**\n- Type：定义启动时的进程行为。它有以下几种值。\n  - \tType=simple：默认值，执行ExecStart指定的命令，启动主进程\n  - \tType=forking：以 fork 方式从父进程创建子进程，创建后父进程会立即退出\n  - \tType=oneshot：一次性进程，Systemd 会等当前服务退出，再继续往下执行\n  - \tType=dbus：当前服务通过D-Bus启动\n  - \tType=notify：当前服务启动完毕，会通知Systemd，再继续往下执行\n  - \tType=idle：若有其他任务执行完毕，当前服务才会运行\n\n- Type=simple：默认值，执行ExecStart指定的命令，启动主进程\n- Type=forking：以 fork 方式从父进程创建子进程，创建后父进程会立即退出\n- Type=oneshot：一次性进程，Systemd 会等当前服务退出，再继续往下执行\n- Type=dbus：当前服务通过D-Bus启动\n- Type=notify：当前服务启动完毕，会通知Systemd，再继续往下执行\n- Type=idle：若有其他任务执行完毕，当前服务才会运行\n- ExecStart：启动当前服务的命令\n- ExecStartPre：启动当前服务之前执行的命令\n- ExecStartPost：启动当前服务之后执行的命令\n- ExecReload：重启当前服务时执行的命令\n- ExecStop：停止当前服务时执行的命令\n- ExecStopPost：停止当其服务之后执行的命令\n- RestartSec：自动重启当前服务间隔的秒数\n- Restart：定义何种情况 Systemd 会自动重启当前服务，可能的值包括always（总是重启）、on-success、on-failure、on-abnormal、on-abort、on-watchdog\n- TimeoutSec：定义 Systemd 停止当前服务之前等待的秒数\n- Environment：指定环境变量\n\n## Install\n**用来定义如何启动，以及是否开机启动**\n- WantedBy：它的值是一个或多个 Target，当前 Unit 激活时（enable）符号链接会放入/etc/systemd/system目录下面以 Target 名 + .wants后缀构成的子目录中\n- RequiredBy：它的值是一个或多个 Target，当前 Unit 激活时，符号链接会放入/etc/systemd/system目录下面以 Target 名 + .required后缀构成的子目录中\n- Alias：当前 Unit 可用于启动的别名\n- Also：当前 Unit 激活（enable）时，会被同时激活的其他 Unit\n\n## 自动启动\n> 对于那些支持 Systemd 的软件，安装的时候，会自动在/usr/lib/systemd/system目录添加一个配置文件，如: systemctl enable httpd.service\n> 上面的命令相当于在 /etc/systemd/system 目录添加一个符号链接，指向 /usr/lib/systemd/system 里面的 httpd.service 文件。\n> 这是因为开机时， Systemd 只执行 /etc/systemd/system 目录里面的配置文件。这也意味着，如果把修改后的配置文件放在该目录，就可以达到覆盖原始配置的效果\n\n# 模板介绍\nvim /usr/lib/systemd/system/zdy.service\n```bash\n[Unit]\nDescription=描述\nEnvironment=环境变量或参数(系统环境变量此时无法使用)\nAfter=network.target\n\n[Service]\nType=forking\nEnvironmentFile=所需环境变量文件或参数文件\nExecStart=启动命令(需指定全路径)\nExecStop=停止命令(需指定全路径)\nUser=以什么用户执行命令  \n\n[Install]\nWantedBy=multi-user.target\n```\n# 实例\n> 当自己写了一个脚本后，期望每次开机后，该服务能自动运行，此时就必须考虑一个开机自启的方法了，经过多方咨询后，最终决定采用systemd服务来完成，具体内容如下。\n\n## 创建自己的服务\n**进入对应目录**\n```bash\ncd /etc/systemd/system\n```\n**创建服务文件**\n```bash\nsudo touch apptest.service  # 假如我起了一个叫apptest的服务\n```\n**编辑服务内容**\n```bash\n[Unit]\nDescription=apptest\nAfter=network.target  # 因我的服务需要在网络连接成功后才能正常运行，故需要等网络服务启动后才运行\n\n[Service]\nExecStart=/home/babyfengfjx/Desktop/apptest.py   # 此处就是需要启动的命令了，这个地方需要填写绝对路径，如果是后台运行的服务，不需要加nohup 这种了。\nType=simple\nUser=babyfengfjx   # 指定用我的普通用户运行，而不是用root\n\n[Install]\nWantedBy=multi-user.target\n```\n**启动服务**\n```bash\nsystemctl start apptest.service\n```\n**查看服务状态**\n```bash\nsystemctl status apptest.service\n```\n通过上述命令即可查看到该服务当前运行的状态，如果是**running**那就OK了，如果失败了则需要具体查看一下你的这个命令部分，一般都是这里出了问题。\n\n**个人出现的问题有**：\n- 命令中加了nohup，之前是为了能方便在后台运行就加了这个，实际上systemd管理的服务是不需要这个部分的；\n- 命令中日志输出的部分，没有使用绝对路径，导致执行的是否没有写入权限报错了；\n- 我使用的是python，在开始执行的时候，我写的是```python3 /home/babyfengfjx/Desktop/apptest.py``` 这个时候执行出现了报错，提示有一个python库没有安装，但我明明手动执行的时候是可以的呀，最后发现该服务是以root的名义去运行的，而我这个库只在当前普通用户中有，所以才会报错，最后直接将python执行部分写入到脚本开头中就OK了；\n- 因为我的脚本是需要普通用户执行的，所以加了一个User字段。\n\n## 设置开机自启动\n```bash\nsystemctl enable apptest.service\n```\n就这么easy，上述操作后就完事了，后面系统无论如何重启，我的服务都能自己跑起来咯～\n","source":"_posts/01systemd_service.md","raw":"---\ntitle: 如何自己写一个开机自启动服务？\ncategories: \n- linux\n- systemd\ntags:\n- linux\ndate: 2022-11-03 13:30:34\n---\n# systemd服务介绍\n> systemd 是 Linux 下一个与 SysV 和 LSB 初始化脚本兼容的系统和服务管理器。systemd 使用 socket 和 D-Bus 来开启服务，提供基于守护进程的按需启动策略，保留了 Linux cgroups 的进程追踪功能，支持快照和系统状态恢复，维护挂载和自挂载点，实现了各服务间基于从属关系的一个更为精细的逻辑控制，拥有前卫的并行性能。systemd 无需经过任何修改便可以替代 sysvinit \n\n# service 文件的构成\n> service文件一般分为三个部分:[**Unit**]、[**Service**]、[**Install**]\n\n## Unit\n**用来定义 Unit 的元数据，以及配置与其他 Unit 的关系**\n\n- Description：简短描述\n- Documentation：文档地址\n- Requires：当前 Unit 依赖的其他 Unit，如果它们没有运行，当前 Unit 会启动失败\n- Wants：与当前 Unit 配合的其他 Unit，如果它们没有运行，当前 Unit 不会启动失败\n- BindsTo：与Requires类似，它指定的 Unit 如果退出，会导致当前 Unit 停止运行\n- Before：如果该字段指定的 Unit 也要启动，那么必须在当前 Unit 之后启动\n- After：如果该字段指定的 Unit 也要启动，那么必须在当前 Unit 之前启动\n- Conflicts：这里指定的 Unit 不能与当前 Unit 同时运行\n- Condition…：当前 Unit 运行必须满足的条件，否则不会运行\n- Assert…：当前 Unit 运行必须满足的条件，否则会报启动失败\n\n## Service\n**用来定义Service的配置，只有 Service 类型的 Unit 才有这个部分**\n- Type：定义启动时的进程行为。它有以下几种值。\n  - \tType=simple：默认值，执行ExecStart指定的命令，启动主进程\n  - \tType=forking：以 fork 方式从父进程创建子进程，创建后父进程会立即退出\n  - \tType=oneshot：一次性进程，Systemd 会等当前服务退出，再继续往下执行\n  - \tType=dbus：当前服务通过D-Bus启动\n  - \tType=notify：当前服务启动完毕，会通知Systemd，再继续往下执行\n  - \tType=idle：若有其他任务执行完毕，当前服务才会运行\n\n- Type=simple：默认值，执行ExecStart指定的命令，启动主进程\n- Type=forking：以 fork 方式从父进程创建子进程，创建后父进程会立即退出\n- Type=oneshot：一次性进程，Systemd 会等当前服务退出，再继续往下执行\n- Type=dbus：当前服务通过D-Bus启动\n- Type=notify：当前服务启动完毕，会通知Systemd，再继续往下执行\n- Type=idle：若有其他任务执行完毕，当前服务才会运行\n- ExecStart：启动当前服务的命令\n- ExecStartPre：启动当前服务之前执行的命令\n- ExecStartPost：启动当前服务之后执行的命令\n- ExecReload：重启当前服务时执行的命令\n- ExecStop：停止当前服务时执行的命令\n- ExecStopPost：停止当其服务之后执行的命令\n- RestartSec：自动重启当前服务间隔的秒数\n- Restart：定义何种情况 Systemd 会自动重启当前服务，可能的值包括always（总是重启）、on-success、on-failure、on-abnormal、on-abort、on-watchdog\n- TimeoutSec：定义 Systemd 停止当前服务之前等待的秒数\n- Environment：指定环境变量\n\n## Install\n**用来定义如何启动，以及是否开机启动**\n- WantedBy：它的值是一个或多个 Target，当前 Unit 激活时（enable）符号链接会放入/etc/systemd/system目录下面以 Target 名 + .wants后缀构成的子目录中\n- RequiredBy：它的值是一个或多个 Target，当前 Unit 激活时，符号链接会放入/etc/systemd/system目录下面以 Target 名 + .required后缀构成的子目录中\n- Alias：当前 Unit 可用于启动的别名\n- Also：当前 Unit 激活（enable）时，会被同时激活的其他 Unit\n\n## 自动启动\n> 对于那些支持 Systemd 的软件，安装的时候，会自动在/usr/lib/systemd/system目录添加一个配置文件，如: systemctl enable httpd.service\n> 上面的命令相当于在 /etc/systemd/system 目录添加一个符号链接，指向 /usr/lib/systemd/system 里面的 httpd.service 文件。\n> 这是因为开机时， Systemd 只执行 /etc/systemd/system 目录里面的配置文件。这也意味着，如果把修改后的配置文件放在该目录，就可以达到覆盖原始配置的效果\n\n# 模板介绍\nvim /usr/lib/systemd/system/zdy.service\n```bash\n[Unit]\nDescription=描述\nEnvironment=环境变量或参数(系统环境变量此时无法使用)\nAfter=network.target\n\n[Service]\nType=forking\nEnvironmentFile=所需环境变量文件或参数文件\nExecStart=启动命令(需指定全路径)\nExecStop=停止命令(需指定全路径)\nUser=以什么用户执行命令  \n\n[Install]\nWantedBy=multi-user.target\n```\n# 实例\n> 当自己写了一个脚本后，期望每次开机后，该服务能自动运行，此时就必须考虑一个开机自启的方法了，经过多方咨询后，最终决定采用systemd服务来完成，具体内容如下。\n\n## 创建自己的服务\n**进入对应目录**\n```bash\ncd /etc/systemd/system\n```\n**创建服务文件**\n```bash\nsudo touch apptest.service  # 假如我起了一个叫apptest的服务\n```\n**编辑服务内容**\n```bash\n[Unit]\nDescription=apptest\nAfter=network.target  # 因我的服务需要在网络连接成功后才能正常运行，故需要等网络服务启动后才运行\n\n[Service]\nExecStart=/home/babyfengfjx/Desktop/apptest.py   # 此处就是需要启动的命令了，这个地方需要填写绝对路径，如果是后台运行的服务，不需要加nohup 这种了。\nType=simple\nUser=babyfengfjx   # 指定用我的普通用户运行，而不是用root\n\n[Install]\nWantedBy=multi-user.target\n```\n**启动服务**\n```bash\nsystemctl start apptest.service\n```\n**查看服务状态**\n```bash\nsystemctl status apptest.service\n```\n通过上述命令即可查看到该服务当前运行的状态，如果是**running**那就OK了，如果失败了则需要具体查看一下你的这个命令部分，一般都是这里出了问题。\n\n**个人出现的问题有**：\n- 命令中加了nohup，之前是为了能方便在后台运行就加了这个，实际上systemd管理的服务是不需要这个部分的；\n- 命令中日志输出的部分，没有使用绝对路径，导致执行的是否没有写入权限报错了；\n- 我使用的是python，在开始执行的时候，我写的是```python3 /home/babyfengfjx/Desktop/apptest.py``` 这个时候执行出现了报错，提示有一个python库没有安装，但我明明手动执行的时候是可以的呀，最后发现该服务是以root的名义去运行的，而我这个库只在当前普通用户中有，所以才会报错，最后直接将python执行部分写入到脚本开头中就OK了；\n- 因为我的脚本是需要普通用户执行的，所以加了一个User字段。\n\n## 设置开机自启动\n```bash\nsystemctl enable apptest.service\n```\n就这么easy，上述操作后就完事了，后面系统无论如何重启，我的服务都能自己跑起来咯～\n","slug":"01systemd_service","published":1,"updated":"2023-01-03T07:36:24.708Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clciheil10001rdxh240j3qio","content":"<h1 id=\"systemd服务介绍\"><a href=\"#systemd服务介绍\" class=\"headerlink\" title=\"systemd服务介绍\"></a>systemd服务介绍</h1><blockquote>\n<p>systemd 是 Linux 下一个与 SysV 和 LSB 初始化脚本兼容的系统和服务管理器。systemd 使用 socket 和 D-Bus 来开启服务，提供基于守护进程的按需启动策略，保留了 Linux cgroups 的进程追踪功能，支持快照和系统状态恢复，维护挂载和自挂载点，实现了各服务间基于从属关系的一个更为精细的逻辑控制，拥有前卫的并行性能。systemd 无需经过任何修改便可以替代 sysvinit </p>\n</blockquote>\n<h1 id=\"service-文件的构成\"><a href=\"#service-文件的构成\" class=\"headerlink\" title=\"service 文件的构成\"></a>service 文件的构成</h1><blockquote>\n<p>service文件一般分为三个部分:[<strong>Unit</strong>]、[<strong>Service</strong>]、[<strong>Install</strong>]</p>\n</blockquote>\n<h2 id=\"Unit\"><a href=\"#Unit\" class=\"headerlink\" title=\"Unit\"></a>Unit</h2><p><strong>用来定义 Unit 的元数据，以及配置与其他 Unit 的关系</strong></p>\n<ul>\n<li>Description：简短描述</li>\n<li>Documentation：文档地址</li>\n<li>Requires：当前 Unit 依赖的其他 Unit，如果它们没有运行，当前 Unit 会启动失败</li>\n<li>Wants：与当前 Unit 配合的其他 Unit，如果它们没有运行，当前 Unit 不会启动失败</li>\n<li>BindsTo：与Requires类似，它指定的 Unit 如果退出，会导致当前 Unit 停止运行</li>\n<li>Before：如果该字段指定的 Unit 也要启动，那么必须在当前 Unit 之后启动</li>\n<li>After：如果该字段指定的 Unit 也要启动，那么必须在当前 Unit 之前启动</li>\n<li>Conflicts：这里指定的 Unit 不能与当前 Unit 同时运行</li>\n<li>Condition…：当前 Unit 运行必须满足的条件，否则不会运行</li>\n<li>Assert…：当前 Unit 运行必须满足的条件，否则会报启动失败</li>\n</ul>\n<h2 id=\"Service\"><a href=\"#Service\" class=\"headerlink\" title=\"Service\"></a>Service</h2><p><strong>用来定义Service的配置，只有 Service 类型的 Unit 才有这个部分</strong></p>\n<ul>\n<li><p>Type：定义启动时的进程行为。它有以下几种值。</p>\n<ul>\n<li><pre><code>Type=simple：默认值，执行ExecStart指定的命令，启动主进程\n</code></pre>\n</li>\n<li><pre><code>Type=forking：以 fork 方式从父进程创建子进程，创建后父进程会立即退出\n</code></pre>\n</li>\n<li><pre><code>Type=oneshot：一次性进程，Systemd 会等当前服务退出，再继续往下执行\n</code></pre>\n</li>\n<li><pre><code>Type=dbus：当前服务通过D-Bus启动\n</code></pre>\n</li>\n<li><pre><code>Type=notify：当前服务启动完毕，会通知Systemd，再继续往下执行\n</code></pre>\n</li>\n<li><pre><code>Type=idle：若有其他任务执行完毕，当前服务才会运行\n</code></pre>\n</li>\n</ul>\n</li>\n<li><p>Type&#x3D;simple：默认值，执行ExecStart指定的命令，启动主进程</p>\n</li>\n<li><p>Type&#x3D;forking：以 fork 方式从父进程创建子进程，创建后父进程会立即退出</p>\n</li>\n<li><p>Type&#x3D;oneshot：一次性进程，Systemd 会等当前服务退出，再继续往下执行</p>\n</li>\n<li><p>Type&#x3D;dbus：当前服务通过D-Bus启动</p>\n</li>\n<li><p>Type&#x3D;notify：当前服务启动完毕，会通知Systemd，再继续往下执行</p>\n</li>\n<li><p>Type&#x3D;idle：若有其他任务执行完毕，当前服务才会运行</p>\n</li>\n<li><p>ExecStart：启动当前服务的命令</p>\n</li>\n<li><p>ExecStartPre：启动当前服务之前执行的命令</p>\n</li>\n<li><p>ExecStartPost：启动当前服务之后执行的命令</p>\n</li>\n<li><p>ExecReload：重启当前服务时执行的命令</p>\n</li>\n<li><p>ExecStop：停止当前服务时执行的命令</p>\n</li>\n<li><p>ExecStopPost：停止当其服务之后执行的命令</p>\n</li>\n<li><p>RestartSec：自动重启当前服务间隔的秒数</p>\n</li>\n<li><p>Restart：定义何种情况 Systemd 会自动重启当前服务，可能的值包括always（总是重启）、on-success、on-failure、on-abnormal、on-abort、on-watchdog</p>\n</li>\n<li><p>TimeoutSec：定义 Systemd 停止当前服务之前等待的秒数</p>\n</li>\n<li><p>Environment：指定环境变量</p>\n</li>\n</ul>\n<h2 id=\"Install\"><a href=\"#Install\" class=\"headerlink\" title=\"Install\"></a>Install</h2><p><strong>用来定义如何启动，以及是否开机启动</strong></p>\n<ul>\n<li>WantedBy：它的值是一个或多个 Target，当前 Unit 激活时（enable）符号链接会放入&#x2F;etc&#x2F;systemd&#x2F;system目录下面以 Target 名 + .wants后缀构成的子目录中</li>\n<li>RequiredBy：它的值是一个或多个 Target，当前 Unit 激活时，符号链接会放入&#x2F;etc&#x2F;systemd&#x2F;system目录下面以 Target 名 + .required后缀构成的子目录中</li>\n<li>Alias：当前 Unit 可用于启动的别名</li>\n<li>Also：当前 Unit 激活（enable）时，会被同时激活的其他 Unit</li>\n</ul>\n<h2 id=\"自动启动\"><a href=\"#自动启动\" class=\"headerlink\" title=\"自动启动\"></a>自动启动</h2><blockquote>\n<p>对于那些支持 Systemd 的软件，安装的时候，会自动在&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system目录添加一个配置文件，如: systemctl enable httpd.service<br>上面的命令相当于在 &#x2F;etc&#x2F;systemd&#x2F;system 目录添加一个符号链接，指向 &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system 里面的 httpd.service 文件。<br>这是因为开机时， Systemd 只执行 &#x2F;etc&#x2F;systemd&#x2F;system 目录里面的配置文件。这也意味着，如果把修改后的配置文件放在该目录，就可以达到覆盖原始配置的效果</p>\n</blockquote>\n<h1 id=\"模板介绍\"><a href=\"#模板介绍\" class=\"headerlink\" title=\"模板介绍\"></a>模板介绍</h1><p>vim &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;zdy.service</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=描述</span><br><span class=\"line\">Environment=环境变量或参数(系统环境变量此时无法使用)</span><br><span class=\"line\">After=network.target</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Type=forking</span><br><span class=\"line\">EnvironmentFile=所需环境变量文件或参数文件</span><br><span class=\"line\">ExecStart=启动命令(需指定全路径)</span><br><span class=\"line\">ExecStop=停止命令(需指定全路径)</span><br><span class=\"line\">User=以什么用户执行命令  </span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>\n<h1 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h1><blockquote>\n<p>当自己写了一个脚本后，期望每次开机后，该服务能自动运行，此时就必须考虑一个开机自启的方法了，经过多方咨询后，最终决定采用systemd服务来完成，具体内容如下。</p>\n</blockquote>\n<h2 id=\"创建自己的服务\"><a href=\"#创建自己的服务\" class=\"headerlink\" title=\"创建自己的服务\"></a>创建自己的服务</h2><p><strong>进入对应目录</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /etc/systemd/system</span><br></pre></td></tr></table></figure>\n<p><strong>创建服务文件</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo <span class=\"built_in\">touch</span> apptest.service  <span class=\"comment\"># 假如我起了一个叫apptest的服务</span></span><br></pre></td></tr></table></figure>\n<p><strong>编辑服务内容</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=apptest</span><br><span class=\"line\">After=network.target  <span class=\"comment\"># 因我的服务需要在网络连接成功后才能正常运行，故需要等网络服务启动后才运行</span></span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">ExecStart=/home/babyfengfjx/Desktop/apptest.py   <span class=\"comment\"># 此处就是需要启动的命令了，这个地方需要填写绝对路径，如果是后台运行的服务，不需要加nohup 这种了。</span></span><br><span class=\"line\">Type=simple</span><br><span class=\"line\">User=babyfengfjx   <span class=\"comment\"># 指定用我的普通用户运行，而不是用root</span></span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>\n<p><strong>启动服务</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">systemctl start apptest.service</span><br></pre></td></tr></table></figure>\n<p><strong>查看服务状态</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">systemctl status apptest.service</span><br></pre></td></tr></table></figure>\n<p>通过上述命令即可查看到该服务当前运行的状态，如果是<strong>running</strong>那就OK了，如果失败了则需要具体查看一下你的这个命令部分，一般都是这里出了问题。</p>\n<p><strong>个人出现的问题有</strong>：</p>\n<ul>\n<li>命令中加了nohup，之前是为了能方便在后台运行就加了这个，实际上systemd管理的服务是不需要这个部分的；</li>\n<li>命令中日志输出的部分，没有使用绝对路径，导致执行的是否没有写入权限报错了；</li>\n<li>我使用的是python，在开始执行的时候，我写的是<code>python3 /home/babyfengfjx/Desktop/apptest.py</code> 这个时候执行出现了报错，提示有一个python库没有安装，但我明明手动执行的时候是可以的呀，最后发现该服务是以root的名义去运行的，而我这个库只在当前普通用户中有，所以才会报错，最后直接将python执行部分写入到脚本开头中就OK了；</li>\n<li>因为我的脚本是需要普通用户执行的，所以加了一个User字段。</li>\n</ul>\n<h2 id=\"设置开机自启动\"><a href=\"#设置开机自启动\" class=\"headerlink\" title=\"设置开机自启动\"></a>设置开机自启动</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">systemctl <span class=\"built_in\">enable</span> apptest.service</span><br></pre></td></tr></table></figure>\n<p>就这么easy，上述操作后就完事了，后面系统无论如何重启，我的服务都能自己跑起来咯～</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"systemd服务介绍\"><a href=\"#systemd服务介绍\" class=\"headerlink\" title=\"systemd服务介绍\"></a>systemd服务介绍</h1><blockquote>\n<p>systemd 是 Linux 下一个与 SysV 和 LSB 初始化脚本兼容的系统和服务管理器。systemd 使用 socket 和 D-Bus 来开启服务，提供基于守护进程的按需启动策略，保留了 Linux cgroups 的进程追踪功能，支持快照和系统状态恢复，维护挂载和自挂载点，实现了各服务间基于从属关系的一个更为精细的逻辑控制，拥有前卫的并行性能。systemd 无需经过任何修改便可以替代 sysvinit </p>\n</blockquote>\n<h1 id=\"service-文件的构成\"><a href=\"#service-文件的构成\" class=\"headerlink\" title=\"service 文件的构成\"></a>service 文件的构成</h1><blockquote>\n<p>service文件一般分为三个部分:[<strong>Unit</strong>]、[<strong>Service</strong>]、[<strong>Install</strong>]</p>\n</blockquote>\n<h2 id=\"Unit\"><a href=\"#Unit\" class=\"headerlink\" title=\"Unit\"></a>Unit</h2><p><strong>用来定义 Unit 的元数据，以及配置与其他 Unit 的关系</strong></p>\n<ul>\n<li>Description：简短描述</li>\n<li>Documentation：文档地址</li>\n<li>Requires：当前 Unit 依赖的其他 Unit，如果它们没有运行，当前 Unit 会启动失败</li>\n<li>Wants：与当前 Unit 配合的其他 Unit，如果它们没有运行，当前 Unit 不会启动失败</li>\n<li>BindsTo：与Requires类似，它指定的 Unit 如果退出，会导致当前 Unit 停止运行</li>\n<li>Before：如果该字段指定的 Unit 也要启动，那么必须在当前 Unit 之后启动</li>\n<li>After：如果该字段指定的 Unit 也要启动，那么必须在当前 Unit 之前启动</li>\n<li>Conflicts：这里指定的 Unit 不能与当前 Unit 同时运行</li>\n<li>Condition…：当前 Unit 运行必须满足的条件，否则不会运行</li>\n<li>Assert…：当前 Unit 运行必须满足的条件，否则会报启动失败</li>\n</ul>\n<h2 id=\"Service\"><a href=\"#Service\" class=\"headerlink\" title=\"Service\"></a>Service</h2><p><strong>用来定义Service的配置，只有 Service 类型的 Unit 才有这个部分</strong></p>\n<ul>\n<li><p>Type：定义启动时的进程行为。它有以下几种值。</p>\n<ul>\n<li><pre><code>Type=simple：默认值，执行ExecStart指定的命令，启动主进程\n</code></pre>\n</li>\n<li><pre><code>Type=forking：以 fork 方式从父进程创建子进程，创建后父进程会立即退出\n</code></pre>\n</li>\n<li><pre><code>Type=oneshot：一次性进程，Systemd 会等当前服务退出，再继续往下执行\n</code></pre>\n</li>\n<li><pre><code>Type=dbus：当前服务通过D-Bus启动\n</code></pre>\n</li>\n<li><pre><code>Type=notify：当前服务启动完毕，会通知Systemd，再继续往下执行\n</code></pre>\n</li>\n<li><pre><code>Type=idle：若有其他任务执行完毕，当前服务才会运行\n</code></pre>\n</li>\n</ul>\n</li>\n<li><p>Type&#x3D;simple：默认值，执行ExecStart指定的命令，启动主进程</p>\n</li>\n<li><p>Type&#x3D;forking：以 fork 方式从父进程创建子进程，创建后父进程会立即退出</p>\n</li>\n<li><p>Type&#x3D;oneshot：一次性进程，Systemd 会等当前服务退出，再继续往下执行</p>\n</li>\n<li><p>Type&#x3D;dbus：当前服务通过D-Bus启动</p>\n</li>\n<li><p>Type&#x3D;notify：当前服务启动完毕，会通知Systemd，再继续往下执行</p>\n</li>\n<li><p>Type&#x3D;idle：若有其他任务执行完毕，当前服务才会运行</p>\n</li>\n<li><p>ExecStart：启动当前服务的命令</p>\n</li>\n<li><p>ExecStartPre：启动当前服务之前执行的命令</p>\n</li>\n<li><p>ExecStartPost：启动当前服务之后执行的命令</p>\n</li>\n<li><p>ExecReload：重启当前服务时执行的命令</p>\n</li>\n<li><p>ExecStop：停止当前服务时执行的命令</p>\n</li>\n<li><p>ExecStopPost：停止当其服务之后执行的命令</p>\n</li>\n<li><p>RestartSec：自动重启当前服务间隔的秒数</p>\n</li>\n<li><p>Restart：定义何种情况 Systemd 会自动重启当前服务，可能的值包括always（总是重启）、on-success、on-failure、on-abnormal、on-abort、on-watchdog</p>\n</li>\n<li><p>TimeoutSec：定义 Systemd 停止当前服务之前等待的秒数</p>\n</li>\n<li><p>Environment：指定环境变量</p>\n</li>\n</ul>\n<h2 id=\"Install\"><a href=\"#Install\" class=\"headerlink\" title=\"Install\"></a>Install</h2><p><strong>用来定义如何启动，以及是否开机启动</strong></p>\n<ul>\n<li>WantedBy：它的值是一个或多个 Target，当前 Unit 激活时（enable）符号链接会放入&#x2F;etc&#x2F;systemd&#x2F;system目录下面以 Target 名 + .wants后缀构成的子目录中</li>\n<li>RequiredBy：它的值是一个或多个 Target，当前 Unit 激活时，符号链接会放入&#x2F;etc&#x2F;systemd&#x2F;system目录下面以 Target 名 + .required后缀构成的子目录中</li>\n<li>Alias：当前 Unit 可用于启动的别名</li>\n<li>Also：当前 Unit 激活（enable）时，会被同时激活的其他 Unit</li>\n</ul>\n<h2 id=\"自动启动\"><a href=\"#自动启动\" class=\"headerlink\" title=\"自动启动\"></a>自动启动</h2><blockquote>\n<p>对于那些支持 Systemd 的软件，安装的时候，会自动在&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system目录添加一个配置文件，如: systemctl enable httpd.service<br>上面的命令相当于在 &#x2F;etc&#x2F;systemd&#x2F;system 目录添加一个符号链接，指向 &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system 里面的 httpd.service 文件。<br>这是因为开机时， Systemd 只执行 &#x2F;etc&#x2F;systemd&#x2F;system 目录里面的配置文件。这也意味着，如果把修改后的配置文件放在该目录，就可以达到覆盖原始配置的效果</p>\n</blockquote>\n<h1 id=\"模板介绍\"><a href=\"#模板介绍\" class=\"headerlink\" title=\"模板介绍\"></a>模板介绍</h1><p>vim &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;zdy.service</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=描述</span><br><span class=\"line\">Environment=环境变量或参数(系统环境变量此时无法使用)</span><br><span class=\"line\">After=network.target</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Type=forking</span><br><span class=\"line\">EnvironmentFile=所需环境变量文件或参数文件</span><br><span class=\"line\">ExecStart=启动命令(需指定全路径)</span><br><span class=\"line\">ExecStop=停止命令(需指定全路径)</span><br><span class=\"line\">User=以什么用户执行命令  </span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>\n<h1 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h1><blockquote>\n<p>当自己写了一个脚本后，期望每次开机后，该服务能自动运行，此时就必须考虑一个开机自启的方法了，经过多方咨询后，最终决定采用systemd服务来完成，具体内容如下。</p>\n</blockquote>\n<h2 id=\"创建自己的服务\"><a href=\"#创建自己的服务\" class=\"headerlink\" title=\"创建自己的服务\"></a>创建自己的服务</h2><p><strong>进入对应目录</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /etc/systemd/system</span><br></pre></td></tr></table></figure>\n<p><strong>创建服务文件</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo <span class=\"built_in\">touch</span> apptest.service  <span class=\"comment\"># 假如我起了一个叫apptest的服务</span></span><br></pre></td></tr></table></figure>\n<p><strong>编辑服务内容</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=apptest</span><br><span class=\"line\">After=network.target  <span class=\"comment\"># 因我的服务需要在网络连接成功后才能正常运行，故需要等网络服务启动后才运行</span></span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">ExecStart=/home/babyfengfjx/Desktop/apptest.py   <span class=\"comment\"># 此处就是需要启动的命令了，这个地方需要填写绝对路径，如果是后台运行的服务，不需要加nohup 这种了。</span></span><br><span class=\"line\">Type=simple</span><br><span class=\"line\">User=babyfengfjx   <span class=\"comment\"># 指定用我的普通用户运行，而不是用root</span></span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>\n<p><strong>启动服务</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">systemctl start apptest.service</span><br></pre></td></tr></table></figure>\n<p><strong>查看服务状态</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">systemctl status apptest.service</span><br></pre></td></tr></table></figure>\n<p>通过上述命令即可查看到该服务当前运行的状态，如果是<strong>running</strong>那就OK了，如果失败了则需要具体查看一下你的这个命令部分，一般都是这里出了问题。</p>\n<p><strong>个人出现的问题有</strong>：</p>\n<ul>\n<li>命令中加了nohup，之前是为了能方便在后台运行就加了这个，实际上systemd管理的服务是不需要这个部分的；</li>\n<li>命令中日志输出的部分，没有使用绝对路径，导致执行的是否没有写入权限报错了；</li>\n<li>我使用的是python，在开始执行的时候，我写的是<code>python3 /home/babyfengfjx/Desktop/apptest.py</code> 这个时候执行出现了报错，提示有一个python库没有安装，但我明明手动执行的时候是可以的呀，最后发现该服务是以root的名义去运行的，而我这个库只在当前普通用户中有，所以才会报错，最后直接将python执行部分写入到脚本开头中就OK了；</li>\n<li>因为我的脚本是需要普通用户执行的，所以加了一个User字段。</li>\n</ul>\n<h2 id=\"设置开机自启动\"><a href=\"#设置开机自启动\" class=\"headerlink\" title=\"设置开机自启动\"></a>设置开机自启动</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">systemctl <span class=\"built_in\">enable</span> apptest.service</span><br></pre></td></tr></table></figure>\n<p>就这么easy，上述操作后就完事了，后面系统无论如何重启，我的服务都能自己跑起来咯～</p>\n"},{"title":"常见网络存储服务搭建方法","date":"2022-06-03T03:21:34.000Z","_content":"---\n# Samba服务搭建\n>Samba是在Linux系统上实现SMB协议的一个免费软件，由服务器及客户端程序构成。SMB（Server Messages Block，信息服务块）是一种在局域网上共享文件和打印机的一种通信协议，它为局域网内的不同计算机之间提供文件及打印机等资源的共享服务。\n## 安装服务\n```bash\nsudo apt-get install samba-common samba\n```\n## 创建共享文件夹\n```bash\nsudo mkdir /opt/share\n```\n## 编辑配置文件\n> - 关于samba配置文件，smb.conf总共分为两大部分，分别为“全局设置（GIobal Settings）”和“共享定义（Share Definitions）”。全局设置定义于Samba服务器的整体行为，例如，工作组，主机名等方面。共享定义则用于设置的具体的共享目录或者设备中。\n> - 配置文件绝对路径在：```/etc/samba/smb.conf```\n\n### 全局设置\n- workgroup用于设置在windows中显示的工作组\n- server string是Samba服务器的说明\n- workgroup和server string字段后面的内容可以随便写\n- 通常来说，将Samba服务器的编码设置为UTF-8是比较好的，也能解决显示的问题：```unix charset = UTF-8```\n- 但是这样也会存在问题，UTF-8编码的中文文件名在某些系统下面会乱码，Samba提供了dos charset这个字段。下面这条配置命令为哪些不认识的Unicode的Windows系统使用GBK编码:```dos charset = cp936```\n- security字段设置了用户登录的验证方式，share和user是最常用到的两种。share方式允许任何用户登录到系统，而不用提供用户名和口令,但是由于Samba是默认要使用验证方式的，所以这里就要讲到user方式。这种方式要求用户提供账户信息供服务器验证，但是要使用user验证，Samba的配置文件里面就应该包含这一行:```security = user```\n### 共享设置\n这个文件叫做smb.conf（位于/etc或者/etc/samba目录下面），可以用uos系统自带的文本编辑器打开，在末尾输入：\n```bash\n[share] #\"[]\" 中的文字表示共享目录名字，可以随意设置\n    comment = Linux Share　 #comment字段用于设置这个共享目录的描述\n    path = /opt/share　　　　 #share指定了共享目录的路径\n    public = yes　　　　　　 #表示在windows的“网上邻居”中可见\n    writeable = no　　　　　 #writeable表示设置目录是否可写（yes是可写的意思）\n    browseable = yes　　　 #表示在windows的“网上邻居”中可见\n    guest ok = no 　　　　　#告诉Samba服务器这个共享目录允许匿名访问\n```\n## 添加用户\n\n```bash\nsudo useradd smbuser  # 新增一个叫smbuser的用户\nsudo smbpasswd -a smbuser  # 给这个新增用户创建samb共享密码\nNew SMB password:\nRetype new SMB password:\nAdded user smbuser\n```\n后面就可以使用带-U参数的smbpasswd命令修改已经有用户的口令。如果用户希望本地修改服务器上自己的口令，可以使用-r参数。下面的命令用户修改在服务器smbserver上smbuser用户的口令了\n\n```bash\nsmbpasswd -r smbserver -U smbuser\n```\n## 赋予权限\nsmbuser对共享目录写权限,一下配置需要写成yes\n```bash\nwriteable = yes\n```\n如果只写writeable = yes是远远不够的，如果服务器上的这么目录本身对smbuser不可写的话，就需要添加以下命令：\n```bash\nsudo chown smbuser:smbuser /opt/share\n```\n## 服务启动、停止、重启\n### 启动服务：```service smbd start```\n### 停止服务：```service smbd stop```\n### 重启服务：```service smbd restart```\n### 查看服务状态：```service smbd status```\n```bash\ndeepin@wh-k8snode-70:/etc/samba$ service smbd status\n● smbd.service - Samba SMB Daemon\n   Loaded: loaded (/lib/systemd/system/smbd.service; enabled; vendor preset: enabled)\n   Active: active (running) since Mon 2022-06-20 11:50:46 CST; 1h 57min ago\n     Docs: man:smbd(8)\n           man:samba(7)\n           man:smb.conf(5)\n  Process: 20165 ExecStartPre=/usr/share/samba/update-apparmor-samba-profile (code=exited, status=0/SUCCESS)\n Main PID: 20174 (smbd)\n   Status: \"smbd: ready to serve connections...\"\n    Tasks: 6 (limit: 4915)\n   Memory: 26.7M\n   CGroup: /system.slice/smbd.service\n           ├─ 8209 /usr/sbin/smbd --foreground --no-process-group\n           ├─10619 /usr/sbin/smbd --foreground --no-process-group\n           ├─20174 /usr/sbin/smbd --foreground --no-process-group\n           ├─20176 /usr/sbin/smbd --foreground --no-process-group\n           ├─20177 /usr/sbin/smbd --foreground --no-process-group\n           └─20178 /usr/sbin/smbd --foreground --no-process-group\n\n```\n## 常见问题\n1. 修改配置文件后，服务无法启动。\n> 在实际修改配置文件过程中，可能在参数后面有一些看不见的字符，会导致服务无法正常启动，最好检查每个修改的参数后面无一些空格或者其他特殊符号。\n2. 创建了几个samba用户，想通过不同的用户来对不同的文件进行访问，但是出现了报错（内容是不允许一个用户使用一个以上用户名与服务器或者共享资源的多重连接）\n**解决：**\n> 先断开现有的samba连接：cmd命令行下执行net use * /del /X\n> 再重新选择你要使用的目录，使用对应的用户名进行登录就可以了\n\n3. 配置好samba服务器，但是测试过程中会出现以下报错：\n>主要原因是因为服务器的防火墙没有关，可以选择在文件/etc/security/limits.conf下输入*　-   nofile   16384,然后shutdown -r now 重启一下就可以了\n\n4. samba服务器已经可以让windows通过网络来访问samba，但是没有办法写入，修改，删除，只能查看,出现这样的问题可能就是我们自己在配置的时候出现问题了，如果我的用户是deepin:\n```#chmod  777 FileServer```   　--这种操作就可以让组samba里的用户进行写操作了。\n```bash\n[deepin]\n   create mode =0664\n   force create mode=0750   #文件新建的权限为750\n   directory mode=0750      　#新建文件夹的权限只有组里的用户查看，其他组里的用户都没有权限进入\n```\n# FTP服务搭建\n## vsftpd配置使用\n>vsftpd 是Linus上非常安全好用的ftp服务，只需要简单的安装后就可以搭建起ftp服务；\n>该服务主要的配置文件就是vsftpd.conf ,在deepin/uos系统中的绝对路径是：/etc/vsftpd.conf\n### 安装\n只需要简单的进行安装配置即可，前提是你开启了开发者模式我们才能通过终端安装软件\n```bash\nsudo apt install vsftpd\n```\n如果提示没有找到对应安装包，则可能是没有进行仓库的更新连接，执行如下命令即可\n```bash\nsudo apt update \n```\n### 服务的启停配置\n#### 启动服务\n```bash\nservice vsftpd start\n```\n#### 停止服务\n```bash\nservice vsftpd stop\n```\n#### 重启服务\n```bash\nservice vsftpd restart\n```\n#### 查看服务状态\n```bash\nservice vsftpd status\n#执行后结果如下：active则表示正常运行，如果失败了则可以通过提示信息查询对应问题\nbabyfengfjx@babyfengfjx:~$ service vsftpd status \n● vsftpd.service - vsftpd FTP server\n   Loaded: loaded (/lib/systemd/system/vsftpd.service; enabled; vendor preset: enabled)\n   Active: active (running) since Sat 2021-10-09 16:22:48 CST; 1s ago\n  Process: 18334 ExecStartPre=/bin/mkdir -p /var/run/vsftpd/empty (code=exited, status=0/SUCCESS)\n Main PID: 18335 (vsftpd)\n    Tasks: 1 (limit: 4915)\n   Memory: 568.0K\n   CGroup: /system.slice/vsftpd.service\n           └─18335 /usr/sbin/vsftpd /etc/vsftpd.conf\n```\n#### 配置文件展示\n在使用该服务过程中，主要就是这些配置文件该如何配置，很多同学在实际配置过程中很难一次配置成功，这里就给出一个实际可用的配置参数以供参考 \n\n配置文件路径：/etc/vsftpd.conf\n\n配置过程中尽量是将匿名登录关闭，使用本地用户登录，以确保安全。 \n```bash\n# Example config file /etc/vsftpd.conf\n#\n# The default compiled in settings are fairly paranoid. This sample file\n# loosens things up a bit, to make the ftp daemon more usable.\n# Please see vsftpd.conf.5 for all compiled in defaults.\n#\n# READ THIS: This example file is NOT an exhaustive list of vsftpd options.\n# Please read the vsftpd.conf.5 manual page to get a full idea of vsftpd's\n# capabilities.\n#\n#\n# Run standalone?  vsftpd can run either from an inetd or as a standalone\n# daemon started from an initscript.\nlisten=YES\n#\n# This directive enables listening on IPv6 sockets. By default, listening\n# on the IPv6 \"any\" address (::) will accept connections from both IPv6\n# and IPv4 clients. It is not necessary to listen on *both* IPv4 and IPv6\n# sockets. If you want that (perhaps because you want to listen on specific\n# addresses) then you must run two copies of vsftpd with two configuration\n# files.\nlisten_ipv6=NO\n#\n# Allow anonymous FTP? (Disabled by default).\nanonymous_enable=NO\n#\n# Uncomment this to allow local users to log in.\nlocal_enable=YES\n#\n# Uncomment this to enable any form of FTP write command.\nwrite_enable=YES\n#\n# Default umask for local users is 077. You may wish to change this to 022,\n# if your users expect that (022 is used by most other ftpd's)\n#local_umask=022\n#\n# Uncomment this to allow the anonymous FTP user to upload files. This only\n# has an effect if the above global write enable is activated. Also, you will\n# obviously need to create a directory writable by the FTP user.\n#anon_upload_enable=YES\n#\n# Uncomment this if you want the anonymous FTP user to be able to create\n# new directories.\n#anon_mkdir_write_enable=YES\n#\n# Activate directory messages - messages given to remote users when they\n# go into a certain directory.\ndirmessage_enable=YES\n#\n# If enabled, vsftpd will display directory listings with the time\n# in  your  local  time  zone.  The default is to display GMT. The\n# times returned by the MDTM FTP command are also affected by this\n# option.\nuse_localtime=YES\n#\n# Activate logging of uploads/downloads.\nxferlog_enable=YES\n#\n# Make sure PORT transfer connections originate from port 20 (ftp-data).\nconnect_from_port_20=YES\n#\n# If you want, you can arrange for uploaded anonymous files to be owned by\n# a different user. Note! Using \"root\" for uploaded files is not\n# recommended!\n#chown_uploads=YES\n#chown_username=whoever\n#\n# You may override where the log file goes if you like. The default is shown\n# below.\n#xferlog_file=/var/log/vsftpd.log\n#\n# If you want, you can have your log file in standard ftpd xferlog format.\n# Note that the default log file location is /var/log/xferlog in this case.\n#xferlog_std_format=YES\n#\n# You may change the default value for timing out an idle session.\n#idle_session_timeout=600\n#\n# You may change the default value for timing out a data connection.\n#data_connection_timeout=120\n#\n# It is recommended that you define on your system a unique user which the\n# ftp server can use as a totally isolated and unprivileged user.\n#nopriv_user=ftpsecure\n#\n# Enable this and the server will recognise asynchronous ABOR requests. Not\n# recommended for security (the code is non-trivial). Not enabling it,\n# however, may confuse older FTP clients.\n#async_abor_enable=YES\n#\n# By default the server will pretend to allow ASCII mode but in fact ignore\n# the request. Turn on the below options to have the server actually do ASCII\n# mangling on files when in ASCII mode.\n# Beware that on some FTP servers, ASCII support allows a denial of service\n# attack (DoS) via the command \"SIZE /big/file\" in ASCII mode. vsftpd\n# predicted this attack and has always been safe, reporting the size of the\n# raw file.\n# ASCII mangling is a horrible feature of the protocol.\n#ascii_upload_enable=YES\n#ascii_download_enable=YES\n#\n# You may fully customise the login banner string:\n#ftpd_banner=Welcome to blah FTP service.\n#\n# You may specify a file of disallowed anonymous e-mail addresses. Apparently\n# useful for combatting certain DoS attacks.\n#deny_email_enable=YES\n# (default follows)\n#banned_email_file=/etc/vsftpd.banned_emails\n#\n# You may restrict local users to their home directories.  See the FAQ for\n# the possible risks in this before using chroot_local_user or\n# chroot_list_enable below.\n# chroot_local_user=YES\n#\n# You may specify an explicit list of local users to chroot() to their home\n# directory. If chroot_local_user is YES, then this list becomes a list of\n# users to NOT chroot().\n# (Warning! chroot'ing can be very dangerous. If using chroot, make sure that\n# the user does not have write access to the top level directory within the\n# chroot)\n# chroot_local_user=YES\n# chroot_list_enable=YES\n# (default follows)\n# chroot_list_file=/etc/vsftpd.chroot_list\n#\n# You may activate the \"-R\" option to the builtin ls. This is disabled by\n# default to avoid remote users being able to cause excessive I/O on large\n# sites. However, some broken FTP clients such as \"ncftp\" and \"mirror\" assume\n# the presence of the \"-R\" option, so there is a strong case for enabling it.\n#ls_recurse_enable=YES\n#\n# Customization\n#\n# Some of vsftpd's settings don't fit the filesystem layout by\n# default.\n#\n# This option should be the name of a directory which is empty.  Also, the\n# directory should not be writable by the ftp user. This directory is used\n# as a secure chroot() jail at times vsftpd does not require filesystem\n# access.\nsecure_chroot_dir=/var/run/vsftpd/empty\n#\n# This string is the name of the PAM service vsftpd will use.\npam_service_name=vsftpd\n#\n# This option specifies the location of the RSA certificate to use for SSL\n# encrypted connections.\nrsa_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pem\nrsa_private_key_file=/etc/ssl/private/ssl-cert-snakeoil.key\nssl_enable=NO\n\n\n#\n# Uncomment this to indicate that vsftpd use a utf8 filesystem.\n#utf8_filesystem=YES\n```\n\n#### 实际开启的配置项如下：\n按照如下简单的配置就可以通过本地用户进行访问了 \n```bash\nlisten=YES\nlisten_ipv6=NO\nanonymous_enable=NO\nlocal_enable=YES\nwrite_enable=YES\ndirmessage_enable=YES\nuse_localtime=YES\nxferlog_enable=YES\nconnect_from_port_20=YES\nsecure_chroot_dir=/var/run/vsftpd/empty\npam_service_name=vsftpd\nrsa_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pem\nrsa_private_key_file=/etc/ssl/private/ssl-cert-snakeoil.key\nssl_enable=NO\n```\n#### 遇到的问题\n- 无法配置指定根目录，也就是任何本地账户登录后的目录都是根目录，无法自定义配置指定目录，配置后也不生效； \n- 在添加新用户配置成nologin时，是无法正常使用该类用户进行访问的； \n- 添加的新用户，需要先登录一次后，方可使用该账号访问ftp; \n# SFTP服务搭建\n## 群组配置---服务端\n```bash\nsudo groupadd sftp\ncat /etc/group  # 确认组新建成功\nsudo vim /etc/group #修改 sftp:x:1002:\nsudo useradd -g sftp -s /bin/false mysftp \nsudo passwd mysftp # 设置新密码为服务器访问密码\n```\n## 共享目录---服务端\n```bash\nsudo mkdir -p /data/sftp/mysftp\nsudo usermod -d /data/sftp/mysftp mysftp\n```\n## 配置文件修改---服务端\n```bash\nsudo vim /etc/ssh/sshd_config\nSubsystem sftp /usr/libexec/openssh/sftp-server # 该行原本配置，需要手动注释掉\n并在文件最后面添加如下几行内容然后保存\nSubsystem sftp internal-sftp\nMatch Group sftp\nChrootDirectory /data/sftp/%u\nForceCommand internal-sftp\nAllowTcpForwarding no\nX11Forwarding no\n```\n## 目录授权与新建---服务端\n```bash\nsudo chown root:sftp /data/sftp/mysftp\nsudo chmod 755 /data/sftp/mysftp\nsudo mkdir /data/sftp/mysftp/upload\nsudo chown mysftp:sftp /data/sftp/mysftp/upload\nsudo chmod 755 /data/sftp/mysftp/upload\n```\n## 重启服务---服务端\n```bash\nsudo systemctl  restart sshd.service   # 重启服务时如果提示服务不存在，则先添加如下服务\nsystemctl enable ssh.service \n# 再执行：\nsudo systemctl  restart sshd.service \n```\n## 访问服务器---客户端\n进入文件管理器或我的电脑\n输入---例如sftp：//10.20.32.** （根据实际服务端IP输入，并键如账号密码，即可访问）\n# NFS服务搭建\n## 服务端\n### 工具安装\n```bash\nsudo apt-get install nfs-kernel-server # 安装 NFS服务器端\n```\n\n### 创建共享文件夹\n```bash\nsudo mkdir /home/deepin-server/nfs       # 路径可以根据自己需要设置\nsudo chmod -R 777 /home/deepin-server/nfs    # 设置共享目录权限\n```\n\n### 修改配置文件\n```vim /etc/exports```\n```bash\n配置文件虽然只有一句，但是其中还是有很多讲究； \n共享文件可执行权限有： \n      ro           只读访问 \n      rw           读写访问 \n      sync          所有数据在请求时写入共享 \n      hide          在NFS共享目录中不共享其子目录 \n      no_hide         共享NFS目录的子目录 \n      all_squash       共享文件的UID和GID映射匿名用户anonymous，适合公用目录。 \n      no_all_squash      保留共享文件的UID和GID（默认） \n      root_squash       root用户的所有请求映射成如anonymous用户一样的权限（默认） \n      no_root_squas      root用户具有根目录的完全管理访问权限 \nip配置一般需要进行限定，最好不要使用* ，不然存在安全问题，可以限定具体ip或者ip段才能挂载。 \n```\n\n### 配置文件修改如下：\n```\ndeepin-server@deepin-server-PC:~$ cat /etc/exports \n# /etc/exports: the access control list for filesystems which may be exported\n#               to NFS clients.  See exports(5).\n#\n# Example for NFSv2 and NFSv3:\n# /srv/homes       hostname1(rw,sync,no_subtree_check) hostname2(ro,sync,no_subtree_check)\n# Example for NFSv4:\n# /srv/nfs4        gss/krb5i(rw,sync,fsid=0,crossmnt,no_subtree_check)\n# /srv/nfs4/homes  gss/krb5i(rw,sync,no_subtree_check)\n/home/deepin-server/nfs  10.20.*(rw)#此处ip只做了部分限制，圆括号里面就是配置权限的。\n```\n### 启动服务\n```bash\nsystemctl start rpcbind nfs-server\n```\n\n### 查看服务状态\n```服务在running态即可\ndeepin-server@deepin-server-PC:~$ sudo systemctl status rpcbind nfs-server\n● rpcbind.service - RPC bind portmap service\n   Loaded: loaded (/lib/systemd/system/rpcbind.service; enabled; vendor preset: enabled)\n   Active: active (running) since Wed 2022-01-05 11:53:19 CST; 1h 56min ago\n     Docs: man:rpcbind(8)\n Main PID: 19304 (rpcbind)\n    Tasks: 1 (limit: 19660)\n   Memory: 608.0K\n   CGroup: /system.slice/rpcbind.service\n           └─19304 /sbin/rpcbind -f -w\n\n1月 05 11:53:19 deepin-server-PC systemd[1]: Starting RPC bind portmap service...\n1月 05 11:53:19 deepin-server-PC systemd[1]: Started RPC bind portmap service.\n\n● nfs-server.service - NFS server and services\n   Loaded: loaded (/lib/systemd/system/nfs-server.service; enabled; vendor preset: enabled)\n   Active: active (exited) since Wed 2022-01-05 11:53:21 CST; 1h 56min ago\n  Process: 19319 ExecStartPre=/usr/sbin/exportfs -r (code=exited, status=0/SUCCESS)\n  Process: 19320 ExecStart=/usr/sbin/rpc.nfsd $RPCNFSDARGS (code=exited, status=0/SUCCESS)\n Main PID: 19320 (code=exited, status=0/SUCCESS)\n\n1月 05 11:53:20 deepin-server-PC systemd[1]: Starting NFS server and services...\n1月 05 11:53:20 deepin-server-PC exportfs[19319]: exportfs: /etc/exports [1]: Neither 'subtree_check' or 'no_subtree_check' specified for export \"10.20.*:/home/deepin-server/Documents/NFS文件目录for-test\".\n1月 05 11:53:20 deepin-server-PC exportfs[19319]:   Assuming default behaviour ('no_subtree_check').\n1月 05 11:53:20 deepin-server-PC exportfs[19319]:   NOTE: this default has changed since nfs-utils version 1.0.x\n1月 05 11:53:21 deepin-server-PC systemd[1]: Started NFS server and services.\ndeepin-server@deepin-server-PC:~$ \n```\n至此服务端算是配置完成了。\n## 客户端配置\n客户端主要就是挂载操作，不过挂载nfs的时候同样需要安装客户端软件\n### 客户端安装\n```bash\nsudo apt-get install nfs-common\n```\n\n### 查看服务端nfs共享信息\n```bash\nshowmount -e 10.20.13.152\nbabyfengfjx@babyfengfjx:~$ showmount -e 10.20.13.152\nExport list for 10.20.13.152:\n/home/deepin-server/Documents/NFS文件目录for-test 10.20.*\nbabyfengfjx@babyfengfjx:~$ \n```\n### 客户端创建挂载目录\n随便在本地客户端创建一个目录作为NFS挂载目录即可\n```bash\nsudo mkdir /home/babyfengfjx/Documents/nfsfile/\n```\n\n### 客户端挂载\n将服务端的NFS共享目录，挂载到本地客户端对应目录即可\n```bash\nsudo mount -t nfs 10.20.13.152:/home/deepin-server/Documents/NFS文件目录for-test /home/babyfengfjx/Documents/nfsfile/\n```\n### 查看并传输文件\n上述操作完成后，此时就可以在客户端对应目录使用NFS存储了，上传新建文件均可以随心所欲。\n### 开机自动挂载\n写入fstab方法并不推荐，如果NFS挂载失败可能会影响设备正常启动 \n#### 写入fstab进行开机自动挂载\n```bash\necho \"10.20.13.152:/home/deepin-server/Documents/NFS文件目录for-test /home/babyfengfjx/Documents/nfsfile/ nfs4 defaults 0 0\" >> /etc/fstab\n mount -av\n```\n#### 通过配置开机自运行脚本\n**原理如下：**\n>新建 /etc/rc.local 文件\n>这种方法的原理是系统开机后会自动启动 rc-local 服务； \n>rc-local 服务启动后就会自动执行 /etc 目录下的 rc.local 脚本； \n>该方法的优点就是不存在第一种方法的三个缺点，脚本执行失败不会出现黑屏弹窗、sleep 不会造成开机黑屏以及执行脚本的用户是 root 用户。 \n\n\n**主要步骤：**\n1. 新建 /etc/rc.local 文件\n2. 粘贴以下模板\n```bash\n#!/bin/sh -e\n# rc.local\n# This script is executed at the end of each multiuser runlevel.\n# Make sure that the script will \"exit 0\" on success or any other\n# value on error.\n# In order to enable or disable this script just change the execution\n# bits.\n# By default this script does nothing.\n01.LitterScript/02.bbsmonitor/bbsmonitor.py >bbs.log 2>&1 &\n# 因为该命令本身就是会以root权限执行，所以不用加sudo\nsleep 5;mount -t nfs 10.20.13.152:/home/deepin-server/Documents/NFS文件目录for-test /home/babyfengfjx/Documents/nfsfile/\nexit 0\n```\n3. 在 exit 0 上方插入你需要自启的命令(一行一个)后保存文件\n4. 给脚本加上 755 权限\nsudo chmod +755 /etc/rc.local\n5. 调试脚本(可选)\nsudo /etc/rc.local # 使用 sudo 模拟 root 用户开机自启 /etc/rc.local 文件\n如果第 5 步模拟启动脚本没有报错，那我们就可以重启电脑看看是否可以成功实现脚本开机自启。重启进入系统后我们可以通过 systemctl status rc-local.service 查看 rc-local 的运行状态，如果结果显示的是 active (exited) 则说明你的脚本已经成功执行，反之如果结果显示 failed,那么你需要检查一下脚本是否哪里有问题。\n\n##### 这里提供可能导致脚本无法正常启动的原因：\n1、执行脚本的用户不一致\n由于 rc.local 开机自启的时候是以 root 用户执行的，这里很多人会忽略了一个问题，很多情况下你的命令是必须要普通用户执行的。比如 conky 和虚拟机(用户A建立的VBox和VM Ware虚拟机用户B无法访问)等。\n假设用户 lolimay 在终端用 VBoxHeadless -s aikuai & 后台启动了虚拟机名 aikuai，那么我们在 rc.local 文件应该用下面这种方式写：\n```su - lolimay -c \"VBoxHeadless -s aikuai &\" # 以 lolimay 用户执行该命令```\n2、多余的 sudo\n前面已经提到 rc.local 开机时是以 root 用户启动的，所以写在 rc.local 文件中命令不需要带有 sudo 前缀(实际上就算你带有了 sudo 前缀也不会产生错误)。\n3、最佳实践\n个人建议每当往 rc.local 文件中添加了一个需要自启的命令时，可以先用 sudo /etc/rc.local 命令模拟一下看看是否能够执行成功(如果执行失败也能够直观地看到出错的原因)，这样能够有效减少你重启电脑来调试的次数。\n\n","source":"_posts/02常见网络存储服务搭建方法.md","raw":"---\ntitle: 常见网络存储服务搭建方法\ncategories: \n- linux\n- 存储服务\ntags:\n- linux\n- ftp\n- NFS\ndate: 2022-06-03 11:21:34\n---\n---\n# Samba服务搭建\n>Samba是在Linux系统上实现SMB协议的一个免费软件，由服务器及客户端程序构成。SMB（Server Messages Block，信息服务块）是一种在局域网上共享文件和打印机的一种通信协议，它为局域网内的不同计算机之间提供文件及打印机等资源的共享服务。\n## 安装服务\n```bash\nsudo apt-get install samba-common samba\n```\n## 创建共享文件夹\n```bash\nsudo mkdir /opt/share\n```\n## 编辑配置文件\n> - 关于samba配置文件，smb.conf总共分为两大部分，分别为“全局设置（GIobal Settings）”和“共享定义（Share Definitions）”。全局设置定义于Samba服务器的整体行为，例如，工作组，主机名等方面。共享定义则用于设置的具体的共享目录或者设备中。\n> - 配置文件绝对路径在：```/etc/samba/smb.conf```\n\n### 全局设置\n- workgroup用于设置在windows中显示的工作组\n- server string是Samba服务器的说明\n- workgroup和server string字段后面的内容可以随便写\n- 通常来说，将Samba服务器的编码设置为UTF-8是比较好的，也能解决显示的问题：```unix charset = UTF-8```\n- 但是这样也会存在问题，UTF-8编码的中文文件名在某些系统下面会乱码，Samba提供了dos charset这个字段。下面这条配置命令为哪些不认识的Unicode的Windows系统使用GBK编码:```dos charset = cp936```\n- security字段设置了用户登录的验证方式，share和user是最常用到的两种。share方式允许任何用户登录到系统，而不用提供用户名和口令,但是由于Samba是默认要使用验证方式的，所以这里就要讲到user方式。这种方式要求用户提供账户信息供服务器验证，但是要使用user验证，Samba的配置文件里面就应该包含这一行:```security = user```\n### 共享设置\n这个文件叫做smb.conf（位于/etc或者/etc/samba目录下面），可以用uos系统自带的文本编辑器打开，在末尾输入：\n```bash\n[share] #\"[]\" 中的文字表示共享目录名字，可以随意设置\n    comment = Linux Share　 #comment字段用于设置这个共享目录的描述\n    path = /opt/share　　　　 #share指定了共享目录的路径\n    public = yes　　　　　　 #表示在windows的“网上邻居”中可见\n    writeable = no　　　　　 #writeable表示设置目录是否可写（yes是可写的意思）\n    browseable = yes　　　 #表示在windows的“网上邻居”中可见\n    guest ok = no 　　　　　#告诉Samba服务器这个共享目录允许匿名访问\n```\n## 添加用户\n\n```bash\nsudo useradd smbuser  # 新增一个叫smbuser的用户\nsudo smbpasswd -a smbuser  # 给这个新增用户创建samb共享密码\nNew SMB password:\nRetype new SMB password:\nAdded user smbuser\n```\n后面就可以使用带-U参数的smbpasswd命令修改已经有用户的口令。如果用户希望本地修改服务器上自己的口令，可以使用-r参数。下面的命令用户修改在服务器smbserver上smbuser用户的口令了\n\n```bash\nsmbpasswd -r smbserver -U smbuser\n```\n## 赋予权限\nsmbuser对共享目录写权限,一下配置需要写成yes\n```bash\nwriteable = yes\n```\n如果只写writeable = yes是远远不够的，如果服务器上的这么目录本身对smbuser不可写的话，就需要添加以下命令：\n```bash\nsudo chown smbuser:smbuser /opt/share\n```\n## 服务启动、停止、重启\n### 启动服务：```service smbd start```\n### 停止服务：```service smbd stop```\n### 重启服务：```service smbd restart```\n### 查看服务状态：```service smbd status```\n```bash\ndeepin@wh-k8snode-70:/etc/samba$ service smbd status\n● smbd.service - Samba SMB Daemon\n   Loaded: loaded (/lib/systemd/system/smbd.service; enabled; vendor preset: enabled)\n   Active: active (running) since Mon 2022-06-20 11:50:46 CST; 1h 57min ago\n     Docs: man:smbd(8)\n           man:samba(7)\n           man:smb.conf(5)\n  Process: 20165 ExecStartPre=/usr/share/samba/update-apparmor-samba-profile (code=exited, status=0/SUCCESS)\n Main PID: 20174 (smbd)\n   Status: \"smbd: ready to serve connections...\"\n    Tasks: 6 (limit: 4915)\n   Memory: 26.7M\n   CGroup: /system.slice/smbd.service\n           ├─ 8209 /usr/sbin/smbd --foreground --no-process-group\n           ├─10619 /usr/sbin/smbd --foreground --no-process-group\n           ├─20174 /usr/sbin/smbd --foreground --no-process-group\n           ├─20176 /usr/sbin/smbd --foreground --no-process-group\n           ├─20177 /usr/sbin/smbd --foreground --no-process-group\n           └─20178 /usr/sbin/smbd --foreground --no-process-group\n\n```\n## 常见问题\n1. 修改配置文件后，服务无法启动。\n> 在实际修改配置文件过程中，可能在参数后面有一些看不见的字符，会导致服务无法正常启动，最好检查每个修改的参数后面无一些空格或者其他特殊符号。\n2. 创建了几个samba用户，想通过不同的用户来对不同的文件进行访问，但是出现了报错（内容是不允许一个用户使用一个以上用户名与服务器或者共享资源的多重连接）\n**解决：**\n> 先断开现有的samba连接：cmd命令行下执行net use * /del /X\n> 再重新选择你要使用的目录，使用对应的用户名进行登录就可以了\n\n3. 配置好samba服务器，但是测试过程中会出现以下报错：\n>主要原因是因为服务器的防火墙没有关，可以选择在文件/etc/security/limits.conf下输入*　-   nofile   16384,然后shutdown -r now 重启一下就可以了\n\n4. samba服务器已经可以让windows通过网络来访问samba，但是没有办法写入，修改，删除，只能查看,出现这样的问题可能就是我们自己在配置的时候出现问题了，如果我的用户是deepin:\n```#chmod  777 FileServer```   　--这种操作就可以让组samba里的用户进行写操作了。\n```bash\n[deepin]\n   create mode =0664\n   force create mode=0750   #文件新建的权限为750\n   directory mode=0750      　#新建文件夹的权限只有组里的用户查看，其他组里的用户都没有权限进入\n```\n# FTP服务搭建\n## vsftpd配置使用\n>vsftpd 是Linus上非常安全好用的ftp服务，只需要简单的安装后就可以搭建起ftp服务；\n>该服务主要的配置文件就是vsftpd.conf ,在deepin/uos系统中的绝对路径是：/etc/vsftpd.conf\n### 安装\n只需要简单的进行安装配置即可，前提是你开启了开发者模式我们才能通过终端安装软件\n```bash\nsudo apt install vsftpd\n```\n如果提示没有找到对应安装包，则可能是没有进行仓库的更新连接，执行如下命令即可\n```bash\nsudo apt update \n```\n### 服务的启停配置\n#### 启动服务\n```bash\nservice vsftpd start\n```\n#### 停止服务\n```bash\nservice vsftpd stop\n```\n#### 重启服务\n```bash\nservice vsftpd restart\n```\n#### 查看服务状态\n```bash\nservice vsftpd status\n#执行后结果如下：active则表示正常运行，如果失败了则可以通过提示信息查询对应问题\nbabyfengfjx@babyfengfjx:~$ service vsftpd status \n● vsftpd.service - vsftpd FTP server\n   Loaded: loaded (/lib/systemd/system/vsftpd.service; enabled; vendor preset: enabled)\n   Active: active (running) since Sat 2021-10-09 16:22:48 CST; 1s ago\n  Process: 18334 ExecStartPre=/bin/mkdir -p /var/run/vsftpd/empty (code=exited, status=0/SUCCESS)\n Main PID: 18335 (vsftpd)\n    Tasks: 1 (limit: 4915)\n   Memory: 568.0K\n   CGroup: /system.slice/vsftpd.service\n           └─18335 /usr/sbin/vsftpd /etc/vsftpd.conf\n```\n#### 配置文件展示\n在使用该服务过程中，主要就是这些配置文件该如何配置，很多同学在实际配置过程中很难一次配置成功，这里就给出一个实际可用的配置参数以供参考 \n\n配置文件路径：/etc/vsftpd.conf\n\n配置过程中尽量是将匿名登录关闭，使用本地用户登录，以确保安全。 \n```bash\n# Example config file /etc/vsftpd.conf\n#\n# The default compiled in settings are fairly paranoid. This sample file\n# loosens things up a bit, to make the ftp daemon more usable.\n# Please see vsftpd.conf.5 for all compiled in defaults.\n#\n# READ THIS: This example file is NOT an exhaustive list of vsftpd options.\n# Please read the vsftpd.conf.5 manual page to get a full idea of vsftpd's\n# capabilities.\n#\n#\n# Run standalone?  vsftpd can run either from an inetd or as a standalone\n# daemon started from an initscript.\nlisten=YES\n#\n# This directive enables listening on IPv6 sockets. By default, listening\n# on the IPv6 \"any\" address (::) will accept connections from both IPv6\n# and IPv4 clients. It is not necessary to listen on *both* IPv4 and IPv6\n# sockets. If you want that (perhaps because you want to listen on specific\n# addresses) then you must run two copies of vsftpd with two configuration\n# files.\nlisten_ipv6=NO\n#\n# Allow anonymous FTP? (Disabled by default).\nanonymous_enable=NO\n#\n# Uncomment this to allow local users to log in.\nlocal_enable=YES\n#\n# Uncomment this to enable any form of FTP write command.\nwrite_enable=YES\n#\n# Default umask for local users is 077. You may wish to change this to 022,\n# if your users expect that (022 is used by most other ftpd's)\n#local_umask=022\n#\n# Uncomment this to allow the anonymous FTP user to upload files. This only\n# has an effect if the above global write enable is activated. Also, you will\n# obviously need to create a directory writable by the FTP user.\n#anon_upload_enable=YES\n#\n# Uncomment this if you want the anonymous FTP user to be able to create\n# new directories.\n#anon_mkdir_write_enable=YES\n#\n# Activate directory messages - messages given to remote users when they\n# go into a certain directory.\ndirmessage_enable=YES\n#\n# If enabled, vsftpd will display directory listings with the time\n# in  your  local  time  zone.  The default is to display GMT. The\n# times returned by the MDTM FTP command are also affected by this\n# option.\nuse_localtime=YES\n#\n# Activate logging of uploads/downloads.\nxferlog_enable=YES\n#\n# Make sure PORT transfer connections originate from port 20 (ftp-data).\nconnect_from_port_20=YES\n#\n# If you want, you can arrange for uploaded anonymous files to be owned by\n# a different user. Note! Using \"root\" for uploaded files is not\n# recommended!\n#chown_uploads=YES\n#chown_username=whoever\n#\n# You may override where the log file goes if you like. The default is shown\n# below.\n#xferlog_file=/var/log/vsftpd.log\n#\n# If you want, you can have your log file in standard ftpd xferlog format.\n# Note that the default log file location is /var/log/xferlog in this case.\n#xferlog_std_format=YES\n#\n# You may change the default value for timing out an idle session.\n#idle_session_timeout=600\n#\n# You may change the default value for timing out a data connection.\n#data_connection_timeout=120\n#\n# It is recommended that you define on your system a unique user which the\n# ftp server can use as a totally isolated and unprivileged user.\n#nopriv_user=ftpsecure\n#\n# Enable this and the server will recognise asynchronous ABOR requests. Not\n# recommended for security (the code is non-trivial). Not enabling it,\n# however, may confuse older FTP clients.\n#async_abor_enable=YES\n#\n# By default the server will pretend to allow ASCII mode but in fact ignore\n# the request. Turn on the below options to have the server actually do ASCII\n# mangling on files when in ASCII mode.\n# Beware that on some FTP servers, ASCII support allows a denial of service\n# attack (DoS) via the command \"SIZE /big/file\" in ASCII mode. vsftpd\n# predicted this attack and has always been safe, reporting the size of the\n# raw file.\n# ASCII mangling is a horrible feature of the protocol.\n#ascii_upload_enable=YES\n#ascii_download_enable=YES\n#\n# You may fully customise the login banner string:\n#ftpd_banner=Welcome to blah FTP service.\n#\n# You may specify a file of disallowed anonymous e-mail addresses. Apparently\n# useful for combatting certain DoS attacks.\n#deny_email_enable=YES\n# (default follows)\n#banned_email_file=/etc/vsftpd.banned_emails\n#\n# You may restrict local users to their home directories.  See the FAQ for\n# the possible risks in this before using chroot_local_user or\n# chroot_list_enable below.\n# chroot_local_user=YES\n#\n# You may specify an explicit list of local users to chroot() to their home\n# directory. If chroot_local_user is YES, then this list becomes a list of\n# users to NOT chroot().\n# (Warning! chroot'ing can be very dangerous. If using chroot, make sure that\n# the user does not have write access to the top level directory within the\n# chroot)\n# chroot_local_user=YES\n# chroot_list_enable=YES\n# (default follows)\n# chroot_list_file=/etc/vsftpd.chroot_list\n#\n# You may activate the \"-R\" option to the builtin ls. This is disabled by\n# default to avoid remote users being able to cause excessive I/O on large\n# sites. However, some broken FTP clients such as \"ncftp\" and \"mirror\" assume\n# the presence of the \"-R\" option, so there is a strong case for enabling it.\n#ls_recurse_enable=YES\n#\n# Customization\n#\n# Some of vsftpd's settings don't fit the filesystem layout by\n# default.\n#\n# This option should be the name of a directory which is empty.  Also, the\n# directory should not be writable by the ftp user. This directory is used\n# as a secure chroot() jail at times vsftpd does not require filesystem\n# access.\nsecure_chroot_dir=/var/run/vsftpd/empty\n#\n# This string is the name of the PAM service vsftpd will use.\npam_service_name=vsftpd\n#\n# This option specifies the location of the RSA certificate to use for SSL\n# encrypted connections.\nrsa_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pem\nrsa_private_key_file=/etc/ssl/private/ssl-cert-snakeoil.key\nssl_enable=NO\n\n\n#\n# Uncomment this to indicate that vsftpd use a utf8 filesystem.\n#utf8_filesystem=YES\n```\n\n#### 实际开启的配置项如下：\n按照如下简单的配置就可以通过本地用户进行访问了 \n```bash\nlisten=YES\nlisten_ipv6=NO\nanonymous_enable=NO\nlocal_enable=YES\nwrite_enable=YES\ndirmessage_enable=YES\nuse_localtime=YES\nxferlog_enable=YES\nconnect_from_port_20=YES\nsecure_chroot_dir=/var/run/vsftpd/empty\npam_service_name=vsftpd\nrsa_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pem\nrsa_private_key_file=/etc/ssl/private/ssl-cert-snakeoil.key\nssl_enable=NO\n```\n#### 遇到的问题\n- 无法配置指定根目录，也就是任何本地账户登录后的目录都是根目录，无法自定义配置指定目录，配置后也不生效； \n- 在添加新用户配置成nologin时，是无法正常使用该类用户进行访问的； \n- 添加的新用户，需要先登录一次后，方可使用该账号访问ftp; \n# SFTP服务搭建\n## 群组配置---服务端\n```bash\nsudo groupadd sftp\ncat /etc/group  # 确认组新建成功\nsudo vim /etc/group #修改 sftp:x:1002:\nsudo useradd -g sftp -s /bin/false mysftp \nsudo passwd mysftp # 设置新密码为服务器访问密码\n```\n## 共享目录---服务端\n```bash\nsudo mkdir -p /data/sftp/mysftp\nsudo usermod -d /data/sftp/mysftp mysftp\n```\n## 配置文件修改---服务端\n```bash\nsudo vim /etc/ssh/sshd_config\nSubsystem sftp /usr/libexec/openssh/sftp-server # 该行原本配置，需要手动注释掉\n并在文件最后面添加如下几行内容然后保存\nSubsystem sftp internal-sftp\nMatch Group sftp\nChrootDirectory /data/sftp/%u\nForceCommand internal-sftp\nAllowTcpForwarding no\nX11Forwarding no\n```\n## 目录授权与新建---服务端\n```bash\nsudo chown root:sftp /data/sftp/mysftp\nsudo chmod 755 /data/sftp/mysftp\nsudo mkdir /data/sftp/mysftp/upload\nsudo chown mysftp:sftp /data/sftp/mysftp/upload\nsudo chmod 755 /data/sftp/mysftp/upload\n```\n## 重启服务---服务端\n```bash\nsudo systemctl  restart sshd.service   # 重启服务时如果提示服务不存在，则先添加如下服务\nsystemctl enable ssh.service \n# 再执行：\nsudo systemctl  restart sshd.service \n```\n## 访问服务器---客户端\n进入文件管理器或我的电脑\n输入---例如sftp：//10.20.32.** （根据实际服务端IP输入，并键如账号密码，即可访问）\n# NFS服务搭建\n## 服务端\n### 工具安装\n```bash\nsudo apt-get install nfs-kernel-server # 安装 NFS服务器端\n```\n\n### 创建共享文件夹\n```bash\nsudo mkdir /home/deepin-server/nfs       # 路径可以根据自己需要设置\nsudo chmod -R 777 /home/deepin-server/nfs    # 设置共享目录权限\n```\n\n### 修改配置文件\n```vim /etc/exports```\n```bash\n配置文件虽然只有一句，但是其中还是有很多讲究； \n共享文件可执行权限有： \n      ro           只读访问 \n      rw           读写访问 \n      sync          所有数据在请求时写入共享 \n      hide          在NFS共享目录中不共享其子目录 \n      no_hide         共享NFS目录的子目录 \n      all_squash       共享文件的UID和GID映射匿名用户anonymous，适合公用目录。 \n      no_all_squash      保留共享文件的UID和GID（默认） \n      root_squash       root用户的所有请求映射成如anonymous用户一样的权限（默认） \n      no_root_squas      root用户具有根目录的完全管理访问权限 \nip配置一般需要进行限定，最好不要使用* ，不然存在安全问题，可以限定具体ip或者ip段才能挂载。 \n```\n\n### 配置文件修改如下：\n```\ndeepin-server@deepin-server-PC:~$ cat /etc/exports \n# /etc/exports: the access control list for filesystems which may be exported\n#               to NFS clients.  See exports(5).\n#\n# Example for NFSv2 and NFSv3:\n# /srv/homes       hostname1(rw,sync,no_subtree_check) hostname2(ro,sync,no_subtree_check)\n# Example for NFSv4:\n# /srv/nfs4        gss/krb5i(rw,sync,fsid=0,crossmnt,no_subtree_check)\n# /srv/nfs4/homes  gss/krb5i(rw,sync,no_subtree_check)\n/home/deepin-server/nfs  10.20.*(rw)#此处ip只做了部分限制，圆括号里面就是配置权限的。\n```\n### 启动服务\n```bash\nsystemctl start rpcbind nfs-server\n```\n\n### 查看服务状态\n```服务在running态即可\ndeepin-server@deepin-server-PC:~$ sudo systemctl status rpcbind nfs-server\n● rpcbind.service - RPC bind portmap service\n   Loaded: loaded (/lib/systemd/system/rpcbind.service; enabled; vendor preset: enabled)\n   Active: active (running) since Wed 2022-01-05 11:53:19 CST; 1h 56min ago\n     Docs: man:rpcbind(8)\n Main PID: 19304 (rpcbind)\n    Tasks: 1 (limit: 19660)\n   Memory: 608.0K\n   CGroup: /system.slice/rpcbind.service\n           └─19304 /sbin/rpcbind -f -w\n\n1月 05 11:53:19 deepin-server-PC systemd[1]: Starting RPC bind portmap service...\n1月 05 11:53:19 deepin-server-PC systemd[1]: Started RPC bind portmap service.\n\n● nfs-server.service - NFS server and services\n   Loaded: loaded (/lib/systemd/system/nfs-server.service; enabled; vendor preset: enabled)\n   Active: active (exited) since Wed 2022-01-05 11:53:21 CST; 1h 56min ago\n  Process: 19319 ExecStartPre=/usr/sbin/exportfs -r (code=exited, status=0/SUCCESS)\n  Process: 19320 ExecStart=/usr/sbin/rpc.nfsd $RPCNFSDARGS (code=exited, status=0/SUCCESS)\n Main PID: 19320 (code=exited, status=0/SUCCESS)\n\n1月 05 11:53:20 deepin-server-PC systemd[1]: Starting NFS server and services...\n1月 05 11:53:20 deepin-server-PC exportfs[19319]: exportfs: /etc/exports [1]: Neither 'subtree_check' or 'no_subtree_check' specified for export \"10.20.*:/home/deepin-server/Documents/NFS文件目录for-test\".\n1月 05 11:53:20 deepin-server-PC exportfs[19319]:   Assuming default behaviour ('no_subtree_check').\n1月 05 11:53:20 deepin-server-PC exportfs[19319]:   NOTE: this default has changed since nfs-utils version 1.0.x\n1月 05 11:53:21 deepin-server-PC systemd[1]: Started NFS server and services.\ndeepin-server@deepin-server-PC:~$ \n```\n至此服务端算是配置完成了。\n## 客户端配置\n客户端主要就是挂载操作，不过挂载nfs的时候同样需要安装客户端软件\n### 客户端安装\n```bash\nsudo apt-get install nfs-common\n```\n\n### 查看服务端nfs共享信息\n```bash\nshowmount -e 10.20.13.152\nbabyfengfjx@babyfengfjx:~$ showmount -e 10.20.13.152\nExport list for 10.20.13.152:\n/home/deepin-server/Documents/NFS文件目录for-test 10.20.*\nbabyfengfjx@babyfengfjx:~$ \n```\n### 客户端创建挂载目录\n随便在本地客户端创建一个目录作为NFS挂载目录即可\n```bash\nsudo mkdir /home/babyfengfjx/Documents/nfsfile/\n```\n\n### 客户端挂载\n将服务端的NFS共享目录，挂载到本地客户端对应目录即可\n```bash\nsudo mount -t nfs 10.20.13.152:/home/deepin-server/Documents/NFS文件目录for-test /home/babyfengfjx/Documents/nfsfile/\n```\n### 查看并传输文件\n上述操作完成后，此时就可以在客户端对应目录使用NFS存储了，上传新建文件均可以随心所欲。\n### 开机自动挂载\n写入fstab方法并不推荐，如果NFS挂载失败可能会影响设备正常启动 \n#### 写入fstab进行开机自动挂载\n```bash\necho \"10.20.13.152:/home/deepin-server/Documents/NFS文件目录for-test /home/babyfengfjx/Documents/nfsfile/ nfs4 defaults 0 0\" >> /etc/fstab\n mount -av\n```\n#### 通过配置开机自运行脚本\n**原理如下：**\n>新建 /etc/rc.local 文件\n>这种方法的原理是系统开机后会自动启动 rc-local 服务； \n>rc-local 服务启动后就会自动执行 /etc 目录下的 rc.local 脚本； \n>该方法的优点就是不存在第一种方法的三个缺点，脚本执行失败不会出现黑屏弹窗、sleep 不会造成开机黑屏以及执行脚本的用户是 root 用户。 \n\n\n**主要步骤：**\n1. 新建 /etc/rc.local 文件\n2. 粘贴以下模板\n```bash\n#!/bin/sh -e\n# rc.local\n# This script is executed at the end of each multiuser runlevel.\n# Make sure that the script will \"exit 0\" on success or any other\n# value on error.\n# In order to enable or disable this script just change the execution\n# bits.\n# By default this script does nothing.\n01.LitterScript/02.bbsmonitor/bbsmonitor.py >bbs.log 2>&1 &\n# 因为该命令本身就是会以root权限执行，所以不用加sudo\nsleep 5;mount -t nfs 10.20.13.152:/home/deepin-server/Documents/NFS文件目录for-test /home/babyfengfjx/Documents/nfsfile/\nexit 0\n```\n3. 在 exit 0 上方插入你需要自启的命令(一行一个)后保存文件\n4. 给脚本加上 755 权限\nsudo chmod +755 /etc/rc.local\n5. 调试脚本(可选)\nsudo /etc/rc.local # 使用 sudo 模拟 root 用户开机自启 /etc/rc.local 文件\n如果第 5 步模拟启动脚本没有报错，那我们就可以重启电脑看看是否可以成功实现脚本开机自启。重启进入系统后我们可以通过 systemctl status rc-local.service 查看 rc-local 的运行状态，如果结果显示的是 active (exited) 则说明你的脚本已经成功执行，反之如果结果显示 failed,那么你需要检查一下脚本是否哪里有问题。\n\n##### 这里提供可能导致脚本无法正常启动的原因：\n1、执行脚本的用户不一致\n由于 rc.local 开机自启的时候是以 root 用户执行的，这里很多人会忽略了一个问题，很多情况下你的命令是必须要普通用户执行的。比如 conky 和虚拟机(用户A建立的VBox和VM Ware虚拟机用户B无法访问)等。\n假设用户 lolimay 在终端用 VBoxHeadless -s aikuai & 后台启动了虚拟机名 aikuai，那么我们在 rc.local 文件应该用下面这种方式写：\n```su - lolimay -c \"VBoxHeadless -s aikuai &\" # 以 lolimay 用户执行该命令```\n2、多余的 sudo\n前面已经提到 rc.local 开机时是以 root 用户启动的，所以写在 rc.local 文件中命令不需要带有 sudo 前缀(实际上就算你带有了 sudo 前缀也不会产生错误)。\n3、最佳实践\n个人建议每当往 rc.local 文件中添加了一个需要自启的命令时，可以先用 sudo /etc/rc.local 命令模拟一下看看是否能够执行成功(如果执行失败也能够直观地看到出错的原因)，这样能够有效减少你重启电脑来调试的次数。\n\n","slug":"02常见网络存储服务搭建方法","published":1,"updated":"2023-01-03T05:29:32.542Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clciheil40003rdxhfolwhwtg","content":"<hr>\n<h1 id=\"Samba服务搭建\"><a href=\"#Samba服务搭建\" class=\"headerlink\" title=\"Samba服务搭建\"></a>Samba服务搭建</h1><blockquote>\n<p>Samba是在Linux系统上实现SMB协议的一个免费软件，由服务器及客户端程序构成。SMB（Server Messages Block，信息服务块）是一种在局域网上共享文件和打印机的一种通信协议，它为局域网内的不同计算机之间提供文件及打印机等资源的共享服务。</p>\n</blockquote>\n<h2 id=\"安装服务\"><a href=\"#安装服务\" class=\"headerlink\" title=\"安装服务\"></a>安装服务</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get install samba-common samba</span><br></pre></td></tr></table></figure>\n<h2 id=\"创建共享文件夹\"><a href=\"#创建共享文件夹\" class=\"headerlink\" title=\"创建共享文件夹\"></a>创建共享文件夹</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo <span class=\"built_in\">mkdir</span> /opt/share</span><br></pre></td></tr></table></figure>\n<h2 id=\"编辑配置文件\"><a href=\"#编辑配置文件\" class=\"headerlink\" title=\"编辑配置文件\"></a>编辑配置文件</h2><blockquote>\n<ul>\n<li>关于samba配置文件，smb.conf总共分为两大部分，分别为“全局设置（GIobal Settings）”和“共享定义（Share Definitions）”。全局设置定义于Samba服务器的整体行为，例如，工作组，主机名等方面。共享定义则用于设置的具体的共享目录或者设备中。</li>\n<li>配置文件绝对路径在：<code>/etc/samba/smb.conf</code></li>\n</ul>\n</blockquote>\n<h3 id=\"全局设置\"><a href=\"#全局设置\" class=\"headerlink\" title=\"全局设置\"></a>全局设置</h3><ul>\n<li>workgroup用于设置在windows中显示的工作组</li>\n<li>server string是Samba服务器的说明</li>\n<li>workgroup和server string字段后面的内容可以随便写</li>\n<li>通常来说，将Samba服务器的编码设置为UTF-8是比较好的，也能解决显示的问题：<code>unix charset = UTF-8</code></li>\n<li>但是这样也会存在问题，UTF-8编码的中文文件名在某些系统下面会乱码，Samba提供了dos charset这个字段。下面这条配置命令为哪些不认识的Unicode的Windows系统使用GBK编码:<code>dos charset = cp936</code></li>\n<li>security字段设置了用户登录的验证方式，share和user是最常用到的两种。share方式允许任何用户登录到系统，而不用提供用户名和口令,但是由于Samba是默认要使用验证方式的，所以这里就要讲到user方式。这种方式要求用户提供账户信息供服务器验证，但是要使用user验证，Samba的配置文件里面就应该包含这一行:<code>security = user</code></li>\n</ul>\n<h3 id=\"共享设置\"><a href=\"#共享设置\" class=\"headerlink\" title=\"共享设置\"></a>共享设置</h3><p>这个文件叫做smb.conf（位于&#x2F;etc或者&#x2F;etc&#x2F;samba目录下面），可以用uos系统自带的文本编辑器打开，在末尾输入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[share] <span class=\"comment\">#&quot;[]&quot; 中的文字表示共享目录名字，可以随意设置</span></span><br><span class=\"line\">    comment = Linux Share　 <span class=\"comment\">#comment字段用于设置这个共享目录的描述</span></span><br><span class=\"line\">    path = /opt/share　　　　 <span class=\"comment\">#share指定了共享目录的路径</span></span><br><span class=\"line\">    public = <span class=\"built_in\">yes</span>　　　　　　 <span class=\"comment\">#表示在windows的“网上邻居”中可见</span></span><br><span class=\"line\">    writeable = no　　　　　 <span class=\"comment\">#writeable表示设置目录是否可写（yes是可写的意思）</span></span><br><span class=\"line\">    browseable = <span class=\"built_in\">yes</span>　　　 <span class=\"comment\">#表示在windows的“网上邻居”中可见</span></span><br><span class=\"line\">    guest ok = no 　　　　　<span class=\"comment\">#告诉Samba服务器这个共享目录允许匿名访问</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"添加用户\"><a href=\"#添加用户\" class=\"headerlink\" title=\"添加用户\"></a>添加用户</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo useradd smbuser  <span class=\"comment\"># 新增一个叫smbuser的用户</span></span><br><span class=\"line\">sudo smbpasswd -a smbuser  <span class=\"comment\"># 给这个新增用户创建samb共享密码</span></span><br><span class=\"line\">New SMB password:</span><br><span class=\"line\">Retype new SMB password:</span><br><span class=\"line\">Added user smbuser</span><br></pre></td></tr></table></figure>\n<p>后面就可以使用带-U参数的smbpasswd命令修改已经有用户的口令。如果用户希望本地修改服务器上自己的口令，可以使用-r参数。下面的命令用户修改在服务器smbserver上smbuser用户的口令了</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">smbpasswd -r smbserver -U smbuser</span><br></pre></td></tr></table></figure>\n<h2 id=\"赋予权限\"><a href=\"#赋予权限\" class=\"headerlink\" title=\"赋予权限\"></a>赋予权限</h2><p>smbuser对共享目录写权限,一下配置需要写成yes</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">writeable = <span class=\"built_in\">yes</span></span><br></pre></td></tr></table></figure>\n<p>如果只写writeable &#x3D; yes是远远不够的，如果服务器上的这么目录本身对smbuser不可写的话，就需要添加以下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo <span class=\"built_in\">chown</span> smbuser:smbuser /opt/share</span><br></pre></td></tr></table></figure>\n<h2 id=\"服务启动、停止、重启\"><a href=\"#服务启动、停止、重启\" class=\"headerlink\" title=\"服务启动、停止、重启\"></a>服务启动、停止、重启</h2><h3 id=\"启动服务：service-smbd-start\"><a href=\"#启动服务：service-smbd-start\" class=\"headerlink\" title=\"启动服务：service smbd start\"></a>启动服务：<code>service smbd start</code></h3><h3 id=\"停止服务：service-smbd-stop\"><a href=\"#停止服务：service-smbd-stop\" class=\"headerlink\" title=\"停止服务：service smbd stop\"></a>停止服务：<code>service smbd stop</code></h3><h3 id=\"重启服务：service-smbd-restart\"><a href=\"#重启服务：service-smbd-restart\" class=\"headerlink\" title=\"重启服务：service smbd restart\"></a>重启服务：<code>service smbd restart</code></h3><h3 id=\"查看服务状态：service-smbd-status\"><a href=\"#查看服务状态：service-smbd-status\" class=\"headerlink\" title=\"查看服务状态：service smbd status\"></a>查看服务状态：<code>service smbd status</code></h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">deepin@wh-k8snode-70:/etc/samba$ service smbd status</span><br><span class=\"line\">● smbd.service - Samba SMB Daemon</span><br><span class=\"line\">   Loaded: loaded (/lib/systemd/system/smbd.service; enabled; vendor preset: enabled)</span><br><span class=\"line\">   Active: active (running) since Mon 2022-06-20 11:50:46 CST; 1h 57min ago</span><br><span class=\"line\">     Docs: man:smbd(8)</span><br><span class=\"line\">           man:samba(7)</span><br><span class=\"line\">           man:smb.conf(5)</span><br><span class=\"line\">  Process: 20165 ExecStartPre=/usr/share/samba/update-apparmor-samba-profile (code=exited, status=0/SUCCESS)</span><br><span class=\"line\"> Main PID: 20174 (smbd)</span><br><span class=\"line\">   Status: <span class=\"string\">&quot;smbd: ready to serve connections...&quot;</span></span><br><span class=\"line\">    Tasks: 6 (<span class=\"built_in\">limit</span>: 4915)</span><br><span class=\"line\">   Memory: 26.7M</span><br><span class=\"line\">   CGroup: /system.slice/smbd.service</span><br><span class=\"line\">           ├─ 8209 /usr/sbin/smbd --foreground --no-process-group</span><br><span class=\"line\">           ├─10619 /usr/sbin/smbd --foreground --no-process-group</span><br><span class=\"line\">           ├─20174 /usr/sbin/smbd --foreground --no-process-group</span><br><span class=\"line\">           ├─20176 /usr/sbin/smbd --foreground --no-process-group</span><br><span class=\"line\">           ├─20177 /usr/sbin/smbd --foreground --no-process-group</span><br><span class=\"line\">           └─20178 /usr/sbin/smbd --foreground --no-process-group</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h2><ol>\n<li><p>修改配置文件后，服务无法启动。</p>\n<blockquote>\n<p>在实际修改配置文件过程中，可能在参数后面有一些看不见的字符，会导致服务无法正常启动，最好检查每个修改的参数后面无一些空格或者其他特殊符号。</p>\n</blockquote>\n</li>\n<li><p>创建了几个samba用户，想通过不同的用户来对不同的文件进行访问，但是出现了报错（内容是不允许一个用户使用一个以上用户名与服务器或者共享资源的多重连接）<br><strong>解决：</strong></p>\n<blockquote>\n<p>先断开现有的samba连接：cmd命令行下执行net use * &#x2F;del &#x2F;X<br>再重新选择你要使用的目录，使用对应的用户名进行登录就可以了</p>\n</blockquote>\n</li>\n<li><p>配置好samba服务器，但是测试过程中会出现以下报错：</p>\n<blockquote>\n<p>主要原因是因为服务器的防火墙没有关，可以选择在文件&#x2F;etc&#x2F;security&#x2F;limits.conf下输入*　-   nofile   16384,然后shutdown -r now 重启一下就可以了</p>\n</blockquote>\n</li>\n<li><p>samba服务器已经可以让windows通过网络来访问samba，但是没有办法写入，修改，删除，只能查看,出现这样的问题可能就是我们自己在配置的时候出现问题了，如果我的用户是deepin:</p>\n<figure class=\"highlight plaintext\"><figcaption><span>777 FileServer```   　--这种操作就可以让组samba里的用户进行写操作了。</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\">```bash</span><br><span class=\"line\">[deepin]</span><br><span class=\"line\">   create mode =0664</span><br><span class=\"line\">   force create mode=0750   #文件新建的权限为750</span><br><span class=\"line\">   directory mode=0750      　#新建文件夹的权限只有组里的用户查看，其他组里的用户都没有权限进入</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h1 id=\"FTP服务搭建\"><a href=\"#FTP服务搭建\" class=\"headerlink\" title=\"FTP服务搭建\"></a>FTP服务搭建</h1><h2 id=\"vsftpd配置使用\"><a href=\"#vsftpd配置使用\" class=\"headerlink\" title=\"vsftpd配置使用\"></a>vsftpd配置使用</h2><blockquote>\n<p>vsftpd 是Linus上非常安全好用的ftp服务，只需要简单的安装后就可以搭建起ftp服务；<br>该服务主要的配置文件就是vsftpd.conf ,在deepin&#x2F;uos系统中的绝对路径是：&#x2F;etc&#x2F;vsftpd.conf</p>\n</blockquote>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>只需要简单的进行安装配置即可，前提是你开启了开发者模式我们才能通过终端安装软件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt install vsftpd</span><br></pre></td></tr></table></figure>\n<p>如果提示没有找到对应安装包，则可能是没有进行仓库的更新连接，执行如下命令即可</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt update </span><br></pre></td></tr></table></figure>\n<h3 id=\"服务的启停配置\"><a href=\"#服务的启停配置\" class=\"headerlink\" title=\"服务的启停配置\"></a>服务的启停配置</h3><h4 id=\"启动服务\"><a href=\"#启动服务\" class=\"headerlink\" title=\"启动服务\"></a>启动服务</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">service vsftpd start</span><br></pre></td></tr></table></figure>\n<h4 id=\"停止服务\"><a href=\"#停止服务\" class=\"headerlink\" title=\"停止服务\"></a>停止服务</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">service vsftpd stop</span><br></pre></td></tr></table></figure>\n<h4 id=\"重启服务\"><a href=\"#重启服务\" class=\"headerlink\" title=\"重启服务\"></a>重启服务</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">service vsftpd restart</span><br></pre></td></tr></table></figure>\n<h4 id=\"查看服务状态\"><a href=\"#查看服务状态\" class=\"headerlink\" title=\"查看服务状态\"></a>查看服务状态</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">service vsftpd status</span><br><span class=\"line\"><span class=\"comment\">#执行后结果如下：active则表示正常运行，如果失败了则可以通过提示信息查询对应问题</span></span><br><span class=\"line\">babyfengfjx@babyfengfjx:~$ service vsftpd status </span><br><span class=\"line\">● vsftpd.service - vsftpd FTP server</span><br><span class=\"line\">   Loaded: loaded (/lib/systemd/system/vsftpd.service; enabled; vendor preset: enabled)</span><br><span class=\"line\">   Active: active (running) since Sat 2021-10-09 16:22:48 CST; 1s ago</span><br><span class=\"line\">  Process: 18334 ExecStartPre=/bin/mkdir -p /var/run/vsftpd/empty (code=exited, status=0/SUCCESS)</span><br><span class=\"line\"> Main PID: 18335 (vsftpd)</span><br><span class=\"line\">    Tasks: 1 (<span class=\"built_in\">limit</span>: 4915)</span><br><span class=\"line\">   Memory: 568.0K</span><br><span class=\"line\">   CGroup: /system.slice/vsftpd.service</span><br><span class=\"line\">           └─18335 /usr/sbin/vsftpd /etc/vsftpd.conf</span><br></pre></td></tr></table></figure>\n<h4 id=\"配置文件展示\"><a href=\"#配置文件展示\" class=\"headerlink\" title=\"配置文件展示\"></a>配置文件展示</h4><p>在使用该服务过程中，主要就是这些配置文件该如何配置，很多同学在实际配置过程中很难一次配置成功，这里就给出一个实际可用的配置参数以供参考 </p>\n<p>配置文件路径：&#x2F;etc&#x2F;vsftpd.conf</p>\n<p>配置过程中尽量是将匿名登录关闭，使用本地用户登录，以确保安全。 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Example config file /etc/vsftpd.conf</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># The default compiled in settings are fairly paranoid. This sample file</span></span><br><span class=\"line\"><span class=\"comment\"># loosens things up a bit, to make the ftp daemon more usable.</span></span><br><span class=\"line\"><span class=\"comment\"># Please see vsftpd.conf.5 for all compiled in defaults.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># READ THIS: This example file is NOT an exhaustive list of vsftpd options.</span></span><br><span class=\"line\"><span class=\"comment\"># Please read the vsftpd.conf.5 manual page to get a full idea of vsftpd&#x27;s</span></span><br><span class=\"line\"><span class=\"comment\"># capabilities.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Run standalone?  vsftpd can run either from an inetd or as a standalone</span></span><br><span class=\"line\"><span class=\"comment\"># daemon started from an initscript.</span></span><br><span class=\"line\">listen=YES</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># This directive enables listening on IPv6 sockets. By default, listening</span></span><br><span class=\"line\"><span class=\"comment\"># on the IPv6 &quot;any&quot; address (::) will accept connections from both IPv6</span></span><br><span class=\"line\"><span class=\"comment\"># and IPv4 clients. It is not necessary to listen on *both* IPv4 and IPv6</span></span><br><span class=\"line\"><span class=\"comment\"># sockets. If you want that (perhaps because you want to listen on specific</span></span><br><span class=\"line\"><span class=\"comment\"># addresses) then you must run two copies of vsftpd with two configuration</span></span><br><span class=\"line\"><span class=\"comment\"># files.</span></span><br><span class=\"line\">listen_ipv6=NO</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Allow anonymous FTP? (Disabled by default).</span></span><br><span class=\"line\">anonymous_enable=NO</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Uncomment this to allow local users to log in.</span></span><br><span class=\"line\">local_enable=YES</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Uncomment this to enable any form of FTP write command.</span></span><br><span class=\"line\">write_enable=YES</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Default umask for local users is 077. You may wish to change this to 022,</span></span><br><span class=\"line\"><span class=\"comment\"># if your users expect that (022 is used by most other ftpd&#x27;s)</span></span><br><span class=\"line\"><span class=\"comment\">#local_umask=022</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Uncomment this to allow the anonymous FTP user to upload files. This only</span></span><br><span class=\"line\"><span class=\"comment\"># has an effect if the above global write enable is activated. Also, you will</span></span><br><span class=\"line\"><span class=\"comment\"># obviously need to create a directory writable by the FTP user.</span></span><br><span class=\"line\"><span class=\"comment\">#anon_upload_enable=YES</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Uncomment this if you want the anonymous FTP user to be able to create</span></span><br><span class=\"line\"><span class=\"comment\"># new directories.</span></span><br><span class=\"line\"><span class=\"comment\">#anon_mkdir_write_enable=YES</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Activate directory messages - messages given to remote users when they</span></span><br><span class=\"line\"><span class=\"comment\"># go into a certain directory.</span></span><br><span class=\"line\">dirmessage_enable=YES</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># If enabled, vsftpd will display directory listings with the time</span></span><br><span class=\"line\"><span class=\"comment\"># in  your  local  time  zone.  The default is to display GMT. The</span></span><br><span class=\"line\"><span class=\"comment\"># times returned by the MDTM FTP command are also affected by this</span></span><br><span class=\"line\"><span class=\"comment\"># option.</span></span><br><span class=\"line\">use_localtime=YES</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Activate logging of uploads/downloads.</span></span><br><span class=\"line\">xferlog_enable=YES</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Make sure PORT transfer connections originate from port 20 (ftp-data).</span></span><br><span class=\"line\">connect_from_port_20=YES</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># If you want, you can arrange for uploaded anonymous files to be owned by</span></span><br><span class=\"line\"><span class=\"comment\"># a different user. Note! Using &quot;root&quot; for uploaded files is not</span></span><br><span class=\"line\"><span class=\"comment\"># recommended!</span></span><br><span class=\"line\"><span class=\"comment\">#chown_uploads=YES</span></span><br><span class=\"line\"><span class=\"comment\">#chown_username=whoever</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># You may override where the log file goes if you like. The default is shown</span></span><br><span class=\"line\"><span class=\"comment\"># below.</span></span><br><span class=\"line\"><span class=\"comment\">#xferlog_file=/var/log/vsftpd.log</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># If you want, you can have your log file in standard ftpd xferlog format.</span></span><br><span class=\"line\"><span class=\"comment\"># Note that the default log file location is /var/log/xferlog in this case.</span></span><br><span class=\"line\"><span class=\"comment\">#xferlog_std_format=YES</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># You may change the default value for timing out an idle session.</span></span><br><span class=\"line\"><span class=\"comment\">#idle_session_timeout=600</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># You may change the default value for timing out a data connection.</span></span><br><span class=\"line\"><span class=\"comment\">#data_connection_timeout=120</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># It is recommended that you define on your system a unique user which the</span></span><br><span class=\"line\"><span class=\"comment\"># ftp server can use as a totally isolated and unprivileged user.</span></span><br><span class=\"line\"><span class=\"comment\">#nopriv_user=ftpsecure</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Enable this and the server will recognise asynchronous ABOR requests. Not</span></span><br><span class=\"line\"><span class=\"comment\"># recommended for security (the code is non-trivial). Not enabling it,</span></span><br><span class=\"line\"><span class=\"comment\"># however, may confuse older FTP clients.</span></span><br><span class=\"line\"><span class=\"comment\">#async_abor_enable=YES</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># By default the server will pretend to allow ASCII mode but in fact ignore</span></span><br><span class=\"line\"><span class=\"comment\"># the request. Turn on the below options to have the server actually do ASCII</span></span><br><span class=\"line\"><span class=\"comment\"># mangling on files when in ASCII mode.</span></span><br><span class=\"line\"><span class=\"comment\"># Beware that on some FTP servers, ASCII support allows a denial of service</span></span><br><span class=\"line\"><span class=\"comment\"># attack (DoS) via the command &quot;SIZE /big/file&quot; in ASCII mode. vsftpd</span></span><br><span class=\"line\"><span class=\"comment\"># predicted this attack and has always been safe, reporting the size of the</span></span><br><span class=\"line\"><span class=\"comment\"># raw file.</span></span><br><span class=\"line\"><span class=\"comment\"># ASCII mangling is a horrible feature of the protocol.</span></span><br><span class=\"line\"><span class=\"comment\">#ascii_upload_enable=YES</span></span><br><span class=\"line\"><span class=\"comment\">#ascii_download_enable=YES</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># You may fully customise the login banner string:</span></span><br><span class=\"line\"><span class=\"comment\">#ftpd_banner=Welcome to blah FTP service.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># You may specify a file of disallowed anonymous e-mail addresses. Apparently</span></span><br><span class=\"line\"><span class=\"comment\"># useful for combatting certain DoS attacks.</span></span><br><span class=\"line\"><span class=\"comment\">#deny_email_enable=YES</span></span><br><span class=\"line\"><span class=\"comment\"># (default follows)</span></span><br><span class=\"line\"><span class=\"comment\">#banned_email_file=/etc/vsftpd.banned_emails</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># You may restrict local users to their home directories.  See the FAQ for</span></span><br><span class=\"line\"><span class=\"comment\"># the possible risks in this before using chroot_local_user or</span></span><br><span class=\"line\"><span class=\"comment\"># chroot_list_enable below.</span></span><br><span class=\"line\"><span class=\"comment\"># chroot_local_user=YES</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># You may specify an explicit list of local users to chroot() to their home</span></span><br><span class=\"line\"><span class=\"comment\"># directory. If chroot_local_user is YES, then this list becomes a list of</span></span><br><span class=\"line\"><span class=\"comment\"># users to NOT chroot().</span></span><br><span class=\"line\"><span class=\"comment\"># (Warning! chroot&#x27;ing can be very dangerous. If using chroot, make sure that</span></span><br><span class=\"line\"><span class=\"comment\"># the user does not have write access to the top level directory within the</span></span><br><span class=\"line\"><span class=\"comment\"># chroot)</span></span><br><span class=\"line\"><span class=\"comment\"># chroot_local_user=YES</span></span><br><span class=\"line\"><span class=\"comment\"># chroot_list_enable=YES</span></span><br><span class=\"line\"><span class=\"comment\"># (default follows)</span></span><br><span class=\"line\"><span class=\"comment\"># chroot_list_file=/etc/vsftpd.chroot_list</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># You may activate the &quot;-R&quot; option to the builtin ls. This is disabled by</span></span><br><span class=\"line\"><span class=\"comment\"># default to avoid remote users being able to cause excessive I/O on large</span></span><br><span class=\"line\"><span class=\"comment\"># sites. However, some broken FTP clients such as &quot;ncftp&quot; and &quot;mirror&quot; assume</span></span><br><span class=\"line\"><span class=\"comment\"># the presence of the &quot;-R&quot; option, so there is a strong case for enabling it.</span></span><br><span class=\"line\"><span class=\"comment\">#ls_recurse_enable=YES</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Customization</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Some of vsftpd&#x27;s settings don&#x27;t fit the filesystem layout by</span></span><br><span class=\"line\"><span class=\"comment\"># default.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># This option should be the name of a directory which is empty.  Also, the</span></span><br><span class=\"line\"><span class=\"comment\"># directory should not be writable by the ftp user. This directory is used</span></span><br><span class=\"line\"><span class=\"comment\"># as a secure chroot() jail at times vsftpd does not require filesystem</span></span><br><span class=\"line\"><span class=\"comment\"># access.</span></span><br><span class=\"line\">secure_chroot_dir=/var/run/vsftpd/empty</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># This string is the name of the PAM service vsftpd will use.</span></span><br><span class=\"line\">pam_service_name=vsftpd</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># This option specifies the location of the RSA certificate to use for SSL</span></span><br><span class=\"line\"><span class=\"comment\"># encrypted connections.</span></span><br><span class=\"line\">rsa_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pem</span><br><span class=\"line\">rsa_private_key_file=/etc/ssl/private/ssl-cert-snakeoil.key</span><br><span class=\"line\">ssl_enable=NO</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Uncomment this to indicate that vsftpd use a utf8 filesystem.</span></span><br><span class=\"line\"><span class=\"comment\">#utf8_filesystem=YES</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"实际开启的配置项如下：\"><a href=\"#实际开启的配置项如下：\" class=\"headerlink\" title=\"实际开启的配置项如下：\"></a>实际开启的配置项如下：</h4><p>按照如下简单的配置就可以通过本地用户进行访问了 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">listen=YES</span><br><span class=\"line\">listen_ipv6=NO</span><br><span class=\"line\">anonymous_enable=NO</span><br><span class=\"line\">local_enable=YES</span><br><span class=\"line\">write_enable=YES</span><br><span class=\"line\">dirmessage_enable=YES</span><br><span class=\"line\">use_localtime=YES</span><br><span class=\"line\">xferlog_enable=YES</span><br><span class=\"line\">connect_from_port_20=YES</span><br><span class=\"line\">secure_chroot_dir=/var/run/vsftpd/empty</span><br><span class=\"line\">pam_service_name=vsftpd</span><br><span class=\"line\">rsa_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pem</span><br><span class=\"line\">rsa_private_key_file=/etc/ssl/private/ssl-cert-snakeoil.key</span><br><span class=\"line\">ssl_enable=NO</span><br></pre></td></tr></table></figure>\n<h4 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h4><ul>\n<li>无法配置指定根目录，也就是任何本地账户登录后的目录都是根目录，无法自定义配置指定目录，配置后也不生效； </li>\n<li>在添加新用户配置成nologin时，是无法正常使用该类用户进行访问的； </li>\n<li>添加的新用户，需要先登录一次后，方可使用该账号访问ftp;</li>\n</ul>\n<h1 id=\"SFTP服务搭建\"><a href=\"#SFTP服务搭建\" class=\"headerlink\" title=\"SFTP服务搭建\"></a>SFTP服务搭建</h1><h2 id=\"群组配置—服务端\"><a href=\"#群组配置—服务端\" class=\"headerlink\" title=\"群组配置—服务端\"></a>群组配置—服务端</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo groupadd sftp</span><br><span class=\"line\"><span class=\"built_in\">cat</span> /etc/group  <span class=\"comment\"># 确认组新建成功</span></span><br><span class=\"line\">sudo vim /etc/group <span class=\"comment\">#修改 sftp:x:1002:</span></span><br><span class=\"line\">sudo useradd -g sftp -s /bin/false mysftp </span><br><span class=\"line\">sudo passwd mysftp <span class=\"comment\"># 设置新密码为服务器访问密码</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"共享目录—服务端\"><a href=\"#共享目录—服务端\" class=\"headerlink\" title=\"共享目录—服务端\"></a>共享目录—服务端</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo <span class=\"built_in\">mkdir</span> -p /data/sftp/mysftp</span><br><span class=\"line\">sudo usermod -d /data/sftp/mysftp mysftp</span><br></pre></td></tr></table></figure>\n<h2 id=\"配置文件修改—服务端\"><a href=\"#配置文件修改—服务端\" class=\"headerlink\" title=\"配置文件修改—服务端\"></a>配置文件修改—服务端</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/ssh/sshd_config</span><br><span class=\"line\">Subsystem sftp /usr/libexec/openssh/sftp-server <span class=\"comment\"># 该行原本配置，需要手动注释掉</span></span><br><span class=\"line\">并在文件最后面添加如下几行内容然后保存</span><br><span class=\"line\">Subsystem sftp internal-sftp</span><br><span class=\"line\">Match Group sftp</span><br><span class=\"line\">ChrootDirectory /data/sftp/%u</span><br><span class=\"line\">ForceCommand internal-sftp</span><br><span class=\"line\">AllowTcpForwarding no</span><br><span class=\"line\">X11Forwarding no</span><br></pre></td></tr></table></figure>\n<h2 id=\"目录授权与新建—服务端\"><a href=\"#目录授权与新建—服务端\" class=\"headerlink\" title=\"目录授权与新建—服务端\"></a>目录授权与新建—服务端</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo <span class=\"built_in\">chown</span> root:sftp /data/sftp/mysftp</span><br><span class=\"line\">sudo <span class=\"built_in\">chmod</span> 755 /data/sftp/mysftp</span><br><span class=\"line\">sudo <span class=\"built_in\">mkdir</span> /data/sftp/mysftp/upload</span><br><span class=\"line\">sudo <span class=\"built_in\">chown</span> mysftp:sftp /data/sftp/mysftp/upload</span><br><span class=\"line\">sudo <span class=\"built_in\">chmod</span> 755 /data/sftp/mysftp/upload</span><br></pre></td></tr></table></figure>\n<h2 id=\"重启服务—服务端\"><a href=\"#重启服务—服务端\" class=\"headerlink\" title=\"重启服务—服务端\"></a>重启服务—服务端</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo systemctl  restart sshd.service   <span class=\"comment\"># 重启服务时如果提示服务不存在，则先添加如下服务</span></span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> ssh.service </span><br><span class=\"line\"><span class=\"comment\"># 再执行：</span></span><br><span class=\"line\">sudo systemctl  restart sshd.service </span><br></pre></td></tr></table></figure>\n<h2 id=\"访问服务器—客户端\"><a href=\"#访问服务器—客户端\" class=\"headerlink\" title=\"访问服务器—客户端\"></a>访问服务器—客户端</h2><p>进入文件管理器或我的电脑<br>输入—例如sftp：&#x2F;&#x2F;10.20.32.** （根据实际服务端IP输入，并键如账号密码，即可访问）</p>\n<h1 id=\"NFS服务搭建\"><a href=\"#NFS服务搭建\" class=\"headerlink\" title=\"NFS服务搭建\"></a>NFS服务搭建</h1><h2 id=\"服务端\"><a href=\"#服务端\" class=\"headerlink\" title=\"服务端\"></a>服务端</h2><h3 id=\"工具安装\"><a href=\"#工具安装\" class=\"headerlink\" title=\"工具安装\"></a>工具安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get install nfs-kernel-server <span class=\"comment\"># 安装 NFS服务器端</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建共享文件夹-1\"><a href=\"#创建共享文件夹-1\" class=\"headerlink\" title=\"创建共享文件夹\"></a>创建共享文件夹</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo <span class=\"built_in\">mkdir</span> /home/deepin-server/nfs       <span class=\"comment\"># 路径可以根据自己需要设置</span></span><br><span class=\"line\">sudo <span class=\"built_in\">chmod</span> -R 777 /home/deepin-server/nfs    <span class=\"comment\"># 设置共享目录权限</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"修改配置文件\"><a href=\"#修改配置文件\" class=\"headerlink\" title=\"修改配置文件\"></a>修改配置文件</h3><p><code>vim /etc/exports</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">配置文件虽然只有一句，但是其中还是有很多讲究； </span><br><span class=\"line\">共享文件可执行权限有： </span><br><span class=\"line\">      ro           只读访问 </span><br><span class=\"line\">      rw           读写访问 </span><br><span class=\"line\">      <span class=\"built_in\">sync</span>          所有数据在请求时写入共享 </span><br><span class=\"line\">      hide          在NFS共享目录中不共享其子目录 </span><br><span class=\"line\">      no_hide         共享NFS目录的子目录 </span><br><span class=\"line\">      all_squash       共享文件的UID和GID映射匿名用户anonymous，适合公用目录。 </span><br><span class=\"line\">      no_all_squash      保留共享文件的UID和GID（默认） </span><br><span class=\"line\">      root_squash       root用户的所有请求映射成如anonymous用户一样的权限（默认） </span><br><span class=\"line\">      no_root_squas      root用户具有根目录的完全管理访问权限 </span><br><span class=\"line\">ip配置一般需要进行限定，最好不要使用* ，不然存在安全问题，可以限定具体ip或者ip段才能挂载。 </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置文件修改如下：\"><a href=\"#配置文件修改如下：\" class=\"headerlink\" title=\"配置文件修改如下：\"></a>配置文件修改如下：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">deepin-server@deepin-server-PC:~$ cat /etc/exports </span><br><span class=\"line\"># /etc/exports: the access control list for filesystems which may be exported</span><br><span class=\"line\">#               to NFS clients.  See exports(5).</span><br><span class=\"line\">#</span><br><span class=\"line\"># Example for NFSv2 and NFSv3:</span><br><span class=\"line\"># /srv/homes       hostname1(rw,sync,no_subtree_check) hostname2(ro,sync,no_subtree_check)</span><br><span class=\"line\"># Example for NFSv4:</span><br><span class=\"line\"># /srv/nfs4        gss/krb5i(rw,sync,fsid=0,crossmnt,no_subtree_check)</span><br><span class=\"line\"># /srv/nfs4/homes  gss/krb5i(rw,sync,no_subtree_check)</span><br><span class=\"line\">/home/deepin-server/nfs  10.20.*(rw)#此处ip只做了部分限制，圆括号里面就是配置权限的。</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动服务-1\"><a href=\"#启动服务-1\" class=\"headerlink\" title=\"启动服务\"></a>启动服务</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">systemctl start rpcbind nfs-server</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查看服务状态-1\"><a href=\"#查看服务状态-1\" class=\"headerlink\" title=\"查看服务状态\"></a>查看服务状态</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">deepin-server@deepin-server-PC:~$ sudo systemctl status rpcbind nfs-server</span><br><span class=\"line\">● rpcbind.service - RPC bind portmap service</span><br><span class=\"line\">   Loaded: loaded (/lib/systemd/system/rpcbind.service; enabled; vendor preset: enabled)</span><br><span class=\"line\">   Active: active (running) since Wed 2022-01-05 11:53:19 CST; 1h 56min ago</span><br><span class=\"line\">     Docs: man:rpcbind(8)</span><br><span class=\"line\"> Main PID: 19304 (rpcbind)</span><br><span class=\"line\">    Tasks: 1 (limit: 19660)</span><br><span class=\"line\">   Memory: 608.0K</span><br><span class=\"line\">   CGroup: /system.slice/rpcbind.service</span><br><span class=\"line\">           └─19304 /sbin/rpcbind -f -w</span><br><span class=\"line\"></span><br><span class=\"line\">1月 05 11:53:19 deepin-server-PC systemd[1]: Starting RPC bind portmap service...</span><br><span class=\"line\">1月 05 11:53:19 deepin-server-PC systemd[1]: Started RPC bind portmap service.</span><br><span class=\"line\"></span><br><span class=\"line\">● nfs-server.service - NFS server and services</span><br><span class=\"line\">   Loaded: loaded (/lib/systemd/system/nfs-server.service; enabled; vendor preset: enabled)</span><br><span class=\"line\">   Active: active (exited) since Wed 2022-01-05 11:53:21 CST; 1h 56min ago</span><br><span class=\"line\">  Process: 19319 ExecStartPre=/usr/sbin/exportfs -r (code=exited, status=0/SUCCESS)</span><br><span class=\"line\">  Process: 19320 ExecStart=/usr/sbin/rpc.nfsd $RPCNFSDARGS (code=exited, status=0/SUCCESS)</span><br><span class=\"line\"> Main PID: 19320 (code=exited, status=0/SUCCESS)</span><br><span class=\"line\"></span><br><span class=\"line\">1月 05 11:53:20 deepin-server-PC systemd[1]: Starting NFS server and services...</span><br><span class=\"line\">1月 05 11:53:20 deepin-server-PC exportfs[19319]: exportfs: /etc/exports [1]: Neither &#x27;subtree_check&#x27; or &#x27;no_subtree_check&#x27; specified for export &quot;10.20.*:/home/deepin-server/Documents/NFS文件目录for-test&quot;.</span><br><span class=\"line\">1月 05 11:53:20 deepin-server-PC exportfs[19319]:   Assuming default behaviour (&#x27;no_subtree_check&#x27;).</span><br><span class=\"line\">1月 05 11:53:20 deepin-server-PC exportfs[19319]:   NOTE: this default has changed since nfs-utils version 1.0.x</span><br><span class=\"line\">1月 05 11:53:21 deepin-server-PC systemd[1]: Started NFS server and services.</span><br><span class=\"line\">deepin-server@deepin-server-PC:~$ </span><br></pre></td></tr></table></figure>\n<p>至此服务端算是配置完成了。</p>\n<h2 id=\"客户端配置\"><a href=\"#客户端配置\" class=\"headerlink\" title=\"客户端配置\"></a>客户端配置</h2><p>客户端主要就是挂载操作，不过挂载nfs的时候同样需要安装客户端软件</p>\n<h3 id=\"客户端安装\"><a href=\"#客户端安装\" class=\"headerlink\" title=\"客户端安装\"></a>客户端安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get install nfs-common</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查看服务端nfs共享信息\"><a href=\"#查看服务端nfs共享信息\" class=\"headerlink\" title=\"查看服务端nfs共享信息\"></a>查看服务端nfs共享信息</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">showmount -e 10.20.13.152</span><br><span class=\"line\">babyfengfjx@babyfengfjx:~$ showmount -e 10.20.13.152</span><br><span class=\"line\">Export list <span class=\"keyword\">for</span> 10.20.13.152:</span><br><span class=\"line\">/home/deepin-server/Documents/NFS文件目录for-test 10.20.*</span><br><span class=\"line\">babyfengfjx@babyfengfjx:~$ </span><br></pre></td></tr></table></figure>\n<h3 id=\"客户端创建挂载目录\"><a href=\"#客户端创建挂载目录\" class=\"headerlink\" title=\"客户端创建挂载目录\"></a>客户端创建挂载目录</h3><p>随便在本地客户端创建一个目录作为NFS挂载目录即可</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo <span class=\"built_in\">mkdir</span> /home/babyfengfjx/Documents/nfsfile/</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"客户端挂载\"><a href=\"#客户端挂载\" class=\"headerlink\" title=\"客户端挂载\"></a>客户端挂载</h3><p>将服务端的NFS共享目录，挂载到本地客户端对应目录即可</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo mount -t nfs 10.20.13.152:/home/deepin-server/Documents/NFS文件目录for-test /home/babyfengfjx/Documents/nfsfile/</span><br></pre></td></tr></table></figure>\n<h3 id=\"查看并传输文件\"><a href=\"#查看并传输文件\" class=\"headerlink\" title=\"查看并传输文件\"></a>查看并传输文件</h3><p>上述操作完成后，此时就可以在客户端对应目录使用NFS存储了，上传新建文件均可以随心所欲。</p>\n<h3 id=\"开机自动挂载\"><a href=\"#开机自动挂载\" class=\"headerlink\" title=\"开机自动挂载\"></a>开机自动挂载</h3><p>写入fstab方法并不推荐，如果NFS挂载失败可能会影响设备正常启动 </p>\n<h4 id=\"写入fstab进行开机自动挂载\"><a href=\"#写入fstab进行开机自动挂载\" class=\"headerlink\" title=\"写入fstab进行开机自动挂载\"></a>写入fstab进行开机自动挂载</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;10.20.13.152:/home/deepin-server/Documents/NFS文件目录for-test /home/babyfengfjx/Documents/nfsfile/ nfs4 defaults 0 0&quot;</span> &gt;&gt; /etc/fstab</span><br><span class=\"line\"> mount -av</span><br></pre></td></tr></table></figure>\n<h4 id=\"通过配置开机自运行脚本\"><a href=\"#通过配置开机自运行脚本\" class=\"headerlink\" title=\"通过配置开机自运行脚本\"></a>通过配置开机自运行脚本</h4><p><strong>原理如下：</strong></p>\n<blockquote>\n<p>新建 &#x2F;etc&#x2F;rc.local 文件<br>这种方法的原理是系统开机后会自动启动 rc-local 服务；<br>rc-local 服务启动后就会自动执行 &#x2F;etc 目录下的 rc.local 脚本；<br>该方法的优点就是不存在第一种方法的三个缺点，脚本执行失败不会出现黑屏弹窗、sleep 不会造成开机黑屏以及执行脚本的用户是 root 用户。 </p>\n</blockquote>\n<p><strong>主要步骤：</strong></p>\n<ol>\n<li>新建 &#x2F;etc&#x2F;rc.local 文件</li>\n<li>粘贴以下模板<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/sh -e</span></span><br><span class=\"line\"><span class=\"comment\"># rc.local</span></span><br><span class=\"line\"><span class=\"comment\"># This script is executed at the end of each multiuser runlevel.</span></span><br><span class=\"line\"><span class=\"comment\"># Make sure that the script will &quot;exit 0&quot; on success or any other</span></span><br><span class=\"line\"><span class=\"comment\"># value on error.</span></span><br><span class=\"line\"><span class=\"comment\"># In order to enable or disable this script just change the execution</span></span><br><span class=\"line\"><span class=\"comment\"># bits.</span></span><br><span class=\"line\"><span class=\"comment\"># By default this script does nothing.</span></span><br><span class=\"line\">01.LitterScript/02.bbsmonitor/bbsmonitor.py &gt;bbs.log 2&gt;&amp;1 &amp;</span><br><span class=\"line\"><span class=\"comment\"># 因为该命令本身就是会以root权限执行，所以不用加sudo</span></span><br><span class=\"line\"><span class=\"built_in\">sleep</span> 5;mount -t nfs 10.20.13.152:/home/deepin-server/Documents/NFS文件目录for-test /home/babyfengfjx/Documents/nfsfile/</span><br><span class=\"line\"><span class=\"built_in\">exit</span> 0</span><br></pre></td></tr></table></figure></li>\n<li>在 exit 0 上方插入你需要自启的命令(一行一个)后保存文件</li>\n<li>给脚本加上 755 权限<br>sudo chmod +755 &#x2F;etc&#x2F;rc.local</li>\n<li>调试脚本(可选)<br>sudo &#x2F;etc&#x2F;rc.local # 使用 sudo 模拟 root 用户开机自启 &#x2F;etc&#x2F;rc.local 文件<br>如果第 5 步模拟启动脚本没有报错，那我们就可以重启电脑看看是否可以成功实现脚本开机自启。重启进入系统后我们可以通过 systemctl status rc-local.service 查看 rc-local 的运行状态，如果结果显示的是 active (exited) 则说明你的脚本已经成功执行，反之如果结果显示 failed,那么你需要检查一下脚本是否哪里有问题。</li>\n</ol>\n<h5 id=\"这里提供可能导致脚本无法正常启动的原因：\"><a href=\"#这里提供可能导致脚本无法正常启动的原因：\" class=\"headerlink\" title=\"这里提供可能导致脚本无法正常启动的原因：\"></a>这里提供可能导致脚本无法正常启动的原因：</h5><p>1、执行脚本的用户不一致<br>由于 rc.local 开机自启的时候是以 root 用户执行的，这里很多人会忽略了一个问题，很多情况下你的命令是必须要普通用户执行的。比如 conky 和虚拟机(用户A建立的VBox和VM Ware虚拟机用户B无法访问)等。<br>假设用户 lolimay 在终端用 VBoxHeadless -s aikuai &amp; 后台启动了虚拟机名 aikuai，那么我们在 rc.local 文件应该用下面这种方式写：<br><code>su - lolimay -c &quot;VBoxHeadless -s aikuai &amp;&quot; # 以 lolimay 用户执行该命令</code><br>2、多余的 sudo<br>前面已经提到 rc.local 开机时是以 root 用户启动的，所以写在 rc.local 文件中命令不需要带有 sudo 前缀(实际上就算你带有了 sudo 前缀也不会产生错误)。<br>3、最佳实践<br>个人建议每当往 rc.local 文件中添加了一个需要自启的命令时，可以先用 sudo &#x2F;etc&#x2F;rc.local 命令模拟一下看看是否能够执行成功(如果执行失败也能够直观地看到出错的原因)，这样能够有效减少你重启电脑来调试的次数。</p>\n","site":{"data":{}},"excerpt":"","more":"<hr>\n<h1 id=\"Samba服务搭建\"><a href=\"#Samba服务搭建\" class=\"headerlink\" title=\"Samba服务搭建\"></a>Samba服务搭建</h1><blockquote>\n<p>Samba是在Linux系统上实现SMB协议的一个免费软件，由服务器及客户端程序构成。SMB（Server Messages Block，信息服务块）是一种在局域网上共享文件和打印机的一种通信协议，它为局域网内的不同计算机之间提供文件及打印机等资源的共享服务。</p>\n</blockquote>\n<h2 id=\"安装服务\"><a href=\"#安装服务\" class=\"headerlink\" title=\"安装服务\"></a>安装服务</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get install samba-common samba</span><br></pre></td></tr></table></figure>\n<h2 id=\"创建共享文件夹\"><a href=\"#创建共享文件夹\" class=\"headerlink\" title=\"创建共享文件夹\"></a>创建共享文件夹</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo <span class=\"built_in\">mkdir</span> /opt/share</span><br></pre></td></tr></table></figure>\n<h2 id=\"编辑配置文件\"><a href=\"#编辑配置文件\" class=\"headerlink\" title=\"编辑配置文件\"></a>编辑配置文件</h2><blockquote>\n<ul>\n<li>关于samba配置文件，smb.conf总共分为两大部分，分别为“全局设置（GIobal Settings）”和“共享定义（Share Definitions）”。全局设置定义于Samba服务器的整体行为，例如，工作组，主机名等方面。共享定义则用于设置的具体的共享目录或者设备中。</li>\n<li>配置文件绝对路径在：<code>/etc/samba/smb.conf</code></li>\n</ul>\n</blockquote>\n<h3 id=\"全局设置\"><a href=\"#全局设置\" class=\"headerlink\" title=\"全局设置\"></a>全局设置</h3><ul>\n<li>workgroup用于设置在windows中显示的工作组</li>\n<li>server string是Samba服务器的说明</li>\n<li>workgroup和server string字段后面的内容可以随便写</li>\n<li>通常来说，将Samba服务器的编码设置为UTF-8是比较好的，也能解决显示的问题：<code>unix charset = UTF-8</code></li>\n<li>但是这样也会存在问题，UTF-8编码的中文文件名在某些系统下面会乱码，Samba提供了dos charset这个字段。下面这条配置命令为哪些不认识的Unicode的Windows系统使用GBK编码:<code>dos charset = cp936</code></li>\n<li>security字段设置了用户登录的验证方式，share和user是最常用到的两种。share方式允许任何用户登录到系统，而不用提供用户名和口令,但是由于Samba是默认要使用验证方式的，所以这里就要讲到user方式。这种方式要求用户提供账户信息供服务器验证，但是要使用user验证，Samba的配置文件里面就应该包含这一行:<code>security = user</code></li>\n</ul>\n<h3 id=\"共享设置\"><a href=\"#共享设置\" class=\"headerlink\" title=\"共享设置\"></a>共享设置</h3><p>这个文件叫做smb.conf（位于&#x2F;etc或者&#x2F;etc&#x2F;samba目录下面），可以用uos系统自带的文本编辑器打开，在末尾输入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[share] <span class=\"comment\">#&quot;[]&quot; 中的文字表示共享目录名字，可以随意设置</span></span><br><span class=\"line\">    comment = Linux Share　 <span class=\"comment\">#comment字段用于设置这个共享目录的描述</span></span><br><span class=\"line\">    path = /opt/share　　　　 <span class=\"comment\">#share指定了共享目录的路径</span></span><br><span class=\"line\">    public = <span class=\"built_in\">yes</span>　　　　　　 <span class=\"comment\">#表示在windows的“网上邻居”中可见</span></span><br><span class=\"line\">    writeable = no　　　　　 <span class=\"comment\">#writeable表示设置目录是否可写（yes是可写的意思）</span></span><br><span class=\"line\">    browseable = <span class=\"built_in\">yes</span>　　　 <span class=\"comment\">#表示在windows的“网上邻居”中可见</span></span><br><span class=\"line\">    guest ok = no 　　　　　<span class=\"comment\">#告诉Samba服务器这个共享目录允许匿名访问</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"添加用户\"><a href=\"#添加用户\" class=\"headerlink\" title=\"添加用户\"></a>添加用户</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo useradd smbuser  <span class=\"comment\"># 新增一个叫smbuser的用户</span></span><br><span class=\"line\">sudo smbpasswd -a smbuser  <span class=\"comment\"># 给这个新增用户创建samb共享密码</span></span><br><span class=\"line\">New SMB password:</span><br><span class=\"line\">Retype new SMB password:</span><br><span class=\"line\">Added user smbuser</span><br></pre></td></tr></table></figure>\n<p>后面就可以使用带-U参数的smbpasswd命令修改已经有用户的口令。如果用户希望本地修改服务器上自己的口令，可以使用-r参数。下面的命令用户修改在服务器smbserver上smbuser用户的口令了</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">smbpasswd -r smbserver -U smbuser</span><br></pre></td></tr></table></figure>\n<h2 id=\"赋予权限\"><a href=\"#赋予权限\" class=\"headerlink\" title=\"赋予权限\"></a>赋予权限</h2><p>smbuser对共享目录写权限,一下配置需要写成yes</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">writeable = <span class=\"built_in\">yes</span></span><br></pre></td></tr></table></figure>\n<p>如果只写writeable &#x3D; yes是远远不够的，如果服务器上的这么目录本身对smbuser不可写的话，就需要添加以下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo <span class=\"built_in\">chown</span> smbuser:smbuser /opt/share</span><br></pre></td></tr></table></figure>\n<h2 id=\"服务启动、停止、重启\"><a href=\"#服务启动、停止、重启\" class=\"headerlink\" title=\"服务启动、停止、重启\"></a>服务启动、停止、重启</h2><h3 id=\"启动服务：service-smbd-start\"><a href=\"#启动服务：service-smbd-start\" class=\"headerlink\" title=\"启动服务：service smbd start\"></a>启动服务：<code>service smbd start</code></h3><h3 id=\"停止服务：service-smbd-stop\"><a href=\"#停止服务：service-smbd-stop\" class=\"headerlink\" title=\"停止服务：service smbd stop\"></a>停止服务：<code>service smbd stop</code></h3><h3 id=\"重启服务：service-smbd-restart\"><a href=\"#重启服务：service-smbd-restart\" class=\"headerlink\" title=\"重启服务：service smbd restart\"></a>重启服务：<code>service smbd restart</code></h3><h3 id=\"查看服务状态：service-smbd-status\"><a href=\"#查看服务状态：service-smbd-status\" class=\"headerlink\" title=\"查看服务状态：service smbd status\"></a>查看服务状态：<code>service smbd status</code></h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">deepin@wh-k8snode-70:/etc/samba$ service smbd status</span><br><span class=\"line\">● smbd.service - Samba SMB Daemon</span><br><span class=\"line\">   Loaded: loaded (/lib/systemd/system/smbd.service; enabled; vendor preset: enabled)</span><br><span class=\"line\">   Active: active (running) since Mon 2022-06-20 11:50:46 CST; 1h 57min ago</span><br><span class=\"line\">     Docs: man:smbd(8)</span><br><span class=\"line\">           man:samba(7)</span><br><span class=\"line\">           man:smb.conf(5)</span><br><span class=\"line\">  Process: 20165 ExecStartPre=/usr/share/samba/update-apparmor-samba-profile (code=exited, status=0/SUCCESS)</span><br><span class=\"line\"> Main PID: 20174 (smbd)</span><br><span class=\"line\">   Status: <span class=\"string\">&quot;smbd: ready to serve connections...&quot;</span></span><br><span class=\"line\">    Tasks: 6 (<span class=\"built_in\">limit</span>: 4915)</span><br><span class=\"line\">   Memory: 26.7M</span><br><span class=\"line\">   CGroup: /system.slice/smbd.service</span><br><span class=\"line\">           ├─ 8209 /usr/sbin/smbd --foreground --no-process-group</span><br><span class=\"line\">           ├─10619 /usr/sbin/smbd --foreground --no-process-group</span><br><span class=\"line\">           ├─20174 /usr/sbin/smbd --foreground --no-process-group</span><br><span class=\"line\">           ├─20176 /usr/sbin/smbd --foreground --no-process-group</span><br><span class=\"line\">           ├─20177 /usr/sbin/smbd --foreground --no-process-group</span><br><span class=\"line\">           └─20178 /usr/sbin/smbd --foreground --no-process-group</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h2><ol>\n<li><p>修改配置文件后，服务无法启动。</p>\n<blockquote>\n<p>在实际修改配置文件过程中，可能在参数后面有一些看不见的字符，会导致服务无法正常启动，最好检查每个修改的参数后面无一些空格或者其他特殊符号。</p>\n</blockquote>\n</li>\n<li><p>创建了几个samba用户，想通过不同的用户来对不同的文件进行访问，但是出现了报错（内容是不允许一个用户使用一个以上用户名与服务器或者共享资源的多重连接）<br><strong>解决：</strong></p>\n<blockquote>\n<p>先断开现有的samba连接：cmd命令行下执行net use * &#x2F;del &#x2F;X<br>再重新选择你要使用的目录，使用对应的用户名进行登录就可以了</p>\n</blockquote>\n</li>\n<li><p>配置好samba服务器，但是测试过程中会出现以下报错：</p>\n<blockquote>\n<p>主要原因是因为服务器的防火墙没有关，可以选择在文件&#x2F;etc&#x2F;security&#x2F;limits.conf下输入*　-   nofile   16384,然后shutdown -r now 重启一下就可以了</p>\n</blockquote>\n</li>\n<li><p>samba服务器已经可以让windows通过网络来访问samba，但是没有办法写入，修改，删除，只能查看,出现这样的问题可能就是我们自己在配置的时候出现问题了，如果我的用户是deepin:</p>\n<figure class=\"highlight plaintext\"><figcaption><span>777 FileServer```   　--这种操作就可以让组samba里的用户进行写操作了。</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\">```bash</span><br><span class=\"line\">[deepin]</span><br><span class=\"line\">   create mode =0664</span><br><span class=\"line\">   force create mode=0750   #文件新建的权限为750</span><br><span class=\"line\">   directory mode=0750      　#新建文件夹的权限只有组里的用户查看，其他组里的用户都没有权限进入</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h1 id=\"FTP服务搭建\"><a href=\"#FTP服务搭建\" class=\"headerlink\" title=\"FTP服务搭建\"></a>FTP服务搭建</h1><h2 id=\"vsftpd配置使用\"><a href=\"#vsftpd配置使用\" class=\"headerlink\" title=\"vsftpd配置使用\"></a>vsftpd配置使用</h2><blockquote>\n<p>vsftpd 是Linus上非常安全好用的ftp服务，只需要简单的安装后就可以搭建起ftp服务；<br>该服务主要的配置文件就是vsftpd.conf ,在deepin&#x2F;uos系统中的绝对路径是：&#x2F;etc&#x2F;vsftpd.conf</p>\n</blockquote>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>只需要简单的进行安装配置即可，前提是你开启了开发者模式我们才能通过终端安装软件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt install vsftpd</span><br></pre></td></tr></table></figure>\n<p>如果提示没有找到对应安装包，则可能是没有进行仓库的更新连接，执行如下命令即可</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt update </span><br></pre></td></tr></table></figure>\n<h3 id=\"服务的启停配置\"><a href=\"#服务的启停配置\" class=\"headerlink\" title=\"服务的启停配置\"></a>服务的启停配置</h3><h4 id=\"启动服务\"><a href=\"#启动服务\" class=\"headerlink\" title=\"启动服务\"></a>启动服务</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">service vsftpd start</span><br></pre></td></tr></table></figure>\n<h4 id=\"停止服务\"><a href=\"#停止服务\" class=\"headerlink\" title=\"停止服务\"></a>停止服务</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">service vsftpd stop</span><br></pre></td></tr></table></figure>\n<h4 id=\"重启服务\"><a href=\"#重启服务\" class=\"headerlink\" title=\"重启服务\"></a>重启服务</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">service vsftpd restart</span><br></pre></td></tr></table></figure>\n<h4 id=\"查看服务状态\"><a href=\"#查看服务状态\" class=\"headerlink\" title=\"查看服务状态\"></a>查看服务状态</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">service vsftpd status</span><br><span class=\"line\"><span class=\"comment\">#执行后结果如下：active则表示正常运行，如果失败了则可以通过提示信息查询对应问题</span></span><br><span class=\"line\">babyfengfjx@babyfengfjx:~$ service vsftpd status </span><br><span class=\"line\">● vsftpd.service - vsftpd FTP server</span><br><span class=\"line\">   Loaded: loaded (/lib/systemd/system/vsftpd.service; enabled; vendor preset: enabled)</span><br><span class=\"line\">   Active: active (running) since Sat 2021-10-09 16:22:48 CST; 1s ago</span><br><span class=\"line\">  Process: 18334 ExecStartPre=/bin/mkdir -p /var/run/vsftpd/empty (code=exited, status=0/SUCCESS)</span><br><span class=\"line\"> Main PID: 18335 (vsftpd)</span><br><span class=\"line\">    Tasks: 1 (<span class=\"built_in\">limit</span>: 4915)</span><br><span class=\"line\">   Memory: 568.0K</span><br><span class=\"line\">   CGroup: /system.slice/vsftpd.service</span><br><span class=\"line\">           └─18335 /usr/sbin/vsftpd /etc/vsftpd.conf</span><br></pre></td></tr></table></figure>\n<h4 id=\"配置文件展示\"><a href=\"#配置文件展示\" class=\"headerlink\" title=\"配置文件展示\"></a>配置文件展示</h4><p>在使用该服务过程中，主要就是这些配置文件该如何配置，很多同学在实际配置过程中很难一次配置成功，这里就给出一个实际可用的配置参数以供参考 </p>\n<p>配置文件路径：&#x2F;etc&#x2F;vsftpd.conf</p>\n<p>配置过程中尽量是将匿名登录关闭，使用本地用户登录，以确保安全。 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Example config file /etc/vsftpd.conf</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># The default compiled in settings are fairly paranoid. This sample file</span></span><br><span class=\"line\"><span class=\"comment\"># loosens things up a bit, to make the ftp daemon more usable.</span></span><br><span class=\"line\"><span class=\"comment\"># Please see vsftpd.conf.5 for all compiled in defaults.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># READ THIS: This example file is NOT an exhaustive list of vsftpd options.</span></span><br><span class=\"line\"><span class=\"comment\"># Please read the vsftpd.conf.5 manual page to get a full idea of vsftpd&#x27;s</span></span><br><span class=\"line\"><span class=\"comment\"># capabilities.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Run standalone?  vsftpd can run either from an inetd or as a standalone</span></span><br><span class=\"line\"><span class=\"comment\"># daemon started from an initscript.</span></span><br><span class=\"line\">listen=YES</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># This directive enables listening on IPv6 sockets. By default, listening</span></span><br><span class=\"line\"><span class=\"comment\"># on the IPv6 &quot;any&quot; address (::) will accept connections from both IPv6</span></span><br><span class=\"line\"><span class=\"comment\"># and IPv4 clients. It is not necessary to listen on *both* IPv4 and IPv6</span></span><br><span class=\"line\"><span class=\"comment\"># sockets. If you want that (perhaps because you want to listen on specific</span></span><br><span class=\"line\"><span class=\"comment\"># addresses) then you must run two copies of vsftpd with two configuration</span></span><br><span class=\"line\"><span class=\"comment\"># files.</span></span><br><span class=\"line\">listen_ipv6=NO</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Allow anonymous FTP? (Disabled by default).</span></span><br><span class=\"line\">anonymous_enable=NO</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Uncomment this to allow local users to log in.</span></span><br><span class=\"line\">local_enable=YES</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Uncomment this to enable any form of FTP write command.</span></span><br><span class=\"line\">write_enable=YES</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Default umask for local users is 077. You may wish to change this to 022,</span></span><br><span class=\"line\"><span class=\"comment\"># if your users expect that (022 is used by most other ftpd&#x27;s)</span></span><br><span class=\"line\"><span class=\"comment\">#local_umask=022</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Uncomment this to allow the anonymous FTP user to upload files. This only</span></span><br><span class=\"line\"><span class=\"comment\"># has an effect if the above global write enable is activated. Also, you will</span></span><br><span class=\"line\"><span class=\"comment\"># obviously need to create a directory writable by the FTP user.</span></span><br><span class=\"line\"><span class=\"comment\">#anon_upload_enable=YES</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Uncomment this if you want the anonymous FTP user to be able to create</span></span><br><span class=\"line\"><span class=\"comment\"># new directories.</span></span><br><span class=\"line\"><span class=\"comment\">#anon_mkdir_write_enable=YES</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Activate directory messages - messages given to remote users when they</span></span><br><span class=\"line\"><span class=\"comment\"># go into a certain directory.</span></span><br><span class=\"line\">dirmessage_enable=YES</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># If enabled, vsftpd will display directory listings with the time</span></span><br><span class=\"line\"><span class=\"comment\"># in  your  local  time  zone.  The default is to display GMT. The</span></span><br><span class=\"line\"><span class=\"comment\"># times returned by the MDTM FTP command are also affected by this</span></span><br><span class=\"line\"><span class=\"comment\"># option.</span></span><br><span class=\"line\">use_localtime=YES</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Activate logging of uploads/downloads.</span></span><br><span class=\"line\">xferlog_enable=YES</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Make sure PORT transfer connections originate from port 20 (ftp-data).</span></span><br><span class=\"line\">connect_from_port_20=YES</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># If you want, you can arrange for uploaded anonymous files to be owned by</span></span><br><span class=\"line\"><span class=\"comment\"># a different user. Note! Using &quot;root&quot; for uploaded files is not</span></span><br><span class=\"line\"><span class=\"comment\"># recommended!</span></span><br><span class=\"line\"><span class=\"comment\">#chown_uploads=YES</span></span><br><span class=\"line\"><span class=\"comment\">#chown_username=whoever</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># You may override where the log file goes if you like. The default is shown</span></span><br><span class=\"line\"><span class=\"comment\"># below.</span></span><br><span class=\"line\"><span class=\"comment\">#xferlog_file=/var/log/vsftpd.log</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># If you want, you can have your log file in standard ftpd xferlog format.</span></span><br><span class=\"line\"><span class=\"comment\"># Note that the default log file location is /var/log/xferlog in this case.</span></span><br><span class=\"line\"><span class=\"comment\">#xferlog_std_format=YES</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># You may change the default value for timing out an idle session.</span></span><br><span class=\"line\"><span class=\"comment\">#idle_session_timeout=600</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># You may change the default value for timing out a data connection.</span></span><br><span class=\"line\"><span class=\"comment\">#data_connection_timeout=120</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># It is recommended that you define on your system a unique user which the</span></span><br><span class=\"line\"><span class=\"comment\"># ftp server can use as a totally isolated and unprivileged user.</span></span><br><span class=\"line\"><span class=\"comment\">#nopriv_user=ftpsecure</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Enable this and the server will recognise asynchronous ABOR requests. Not</span></span><br><span class=\"line\"><span class=\"comment\"># recommended for security (the code is non-trivial). Not enabling it,</span></span><br><span class=\"line\"><span class=\"comment\"># however, may confuse older FTP clients.</span></span><br><span class=\"line\"><span class=\"comment\">#async_abor_enable=YES</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># By default the server will pretend to allow ASCII mode but in fact ignore</span></span><br><span class=\"line\"><span class=\"comment\"># the request. Turn on the below options to have the server actually do ASCII</span></span><br><span class=\"line\"><span class=\"comment\"># mangling on files when in ASCII mode.</span></span><br><span class=\"line\"><span class=\"comment\"># Beware that on some FTP servers, ASCII support allows a denial of service</span></span><br><span class=\"line\"><span class=\"comment\"># attack (DoS) via the command &quot;SIZE /big/file&quot; in ASCII mode. vsftpd</span></span><br><span class=\"line\"><span class=\"comment\"># predicted this attack and has always been safe, reporting the size of the</span></span><br><span class=\"line\"><span class=\"comment\"># raw file.</span></span><br><span class=\"line\"><span class=\"comment\"># ASCII mangling is a horrible feature of the protocol.</span></span><br><span class=\"line\"><span class=\"comment\">#ascii_upload_enable=YES</span></span><br><span class=\"line\"><span class=\"comment\">#ascii_download_enable=YES</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># You may fully customise the login banner string:</span></span><br><span class=\"line\"><span class=\"comment\">#ftpd_banner=Welcome to blah FTP service.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># You may specify a file of disallowed anonymous e-mail addresses. Apparently</span></span><br><span class=\"line\"><span class=\"comment\"># useful for combatting certain DoS attacks.</span></span><br><span class=\"line\"><span class=\"comment\">#deny_email_enable=YES</span></span><br><span class=\"line\"><span class=\"comment\"># (default follows)</span></span><br><span class=\"line\"><span class=\"comment\">#banned_email_file=/etc/vsftpd.banned_emails</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># You may restrict local users to their home directories.  See the FAQ for</span></span><br><span class=\"line\"><span class=\"comment\"># the possible risks in this before using chroot_local_user or</span></span><br><span class=\"line\"><span class=\"comment\"># chroot_list_enable below.</span></span><br><span class=\"line\"><span class=\"comment\"># chroot_local_user=YES</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># You may specify an explicit list of local users to chroot() to their home</span></span><br><span class=\"line\"><span class=\"comment\"># directory. If chroot_local_user is YES, then this list becomes a list of</span></span><br><span class=\"line\"><span class=\"comment\"># users to NOT chroot().</span></span><br><span class=\"line\"><span class=\"comment\"># (Warning! chroot&#x27;ing can be very dangerous. If using chroot, make sure that</span></span><br><span class=\"line\"><span class=\"comment\"># the user does not have write access to the top level directory within the</span></span><br><span class=\"line\"><span class=\"comment\"># chroot)</span></span><br><span class=\"line\"><span class=\"comment\"># chroot_local_user=YES</span></span><br><span class=\"line\"><span class=\"comment\"># chroot_list_enable=YES</span></span><br><span class=\"line\"><span class=\"comment\"># (default follows)</span></span><br><span class=\"line\"><span class=\"comment\"># chroot_list_file=/etc/vsftpd.chroot_list</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># You may activate the &quot;-R&quot; option to the builtin ls. This is disabled by</span></span><br><span class=\"line\"><span class=\"comment\"># default to avoid remote users being able to cause excessive I/O on large</span></span><br><span class=\"line\"><span class=\"comment\"># sites. However, some broken FTP clients such as &quot;ncftp&quot; and &quot;mirror&quot; assume</span></span><br><span class=\"line\"><span class=\"comment\"># the presence of the &quot;-R&quot; option, so there is a strong case for enabling it.</span></span><br><span class=\"line\"><span class=\"comment\">#ls_recurse_enable=YES</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Customization</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Some of vsftpd&#x27;s settings don&#x27;t fit the filesystem layout by</span></span><br><span class=\"line\"><span class=\"comment\"># default.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># This option should be the name of a directory which is empty.  Also, the</span></span><br><span class=\"line\"><span class=\"comment\"># directory should not be writable by the ftp user. This directory is used</span></span><br><span class=\"line\"><span class=\"comment\"># as a secure chroot() jail at times vsftpd does not require filesystem</span></span><br><span class=\"line\"><span class=\"comment\"># access.</span></span><br><span class=\"line\">secure_chroot_dir=/var/run/vsftpd/empty</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># This string is the name of the PAM service vsftpd will use.</span></span><br><span class=\"line\">pam_service_name=vsftpd</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># This option specifies the location of the RSA certificate to use for SSL</span></span><br><span class=\"line\"><span class=\"comment\"># encrypted connections.</span></span><br><span class=\"line\">rsa_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pem</span><br><span class=\"line\">rsa_private_key_file=/etc/ssl/private/ssl-cert-snakeoil.key</span><br><span class=\"line\">ssl_enable=NO</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Uncomment this to indicate that vsftpd use a utf8 filesystem.</span></span><br><span class=\"line\"><span class=\"comment\">#utf8_filesystem=YES</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"实际开启的配置项如下：\"><a href=\"#实际开启的配置项如下：\" class=\"headerlink\" title=\"实际开启的配置项如下：\"></a>实际开启的配置项如下：</h4><p>按照如下简单的配置就可以通过本地用户进行访问了 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">listen=YES</span><br><span class=\"line\">listen_ipv6=NO</span><br><span class=\"line\">anonymous_enable=NO</span><br><span class=\"line\">local_enable=YES</span><br><span class=\"line\">write_enable=YES</span><br><span class=\"line\">dirmessage_enable=YES</span><br><span class=\"line\">use_localtime=YES</span><br><span class=\"line\">xferlog_enable=YES</span><br><span class=\"line\">connect_from_port_20=YES</span><br><span class=\"line\">secure_chroot_dir=/var/run/vsftpd/empty</span><br><span class=\"line\">pam_service_name=vsftpd</span><br><span class=\"line\">rsa_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pem</span><br><span class=\"line\">rsa_private_key_file=/etc/ssl/private/ssl-cert-snakeoil.key</span><br><span class=\"line\">ssl_enable=NO</span><br></pre></td></tr></table></figure>\n<h4 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h4><ul>\n<li>无法配置指定根目录，也就是任何本地账户登录后的目录都是根目录，无法自定义配置指定目录，配置后也不生效； </li>\n<li>在添加新用户配置成nologin时，是无法正常使用该类用户进行访问的； </li>\n<li>添加的新用户，需要先登录一次后，方可使用该账号访问ftp;</li>\n</ul>\n<h1 id=\"SFTP服务搭建\"><a href=\"#SFTP服务搭建\" class=\"headerlink\" title=\"SFTP服务搭建\"></a>SFTP服务搭建</h1><h2 id=\"群组配置—服务端\"><a href=\"#群组配置—服务端\" class=\"headerlink\" title=\"群组配置—服务端\"></a>群组配置—服务端</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo groupadd sftp</span><br><span class=\"line\"><span class=\"built_in\">cat</span> /etc/group  <span class=\"comment\"># 确认组新建成功</span></span><br><span class=\"line\">sudo vim /etc/group <span class=\"comment\">#修改 sftp:x:1002:</span></span><br><span class=\"line\">sudo useradd -g sftp -s /bin/false mysftp </span><br><span class=\"line\">sudo passwd mysftp <span class=\"comment\"># 设置新密码为服务器访问密码</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"共享目录—服务端\"><a href=\"#共享目录—服务端\" class=\"headerlink\" title=\"共享目录—服务端\"></a>共享目录—服务端</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo <span class=\"built_in\">mkdir</span> -p /data/sftp/mysftp</span><br><span class=\"line\">sudo usermod -d /data/sftp/mysftp mysftp</span><br></pre></td></tr></table></figure>\n<h2 id=\"配置文件修改—服务端\"><a href=\"#配置文件修改—服务端\" class=\"headerlink\" title=\"配置文件修改—服务端\"></a>配置文件修改—服务端</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/ssh/sshd_config</span><br><span class=\"line\">Subsystem sftp /usr/libexec/openssh/sftp-server <span class=\"comment\"># 该行原本配置，需要手动注释掉</span></span><br><span class=\"line\">并在文件最后面添加如下几行内容然后保存</span><br><span class=\"line\">Subsystem sftp internal-sftp</span><br><span class=\"line\">Match Group sftp</span><br><span class=\"line\">ChrootDirectory /data/sftp/%u</span><br><span class=\"line\">ForceCommand internal-sftp</span><br><span class=\"line\">AllowTcpForwarding no</span><br><span class=\"line\">X11Forwarding no</span><br></pre></td></tr></table></figure>\n<h2 id=\"目录授权与新建—服务端\"><a href=\"#目录授权与新建—服务端\" class=\"headerlink\" title=\"目录授权与新建—服务端\"></a>目录授权与新建—服务端</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo <span class=\"built_in\">chown</span> root:sftp /data/sftp/mysftp</span><br><span class=\"line\">sudo <span class=\"built_in\">chmod</span> 755 /data/sftp/mysftp</span><br><span class=\"line\">sudo <span class=\"built_in\">mkdir</span> /data/sftp/mysftp/upload</span><br><span class=\"line\">sudo <span class=\"built_in\">chown</span> mysftp:sftp /data/sftp/mysftp/upload</span><br><span class=\"line\">sudo <span class=\"built_in\">chmod</span> 755 /data/sftp/mysftp/upload</span><br></pre></td></tr></table></figure>\n<h2 id=\"重启服务—服务端\"><a href=\"#重启服务—服务端\" class=\"headerlink\" title=\"重启服务—服务端\"></a>重启服务—服务端</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo systemctl  restart sshd.service   <span class=\"comment\"># 重启服务时如果提示服务不存在，则先添加如下服务</span></span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> ssh.service </span><br><span class=\"line\"><span class=\"comment\"># 再执行：</span></span><br><span class=\"line\">sudo systemctl  restart sshd.service </span><br></pre></td></tr></table></figure>\n<h2 id=\"访问服务器—客户端\"><a href=\"#访问服务器—客户端\" class=\"headerlink\" title=\"访问服务器—客户端\"></a>访问服务器—客户端</h2><p>进入文件管理器或我的电脑<br>输入—例如sftp：&#x2F;&#x2F;10.20.32.** （根据实际服务端IP输入，并键如账号密码，即可访问）</p>\n<h1 id=\"NFS服务搭建\"><a href=\"#NFS服务搭建\" class=\"headerlink\" title=\"NFS服务搭建\"></a>NFS服务搭建</h1><h2 id=\"服务端\"><a href=\"#服务端\" class=\"headerlink\" title=\"服务端\"></a>服务端</h2><h3 id=\"工具安装\"><a href=\"#工具安装\" class=\"headerlink\" title=\"工具安装\"></a>工具安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get install nfs-kernel-server <span class=\"comment\"># 安装 NFS服务器端</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建共享文件夹-1\"><a href=\"#创建共享文件夹-1\" class=\"headerlink\" title=\"创建共享文件夹\"></a>创建共享文件夹</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo <span class=\"built_in\">mkdir</span> /home/deepin-server/nfs       <span class=\"comment\"># 路径可以根据自己需要设置</span></span><br><span class=\"line\">sudo <span class=\"built_in\">chmod</span> -R 777 /home/deepin-server/nfs    <span class=\"comment\"># 设置共享目录权限</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"修改配置文件\"><a href=\"#修改配置文件\" class=\"headerlink\" title=\"修改配置文件\"></a>修改配置文件</h3><p><code>vim /etc/exports</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">配置文件虽然只有一句，但是其中还是有很多讲究； </span><br><span class=\"line\">共享文件可执行权限有： </span><br><span class=\"line\">      ro           只读访问 </span><br><span class=\"line\">      rw           读写访问 </span><br><span class=\"line\">      <span class=\"built_in\">sync</span>          所有数据在请求时写入共享 </span><br><span class=\"line\">      hide          在NFS共享目录中不共享其子目录 </span><br><span class=\"line\">      no_hide         共享NFS目录的子目录 </span><br><span class=\"line\">      all_squash       共享文件的UID和GID映射匿名用户anonymous，适合公用目录。 </span><br><span class=\"line\">      no_all_squash      保留共享文件的UID和GID（默认） </span><br><span class=\"line\">      root_squash       root用户的所有请求映射成如anonymous用户一样的权限（默认） </span><br><span class=\"line\">      no_root_squas      root用户具有根目录的完全管理访问权限 </span><br><span class=\"line\">ip配置一般需要进行限定，最好不要使用* ，不然存在安全问题，可以限定具体ip或者ip段才能挂载。 </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置文件修改如下：\"><a href=\"#配置文件修改如下：\" class=\"headerlink\" title=\"配置文件修改如下：\"></a>配置文件修改如下：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">deepin-server@deepin-server-PC:~$ cat /etc/exports </span><br><span class=\"line\"># /etc/exports: the access control list for filesystems which may be exported</span><br><span class=\"line\">#               to NFS clients.  See exports(5).</span><br><span class=\"line\">#</span><br><span class=\"line\"># Example for NFSv2 and NFSv3:</span><br><span class=\"line\"># /srv/homes       hostname1(rw,sync,no_subtree_check) hostname2(ro,sync,no_subtree_check)</span><br><span class=\"line\"># Example for NFSv4:</span><br><span class=\"line\"># /srv/nfs4        gss/krb5i(rw,sync,fsid=0,crossmnt,no_subtree_check)</span><br><span class=\"line\"># /srv/nfs4/homes  gss/krb5i(rw,sync,no_subtree_check)</span><br><span class=\"line\">/home/deepin-server/nfs  10.20.*(rw)#此处ip只做了部分限制，圆括号里面就是配置权限的。</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动服务-1\"><a href=\"#启动服务-1\" class=\"headerlink\" title=\"启动服务\"></a>启动服务</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">systemctl start rpcbind nfs-server</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查看服务状态-1\"><a href=\"#查看服务状态-1\" class=\"headerlink\" title=\"查看服务状态\"></a>查看服务状态</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">deepin-server@deepin-server-PC:~$ sudo systemctl status rpcbind nfs-server</span><br><span class=\"line\">● rpcbind.service - RPC bind portmap service</span><br><span class=\"line\">   Loaded: loaded (/lib/systemd/system/rpcbind.service; enabled; vendor preset: enabled)</span><br><span class=\"line\">   Active: active (running) since Wed 2022-01-05 11:53:19 CST; 1h 56min ago</span><br><span class=\"line\">     Docs: man:rpcbind(8)</span><br><span class=\"line\"> Main PID: 19304 (rpcbind)</span><br><span class=\"line\">    Tasks: 1 (limit: 19660)</span><br><span class=\"line\">   Memory: 608.0K</span><br><span class=\"line\">   CGroup: /system.slice/rpcbind.service</span><br><span class=\"line\">           └─19304 /sbin/rpcbind -f -w</span><br><span class=\"line\"></span><br><span class=\"line\">1月 05 11:53:19 deepin-server-PC systemd[1]: Starting RPC bind portmap service...</span><br><span class=\"line\">1月 05 11:53:19 deepin-server-PC systemd[1]: Started RPC bind portmap service.</span><br><span class=\"line\"></span><br><span class=\"line\">● nfs-server.service - NFS server and services</span><br><span class=\"line\">   Loaded: loaded (/lib/systemd/system/nfs-server.service; enabled; vendor preset: enabled)</span><br><span class=\"line\">   Active: active (exited) since Wed 2022-01-05 11:53:21 CST; 1h 56min ago</span><br><span class=\"line\">  Process: 19319 ExecStartPre=/usr/sbin/exportfs -r (code=exited, status=0/SUCCESS)</span><br><span class=\"line\">  Process: 19320 ExecStart=/usr/sbin/rpc.nfsd $RPCNFSDARGS (code=exited, status=0/SUCCESS)</span><br><span class=\"line\"> Main PID: 19320 (code=exited, status=0/SUCCESS)</span><br><span class=\"line\"></span><br><span class=\"line\">1月 05 11:53:20 deepin-server-PC systemd[1]: Starting NFS server and services...</span><br><span class=\"line\">1月 05 11:53:20 deepin-server-PC exportfs[19319]: exportfs: /etc/exports [1]: Neither &#x27;subtree_check&#x27; or &#x27;no_subtree_check&#x27; specified for export &quot;10.20.*:/home/deepin-server/Documents/NFS文件目录for-test&quot;.</span><br><span class=\"line\">1月 05 11:53:20 deepin-server-PC exportfs[19319]:   Assuming default behaviour (&#x27;no_subtree_check&#x27;).</span><br><span class=\"line\">1月 05 11:53:20 deepin-server-PC exportfs[19319]:   NOTE: this default has changed since nfs-utils version 1.0.x</span><br><span class=\"line\">1月 05 11:53:21 deepin-server-PC systemd[1]: Started NFS server and services.</span><br><span class=\"line\">deepin-server@deepin-server-PC:~$ </span><br></pre></td></tr></table></figure>\n<p>至此服务端算是配置完成了。</p>\n<h2 id=\"客户端配置\"><a href=\"#客户端配置\" class=\"headerlink\" title=\"客户端配置\"></a>客户端配置</h2><p>客户端主要就是挂载操作，不过挂载nfs的时候同样需要安装客户端软件</p>\n<h3 id=\"客户端安装\"><a href=\"#客户端安装\" class=\"headerlink\" title=\"客户端安装\"></a>客户端安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get install nfs-common</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查看服务端nfs共享信息\"><a href=\"#查看服务端nfs共享信息\" class=\"headerlink\" title=\"查看服务端nfs共享信息\"></a>查看服务端nfs共享信息</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">showmount -e 10.20.13.152</span><br><span class=\"line\">babyfengfjx@babyfengfjx:~$ showmount -e 10.20.13.152</span><br><span class=\"line\">Export list <span class=\"keyword\">for</span> 10.20.13.152:</span><br><span class=\"line\">/home/deepin-server/Documents/NFS文件目录for-test 10.20.*</span><br><span class=\"line\">babyfengfjx@babyfengfjx:~$ </span><br></pre></td></tr></table></figure>\n<h3 id=\"客户端创建挂载目录\"><a href=\"#客户端创建挂载目录\" class=\"headerlink\" title=\"客户端创建挂载目录\"></a>客户端创建挂载目录</h3><p>随便在本地客户端创建一个目录作为NFS挂载目录即可</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo <span class=\"built_in\">mkdir</span> /home/babyfengfjx/Documents/nfsfile/</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"客户端挂载\"><a href=\"#客户端挂载\" class=\"headerlink\" title=\"客户端挂载\"></a>客户端挂载</h3><p>将服务端的NFS共享目录，挂载到本地客户端对应目录即可</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo mount -t nfs 10.20.13.152:/home/deepin-server/Documents/NFS文件目录for-test /home/babyfengfjx/Documents/nfsfile/</span><br></pre></td></tr></table></figure>\n<h3 id=\"查看并传输文件\"><a href=\"#查看并传输文件\" class=\"headerlink\" title=\"查看并传输文件\"></a>查看并传输文件</h3><p>上述操作完成后，此时就可以在客户端对应目录使用NFS存储了，上传新建文件均可以随心所欲。</p>\n<h3 id=\"开机自动挂载\"><a href=\"#开机自动挂载\" class=\"headerlink\" title=\"开机自动挂载\"></a>开机自动挂载</h3><p>写入fstab方法并不推荐，如果NFS挂载失败可能会影响设备正常启动 </p>\n<h4 id=\"写入fstab进行开机自动挂载\"><a href=\"#写入fstab进行开机自动挂载\" class=\"headerlink\" title=\"写入fstab进行开机自动挂载\"></a>写入fstab进行开机自动挂载</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;10.20.13.152:/home/deepin-server/Documents/NFS文件目录for-test /home/babyfengfjx/Documents/nfsfile/ nfs4 defaults 0 0&quot;</span> &gt;&gt; /etc/fstab</span><br><span class=\"line\"> mount -av</span><br></pre></td></tr></table></figure>\n<h4 id=\"通过配置开机自运行脚本\"><a href=\"#通过配置开机自运行脚本\" class=\"headerlink\" title=\"通过配置开机自运行脚本\"></a>通过配置开机自运行脚本</h4><p><strong>原理如下：</strong></p>\n<blockquote>\n<p>新建 &#x2F;etc&#x2F;rc.local 文件<br>这种方法的原理是系统开机后会自动启动 rc-local 服务；<br>rc-local 服务启动后就会自动执行 &#x2F;etc 目录下的 rc.local 脚本；<br>该方法的优点就是不存在第一种方法的三个缺点，脚本执行失败不会出现黑屏弹窗、sleep 不会造成开机黑屏以及执行脚本的用户是 root 用户。 </p>\n</blockquote>\n<p><strong>主要步骤：</strong></p>\n<ol>\n<li>新建 &#x2F;etc&#x2F;rc.local 文件</li>\n<li>粘贴以下模板<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/sh -e</span></span><br><span class=\"line\"><span class=\"comment\"># rc.local</span></span><br><span class=\"line\"><span class=\"comment\"># This script is executed at the end of each multiuser runlevel.</span></span><br><span class=\"line\"><span class=\"comment\"># Make sure that the script will &quot;exit 0&quot; on success or any other</span></span><br><span class=\"line\"><span class=\"comment\"># value on error.</span></span><br><span class=\"line\"><span class=\"comment\"># In order to enable or disable this script just change the execution</span></span><br><span class=\"line\"><span class=\"comment\"># bits.</span></span><br><span class=\"line\"><span class=\"comment\"># By default this script does nothing.</span></span><br><span class=\"line\">01.LitterScript/02.bbsmonitor/bbsmonitor.py &gt;bbs.log 2&gt;&amp;1 &amp;</span><br><span class=\"line\"><span class=\"comment\"># 因为该命令本身就是会以root权限执行，所以不用加sudo</span></span><br><span class=\"line\"><span class=\"built_in\">sleep</span> 5;mount -t nfs 10.20.13.152:/home/deepin-server/Documents/NFS文件目录for-test /home/babyfengfjx/Documents/nfsfile/</span><br><span class=\"line\"><span class=\"built_in\">exit</span> 0</span><br></pre></td></tr></table></figure></li>\n<li>在 exit 0 上方插入你需要自启的命令(一行一个)后保存文件</li>\n<li>给脚本加上 755 权限<br>sudo chmod +755 &#x2F;etc&#x2F;rc.local</li>\n<li>调试脚本(可选)<br>sudo &#x2F;etc&#x2F;rc.local # 使用 sudo 模拟 root 用户开机自启 &#x2F;etc&#x2F;rc.local 文件<br>如果第 5 步模拟启动脚本没有报错，那我们就可以重启电脑看看是否可以成功实现脚本开机自启。重启进入系统后我们可以通过 systemctl status rc-local.service 查看 rc-local 的运行状态，如果结果显示的是 active (exited) 则说明你的脚本已经成功执行，反之如果结果显示 failed,那么你需要检查一下脚本是否哪里有问题。</li>\n</ol>\n<h5 id=\"这里提供可能导致脚本无法正常启动的原因：\"><a href=\"#这里提供可能导致脚本无法正常启动的原因：\" class=\"headerlink\" title=\"这里提供可能导致脚本无法正常启动的原因：\"></a>这里提供可能导致脚本无法正常启动的原因：</h5><p>1、执行脚本的用户不一致<br>由于 rc.local 开机自启的时候是以 root 用户执行的，这里很多人会忽略了一个问题，很多情况下你的命令是必须要普通用户执行的。比如 conky 和虚拟机(用户A建立的VBox和VM Ware虚拟机用户B无法访问)等。<br>假设用户 lolimay 在终端用 VBoxHeadless -s aikuai &amp; 后台启动了虚拟机名 aikuai，那么我们在 rc.local 文件应该用下面这种方式写：<br><code>su - lolimay -c &quot;VBoxHeadless -s aikuai &amp;&quot; # 以 lolimay 用户执行该命令</code><br>2、多余的 sudo<br>前面已经提到 rc.local 开机时是以 root 用户启动的，所以写在 rc.local 文件中命令不需要带有 sudo 前缀(实际上就算你带有了 sudo 前缀也不会产生错误)。<br>3、最佳实践<br>个人建议每当往 rc.local 文件中添加了一个需要自启的命令时，可以先用 sudo &#x2F;etc&#x2F;rc.local 命令模拟一下看看是否能够执行成功(如果执行失败也能够直观地看到出错的原因)，这样能够有效减少你重启电脑来调试的次数。</p>\n"},{"title":"通过xargs配合管道符传递参数","date":"2021-06-03T03:21:34.000Z","_content":"---\n# shell脚本通过xargs配合管道符传递结果\n\n> xargs 是一个 Unix 命令，它的作用是将标准输入中的数据转换为命令行参数，并执行指定的命令。\n\n```Shell\n# 通过find来查找目录下的相关文件，然后传递给cat，注意这里的I参数很重要\nfind -name \"*list\" | xargs -I {} cat {} | grep -i \"^deb\"\n```\n\n**基本用法如下：**\n\n```shell\ncommand | xargs [-options] [command [initial-arguments]]\n```\n\n其中:\n\n- `command` 指定要执行的命令，`xargs` 会将标准输入中的数据作为命令行参数传递给这个命令。\n\n- `-options` 是可选的，用于指定 xargs 的行为方式。\n\n- `initial-arguments` 是可选的，表示在传递的命令行参数之前需要传递的额外参数。\n\n例如，你可以使用 xargs 将文件列表转换为 `rm` 命令的参数，从而删除多个文件：\n\n```shell\nfind . -name \"*.txt\" | xargs rm\n```\n\n或者你可以使用 xargs 将文本文件中的每一行作为 `grep` 命令的参数来搜索多个文件：\n\n```shell\ncat patterns.txt | xargs grep -l\n```\n\n当 xargs 处理的参数数量较多时，它会自动将这些参数分成多批执行，以避免命令行参数过长的问题。你可以使用 `-n` 选项来指定每批参数的数量，例如：\n\n```shell\nfind . -name \"*.txt\" | xargs -n 3 rm\n```\n\n这条命令会将找到的文件名分成多批，每批最多包含 3 个文件名。每批文件名都会作为 `rm` 命令的参数执行。\n\n**配合管道：**\n\n使用 xargs 配合管道是一种常见的模式，这种模式可以用于将输出结果传递给另一个命令作为参数。\n\n例如，你可以使用如下命令查找文件系统中大小超过 100MB 的文件，并使用 xargs 将这些文件删除：\n\n```shell\nfind / -size +100M | xargs rm\n```\n\n也可以使用 xargs 配合管道来实现更复杂的任务，例如：\n\n```shell\ngrep -R \"ERROR\" . | cut -d \":\" -f 1 | sort | uniq | xargs -I{} sed -i '/ERROR/d' {}\n```\n\n这条命令会在当前目录及子目录中查找所有包含 \"ERROR\" 的文件，然后删除这些文件中的 \"ERROR\" 行。\n\n需要注意的是，使用 xargs 配合管道时，应该**避免在管道中使用命令别名**，因为别名可能不会在 xargs 中生效。应该使用完整的命令名称。\n\n\n\n**上面的 -I{} 是什么意思:**\n\n**`-I{}` 是 xargs 的一个选项，用于指定命令中的某个位置应该插入参数**。\n\n例如，在上面的命令中，`-I{}` 表示在命令 `sed -i '/ERROR/d'` 中的 `{}` 处插入参数。因此，当 xargs 执行这条命令时，实际上会执行类似于 `sed -i '/ERROR/d' file1 file2 file3` 的命令。\n\n你可以使用任意的字符替换 `{}`，例如：\n\n```shell\nfind . -name \"*.txt\" | xargs -IXXX mv XXX backup/XXX\n```\n\n这条命令会将找到的所有 .txt 文件移动到 backup 目录下。\n\n需要注意的是，在使用 xargs 的 `-I` 选项时，**你需要确保命令中的替换字符（例如 `{}` 或 `XXX`）不会在命令本身中出现**。否则，xargs 可能会将命令中的字符也作为参数替换。\n\n**扩展：**\n\n除了 `-I` 选项外，xargs 还提供了其他的选项来控制命令的执行方式。\n\n例如，你可以使用 `-p` 选项来让 xargs 在执行命令前显示命令，以便你可以检查命令是否正确：\n\n```shell\necho a b c | xargs -p rm\n```\n\n这条命令会输出 `rm a b c`，然后询问你是否执行这条命令。你可以输入 `y` 来执行命令，或者输入 `n` 来取消执行。\n\n你还可以使用 `-t` 选项来让 xargs 在执行命令前输出命令，以便你可以跟踪命令的执行过程：\n\n```shell\necho a b c | xargs -t rm\n```\n\n这条命令会输出 `rm a b c`，然后执行命令。\n\n\n\n","source":"_posts/03shell_xargs.md","raw":"---\ntitle: 通过xargs配合管道符传递参数\ncategories: \n- linux\n- shell\ntags:\n- linux\n- shell\ndate: 2021-06-03 11:21:34\n---\n---\n# shell脚本通过xargs配合管道符传递结果\n\n> xargs 是一个 Unix 命令，它的作用是将标准输入中的数据转换为命令行参数，并执行指定的命令。\n\n```Shell\n# 通过find来查找目录下的相关文件，然后传递给cat，注意这里的I参数很重要\nfind -name \"*list\" | xargs -I {} cat {} | grep -i \"^deb\"\n```\n\n**基本用法如下：**\n\n```shell\ncommand | xargs [-options] [command [initial-arguments]]\n```\n\n其中:\n\n- `command` 指定要执行的命令，`xargs` 会将标准输入中的数据作为命令行参数传递给这个命令。\n\n- `-options` 是可选的，用于指定 xargs 的行为方式。\n\n- `initial-arguments` 是可选的，表示在传递的命令行参数之前需要传递的额外参数。\n\n例如，你可以使用 xargs 将文件列表转换为 `rm` 命令的参数，从而删除多个文件：\n\n```shell\nfind . -name \"*.txt\" | xargs rm\n```\n\n或者你可以使用 xargs 将文本文件中的每一行作为 `grep` 命令的参数来搜索多个文件：\n\n```shell\ncat patterns.txt | xargs grep -l\n```\n\n当 xargs 处理的参数数量较多时，它会自动将这些参数分成多批执行，以避免命令行参数过长的问题。你可以使用 `-n` 选项来指定每批参数的数量，例如：\n\n```shell\nfind . -name \"*.txt\" | xargs -n 3 rm\n```\n\n这条命令会将找到的文件名分成多批，每批最多包含 3 个文件名。每批文件名都会作为 `rm` 命令的参数执行。\n\n**配合管道：**\n\n使用 xargs 配合管道是一种常见的模式，这种模式可以用于将输出结果传递给另一个命令作为参数。\n\n例如，你可以使用如下命令查找文件系统中大小超过 100MB 的文件，并使用 xargs 将这些文件删除：\n\n```shell\nfind / -size +100M | xargs rm\n```\n\n也可以使用 xargs 配合管道来实现更复杂的任务，例如：\n\n```shell\ngrep -R \"ERROR\" . | cut -d \":\" -f 1 | sort | uniq | xargs -I{} sed -i '/ERROR/d' {}\n```\n\n这条命令会在当前目录及子目录中查找所有包含 \"ERROR\" 的文件，然后删除这些文件中的 \"ERROR\" 行。\n\n需要注意的是，使用 xargs 配合管道时，应该**避免在管道中使用命令别名**，因为别名可能不会在 xargs 中生效。应该使用完整的命令名称。\n\n\n\n**上面的 -I{} 是什么意思:**\n\n**`-I{}` 是 xargs 的一个选项，用于指定命令中的某个位置应该插入参数**。\n\n例如，在上面的命令中，`-I{}` 表示在命令 `sed -i '/ERROR/d'` 中的 `{}` 处插入参数。因此，当 xargs 执行这条命令时，实际上会执行类似于 `sed -i '/ERROR/d' file1 file2 file3` 的命令。\n\n你可以使用任意的字符替换 `{}`，例如：\n\n```shell\nfind . -name \"*.txt\" | xargs -IXXX mv XXX backup/XXX\n```\n\n这条命令会将找到的所有 .txt 文件移动到 backup 目录下。\n\n需要注意的是，在使用 xargs 的 `-I` 选项时，**你需要确保命令中的替换字符（例如 `{}` 或 `XXX`）不会在命令本身中出现**。否则，xargs 可能会将命令中的字符也作为参数替换。\n\n**扩展：**\n\n除了 `-I` 选项外，xargs 还提供了其他的选项来控制命令的执行方式。\n\n例如，你可以使用 `-p` 选项来让 xargs 在执行命令前显示命令，以便你可以检查命令是否正确：\n\n```shell\necho a b c | xargs -p rm\n```\n\n这条命令会输出 `rm a b c`，然后询问你是否执行这条命令。你可以输入 `y` 来执行命令，或者输入 `n` 来取消执行。\n\n你还可以使用 `-t` 选项来让 xargs 在执行命令前输出命令，以便你可以跟踪命令的执行过程：\n\n```shell\necho a b c | xargs -t rm\n```\n\n这条命令会输出 `rm a b c`，然后执行命令。\n\n\n\n","slug":"03shell_xargs","published":1,"updated":"2023-01-05T02:41:22.544Z","_id":"clciheil60007rdxh80jz0304","comments":1,"layout":"post","photos":[],"link":"","content":"<hr>\n<h1 id=\"shell脚本通过xargs配合管道符传递结果\"><a href=\"#shell脚本通过xargs配合管道符传递结果\" class=\"headerlink\" title=\"shell脚本通过xargs配合管道符传递结果\"></a>shell脚本通过xargs配合管道符传递结果</h1><blockquote>\n<p>xargs 是一个 Unix 命令，它的作用是将标准输入中的数据转换为命令行参数，并执行指定的命令。</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">通过find来查找目录下的相关文件，然后传递给<span class=\"built_in\">cat</span>，注意这里的I参数很重要</span></span><br><span class=\"line\">find -name &quot;*list&quot; | xargs -I &#123;&#125; cat &#123;&#125; | grep -i &quot;^deb&quot;</span><br></pre></td></tr></table></figure>\n\n<p><strong>基本用法如下：</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">command | xargs [-options] [command [initial-arguments]]</span><br></pre></td></tr></table></figure>\n\n<p>其中:</p>\n<ul>\n<li><p><code>command</code> 指定要执行的命令，<code>xargs</code> 会将标准输入中的数据作为命令行参数传递给这个命令。</p>\n</li>\n<li><p><code>-options</code> 是可选的，用于指定 xargs 的行为方式。</p>\n</li>\n<li><p><code>initial-arguments</code> 是可选的，表示在传递的命令行参数之前需要传递的额外参数。</p>\n</li>\n</ul>\n<p>例如，你可以使用 xargs 将文件列表转换为 <code>rm</code> 命令的参数，从而删除多个文件：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">find . -name &quot;*.txt&quot; | xargs rm</span><br></pre></td></tr></table></figure>\n\n<p>或者你可以使用 xargs 将文本文件中的每一行作为 <code>grep</code> 命令的参数来搜索多个文件：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">cat patterns.txt | xargs grep -l</span><br></pre></td></tr></table></figure>\n\n<p>当 xargs 处理的参数数量较多时，它会自动将这些参数分成多批执行，以避免命令行参数过长的问题。你可以使用 <code>-n</code> 选项来指定每批参数的数量，例如：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">find . -name &quot;*.txt&quot; | xargs -n 3 rm</span><br></pre></td></tr></table></figure>\n\n<p>这条命令会将找到的文件名分成多批，每批最多包含 3 个文件名。每批文件名都会作为 <code>rm</code> 命令的参数执行。</p>\n<p><strong>配合管道：</strong></p>\n<p>使用 xargs 配合管道是一种常见的模式，这种模式可以用于将输出结果传递给另一个命令作为参数。</p>\n<p>例如，你可以使用如下命令查找文件系统中大小超过 100MB 的文件，并使用 xargs 将这些文件删除：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">find / -size +100M | xargs rm</span><br></pre></td></tr></table></figure>\n\n<p>也可以使用 xargs 配合管道来实现更复杂的任务，例如：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">grep -R &quot;ERROR&quot; . | cut -d &quot;:&quot; -f 1 | sort | uniq | xargs -I&#123;&#125; sed -i &#x27;/ERROR/d&#x27; &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这条命令会在当前目录及子目录中查找所有包含 “ERROR” 的文件，然后删除这些文件中的 “ERROR” 行。</p>\n<p>需要注意的是，使用 xargs 配合管道时，应该<strong>避免在管道中使用命令别名</strong>，因为别名可能不会在 xargs 中生效。应该使用完整的命令名称。</p>\n<p><strong>上面的 -I{} 是什么意思:</strong></p>\n<p><strong><code>-I&#123;&#125;</code> 是 xargs 的一个选项，用于指定命令中的某个位置应该插入参数</strong>。</p>\n<p>例如，在上面的命令中，<code>-I&#123;&#125;</code> 表示在命令 <code>sed -i &#39;/ERROR/d&#39;</code> 中的 <code>&#123;&#125;</code> 处插入参数。因此，当 xargs 执行这条命令时，实际上会执行类似于 <code>sed -i &#39;/ERROR/d&#39; file1 file2 file3</code> 的命令。</p>\n<p>你可以使用任意的字符替换 <code>&#123;&#125;</code>，例如：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">find . -name &quot;*.txt&quot; | xargs -IXXX mv XXX backup/XXX</span><br></pre></td></tr></table></figure>\n\n<p>这条命令会将找到的所有 .txt 文件移动到 backup 目录下。</p>\n<p>需要注意的是，在使用 xargs 的 <code>-I</code> 选项时，<strong>你需要确保命令中的替换字符（例如 <code>&#123;&#125;</code> 或 <code>XXX</code>）不会在命令本身中出现</strong>。否则，xargs 可能会将命令中的字符也作为参数替换。</p>\n<p><strong>扩展：</strong></p>\n<p>除了 <code>-I</code> 选项外，xargs 还提供了其他的选项来控制命令的执行方式。</p>\n<p>例如，你可以使用 <code>-p</code> 选项来让 xargs 在执行命令前显示命令，以便你可以检查命令是否正确：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">echo a b c | xargs -p rm</span><br></pre></td></tr></table></figure>\n\n<p>这条命令会输出 <code>rm a b c</code>，然后询问你是否执行这条命令。你可以输入 <code>y</code> 来执行命令，或者输入 <code>n</code> 来取消执行。</p>\n<p>你还可以使用 <code>-t</code> 选项来让 xargs 在执行命令前输出命令，以便你可以跟踪命令的执行过程：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">echo a b c | xargs -t rm</span><br></pre></td></tr></table></figure>\n\n<p>这条命令会输出 <code>rm a b c</code>，然后执行命令。</p>\n","site":{"data":{}},"excerpt":"","more":"<hr>\n<h1 id=\"shell脚本通过xargs配合管道符传递结果\"><a href=\"#shell脚本通过xargs配合管道符传递结果\" class=\"headerlink\" title=\"shell脚本通过xargs配合管道符传递结果\"></a>shell脚本通过xargs配合管道符传递结果</h1><blockquote>\n<p>xargs 是一个 Unix 命令，它的作用是将标准输入中的数据转换为命令行参数，并执行指定的命令。</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">通过find来查找目录下的相关文件，然后传递给<span class=\"built_in\">cat</span>，注意这里的I参数很重要</span></span><br><span class=\"line\">find -name &quot;*list&quot; | xargs -I &#123;&#125; cat &#123;&#125; | grep -i &quot;^deb&quot;</span><br></pre></td></tr></table></figure>\n\n<p><strong>基本用法如下：</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">command | xargs [-options] [command [initial-arguments]]</span><br></pre></td></tr></table></figure>\n\n<p>其中:</p>\n<ul>\n<li><p><code>command</code> 指定要执行的命令，<code>xargs</code> 会将标准输入中的数据作为命令行参数传递给这个命令。</p>\n</li>\n<li><p><code>-options</code> 是可选的，用于指定 xargs 的行为方式。</p>\n</li>\n<li><p><code>initial-arguments</code> 是可选的，表示在传递的命令行参数之前需要传递的额外参数。</p>\n</li>\n</ul>\n<p>例如，你可以使用 xargs 将文件列表转换为 <code>rm</code> 命令的参数，从而删除多个文件：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">find . -name &quot;*.txt&quot; | xargs rm</span><br></pre></td></tr></table></figure>\n\n<p>或者你可以使用 xargs 将文本文件中的每一行作为 <code>grep</code> 命令的参数来搜索多个文件：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">cat patterns.txt | xargs grep -l</span><br></pre></td></tr></table></figure>\n\n<p>当 xargs 处理的参数数量较多时，它会自动将这些参数分成多批执行，以避免命令行参数过长的问题。你可以使用 <code>-n</code> 选项来指定每批参数的数量，例如：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">find . -name &quot;*.txt&quot; | xargs -n 3 rm</span><br></pre></td></tr></table></figure>\n\n<p>这条命令会将找到的文件名分成多批，每批最多包含 3 个文件名。每批文件名都会作为 <code>rm</code> 命令的参数执行。</p>\n<p><strong>配合管道：</strong></p>\n<p>使用 xargs 配合管道是一种常见的模式，这种模式可以用于将输出结果传递给另一个命令作为参数。</p>\n<p>例如，你可以使用如下命令查找文件系统中大小超过 100MB 的文件，并使用 xargs 将这些文件删除：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">find / -size +100M | xargs rm</span><br></pre></td></tr></table></figure>\n\n<p>也可以使用 xargs 配合管道来实现更复杂的任务，例如：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">grep -R &quot;ERROR&quot; . | cut -d &quot;:&quot; -f 1 | sort | uniq | xargs -I&#123;&#125; sed -i &#x27;/ERROR/d&#x27; &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这条命令会在当前目录及子目录中查找所有包含 “ERROR” 的文件，然后删除这些文件中的 “ERROR” 行。</p>\n<p>需要注意的是，使用 xargs 配合管道时，应该<strong>避免在管道中使用命令别名</strong>，因为别名可能不会在 xargs 中生效。应该使用完整的命令名称。</p>\n<p><strong>上面的 -I{} 是什么意思:</strong></p>\n<p><strong><code>-I&#123;&#125;</code> 是 xargs 的一个选项，用于指定命令中的某个位置应该插入参数</strong>。</p>\n<p>例如，在上面的命令中，<code>-I&#123;&#125;</code> 表示在命令 <code>sed -i &#39;/ERROR/d&#39;</code> 中的 <code>&#123;&#125;</code> 处插入参数。因此，当 xargs 执行这条命令时，实际上会执行类似于 <code>sed -i &#39;/ERROR/d&#39; file1 file2 file3</code> 的命令。</p>\n<p>你可以使用任意的字符替换 <code>&#123;&#125;</code>，例如：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">find . -name &quot;*.txt&quot; | xargs -IXXX mv XXX backup/XXX</span><br></pre></td></tr></table></figure>\n\n<p>这条命令会将找到的所有 .txt 文件移动到 backup 目录下。</p>\n<p>需要注意的是，在使用 xargs 的 <code>-I</code> 选项时，<strong>你需要确保命令中的替换字符（例如 <code>&#123;&#125;</code> 或 <code>XXX</code>）不会在命令本身中出现</strong>。否则，xargs 可能会将命令中的字符也作为参数替换。</p>\n<p><strong>扩展：</strong></p>\n<p>除了 <code>-I</code> 选项外，xargs 还提供了其他的选项来控制命令的执行方式。</p>\n<p>例如，你可以使用 <code>-p</code> 选项来让 xargs 在执行命令前显示命令，以便你可以检查命令是否正确：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">echo a b c | xargs -p rm</span><br></pre></td></tr></table></figure>\n\n<p>这条命令会输出 <code>rm a b c</code>，然后询问你是否执行这条命令。你可以输入 <code>y</code> 来执行命令，或者输入 <code>n</code> 来取消执行。</p>\n<p>你还可以使用 <code>-t</code> 选项来让 xargs 在执行命令前输出命令，以便你可以跟踪命令的执行过程：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">echo a b c | xargs -t rm</span><br></pre></td></tr></table></figure>\n\n<p>这条命令会输出 <code>rm a b c</code>，然后执行命令。</p>\n"},{"title":"IPD流程","date":"2022-04-03T07:21:34.000Z","_content":"---\n![image-20230103150736508](pictures/04IPD/image-20230103150736508.png)\n","source":"_posts/04IPD.md","raw":"---\ntitle: IPD流程\ncategories: \n- IPD\ntags:\n- IPD\ndate: 2022-04-03 15:21:34\n---\n---\n![image-20230103150736508](pictures/04IPD/image-20230103150736508.png)\n","slug":"04IPD","published":1,"updated":"2023-01-03T07:36:07.133Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clciheil70008rdxh2knm292y","content":"<hr>\n<p><img src=\"/pictures/04IPD/image-20230103150736508.png\" alt=\"image-20230103150736508\"></p>\n","site":{"data":{}},"excerpt":"","more":"<hr>\n<p><img src=\"/pictures/04IPD/image-20230103150736508.png\" alt=\"image-20230103150736508\"></p>\n"},{"title":"Python循环创建变量/规律性命名变量","date":"2020-01-03T07:21:34.000Z","_content":"\n# 需求背景：\n\n> 有时候在编写小脚本时，存在一些需要批量创建变量名的时候，在存在多少个变量不确定的情况下，通过提前写死多个变量是不合适的，所以此时就需要根据实际变量个数，来确定最终变量名称，也就有了这个需求。\n\n- 其核心就是通过```locals```来完成这个效果；\n- 因为我们在创建变量的时候，也就是一个局部变量\n- `locals()` 是一个内建函数，它会返回一个表示当前局部符号表的字典。它允许你检查函数或方法中的局部变量，在调试的时候也非常有用；\n\n## locals输出是一个字典\n\n所以可以通过在字典中使用它的键来访问局部变量的值，如下所示：\n\n```python\ndef my_function(x):\n      y = x + 1\n      print(locals()['y'])\n\nmy_function(5)\n```\n\n这会输出 `6`。\n\n## 动态创建局部变量\n\n那么想要动态的创建局部变量，就可以利用这个字典的特性来直接给`locals()`这个字典中创建字典对象就可以：\n\n---\n```python\nfor i in range(5):\n    locals()[f'num_{i}']=i  \n```\n\n这样就可以动态的创建局部变量了。\n\n## 全局变量\n\n如果想检查全局变量，可以使用 `globals()` 函数。它的用法与 `locals()` 函数类似，但它返回的是全局符号表。\n\n例如：\n\n```python\nx = 5\ndef my_function():\n  y = x + 1\n  print(globals())\nmy_function()\n```\n\n这会输出一个包含全局变量 `x` 的字典：\n\n```\nCopy code\n{'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': None, '__annotations__': {}, '__builtins__': <module 'builtins' (built-in)>, 'x': 5, 'my_function': <function my_function at 0x1022d1e18>}\n```\n\n你可以使用 `globals()['x']` 来访问全局变量 `x` 的值。\n\n就像 `locals()` 函数一样，`globals()` 函数也返回的是一个副本，修改返回的字典并不会更改全局变量。要修改全局变量，你需要使用赋值语句（例如 `x = 5`）。\n","source":"_posts/05Loop_creation_variable.md","raw":"---\n\ntitle: Python循环创建变量/规律性命名变量\ncategories: \n- python\n- 变量\ntags:\n- python\ndate: 2020-01-03 15:21:34\n\n---\n\n# 需求背景：\n\n> 有时候在编写小脚本时，存在一些需要批量创建变量名的时候，在存在多少个变量不确定的情况下，通过提前写死多个变量是不合适的，所以此时就需要根据实际变量个数，来确定最终变量名称，也就有了这个需求。\n\n- 其核心就是通过```locals```来完成这个效果；\n- 因为我们在创建变量的时候，也就是一个局部变量\n- `locals()` 是一个内建函数，它会返回一个表示当前局部符号表的字典。它允许你检查函数或方法中的局部变量，在调试的时候也非常有用；\n\n## locals输出是一个字典\n\n所以可以通过在字典中使用它的键来访问局部变量的值，如下所示：\n\n```python\ndef my_function(x):\n      y = x + 1\n      print(locals()['y'])\n\nmy_function(5)\n```\n\n这会输出 `6`。\n\n## 动态创建局部变量\n\n那么想要动态的创建局部变量，就可以利用这个字典的特性来直接给`locals()`这个字典中创建字典对象就可以：\n\n---\n```python\nfor i in range(5):\n    locals()[f'num_{i}']=i  \n```\n\n这样就可以动态的创建局部变量了。\n\n## 全局变量\n\n如果想检查全局变量，可以使用 `globals()` 函数。它的用法与 `locals()` 函数类似，但它返回的是全局符号表。\n\n例如：\n\n```python\nx = 5\ndef my_function():\n  y = x + 1\n  print(globals())\nmy_function()\n```\n\n这会输出一个包含全局变量 `x` 的字典：\n\n```\nCopy code\n{'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': None, '__annotations__': {}, '__builtins__': <module 'builtins' (built-in)>, 'x': 5, 'my_function': <function my_function at 0x1022d1e18>}\n```\n\n你可以使用 `globals()['x']` 来访问全局变量 `x` 的值。\n\n就像 `locals()` 函数一样，`globals()` 函数也返回的是一个副本，修改返回的字典并不会更改全局变量。要修改全局变量，你需要使用赋值语句（例如 `x = 5`）。\n","slug":"05Loop_creation_variable","published":1,"updated":"2023-01-03T07:32:15.193Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clciheil70009rdxh74q19m7d","content":"<h1 id=\"需求背景：\"><a href=\"#需求背景：\" class=\"headerlink\" title=\"需求背景：\"></a>需求背景：</h1><blockquote>\n<p>有时候在编写小脚本时，存在一些需要批量创建变量名的时候，在存在多少个变量不确定的情况下，通过提前写死多个变量是不合适的，所以此时就需要根据实际变量个数，来确定最终变量名称，也就有了这个需求。</p>\n</blockquote>\n<ul>\n<li>其核心就是通过<code>locals</code>来完成这个效果；</li>\n<li>因为我们在创建变量的时候，也就是一个局部变量</li>\n<li><code>locals()</code> 是一个内建函数，它会返回一个表示当前局部符号表的字典。它允许你检查函数或方法中的局部变量，在调试的时候也非常有用；</li>\n</ul>\n<h2 id=\"locals输出是一个字典\"><a href=\"#locals输出是一个字典\" class=\"headerlink\" title=\"locals输出是一个字典\"></a>locals输出是一个字典</h2><p>所以可以通过在字典中使用它的键来访问局部变量的值，如下所示：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">my_function</span>(<span class=\"params\">x</span>):</span><br><span class=\"line\">      y = x + <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"built_in\">print</span>(<span class=\"built_in\">locals</span>()[<span class=\"string\">&#x27;y&#x27;</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">my_function(<span class=\"number\">5</span>)</span><br></pre></td></tr></table></figure>\n\n<p>这会输出 <code>6</code>。</p>\n<h2 id=\"动态创建局部变量\"><a href=\"#动态创建局部变量\" class=\"headerlink\" title=\"动态创建局部变量\"></a>动态创建局部变量</h2><p>那么想要动态的创建局部变量，就可以利用这个字典的特性来直接给<code>locals()</code>这个字典中创建字典对象就可以：</p>\n<hr>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">5</span>):</span><br><span class=\"line\">    <span class=\"built_in\">locals</span>()[<span class=\"string\">f&#x27;num_<span class=\"subst\">&#123;i&#125;</span>&#x27;</span>]=i  </span><br></pre></td></tr></table></figure>\n\n<p>这样就可以动态的创建局部变量了。</p>\n<h2 id=\"全局变量\"><a href=\"#全局变量\" class=\"headerlink\" title=\"全局变量\"></a>全局变量</h2><p>如果想检查全局变量，可以使用 <code>globals()</code> 函数。它的用法与 <code>locals()</code> 函数类似，但它返回的是全局符号表。</p>\n<p>例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">x = <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">my_function</span>():</span><br><span class=\"line\">  y = x + <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"built_in\">globals</span>())</span><br><span class=\"line\">my_function()</span><br></pre></td></tr></table></figure>\n\n<p>这会输出一个包含全局变量 <code>x</code> 的字典：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Copy code</span><br><span class=\"line\">&#123;&#x27;__name__&#x27;: &#x27;__main__&#x27;, &#x27;__doc__&#x27;: None, &#x27;__package__&#x27;: None, &#x27;__loader__&#x27;: &lt;class &#x27;_frozen_importlib.BuiltinImporter&#x27;&gt;, &#x27;__spec__&#x27;: None, &#x27;__annotations__&#x27;: &#123;&#125;, &#x27;__builtins__&#x27;: &lt;module &#x27;builtins&#x27; (built-in)&gt;, &#x27;x&#x27;: 5, &#x27;my_function&#x27;: &lt;function my_function at 0x1022d1e18&gt;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>你可以使用 <code>globals()[&#39;x&#39;]</code> 来访问全局变量 <code>x</code> 的值。</p>\n<p>就像 <code>locals()</code> 函数一样，<code>globals()</code> 函数也返回的是一个副本，修改返回的字典并不会更改全局变量。要修改全局变量，你需要使用赋值语句（例如 <code>x = 5</code>）。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"需求背景：\"><a href=\"#需求背景：\" class=\"headerlink\" title=\"需求背景：\"></a>需求背景：</h1><blockquote>\n<p>有时候在编写小脚本时，存在一些需要批量创建变量名的时候，在存在多少个变量不确定的情况下，通过提前写死多个变量是不合适的，所以此时就需要根据实际变量个数，来确定最终变量名称，也就有了这个需求。</p>\n</blockquote>\n<ul>\n<li>其核心就是通过<code>locals</code>来完成这个效果；</li>\n<li>因为我们在创建变量的时候，也就是一个局部变量</li>\n<li><code>locals()</code> 是一个内建函数，它会返回一个表示当前局部符号表的字典。它允许你检查函数或方法中的局部变量，在调试的时候也非常有用；</li>\n</ul>\n<h2 id=\"locals输出是一个字典\"><a href=\"#locals输出是一个字典\" class=\"headerlink\" title=\"locals输出是一个字典\"></a>locals输出是一个字典</h2><p>所以可以通过在字典中使用它的键来访问局部变量的值，如下所示：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">my_function</span>(<span class=\"params\">x</span>):</span><br><span class=\"line\">      y = x + <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"built_in\">print</span>(<span class=\"built_in\">locals</span>()[<span class=\"string\">&#x27;y&#x27;</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">my_function(<span class=\"number\">5</span>)</span><br></pre></td></tr></table></figure>\n\n<p>这会输出 <code>6</code>。</p>\n<h2 id=\"动态创建局部变量\"><a href=\"#动态创建局部变量\" class=\"headerlink\" title=\"动态创建局部变量\"></a>动态创建局部变量</h2><p>那么想要动态的创建局部变量，就可以利用这个字典的特性来直接给<code>locals()</code>这个字典中创建字典对象就可以：</p>\n<hr>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">5</span>):</span><br><span class=\"line\">    <span class=\"built_in\">locals</span>()[<span class=\"string\">f&#x27;num_<span class=\"subst\">&#123;i&#125;</span>&#x27;</span>]=i  </span><br></pre></td></tr></table></figure>\n\n<p>这样就可以动态的创建局部变量了。</p>\n<h2 id=\"全局变量\"><a href=\"#全局变量\" class=\"headerlink\" title=\"全局变量\"></a>全局变量</h2><p>如果想检查全局变量，可以使用 <code>globals()</code> 函数。它的用法与 <code>locals()</code> 函数类似，但它返回的是全局符号表。</p>\n<p>例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">x = <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">my_function</span>():</span><br><span class=\"line\">  y = x + <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"built_in\">globals</span>())</span><br><span class=\"line\">my_function()</span><br></pre></td></tr></table></figure>\n\n<p>这会输出一个包含全局变量 <code>x</code> 的字典：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Copy code</span><br><span class=\"line\">&#123;&#x27;__name__&#x27;: &#x27;__main__&#x27;, &#x27;__doc__&#x27;: None, &#x27;__package__&#x27;: None, &#x27;__loader__&#x27;: &lt;class &#x27;_frozen_importlib.BuiltinImporter&#x27;&gt;, &#x27;__spec__&#x27;: None, &#x27;__annotations__&#x27;: &#123;&#125;, &#x27;__builtins__&#x27;: &lt;module &#x27;builtins&#x27; (built-in)&gt;, &#x27;x&#x27;: 5, &#x27;my_function&#x27;: &lt;function my_function at 0x1022d1e18&gt;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>你可以使用 <code>globals()[&#39;x&#39;]</code> 来访问全局变量 <code>x</code> 的值。</p>\n<p>就像 <code>locals()</code> 函数一样，<code>globals()</code> 函数也返回的是一个副本，修改返回的字典并不会更改全局变量。要修改全局变量，你需要使用赋值语句（例如 <code>x = 5</code>）。</p>\n"},{"title":"监控石墨文档的文件数据变化，并提交之明道云","date":"2022-09-26T07:21:34.000Z","_content":"\n**核心知识点：**\n\n> - 可使用两种方法来处理登录获取session: 直接通过登录方式，同时**处理重定向问题**；直接手动添加cookie信息来构建session;\n> - **通过递归来处理子文件夹的名字，且使用类变量来存储需要的数据**，重点注意**此类变量在使用完后需要清空处理，不然在程序循环跑的过程中会出现数据异常（旧数据一直都在）；**\n> - 所有的功能均采用分而治之的思想，拆解到足够细，让方法各司其职；\n> - 检测web端数据变化时，**采用本地构建数据库方式（采用shelve），依次对增删改的数据变化做处理**；\n> - 本地数据存储时机是在提交数据到web端返回成功后才做存储，避免因提交失败导致本地数据与web数据不一致问题；\n> - apscheduler 模块在使用时，采用的后台阻塞式，且采用了触发器对象来更灵活的配置触发规则。\n\n```Python\nimport requests\nimport shelve\nfrom apscheduler.schedulers.blocking import BlockingScheduler\nfrom apscheduler.triggers.combining import AndTrigger, OrTrigger\nfrom apscheduler.triggers.interval import IntervalTrigger\nfrom apscheduler.triggers.cron import CronTrigger\nclass Oper_shimo():\n    \"\"\"\n    石墨文档操作类\n    \"\"\"\n\n    # @classmethod\n    # def login_shimo(cls,username,passwd):\n    #     \"\"\"\n    #     登录石墨，这个方法就是直接通过登录接口来拿session，但是因为该网站登录有重定向，所以需要进行二次访问重定向后的地址才能拿到session\n    #     \"\"\"\n    #     userdata = {\n    #         \"username\": username,\n    #         \"password\": passwd\n    #     }\n    #     login_url = 'https://doc.uniontech.com/lizard-api/ldap/login'\n    #     session = requests.Session()\n    #     redirectinfo = session.post(login_url, json=userdata).json()\n    #     redirect_url = redirectinfo['redirect_url'] # 拿到重定向链接\n    #     session.get(redirect_url) # 在这里拿到session的\n    #     return session\n\n    @classmethod\n    def login_shimo(cls, cookie):\n        \"\"\"\n        登录石墨\n        \"\"\"\n        cookie = dict([ i.strip().split('=',1) for i in cookie.split(';')])\n        session = requests.Session()\n        session.cookies.update(cookie)\n        return session\n    @classmethod\n    def get_folder_source(cls,session,folder_guid):\n        \"\"\"\n        获取文件夹下信息\n        test:qjPy69jDYXVV6XYr\n        返回，获取的原始json信息，以便提供给后续数据清晰函数使用\n        \"\"\"\n        folder_url = f'https://doc.uniontech.com/lizard-api/files?folder={folder_guid}'\n        return  session.get(folder_url).json()\n\n    @classmethod\n    def wash_folderdata(cls,folder_jsondata):\n        \"\"\"\n        使用上面获取文件夹基础信息的函数返回数据，返回清洗后的数据列表\n        \"\"\"\n        folder_infos = []\n\n        for item in folder_jsondata:\n            folder_base_info = {}\n            folder_base_info['name'] = item['name']\n            folder_base_info['type'] = item['type']\n            folder_base_info['url'] = item['url']\n            folder_base_info['isFolder'] = item['isFolder']\n            folder_base_info['guid'] = item['guid']\n            folder_base_info['id'] = item['id']\n            folder_base_info['createdby'] = item['user']['name']\n            folder_base_info['createdat'] = item['created_at'].split('.')[0].replace('T',' ')\n            folder_base_info['updatedAt'] = item['updatedAt'].split('.')[0].replace('T', ' ')\n            folder_base_info['updateby'] = item['updatedUser']['name']\n            folder_infos.append(folder_base_info)\n\n        return folder_infos\n    @classmethod\n    def get_file_fathername(cls,session,folderguid):\n        \"\"\"\n        通过上级目录guid 返回上级目录名称\n        \"\"\"\n        fathername_url = f'https://doc.uniontech.com/lizard-api/files/{folderguid}'\n        return session.get(fathername_url).json()['name']\n\n    filelist = []  # 类变量，存储返回信息的，记得用完后，需要清空\n    @classmethod\n\n    def get_all_fileinfo(cls,session,foldersinfo,folder_name=''):\n        \"\"\"\n        返回文件夹和子文件夹下的所有文件信息\n        \"\"\"\n        for file in foldersinfo:\n            if not file['isFolder']:\n                file['fathername'] = folder_name\n                cls.filelist.append(file)\n            else:\n\n                foldername = Oper_shimo.get_file_fathername(session,file['guid'])\n                if folder_name:\n                    foldernames = folder_name +\"|>|\"+foldername\n                else:\n                    foldernames = foldername\n                folder_jsondata  = Oper_shimo.get_folder_source(session,file['guid'])\n                folder_infos = Oper_shimo.wash_folderdata(folder_jsondata)\n                Oper_shimo.get_all_fileinfo(session,folder_infos,folder_name= foldernames)\n        return cls.filelist\n    @classmethod\n    def get_send_data(cls,fileinfo):\n        \"\"\"\n        判断文件的增删改动,然后输出最终需要更新的信息\n        返回数据是字典列表\n        用完后需要清空类变量 filelist\n        \"\"\"\n        send_list = []\n        web_ids = []\n        local_ids = []\n        for file in fileinfo:\n            # print(f\"web数据为：{file}\")\n            web_ids.append(str(file['id']))\n            with shelve.open('localdb') as file_localdb:\n                local_ids = list(file_localdb.keys())\n                try:\n                    # print(f\"本地数据：{file_localdb[str(file['id'])] }\")\n\n                    if file_localdb[str(file['id'])] != file:\n                        file['local_status'] = 'update'\n                        send_list.append(file)\n                except KeyError as e:\n                    print('新增数据～')\n                    file['local_status'] = 'add'\n                    send_list.append(file)\n\n\n        del_data = list(set(local_ids) - set(web_ids))\n        for id in del_data:\n            with shelve.open('localdb') as file_localdb:\n                del_file = file_localdb[str(id)]\n                del_file['local_status'] = 'del'\n                send_list.append(del_file)\n                del file_localdb[str(id)]\n        cls.filelist = [] # 这里很重要，不然在循环过程中，会出现列表数据一直保留导致数据不正常。\n        return send_list\n\n    @classmethod\n    def store_localdb(cls,file):\n        \"\"\"\n        信息提交到明道云成功后，将数据存储更新到本地数据库\n        \"\"\"\n        with shelve.open('localdb') as file_localdb:\n            if file['local_status'] != 'del':\n                del file['local_status']\n                file_localdb[str(file['id'])] = file\n\n    @classmethod\n    def send_data2mdy(cls,sendinfo):\n        \"\"\"\n        将需要更新的数据提交明道云\n        接受数据为文件信息原始数据即可\n        \"\"\"\n        webhook = 'https://cooperation.uniontech.com:443/api/workflow/hooks/NjMyZDcwMjJjYmJjZjQ3MDkwNjVlY2Mw'\n        for file in sendinfo:\n            body = {\n                    \"name\": file['name'],\n                    \"type\": file['type'],\n                    \"url\": f\"https://doc.uniontech.com{file['url']}\",\n                    \"id\": file['id'],\n                    \"createdby\": file['createdby'],\n                    \"createdat\": file['createdat'],\n                    \"updatedAt\": file['updatedAt'],\n                    \"updateby\": file['updateby'],\n                    \"fathername\": file['fathername'].split(\"|>|\")[0],\n                    \"local_status\":file['local_status']\n\n                }\n            res = requests.post(webhook,data=body).status_code\n            if res == 200:\n                Oper_shimo.store_localdb(file)\n                print(f'{body} 数据更新成功！')\n            else:\n                print(f'{body} 数据更新失败！')\n\ndef main():\n    \"\"\"\n    主函数\n    \"\"\"\n    # 此处可以直接手动获取cookie来添加到session，未采用直接登录的方式主要是因为会频繁更换账号密码，且跟他人要cookie信息更加安全\n    cookie = 'deviceId=browser-8f474a86-beda-76ea-0d9b-a8b79fb88aff; fp=31ab340bc8205713b458b6f9d2771968; sajssdk_2015_cross_new_user=1; sensorsdata2015jssdkcross=%7B%22distinct_id%22%3A%223066%22%2C%22%24device_id%22%3A%221834416802a1571-0c31cd72cc2c7d-477a6e25-1fa400-1834416802b13b8%22%2C%22props%22%3A%7B%22%24latest_traffic_source_type%22%3A%22%E7%9B%B4%E6%8E%A5%E6%B5%81%E9%87%8F%22%2C%22%24latest_referrer%22%3A%22%22%2C%22%24latest_referrer_host%22%3A%22%22%2C%22%24latest_search_keyword%22%3A%22%E6%9C%AA%E5%8F%96%E5%88%B0%E5%80%BC_%E7%9B%B4%E6%8E%A5%E6%89%93%E5%BC%80%22%7D%2C%22first_id%22%3A%221834416802a1571-0c31cd72cc2c7d-477a6e25-1fa400-1834416802b13b8%22%7D; LOCALE=zh-CN; sensorsdata2015session=%7B%7D; shimo_sid=s%3Ac42f99aa2b1845fbb92f114644d75e7e.aI24YO%2FppGMK1dQxw65DiCfS%2Ba%2BSDwzPWvHGKU7n6WE'\n    folderguids = {\"技术成果贡献\":\"8Nk6MwB2zmfZBvqL\",}\n\n    for guid in folderguids.values():\n        shimo = Oper_shimo()\n        session = shimo.login_shimo(cookie)\n        folder_jsondata = shimo.get_folder_source(session,guid)\n        foldersinfo = shimo.wash_folderdata(folder_jsondata)\n        fileinfos = shimo.get_all_fileinfo(session ,foldersinfo)\n        # print(fileinfos)\n        send_data = shimo.get_send_data(fileinfos)\n        print(f'待更新数据为{send_data}')\n        shimo.send_data2mdy(send_data)\n\nmain()\n\nif  __name__ == '__main__':\n    # 创建定时对象\n    schedu = BlockingScheduler(timezone='Asia/Shanghai')\n    # 创建触发器（通过触发器来设置定时任务，更加灵活）\n    trigger = OrTrigger([CronTrigger(day_of_week=\"0-4\", hour='9-22', minute='*/10', second='00'),])  # 可以继续在列表中添加其他更多的规则\n    schedu.add_job(main,trigger)\n    schedu.start()\n```\n","source":"_posts/06JianKongShiMoWenDang.md","raw":"---\n\ntitle: 监控石墨文档的文件数据变化，并提交之明道云\ncategories: \n- python\n- 爬虫\ntags:\n- python\n- 爬虫\n- 递归\n- requests\n- shelve\n- cookie\n- session\n- apscheduler\n- 重定向\ndate: 2022-09-26 15:21:34\n\n---\n\n**核心知识点：**\n\n> - 可使用两种方法来处理登录获取session: 直接通过登录方式，同时**处理重定向问题**；直接手动添加cookie信息来构建session;\n> - **通过递归来处理子文件夹的名字，且使用类变量来存储需要的数据**，重点注意**此类变量在使用完后需要清空处理，不然在程序循环跑的过程中会出现数据异常（旧数据一直都在）；**\n> - 所有的功能均采用分而治之的思想，拆解到足够细，让方法各司其职；\n> - 检测web端数据变化时，**采用本地构建数据库方式（采用shelve），依次对增删改的数据变化做处理**；\n> - 本地数据存储时机是在提交数据到web端返回成功后才做存储，避免因提交失败导致本地数据与web数据不一致问题；\n> - apscheduler 模块在使用时，采用的后台阻塞式，且采用了触发器对象来更灵活的配置触发规则。\n\n```Python\nimport requests\nimport shelve\nfrom apscheduler.schedulers.blocking import BlockingScheduler\nfrom apscheduler.triggers.combining import AndTrigger, OrTrigger\nfrom apscheduler.triggers.interval import IntervalTrigger\nfrom apscheduler.triggers.cron import CronTrigger\nclass Oper_shimo():\n    \"\"\"\n    石墨文档操作类\n    \"\"\"\n\n    # @classmethod\n    # def login_shimo(cls,username,passwd):\n    #     \"\"\"\n    #     登录石墨，这个方法就是直接通过登录接口来拿session，但是因为该网站登录有重定向，所以需要进行二次访问重定向后的地址才能拿到session\n    #     \"\"\"\n    #     userdata = {\n    #         \"username\": username,\n    #         \"password\": passwd\n    #     }\n    #     login_url = 'https://doc.uniontech.com/lizard-api/ldap/login'\n    #     session = requests.Session()\n    #     redirectinfo = session.post(login_url, json=userdata).json()\n    #     redirect_url = redirectinfo['redirect_url'] # 拿到重定向链接\n    #     session.get(redirect_url) # 在这里拿到session的\n    #     return session\n\n    @classmethod\n    def login_shimo(cls, cookie):\n        \"\"\"\n        登录石墨\n        \"\"\"\n        cookie = dict([ i.strip().split('=',1) for i in cookie.split(';')])\n        session = requests.Session()\n        session.cookies.update(cookie)\n        return session\n    @classmethod\n    def get_folder_source(cls,session,folder_guid):\n        \"\"\"\n        获取文件夹下信息\n        test:qjPy69jDYXVV6XYr\n        返回，获取的原始json信息，以便提供给后续数据清晰函数使用\n        \"\"\"\n        folder_url = f'https://doc.uniontech.com/lizard-api/files?folder={folder_guid}'\n        return  session.get(folder_url).json()\n\n    @classmethod\n    def wash_folderdata(cls,folder_jsondata):\n        \"\"\"\n        使用上面获取文件夹基础信息的函数返回数据，返回清洗后的数据列表\n        \"\"\"\n        folder_infos = []\n\n        for item in folder_jsondata:\n            folder_base_info = {}\n            folder_base_info['name'] = item['name']\n            folder_base_info['type'] = item['type']\n            folder_base_info['url'] = item['url']\n            folder_base_info['isFolder'] = item['isFolder']\n            folder_base_info['guid'] = item['guid']\n            folder_base_info['id'] = item['id']\n            folder_base_info['createdby'] = item['user']['name']\n            folder_base_info['createdat'] = item['created_at'].split('.')[0].replace('T',' ')\n            folder_base_info['updatedAt'] = item['updatedAt'].split('.')[0].replace('T', ' ')\n            folder_base_info['updateby'] = item['updatedUser']['name']\n            folder_infos.append(folder_base_info)\n\n        return folder_infos\n    @classmethod\n    def get_file_fathername(cls,session,folderguid):\n        \"\"\"\n        通过上级目录guid 返回上级目录名称\n        \"\"\"\n        fathername_url = f'https://doc.uniontech.com/lizard-api/files/{folderguid}'\n        return session.get(fathername_url).json()['name']\n\n    filelist = []  # 类变量，存储返回信息的，记得用完后，需要清空\n    @classmethod\n\n    def get_all_fileinfo(cls,session,foldersinfo,folder_name=''):\n        \"\"\"\n        返回文件夹和子文件夹下的所有文件信息\n        \"\"\"\n        for file in foldersinfo:\n            if not file['isFolder']:\n                file['fathername'] = folder_name\n                cls.filelist.append(file)\n            else:\n\n                foldername = Oper_shimo.get_file_fathername(session,file['guid'])\n                if folder_name:\n                    foldernames = folder_name +\"|>|\"+foldername\n                else:\n                    foldernames = foldername\n                folder_jsondata  = Oper_shimo.get_folder_source(session,file['guid'])\n                folder_infos = Oper_shimo.wash_folderdata(folder_jsondata)\n                Oper_shimo.get_all_fileinfo(session,folder_infos,folder_name= foldernames)\n        return cls.filelist\n    @classmethod\n    def get_send_data(cls,fileinfo):\n        \"\"\"\n        判断文件的增删改动,然后输出最终需要更新的信息\n        返回数据是字典列表\n        用完后需要清空类变量 filelist\n        \"\"\"\n        send_list = []\n        web_ids = []\n        local_ids = []\n        for file in fileinfo:\n            # print(f\"web数据为：{file}\")\n            web_ids.append(str(file['id']))\n            with shelve.open('localdb') as file_localdb:\n                local_ids = list(file_localdb.keys())\n                try:\n                    # print(f\"本地数据：{file_localdb[str(file['id'])] }\")\n\n                    if file_localdb[str(file['id'])] != file:\n                        file['local_status'] = 'update'\n                        send_list.append(file)\n                except KeyError as e:\n                    print('新增数据～')\n                    file['local_status'] = 'add'\n                    send_list.append(file)\n\n\n        del_data = list(set(local_ids) - set(web_ids))\n        for id in del_data:\n            with shelve.open('localdb') as file_localdb:\n                del_file = file_localdb[str(id)]\n                del_file['local_status'] = 'del'\n                send_list.append(del_file)\n                del file_localdb[str(id)]\n        cls.filelist = [] # 这里很重要，不然在循环过程中，会出现列表数据一直保留导致数据不正常。\n        return send_list\n\n    @classmethod\n    def store_localdb(cls,file):\n        \"\"\"\n        信息提交到明道云成功后，将数据存储更新到本地数据库\n        \"\"\"\n        with shelve.open('localdb') as file_localdb:\n            if file['local_status'] != 'del':\n                del file['local_status']\n                file_localdb[str(file['id'])] = file\n\n    @classmethod\n    def send_data2mdy(cls,sendinfo):\n        \"\"\"\n        将需要更新的数据提交明道云\n        接受数据为文件信息原始数据即可\n        \"\"\"\n        webhook = 'https://cooperation.uniontech.com:443/api/workflow/hooks/NjMyZDcwMjJjYmJjZjQ3MDkwNjVlY2Mw'\n        for file in sendinfo:\n            body = {\n                    \"name\": file['name'],\n                    \"type\": file['type'],\n                    \"url\": f\"https://doc.uniontech.com{file['url']}\",\n                    \"id\": file['id'],\n                    \"createdby\": file['createdby'],\n                    \"createdat\": file['createdat'],\n                    \"updatedAt\": file['updatedAt'],\n                    \"updateby\": file['updateby'],\n                    \"fathername\": file['fathername'].split(\"|>|\")[0],\n                    \"local_status\":file['local_status']\n\n                }\n            res = requests.post(webhook,data=body).status_code\n            if res == 200:\n                Oper_shimo.store_localdb(file)\n                print(f'{body} 数据更新成功！')\n            else:\n                print(f'{body} 数据更新失败！')\n\ndef main():\n    \"\"\"\n    主函数\n    \"\"\"\n    # 此处可以直接手动获取cookie来添加到session，未采用直接登录的方式主要是因为会频繁更换账号密码，且跟他人要cookie信息更加安全\n    cookie = 'deviceId=browser-8f474a86-beda-76ea-0d9b-a8b79fb88aff; fp=31ab340bc8205713b458b6f9d2771968; sajssdk_2015_cross_new_user=1; sensorsdata2015jssdkcross=%7B%22distinct_id%22%3A%223066%22%2C%22%24device_id%22%3A%221834416802a1571-0c31cd72cc2c7d-477a6e25-1fa400-1834416802b13b8%22%2C%22props%22%3A%7B%22%24latest_traffic_source_type%22%3A%22%E7%9B%B4%E6%8E%A5%E6%B5%81%E9%87%8F%22%2C%22%24latest_referrer%22%3A%22%22%2C%22%24latest_referrer_host%22%3A%22%22%2C%22%24latest_search_keyword%22%3A%22%E6%9C%AA%E5%8F%96%E5%88%B0%E5%80%BC_%E7%9B%B4%E6%8E%A5%E6%89%93%E5%BC%80%22%7D%2C%22first_id%22%3A%221834416802a1571-0c31cd72cc2c7d-477a6e25-1fa400-1834416802b13b8%22%7D; LOCALE=zh-CN; sensorsdata2015session=%7B%7D; shimo_sid=s%3Ac42f99aa2b1845fbb92f114644d75e7e.aI24YO%2FppGMK1dQxw65DiCfS%2Ba%2BSDwzPWvHGKU7n6WE'\n    folderguids = {\"技术成果贡献\":\"8Nk6MwB2zmfZBvqL\",}\n\n    for guid in folderguids.values():\n        shimo = Oper_shimo()\n        session = shimo.login_shimo(cookie)\n        folder_jsondata = shimo.get_folder_source(session,guid)\n        foldersinfo = shimo.wash_folderdata(folder_jsondata)\n        fileinfos = shimo.get_all_fileinfo(session ,foldersinfo)\n        # print(fileinfos)\n        send_data = shimo.get_send_data(fileinfos)\n        print(f'待更新数据为{send_data}')\n        shimo.send_data2mdy(send_data)\n\nmain()\n\nif  __name__ == '__main__':\n    # 创建定时对象\n    schedu = BlockingScheduler(timezone='Asia/Shanghai')\n    # 创建触发器（通过触发器来设置定时任务，更加灵活）\n    trigger = OrTrigger([CronTrigger(day_of_week=\"0-4\", hour='9-22', minute='*/10', second='00'),])  # 可以继续在列表中添加其他更多的规则\n    schedu.add_job(main,trigger)\n    schedu.start()\n```\n","slug":"06JianKongShiMoWenDang","published":1,"updated":"2023-01-03T07:48:38.863Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clciheil9000drdxhcchlh5y0","content":"<p><strong>核心知识点：</strong></p>\n<blockquote>\n<ul>\n<li>可使用两种方法来处理登录获取session: 直接通过登录方式，同时<strong>处理重定向问题</strong>；直接手动添加cookie信息来构建session;</li>\n<li><strong>通过递归来处理子文件夹的名字，且使用类变量来存储需要的数据</strong>，重点注意<strong>此类变量在使用完后需要清空处理，不然在程序循环跑的过程中会出现数据异常（旧数据一直都在）；</strong></li>\n<li>所有的功能均采用分而治之的思想，拆解到足够细，让方法各司其职；</li>\n<li>检测web端数据变化时，<strong>采用本地构建数据库方式（采用shelve），依次对增删改的数据变化做处理</strong>；</li>\n<li>本地数据存储时机是在提交数据到web端返回成功后才做存储，避免因提交失败导致本地数据与web数据不一致问题；</li>\n<li>apscheduler 模块在使用时，采用的后台阻塞式，且采用了触发器对象来更灵活的配置触发规则。</li>\n</ul>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> shelve</span><br><span class=\"line\"><span class=\"keyword\">from</span> apscheduler.schedulers.blocking <span class=\"keyword\">import</span> BlockingScheduler</span><br><span class=\"line\"><span class=\"keyword\">from</span> apscheduler.triggers.combining <span class=\"keyword\">import</span> AndTrigger, OrTrigger</span><br><span class=\"line\"><span class=\"keyword\">from</span> apscheduler.triggers.interval <span class=\"keyword\">import</span> IntervalTrigger</span><br><span class=\"line\"><span class=\"keyword\">from</span> apscheduler.triggers.cron <span class=\"keyword\">import</span> CronTrigger</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Oper_shimo</span>():</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    石墨文档操作类</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># @classmethod</span></span><br><span class=\"line\">    <span class=\"comment\"># def login_shimo(cls,username,passwd):</span></span><br><span class=\"line\">    <span class=\"comment\">#     &quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"comment\">#     登录石墨，这个方法就是直接通过登录接口来拿session，但是因为该网站登录有重定向，所以需要进行二次访问重定向后的地址才能拿到session</span></span><br><span class=\"line\">    <span class=\"comment\">#     &quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"comment\">#     userdata = &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">#         &quot;username&quot;: username,</span></span><br><span class=\"line\">    <span class=\"comment\">#         &quot;password&quot;: passwd</span></span><br><span class=\"line\">    <span class=\"comment\">#     &#125;</span></span><br><span class=\"line\">    <span class=\"comment\">#     login_url = &#x27;https://doc.uniontech.com/lizard-api/ldap/login&#x27;</span></span><br><span class=\"line\">    <span class=\"comment\">#     session = requests.Session()</span></span><br><span class=\"line\">    <span class=\"comment\">#     redirectinfo = session.post(login_url, json=userdata).json()</span></span><br><span class=\"line\">    <span class=\"comment\">#     redirect_url = redirectinfo[&#x27;redirect_url&#x27;] # 拿到重定向链接</span></span><br><span class=\"line\">    <span class=\"comment\">#     session.get(redirect_url) # 在这里拿到session的</span></span><br><span class=\"line\">    <span class=\"comment\">#     return session</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @classmethod</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">login_shimo</span>(<span class=\"params\">cls, cookie</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        登录石墨</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        cookie = <span class=\"built_in\">dict</span>([ i.strip().split(<span class=\"string\">&#x27;=&#x27;</span>,<span class=\"number\">1</span>) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> cookie.split(<span class=\"string\">&#x27;;&#x27;</span>)])</span><br><span class=\"line\">        session = requests.Session()</span><br><span class=\"line\">        session.cookies.update(cookie)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> session</span><br><span class=\"line\"><span class=\"meta\">    @classmethod</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">get_folder_source</span>(<span class=\"params\">cls,session,folder_guid</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        获取文件夹下信息</span></span><br><span class=\"line\"><span class=\"string\">        test:qjPy69jDYXVV6XYr</span></span><br><span class=\"line\"><span class=\"string\">        返回，获取的原始json信息，以便提供给后续数据清晰函数使用</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        folder_url = <span class=\"string\">f&#x27;https://doc.uniontech.com/lizard-api/files?folder=<span class=\"subst\">&#123;folder_guid&#125;</span>&#x27;</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span>  session.get(folder_url).json()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @classmethod</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">wash_folderdata</span>(<span class=\"params\">cls,folder_jsondata</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        使用上面获取文件夹基础信息的函数返回数据，返回清洗后的数据列表</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        folder_infos = []</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> folder_jsondata:</span><br><span class=\"line\">            folder_base_info = &#123;&#125;</span><br><span class=\"line\">            folder_base_info[<span class=\"string\">&#x27;name&#x27;</span>] = item[<span class=\"string\">&#x27;name&#x27;</span>]</span><br><span class=\"line\">            folder_base_info[<span class=\"string\">&#x27;type&#x27;</span>] = item[<span class=\"string\">&#x27;type&#x27;</span>]</span><br><span class=\"line\">            folder_base_info[<span class=\"string\">&#x27;url&#x27;</span>] = item[<span class=\"string\">&#x27;url&#x27;</span>]</span><br><span class=\"line\">            folder_base_info[<span class=\"string\">&#x27;isFolder&#x27;</span>] = item[<span class=\"string\">&#x27;isFolder&#x27;</span>]</span><br><span class=\"line\">            folder_base_info[<span class=\"string\">&#x27;guid&#x27;</span>] = item[<span class=\"string\">&#x27;guid&#x27;</span>]</span><br><span class=\"line\">            folder_base_info[<span class=\"string\">&#x27;id&#x27;</span>] = item[<span class=\"string\">&#x27;id&#x27;</span>]</span><br><span class=\"line\">            folder_base_info[<span class=\"string\">&#x27;createdby&#x27;</span>] = item[<span class=\"string\">&#x27;user&#x27;</span>][<span class=\"string\">&#x27;name&#x27;</span>]</span><br><span class=\"line\">            folder_base_info[<span class=\"string\">&#x27;createdat&#x27;</span>] = item[<span class=\"string\">&#x27;created_at&#x27;</span>].split(<span class=\"string\">&#x27;.&#x27;</span>)[<span class=\"number\">0</span>].replace(<span class=\"string\">&#x27;T&#x27;</span>,<span class=\"string\">&#x27; &#x27;</span>)</span><br><span class=\"line\">            folder_base_info[<span class=\"string\">&#x27;updatedAt&#x27;</span>] = item[<span class=\"string\">&#x27;updatedAt&#x27;</span>].split(<span class=\"string\">&#x27;.&#x27;</span>)[<span class=\"number\">0</span>].replace(<span class=\"string\">&#x27;T&#x27;</span>, <span class=\"string\">&#x27; &#x27;</span>)</span><br><span class=\"line\">            folder_base_info[<span class=\"string\">&#x27;updateby&#x27;</span>] = item[<span class=\"string\">&#x27;updatedUser&#x27;</span>][<span class=\"string\">&#x27;name&#x27;</span>]</span><br><span class=\"line\">            folder_infos.append(folder_base_info)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> folder_infos</span><br><span class=\"line\"><span class=\"meta\">    @classmethod</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">get_file_fathername</span>(<span class=\"params\">cls,session,folderguid</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        通过上级目录guid 返回上级目录名称</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        fathername_url = <span class=\"string\">f&#x27;https://doc.uniontech.com/lizard-api/files/<span class=\"subst\">&#123;folderguid&#125;</span>&#x27;</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> session.get(fathername_url).json()[<span class=\"string\">&#x27;name&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    filelist = []  <span class=\"comment\"># 类变量，存储返回信息的，记得用完后，需要清空</span></span><br><span class=\"line\"><span class=\"meta\">    @classmethod</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">get_all_fileinfo</span>(<span class=\"params\">cls,session,foldersinfo,folder_name=<span class=\"string\">&#x27;&#x27;</span></span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        返回文件夹和子文件夹下的所有文件信息</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> file <span class=\"keyword\">in</span> foldersinfo:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> file[<span class=\"string\">&#x27;isFolder&#x27;</span>]:</span><br><span class=\"line\">                file[<span class=\"string\">&#x27;fathername&#x27;</span>] = folder_name</span><br><span class=\"line\">                cls.filelist.append(file)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">                foldername = Oper_shimo.get_file_fathername(session,file[<span class=\"string\">&#x27;guid&#x27;</span>])</span><br><span class=\"line\">                <span class=\"keyword\">if</span> folder_name:</span><br><span class=\"line\">                    foldernames = folder_name +<span class=\"string\">&quot;|&gt;|&quot;</span>+foldername</span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    foldernames = foldername</span><br><span class=\"line\">                folder_jsondata  = Oper_shimo.get_folder_source(session,file[<span class=\"string\">&#x27;guid&#x27;</span>])</span><br><span class=\"line\">                folder_infos = Oper_shimo.wash_folderdata(folder_jsondata)</span><br><span class=\"line\">                Oper_shimo.get_all_fileinfo(session,folder_infos,folder_name= foldernames)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> cls.filelist</span><br><span class=\"line\"><span class=\"meta\">    @classmethod</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">get_send_data</span>(<span class=\"params\">cls,fileinfo</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        判断文件的增删改动,然后输出最终需要更新的信息</span></span><br><span class=\"line\"><span class=\"string\">        返回数据是字典列表</span></span><br><span class=\"line\"><span class=\"string\">        用完后需要清空类变量 filelist</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        send_list = []</span><br><span class=\"line\">        web_ids = []</span><br><span class=\"line\">        local_ids = []</span><br><span class=\"line\">        <span class=\"keyword\">for</span> file <span class=\"keyword\">in</span> fileinfo:</span><br><span class=\"line\">            <span class=\"comment\"># print(f&quot;web数据为：&#123;file&#125;&quot;)</span></span><br><span class=\"line\">            web_ids.append(<span class=\"built_in\">str</span>(file[<span class=\"string\">&#x27;id&#x27;</span>]))</span><br><span class=\"line\">            <span class=\"keyword\">with</span> shelve.<span class=\"built_in\">open</span>(<span class=\"string\">&#x27;localdb&#x27;</span>) <span class=\"keyword\">as</span> file_localdb:</span><br><span class=\"line\">                local_ids = <span class=\"built_in\">list</span>(file_localdb.keys())</span><br><span class=\"line\">                <span class=\"keyword\">try</span>:</span><br><span class=\"line\">                    <span class=\"comment\"># print(f&quot;本地数据：&#123;file_localdb[str(file[&#x27;id&#x27;])] &#125;&quot;)</span></span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> file_localdb[<span class=\"built_in\">str</span>(file[<span class=\"string\">&#x27;id&#x27;</span>])] != file:</span><br><span class=\"line\">                        file[<span class=\"string\">&#x27;local_status&#x27;</span>] = <span class=\"string\">&#x27;update&#x27;</span></span><br><span class=\"line\">                        send_list.append(file)</span><br><span class=\"line\">                <span class=\"keyword\">except</span> KeyError <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">                    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;新增数据～&#x27;</span>)</span><br><span class=\"line\">                    file[<span class=\"string\">&#x27;local_status&#x27;</span>] = <span class=\"string\">&#x27;add&#x27;</span></span><br><span class=\"line\">                    send_list.append(file)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        del_data = <span class=\"built_in\">list</span>(<span class=\"built_in\">set</span>(local_ids) - <span class=\"built_in\">set</span>(web_ids))</span><br><span class=\"line\">        <span class=\"keyword\">for</span> <span class=\"built_in\">id</span> <span class=\"keyword\">in</span> del_data:</span><br><span class=\"line\">            <span class=\"keyword\">with</span> shelve.<span class=\"built_in\">open</span>(<span class=\"string\">&#x27;localdb&#x27;</span>) <span class=\"keyword\">as</span> file_localdb:</span><br><span class=\"line\">                del_file = file_localdb[<span class=\"built_in\">str</span>(<span class=\"built_in\">id</span>)]</span><br><span class=\"line\">                del_file[<span class=\"string\">&#x27;local_status&#x27;</span>] = <span class=\"string\">&#x27;del&#x27;</span></span><br><span class=\"line\">                send_list.append(del_file)</span><br><span class=\"line\">                <span class=\"keyword\">del</span> file_localdb[<span class=\"built_in\">str</span>(<span class=\"built_in\">id</span>)]</span><br><span class=\"line\">        cls.filelist = [] <span class=\"comment\"># 这里很重要，不然在循环过程中，会出现列表数据一直保留导致数据不正常。</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> send_list</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @classmethod</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">store_localdb</span>(<span class=\"params\">cls,file</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        信息提交到明道云成功后，将数据存储更新到本地数据库</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">with</span> shelve.<span class=\"built_in\">open</span>(<span class=\"string\">&#x27;localdb&#x27;</span>) <span class=\"keyword\">as</span> file_localdb:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> file[<span class=\"string\">&#x27;local_status&#x27;</span>] != <span class=\"string\">&#x27;del&#x27;</span>:</span><br><span class=\"line\">                <span class=\"keyword\">del</span> file[<span class=\"string\">&#x27;local_status&#x27;</span>]</span><br><span class=\"line\">                file_localdb[<span class=\"built_in\">str</span>(file[<span class=\"string\">&#x27;id&#x27;</span>])] = file</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @classmethod</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">send_data2mdy</span>(<span class=\"params\">cls,sendinfo</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        将需要更新的数据提交明道云</span></span><br><span class=\"line\"><span class=\"string\">        接受数据为文件信息原始数据即可</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        webhook = <span class=\"string\">&#x27;https://cooperation.uniontech.com:443/api/workflow/hooks/NjMyZDcwMjJjYmJjZjQ3MDkwNjVlY2Mw&#x27;</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> file <span class=\"keyword\">in</span> sendinfo:</span><br><span class=\"line\">            body = &#123;</span><br><span class=\"line\">                    <span class=\"string\">&quot;name&quot;</span>: file[<span class=\"string\">&#x27;name&#x27;</span>],</span><br><span class=\"line\">                    <span class=\"string\">&quot;type&quot;</span>: file[<span class=\"string\">&#x27;type&#x27;</span>],</span><br><span class=\"line\">                    <span class=\"string\">&quot;url&quot;</span>: <span class=\"string\">f&quot;https://doc.uniontech.com<span class=\"subst\">&#123;file[<span class=\"string\">&#x27;url&#x27;</span>]&#125;</span>&quot;</span>,</span><br><span class=\"line\">                    <span class=\"string\">&quot;id&quot;</span>: file[<span class=\"string\">&#x27;id&#x27;</span>],</span><br><span class=\"line\">                    <span class=\"string\">&quot;createdby&quot;</span>: file[<span class=\"string\">&#x27;createdby&#x27;</span>],</span><br><span class=\"line\">                    <span class=\"string\">&quot;createdat&quot;</span>: file[<span class=\"string\">&#x27;createdat&#x27;</span>],</span><br><span class=\"line\">                    <span class=\"string\">&quot;updatedAt&quot;</span>: file[<span class=\"string\">&#x27;updatedAt&#x27;</span>],</span><br><span class=\"line\">                    <span class=\"string\">&quot;updateby&quot;</span>: file[<span class=\"string\">&#x27;updateby&#x27;</span>],</span><br><span class=\"line\">                    <span class=\"string\">&quot;fathername&quot;</span>: file[<span class=\"string\">&#x27;fathername&#x27;</span>].split(<span class=\"string\">&quot;|&gt;|&quot;</span>)[<span class=\"number\">0</span>],</span><br><span class=\"line\">                    <span class=\"string\">&quot;local_status&quot;</span>:file[<span class=\"string\">&#x27;local_status&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            res = requests.post(webhook,data=body).status_code</span><br><span class=\"line\">            <span class=\"keyword\">if</span> res == <span class=\"number\">200</span>:</span><br><span class=\"line\">                Oper_shimo.store_localdb(file)</span><br><span class=\"line\">                <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;<span class=\"subst\">&#123;body&#125;</span> 数据更新成功！&#x27;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;<span class=\"subst\">&#123;body&#125;</span> 数据更新失败！&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    主函数</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"comment\"># 此处可以直接手动获取cookie来添加到session，未采用直接登录的方式主要是因为会频繁更换账号密码，且跟他人要cookie信息更加安全</span></span><br><span class=\"line\">    cookie = <span class=\"string\">&#x27;deviceId=browser-8f474a86-beda-76ea-0d9b-a8b79fb88aff; fp=31ab340bc8205713b458b6f9d2771968; sajssdk_2015_cross_new_user=1; sensorsdata2015jssdkcross=%7B%22distinct_id%22%3A%223066%22%2C%22%24device_id%22%3A%221834416802a1571-0c31cd72cc2c7d-477a6e25-1fa400-1834416802b13b8%22%2C%22props%22%3A%7B%22%24latest_traffic_source_type%22%3A%22%E7%9B%B4%E6%8E%A5%E6%B5%81%E9%87%8F%22%2C%22%24latest_referrer%22%3A%22%22%2C%22%24latest_referrer_host%22%3A%22%22%2C%22%24latest_search_keyword%22%3A%22%E6%9C%AA%E5%8F%96%E5%88%B0%E5%80%BC_%E7%9B%B4%E6%8E%A5%E6%89%93%E5%BC%80%22%7D%2C%22first_id%22%3A%221834416802a1571-0c31cd72cc2c7d-477a6e25-1fa400-1834416802b13b8%22%7D; LOCALE=zh-CN; sensorsdata2015session=%7B%7D; shimo_sid=s%3Ac42f99aa2b1845fbb92f114644d75e7e.aI24YO%2FppGMK1dQxw65DiCfS%2Ba%2BSDwzPWvHGKU7n6WE&#x27;</span></span><br><span class=\"line\">    folderguids = &#123;<span class=\"string\">&quot;技术成果贡献&quot;</span>:<span class=\"string\">&quot;8Nk6MwB2zmfZBvqL&quot;</span>,&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> guid <span class=\"keyword\">in</span> folderguids.values():</span><br><span class=\"line\">        shimo = Oper_shimo()</span><br><span class=\"line\">        session = shimo.login_shimo(cookie)</span><br><span class=\"line\">        folder_jsondata = shimo.get_folder_source(session,guid)</span><br><span class=\"line\">        foldersinfo = shimo.wash_folderdata(folder_jsondata)</span><br><span class=\"line\">        fileinfos = shimo.get_all_fileinfo(session ,foldersinfo)</span><br><span class=\"line\">        <span class=\"comment\"># print(fileinfos)</span></span><br><span class=\"line\">        send_data = shimo.get_send_data(fileinfos)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;待更新数据为<span class=\"subst\">&#123;send_data&#125;</span>&#x27;</span>)</span><br><span class=\"line\">        shimo.send_data2mdy(send_data)</span><br><span class=\"line\"></span><br><span class=\"line\">main()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>  __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    <span class=\"comment\"># 创建定时对象</span></span><br><span class=\"line\">    schedu = BlockingScheduler(timezone=<span class=\"string\">&#x27;Asia/Shanghai&#x27;</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 创建触发器（通过触发器来设置定时任务，更加灵活）</span></span><br><span class=\"line\">    trigger = OrTrigger([CronTrigger(day_of_week=<span class=\"string\">&quot;0-4&quot;</span>, hour=<span class=\"string\">&#x27;9-22&#x27;</span>, minute=<span class=\"string\">&#x27;*/10&#x27;</span>, second=<span class=\"string\">&#x27;00&#x27;</span>),])  <span class=\"comment\"># 可以继续在列表中添加其他更多的规则</span></span><br><span class=\"line\">    schedu.add_job(main,trigger)</span><br><span class=\"line\">    schedu.start()</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>核心知识点：</strong></p>\n<blockquote>\n<ul>\n<li>可使用两种方法来处理登录获取session: 直接通过登录方式，同时<strong>处理重定向问题</strong>；直接手动添加cookie信息来构建session;</li>\n<li><strong>通过递归来处理子文件夹的名字，且使用类变量来存储需要的数据</strong>，重点注意<strong>此类变量在使用完后需要清空处理，不然在程序循环跑的过程中会出现数据异常（旧数据一直都在）；</strong></li>\n<li>所有的功能均采用分而治之的思想，拆解到足够细，让方法各司其职；</li>\n<li>检测web端数据变化时，<strong>采用本地构建数据库方式（采用shelve），依次对增删改的数据变化做处理</strong>；</li>\n<li>本地数据存储时机是在提交数据到web端返回成功后才做存储，避免因提交失败导致本地数据与web数据不一致问题；</li>\n<li>apscheduler 模块在使用时，采用的后台阻塞式，且采用了触发器对象来更灵活的配置触发规则。</li>\n</ul>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> shelve</span><br><span class=\"line\"><span class=\"keyword\">from</span> apscheduler.schedulers.blocking <span class=\"keyword\">import</span> BlockingScheduler</span><br><span class=\"line\"><span class=\"keyword\">from</span> apscheduler.triggers.combining <span class=\"keyword\">import</span> AndTrigger, OrTrigger</span><br><span class=\"line\"><span class=\"keyword\">from</span> apscheduler.triggers.interval <span class=\"keyword\">import</span> IntervalTrigger</span><br><span class=\"line\"><span class=\"keyword\">from</span> apscheduler.triggers.cron <span class=\"keyword\">import</span> CronTrigger</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Oper_shimo</span>():</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    石墨文档操作类</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># @classmethod</span></span><br><span class=\"line\">    <span class=\"comment\"># def login_shimo(cls,username,passwd):</span></span><br><span class=\"line\">    <span class=\"comment\">#     &quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"comment\">#     登录石墨，这个方法就是直接通过登录接口来拿session，但是因为该网站登录有重定向，所以需要进行二次访问重定向后的地址才能拿到session</span></span><br><span class=\"line\">    <span class=\"comment\">#     &quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"comment\">#     userdata = &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">#         &quot;username&quot;: username,</span></span><br><span class=\"line\">    <span class=\"comment\">#         &quot;password&quot;: passwd</span></span><br><span class=\"line\">    <span class=\"comment\">#     &#125;</span></span><br><span class=\"line\">    <span class=\"comment\">#     login_url = &#x27;https://doc.uniontech.com/lizard-api/ldap/login&#x27;</span></span><br><span class=\"line\">    <span class=\"comment\">#     session = requests.Session()</span></span><br><span class=\"line\">    <span class=\"comment\">#     redirectinfo = session.post(login_url, json=userdata).json()</span></span><br><span class=\"line\">    <span class=\"comment\">#     redirect_url = redirectinfo[&#x27;redirect_url&#x27;] # 拿到重定向链接</span></span><br><span class=\"line\">    <span class=\"comment\">#     session.get(redirect_url) # 在这里拿到session的</span></span><br><span class=\"line\">    <span class=\"comment\">#     return session</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @classmethod</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">login_shimo</span>(<span class=\"params\">cls, cookie</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        登录石墨</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        cookie = <span class=\"built_in\">dict</span>([ i.strip().split(<span class=\"string\">&#x27;=&#x27;</span>,<span class=\"number\">1</span>) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> cookie.split(<span class=\"string\">&#x27;;&#x27;</span>)])</span><br><span class=\"line\">        session = requests.Session()</span><br><span class=\"line\">        session.cookies.update(cookie)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> session</span><br><span class=\"line\"><span class=\"meta\">    @classmethod</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">get_folder_source</span>(<span class=\"params\">cls,session,folder_guid</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        获取文件夹下信息</span></span><br><span class=\"line\"><span class=\"string\">        test:qjPy69jDYXVV6XYr</span></span><br><span class=\"line\"><span class=\"string\">        返回，获取的原始json信息，以便提供给后续数据清晰函数使用</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        folder_url = <span class=\"string\">f&#x27;https://doc.uniontech.com/lizard-api/files?folder=<span class=\"subst\">&#123;folder_guid&#125;</span>&#x27;</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span>  session.get(folder_url).json()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @classmethod</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">wash_folderdata</span>(<span class=\"params\">cls,folder_jsondata</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        使用上面获取文件夹基础信息的函数返回数据，返回清洗后的数据列表</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        folder_infos = []</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> folder_jsondata:</span><br><span class=\"line\">            folder_base_info = &#123;&#125;</span><br><span class=\"line\">            folder_base_info[<span class=\"string\">&#x27;name&#x27;</span>] = item[<span class=\"string\">&#x27;name&#x27;</span>]</span><br><span class=\"line\">            folder_base_info[<span class=\"string\">&#x27;type&#x27;</span>] = item[<span class=\"string\">&#x27;type&#x27;</span>]</span><br><span class=\"line\">            folder_base_info[<span class=\"string\">&#x27;url&#x27;</span>] = item[<span class=\"string\">&#x27;url&#x27;</span>]</span><br><span class=\"line\">            folder_base_info[<span class=\"string\">&#x27;isFolder&#x27;</span>] = item[<span class=\"string\">&#x27;isFolder&#x27;</span>]</span><br><span class=\"line\">            folder_base_info[<span class=\"string\">&#x27;guid&#x27;</span>] = item[<span class=\"string\">&#x27;guid&#x27;</span>]</span><br><span class=\"line\">            folder_base_info[<span class=\"string\">&#x27;id&#x27;</span>] = item[<span class=\"string\">&#x27;id&#x27;</span>]</span><br><span class=\"line\">            folder_base_info[<span class=\"string\">&#x27;createdby&#x27;</span>] = item[<span class=\"string\">&#x27;user&#x27;</span>][<span class=\"string\">&#x27;name&#x27;</span>]</span><br><span class=\"line\">            folder_base_info[<span class=\"string\">&#x27;createdat&#x27;</span>] = item[<span class=\"string\">&#x27;created_at&#x27;</span>].split(<span class=\"string\">&#x27;.&#x27;</span>)[<span class=\"number\">0</span>].replace(<span class=\"string\">&#x27;T&#x27;</span>,<span class=\"string\">&#x27; &#x27;</span>)</span><br><span class=\"line\">            folder_base_info[<span class=\"string\">&#x27;updatedAt&#x27;</span>] = item[<span class=\"string\">&#x27;updatedAt&#x27;</span>].split(<span class=\"string\">&#x27;.&#x27;</span>)[<span class=\"number\">0</span>].replace(<span class=\"string\">&#x27;T&#x27;</span>, <span class=\"string\">&#x27; &#x27;</span>)</span><br><span class=\"line\">            folder_base_info[<span class=\"string\">&#x27;updateby&#x27;</span>] = item[<span class=\"string\">&#x27;updatedUser&#x27;</span>][<span class=\"string\">&#x27;name&#x27;</span>]</span><br><span class=\"line\">            folder_infos.append(folder_base_info)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> folder_infos</span><br><span class=\"line\"><span class=\"meta\">    @classmethod</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">get_file_fathername</span>(<span class=\"params\">cls,session,folderguid</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        通过上级目录guid 返回上级目录名称</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        fathername_url = <span class=\"string\">f&#x27;https://doc.uniontech.com/lizard-api/files/<span class=\"subst\">&#123;folderguid&#125;</span>&#x27;</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> session.get(fathername_url).json()[<span class=\"string\">&#x27;name&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    filelist = []  <span class=\"comment\"># 类变量，存储返回信息的，记得用完后，需要清空</span></span><br><span class=\"line\"><span class=\"meta\">    @classmethod</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">get_all_fileinfo</span>(<span class=\"params\">cls,session,foldersinfo,folder_name=<span class=\"string\">&#x27;&#x27;</span></span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        返回文件夹和子文件夹下的所有文件信息</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> file <span class=\"keyword\">in</span> foldersinfo:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> file[<span class=\"string\">&#x27;isFolder&#x27;</span>]:</span><br><span class=\"line\">                file[<span class=\"string\">&#x27;fathername&#x27;</span>] = folder_name</span><br><span class=\"line\">                cls.filelist.append(file)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">                foldername = Oper_shimo.get_file_fathername(session,file[<span class=\"string\">&#x27;guid&#x27;</span>])</span><br><span class=\"line\">                <span class=\"keyword\">if</span> folder_name:</span><br><span class=\"line\">                    foldernames = folder_name +<span class=\"string\">&quot;|&gt;|&quot;</span>+foldername</span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    foldernames = foldername</span><br><span class=\"line\">                folder_jsondata  = Oper_shimo.get_folder_source(session,file[<span class=\"string\">&#x27;guid&#x27;</span>])</span><br><span class=\"line\">                folder_infos = Oper_shimo.wash_folderdata(folder_jsondata)</span><br><span class=\"line\">                Oper_shimo.get_all_fileinfo(session,folder_infos,folder_name= foldernames)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> cls.filelist</span><br><span class=\"line\"><span class=\"meta\">    @classmethod</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">get_send_data</span>(<span class=\"params\">cls,fileinfo</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        判断文件的增删改动,然后输出最终需要更新的信息</span></span><br><span class=\"line\"><span class=\"string\">        返回数据是字典列表</span></span><br><span class=\"line\"><span class=\"string\">        用完后需要清空类变量 filelist</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        send_list = []</span><br><span class=\"line\">        web_ids = []</span><br><span class=\"line\">        local_ids = []</span><br><span class=\"line\">        <span class=\"keyword\">for</span> file <span class=\"keyword\">in</span> fileinfo:</span><br><span class=\"line\">            <span class=\"comment\"># print(f&quot;web数据为：&#123;file&#125;&quot;)</span></span><br><span class=\"line\">            web_ids.append(<span class=\"built_in\">str</span>(file[<span class=\"string\">&#x27;id&#x27;</span>]))</span><br><span class=\"line\">            <span class=\"keyword\">with</span> shelve.<span class=\"built_in\">open</span>(<span class=\"string\">&#x27;localdb&#x27;</span>) <span class=\"keyword\">as</span> file_localdb:</span><br><span class=\"line\">                local_ids = <span class=\"built_in\">list</span>(file_localdb.keys())</span><br><span class=\"line\">                <span class=\"keyword\">try</span>:</span><br><span class=\"line\">                    <span class=\"comment\"># print(f&quot;本地数据：&#123;file_localdb[str(file[&#x27;id&#x27;])] &#125;&quot;)</span></span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> file_localdb[<span class=\"built_in\">str</span>(file[<span class=\"string\">&#x27;id&#x27;</span>])] != file:</span><br><span class=\"line\">                        file[<span class=\"string\">&#x27;local_status&#x27;</span>] = <span class=\"string\">&#x27;update&#x27;</span></span><br><span class=\"line\">                        send_list.append(file)</span><br><span class=\"line\">                <span class=\"keyword\">except</span> KeyError <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">                    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;新增数据～&#x27;</span>)</span><br><span class=\"line\">                    file[<span class=\"string\">&#x27;local_status&#x27;</span>] = <span class=\"string\">&#x27;add&#x27;</span></span><br><span class=\"line\">                    send_list.append(file)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        del_data = <span class=\"built_in\">list</span>(<span class=\"built_in\">set</span>(local_ids) - <span class=\"built_in\">set</span>(web_ids))</span><br><span class=\"line\">        <span class=\"keyword\">for</span> <span class=\"built_in\">id</span> <span class=\"keyword\">in</span> del_data:</span><br><span class=\"line\">            <span class=\"keyword\">with</span> shelve.<span class=\"built_in\">open</span>(<span class=\"string\">&#x27;localdb&#x27;</span>) <span class=\"keyword\">as</span> file_localdb:</span><br><span class=\"line\">                del_file = file_localdb[<span class=\"built_in\">str</span>(<span class=\"built_in\">id</span>)]</span><br><span class=\"line\">                del_file[<span class=\"string\">&#x27;local_status&#x27;</span>] = <span class=\"string\">&#x27;del&#x27;</span></span><br><span class=\"line\">                send_list.append(del_file)</span><br><span class=\"line\">                <span class=\"keyword\">del</span> file_localdb[<span class=\"built_in\">str</span>(<span class=\"built_in\">id</span>)]</span><br><span class=\"line\">        cls.filelist = [] <span class=\"comment\"># 这里很重要，不然在循环过程中，会出现列表数据一直保留导致数据不正常。</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> send_list</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @classmethod</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">store_localdb</span>(<span class=\"params\">cls,file</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        信息提交到明道云成功后，将数据存储更新到本地数据库</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">with</span> shelve.<span class=\"built_in\">open</span>(<span class=\"string\">&#x27;localdb&#x27;</span>) <span class=\"keyword\">as</span> file_localdb:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> file[<span class=\"string\">&#x27;local_status&#x27;</span>] != <span class=\"string\">&#x27;del&#x27;</span>:</span><br><span class=\"line\">                <span class=\"keyword\">del</span> file[<span class=\"string\">&#x27;local_status&#x27;</span>]</span><br><span class=\"line\">                file_localdb[<span class=\"built_in\">str</span>(file[<span class=\"string\">&#x27;id&#x27;</span>])] = file</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @classmethod</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">send_data2mdy</span>(<span class=\"params\">cls,sendinfo</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        将需要更新的数据提交明道云</span></span><br><span class=\"line\"><span class=\"string\">        接受数据为文件信息原始数据即可</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        webhook = <span class=\"string\">&#x27;https://cooperation.uniontech.com:443/api/workflow/hooks/NjMyZDcwMjJjYmJjZjQ3MDkwNjVlY2Mw&#x27;</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> file <span class=\"keyword\">in</span> sendinfo:</span><br><span class=\"line\">            body = &#123;</span><br><span class=\"line\">                    <span class=\"string\">&quot;name&quot;</span>: file[<span class=\"string\">&#x27;name&#x27;</span>],</span><br><span class=\"line\">                    <span class=\"string\">&quot;type&quot;</span>: file[<span class=\"string\">&#x27;type&#x27;</span>],</span><br><span class=\"line\">                    <span class=\"string\">&quot;url&quot;</span>: <span class=\"string\">f&quot;https://doc.uniontech.com<span class=\"subst\">&#123;file[<span class=\"string\">&#x27;url&#x27;</span>]&#125;</span>&quot;</span>,</span><br><span class=\"line\">                    <span class=\"string\">&quot;id&quot;</span>: file[<span class=\"string\">&#x27;id&#x27;</span>],</span><br><span class=\"line\">                    <span class=\"string\">&quot;createdby&quot;</span>: file[<span class=\"string\">&#x27;createdby&#x27;</span>],</span><br><span class=\"line\">                    <span class=\"string\">&quot;createdat&quot;</span>: file[<span class=\"string\">&#x27;createdat&#x27;</span>],</span><br><span class=\"line\">                    <span class=\"string\">&quot;updatedAt&quot;</span>: file[<span class=\"string\">&#x27;updatedAt&#x27;</span>],</span><br><span class=\"line\">                    <span class=\"string\">&quot;updateby&quot;</span>: file[<span class=\"string\">&#x27;updateby&#x27;</span>],</span><br><span class=\"line\">                    <span class=\"string\">&quot;fathername&quot;</span>: file[<span class=\"string\">&#x27;fathername&#x27;</span>].split(<span class=\"string\">&quot;|&gt;|&quot;</span>)[<span class=\"number\">0</span>],</span><br><span class=\"line\">                    <span class=\"string\">&quot;local_status&quot;</span>:file[<span class=\"string\">&#x27;local_status&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            res = requests.post(webhook,data=body).status_code</span><br><span class=\"line\">            <span class=\"keyword\">if</span> res == <span class=\"number\">200</span>:</span><br><span class=\"line\">                Oper_shimo.store_localdb(file)</span><br><span class=\"line\">                <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;<span class=\"subst\">&#123;body&#125;</span> 数据更新成功！&#x27;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;<span class=\"subst\">&#123;body&#125;</span> 数据更新失败！&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    主函数</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"comment\"># 此处可以直接手动获取cookie来添加到session，未采用直接登录的方式主要是因为会频繁更换账号密码，且跟他人要cookie信息更加安全</span></span><br><span class=\"line\">    cookie = <span class=\"string\">&#x27;deviceId=browser-8f474a86-beda-76ea-0d9b-a8b79fb88aff; fp=31ab340bc8205713b458b6f9d2771968; sajssdk_2015_cross_new_user=1; sensorsdata2015jssdkcross=%7B%22distinct_id%22%3A%223066%22%2C%22%24device_id%22%3A%221834416802a1571-0c31cd72cc2c7d-477a6e25-1fa400-1834416802b13b8%22%2C%22props%22%3A%7B%22%24latest_traffic_source_type%22%3A%22%E7%9B%B4%E6%8E%A5%E6%B5%81%E9%87%8F%22%2C%22%24latest_referrer%22%3A%22%22%2C%22%24latest_referrer_host%22%3A%22%22%2C%22%24latest_search_keyword%22%3A%22%E6%9C%AA%E5%8F%96%E5%88%B0%E5%80%BC_%E7%9B%B4%E6%8E%A5%E6%89%93%E5%BC%80%22%7D%2C%22first_id%22%3A%221834416802a1571-0c31cd72cc2c7d-477a6e25-1fa400-1834416802b13b8%22%7D; LOCALE=zh-CN; sensorsdata2015session=%7B%7D; shimo_sid=s%3Ac42f99aa2b1845fbb92f114644d75e7e.aI24YO%2FppGMK1dQxw65DiCfS%2Ba%2BSDwzPWvHGKU7n6WE&#x27;</span></span><br><span class=\"line\">    folderguids = &#123;<span class=\"string\">&quot;技术成果贡献&quot;</span>:<span class=\"string\">&quot;8Nk6MwB2zmfZBvqL&quot;</span>,&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> guid <span class=\"keyword\">in</span> folderguids.values():</span><br><span class=\"line\">        shimo = Oper_shimo()</span><br><span class=\"line\">        session = shimo.login_shimo(cookie)</span><br><span class=\"line\">        folder_jsondata = shimo.get_folder_source(session,guid)</span><br><span class=\"line\">        foldersinfo = shimo.wash_folderdata(folder_jsondata)</span><br><span class=\"line\">        fileinfos = shimo.get_all_fileinfo(session ,foldersinfo)</span><br><span class=\"line\">        <span class=\"comment\"># print(fileinfos)</span></span><br><span class=\"line\">        send_data = shimo.get_send_data(fileinfos)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;待更新数据为<span class=\"subst\">&#123;send_data&#125;</span>&#x27;</span>)</span><br><span class=\"line\">        shimo.send_data2mdy(send_data)</span><br><span class=\"line\"></span><br><span class=\"line\">main()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>  __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    <span class=\"comment\"># 创建定时对象</span></span><br><span class=\"line\">    schedu = BlockingScheduler(timezone=<span class=\"string\">&#x27;Asia/Shanghai&#x27;</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 创建触发器（通过触发器来设置定时任务，更加灵活）</span></span><br><span class=\"line\">    trigger = OrTrigger([CronTrigger(day_of_week=<span class=\"string\">&quot;0-4&quot;</span>, hour=<span class=\"string\">&#x27;9-22&#x27;</span>, minute=<span class=\"string\">&#x27;*/10&#x27;</span>, second=<span class=\"string\">&#x27;00&#x27;</span>),])  <span class=\"comment\"># 可以继续在列表中添加其他更多的规则</span></span><br><span class=\"line\">    schedu.add_job(main,trigger)</span><br><span class=\"line\">    schedu.start()</span><br></pre></td></tr></table></figure>\n"},{"title":"字符串格式时间转换成时间戳","date":"2023-01-04T07:21:34.000Z","_content":"---\n> 需求：在明道云中需要做时间比较，而接口传递的时间格式是字符串格式，因此需要转换成时间戳后再做加减运算。\n\n## 实际用途如下：\n\n```python\nimport time\nwebhooktime = '2023-01-04 11:19:59'\nlocaltime = '2023-01-04 11:19:27'\ndef str2timestamp(strdate):\n    if strdate:  # 生产环境会出现时间内容为空的情况，需要加个判断\n        time_tuple = time.strptime(strdate,'%Y-%m-%d %H:%M:%S')\n        return time.mktime(time_tuple)\n    else:\n        return 0\nwebhooktime = str2timestamp(webhooktime)\nlocaltime = str2timestamp(localtime)\nouttime = webhooktime - localtime\noutput = {\"outtime\":outtime}\n```\n\n## 具体思路：\n\n使用 Python 的 `time` 模块中的 `strptime` 函数将时间字符串转换成时间元组，再使用 `time` 模块中的 `mktime` 函数将时间元组转换成时间戳。\n\n```\nimport time\n\ndef str_to_timestamp(s):\n  # 将时间字符串转换成时间元组\n  time_tuple = time.strptime(s, '%Y-%m-%d %H:%M:%S')\n  # 将时间元组转换成时间戳\n  timestamp = time.mktime(time_tuple)\n  return timestamp\n\nprint(str_to_timestamp('2023-01-04 11:19:59'))\n\n```\n\n这会输出时间戳（单位是秒）：\n\n```\n2147483647.0\n```\n\n## 反过来将时间戳转换成字符串时间格式：\n\n```python\nimport datetime\n\ndef str_to_timestamp(s):\n  # 将时间字符串转换成 datetime 对象\n  dt = datetime.datetime.strptime(s, '%Y-%m-%d %H:%M:%S')\n  # 将 datetime 对象转换成时间戳\n  timestamp = dt.timestamp()\n  return timestamp\nprint(str_to_timestamp('2022-01-01 00:00:00'))\n```\n\n这也会输出时间戳（单位是秒）：\n\n```python\n1609459200.0\n```\n\n\n\n\n\n","source":"_posts/09strtime2timestamp.md","raw":"---\ntitle: 字符串格式时间转换成时间戳\ncategories: \n- python\n- time\ntags:\n- python\n- time\ndate: 2023-01-04 15:21:34\n---\n---\n> 需求：在明道云中需要做时间比较，而接口传递的时间格式是字符串格式，因此需要转换成时间戳后再做加减运算。\n\n## 实际用途如下：\n\n```python\nimport time\nwebhooktime = '2023-01-04 11:19:59'\nlocaltime = '2023-01-04 11:19:27'\ndef str2timestamp(strdate):\n    if strdate:  # 生产环境会出现时间内容为空的情况，需要加个判断\n        time_tuple = time.strptime(strdate,'%Y-%m-%d %H:%M:%S')\n        return time.mktime(time_tuple)\n    else:\n        return 0\nwebhooktime = str2timestamp(webhooktime)\nlocaltime = str2timestamp(localtime)\nouttime = webhooktime - localtime\noutput = {\"outtime\":outtime}\n```\n\n## 具体思路：\n\n使用 Python 的 `time` 模块中的 `strptime` 函数将时间字符串转换成时间元组，再使用 `time` 模块中的 `mktime` 函数将时间元组转换成时间戳。\n\n```\nimport time\n\ndef str_to_timestamp(s):\n  # 将时间字符串转换成时间元组\n  time_tuple = time.strptime(s, '%Y-%m-%d %H:%M:%S')\n  # 将时间元组转换成时间戳\n  timestamp = time.mktime(time_tuple)\n  return timestamp\n\nprint(str_to_timestamp('2023-01-04 11:19:59'))\n\n```\n\n这会输出时间戳（单位是秒）：\n\n```\n2147483647.0\n```\n\n## 反过来将时间戳转换成字符串时间格式：\n\n```python\nimport datetime\n\ndef str_to_timestamp(s):\n  # 将时间字符串转换成 datetime 对象\n  dt = datetime.datetime.strptime(s, '%Y-%m-%d %H:%M:%S')\n  # 将 datetime 对象转换成时间戳\n  timestamp = dt.timestamp()\n  return timestamp\nprint(str_to_timestamp('2022-01-01 00:00:00'))\n```\n\n这也会输出时间戳（单位是秒）：\n\n```python\n1609459200.0\n```\n\n\n\n\n\n","slug":"09strtime2timestamp","published":1,"updated":"2023-01-04T09:58:17.301Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clciheila000erdxh9us47oj4","content":"<hr>\n<blockquote>\n<p>需求：在明道云中需要做时间比较，而接口传递的时间格式是字符串格式，因此需要转换成时间戳后再做加减运算。</p>\n</blockquote>\n<h2 id=\"实际用途如下：\"><a href=\"#实际用途如下：\" class=\"headerlink\" title=\"实际用途如下：\"></a>实际用途如下：</h2><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\">webhooktime = <span class=\"string\">&#x27;2023-01-04 11:19:59&#x27;</span></span><br><span class=\"line\">localtime = <span class=\"string\">&#x27;2023-01-04 11:19:27&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">str2timestamp</span>(<span class=\"params\">strdate</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> strdate:  <span class=\"comment\"># 生产环境会出现时间内容为空的情况，需要加个判断</span></span><br><span class=\"line\">        time_tuple = time.strptime(strdate,<span class=\"string\">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> time.mktime(time_tuple)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">webhooktime = str2timestamp(webhooktime)</span><br><span class=\"line\">localtime = str2timestamp(localtime)</span><br><span class=\"line\">outtime = webhooktime - localtime</span><br><span class=\"line\">output = &#123;<span class=\"string\">&quot;outtime&quot;</span>:outtime&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"具体思路：\"><a href=\"#具体思路：\" class=\"headerlink\" title=\"具体思路：\"></a>具体思路：</h2><p>使用 Python 的 <code>time</code> 模块中的 <code>strptime</code> 函数将时间字符串转换成时间元组，再使用 <code>time</code> 模块中的 <code>mktime</code> 函数将时间元组转换成时间戳。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">import time</span><br><span class=\"line\"></span><br><span class=\"line\">def str_to_timestamp(s):</span><br><span class=\"line\">  # 将时间字符串转换成时间元组</span><br><span class=\"line\">  time_tuple = time.strptime(s, &#x27;%Y-%m-%d %H:%M:%S&#x27;)</span><br><span class=\"line\">  # 将时间元组转换成时间戳</span><br><span class=\"line\">  timestamp = time.mktime(time_tuple)</span><br><span class=\"line\">  return timestamp</span><br><span class=\"line\"></span><br><span class=\"line\">print(str_to_timestamp(&#x27;2023-01-04 11:19:59&#x27;))</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>这会输出时间戳（单位是秒）：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">2147483647.0</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"反过来将时间戳转换成字符串时间格式：\"><a href=\"#反过来将时间戳转换成字符串时间格式：\" class=\"headerlink\" title=\"反过来将时间戳转换成字符串时间格式：\"></a>反过来将时间戳转换成字符串时间格式：</h2><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> datetime</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">str_to_timestamp</span>(<span class=\"params\">s</span>):</span><br><span class=\"line\">  <span class=\"comment\"># 将时间字符串转换成 datetime 对象</span></span><br><span class=\"line\">  dt = datetime.datetime.strptime(s, <span class=\"string\">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>)</span><br><span class=\"line\">  <span class=\"comment\"># 将 datetime 对象转换成时间戳</span></span><br><span class=\"line\">  timestamp = dt.timestamp()</span><br><span class=\"line\">  <span class=\"keyword\">return</span> timestamp</span><br><span class=\"line\"><span class=\"built_in\">print</span>(str_to_timestamp(<span class=\"string\">&#x27;2022-01-01 00:00:00&#x27;</span>))</span><br></pre></td></tr></table></figure>\n\n<p>这也会输出时间戳（单位是秒）：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1609459200.0</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<hr>\n<blockquote>\n<p>需求：在明道云中需要做时间比较，而接口传递的时间格式是字符串格式，因此需要转换成时间戳后再做加减运算。</p>\n</blockquote>\n<h2 id=\"实际用途如下：\"><a href=\"#实际用途如下：\" class=\"headerlink\" title=\"实际用途如下：\"></a>实际用途如下：</h2><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\">webhooktime = <span class=\"string\">&#x27;2023-01-04 11:19:59&#x27;</span></span><br><span class=\"line\">localtime = <span class=\"string\">&#x27;2023-01-04 11:19:27&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">str2timestamp</span>(<span class=\"params\">strdate</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> strdate:  <span class=\"comment\"># 生产环境会出现时间内容为空的情况，需要加个判断</span></span><br><span class=\"line\">        time_tuple = time.strptime(strdate,<span class=\"string\">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> time.mktime(time_tuple)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">webhooktime = str2timestamp(webhooktime)</span><br><span class=\"line\">localtime = str2timestamp(localtime)</span><br><span class=\"line\">outtime = webhooktime - localtime</span><br><span class=\"line\">output = &#123;<span class=\"string\">&quot;outtime&quot;</span>:outtime&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"具体思路：\"><a href=\"#具体思路：\" class=\"headerlink\" title=\"具体思路：\"></a>具体思路：</h2><p>使用 Python 的 <code>time</code> 模块中的 <code>strptime</code> 函数将时间字符串转换成时间元组，再使用 <code>time</code> 模块中的 <code>mktime</code> 函数将时间元组转换成时间戳。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">import time</span><br><span class=\"line\"></span><br><span class=\"line\">def str_to_timestamp(s):</span><br><span class=\"line\">  # 将时间字符串转换成时间元组</span><br><span class=\"line\">  time_tuple = time.strptime(s, &#x27;%Y-%m-%d %H:%M:%S&#x27;)</span><br><span class=\"line\">  # 将时间元组转换成时间戳</span><br><span class=\"line\">  timestamp = time.mktime(time_tuple)</span><br><span class=\"line\">  return timestamp</span><br><span class=\"line\"></span><br><span class=\"line\">print(str_to_timestamp(&#x27;2023-01-04 11:19:59&#x27;))</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>这会输出时间戳（单位是秒）：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">2147483647.0</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"反过来将时间戳转换成字符串时间格式：\"><a href=\"#反过来将时间戳转换成字符串时间格式：\" class=\"headerlink\" title=\"反过来将时间戳转换成字符串时间格式：\"></a>反过来将时间戳转换成字符串时间格式：</h2><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> datetime</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">str_to_timestamp</span>(<span class=\"params\">s</span>):</span><br><span class=\"line\">  <span class=\"comment\"># 将时间字符串转换成 datetime 对象</span></span><br><span class=\"line\">  dt = datetime.datetime.strptime(s, <span class=\"string\">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>)</span><br><span class=\"line\">  <span class=\"comment\"># 将 datetime 对象转换成时间戳</span></span><br><span class=\"line\">  timestamp = dt.timestamp()</span><br><span class=\"line\">  <span class=\"keyword\">return</span> timestamp</span><br><span class=\"line\"><span class=\"built_in\">print</span>(str_to_timestamp(<span class=\"string\">&#x27;2022-01-01 00:00:00&#x27;</span>))</span><br></pre></td></tr></table></figure>\n\n<p>这也会输出时间戳（单位是秒）：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1609459200.0</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n"},{"title":"JMeter基础","date":"2019-06-20T07:21:34.000Z","_content":"\n# 性能测试基本概念\n\n## RT -Response time\n\n请求响应时间\n\n从客户端发出请求到得到响应的整个时间\n\n一般包括网络响应时间+server的响应时间。\n\n用户接受准则:\n\n例如2-5-10原则，即按照正常用户体验，如果用户能够在2秒内得到响应，会感觉速度很快，如果2-5秒得到响应，用户感觉系统的响应速度还不多，在5-10秒之内得到响应时，用户会感觉系统的响应速度慢，但是可以接受，超过10秒后还没有响应，用户就会感觉不能够接受。\n\n不同行业不同业务可接受的响应时间是不同的，一般情况，对于在线实时交易：\n\n-   互联网企业：500毫秒以下，例如淘宝业务10毫秒左右。\n-   金融企业：1秒以下为佳，部分复杂业务3秒以下。\n-   保险企业：3秒以下为佳。\n-   制造业：5秒以下为佳。\n-   阿里云规范\n\n## **系统处理能力**\n\n系统处理能力是指系统在利用系统硬件平台和软件平台进行信息处理的能力。系统处理能力通过系统每秒钟能够处理的交易数量来评价，交易有两种理解：\n\n- 一是业务人员角度的一笔业务过程；\n\n- 二是系统角度的一次交易申请和响应过程。\n\n前者称为业务交易过程，后者称为事务。两种交易指标都可以评价应用系统的处理能力。一般的建议与系统交易日志保持一致，以便于统计业务量或者交易量。系统处理能力指标是技术测试活动中重要指标。\n\n### **简称**\n\n一般情况下，用以下几个指标来度量：\n\n-   HPS（Hits Per Second） ：每秒点击次数，单位是次/秒。\n\n-   TPS（Transaction per Second）：系统每秒处理事务数，单位是笔/秒。吞吐量。\n\n    不可分割的。要么完全成功，要么完全失败。\n\n-   QPS（Query per Second）：系统每秒处理查询次数，单位是次/秒。\n\n    对于互联网业务中，如果某些业务有且仅有一个请求连接，那么TPS=QPS=HPS，\n\n    一般情况下用TPS来衡量整个业务流程，用QPS来衡量接口查询次数，用HPS来表示对服务器点击请求。\n\n每秒钟处理完的事务次数，一般TPS是对整个系统来讲的。一个应用系统1s能完成多少事务处理，一个事务在分布式处理中，可能会对应多个请求，对于衡量单个接口服务的处理能力，用QPS比较多。\n\n### **标准**\n\n无论TPS、QPS、HPS,此指标是衡量系统处理能力非常重要的指标，越大越好，根据经验，一般情况下：\n\n-   金融行业：1000TPS\\~9000TPS，不包括互联网化的活动\n\n-   保险行业：100TPS\\~1000TPS，不包括互联网化的活动\n\n-   制造行业：10TPS\\~50TPS\n\n-   互联网电子商务：10000TPS\\~100000TPS,例如天猫5万TPS\n\n-   互联网中型网站：100TPS\\~500TPS\n\n-   互联网小型网站: 50TPS\\~100TPS\n\n## 并发用户数量\n\n常见的错误理解:\n\n使用系统的全部用户数量(注册用户)\n\n使用系统的全部在线用户数量\n\n正确理解\n\n并发用户数指在同一时刻内，打开系统并进行业务操作的用户数量，并发用户数对于长连接(数据库连接时长连接，web请求时短连接)系统来说最大并发用户数即是系统的并发接入能力。对于短连接系统而言最大并发用户数并不等于系统的并发接入能力，而是与系统架构、系统处理能力等各种情况相关\n\nhttp:请求只能由客户端发出，服务端被动响应。\n\n###  简称\n\nVirtual User: VU\n\n### **标准**\n\n一般情况下，性能测试是将系统处理能力容量测出来，而不是测试并发用户数，除了服务器长连接可能影响并发用户数外，系统处理能力不完全受并发用户数影响，可以用最小的用户数将系统处理能力容量测试出来，也可以用更多的用户将系统处理能力容量测试出来。\n\n并发用户数量:\n\n并发用户多少为好？\n\n中小企业:5000用户\n\n## 错误率\n\n###  定义及解释\n\n错误率指系统在负载情况下，失败交易的概率。错误率＝(失败交易数/交易总数)\\*100%。稳定性较好的系统，其错误率应该由超时引起，即为超时率。\n\n### **标准**\n\n不同系统对错误率的要求不同，但一般不超出千分之六，即成功率不低于99.4%\n\n## CPU\n\n### **定义及解释** {定义及解释-1 .ListParagraph}\n\n中央处理器是一块超大规模的集成电路，是一台计算机的运算核心（Core）和控制核心（ Control Unit）。它的功能主要是解释计算机指令以及处理计算机软件中的数据。CPU Load: 系统正在干活的多少的度量，队列长度。系统平均负载。\n\nCPU指标主要指的CPU利用率，包括用户态(user)、系统态(sys)、等待态(wait)、空闲态(idle)。CPU 利用率要低于业界警戒值范围之内，即小于或者等于75%;CPU sys%小于或者等于30%, CPU wait%小于或者等于5%。单核CPU也需遵循上述指标要求。\n\n7\\*24不允许宕机\n\n##  Memory\n\n内存是计算机中重要的部件之一，它是与CPU进行沟通的桥梁。计算机中所有程序的运行都是在内存中进行的，因此内存的性能对计算机的影响非常大。\n\n现代的操作系统为了最大利用内存，在内存中存放了缓存，因此内存利用率100%并不代表内存有瓶颈，衡量系统内有有瓶颈主要靠SWAP（与虚拟内存交换）交换空间利用率，一般情况下，SWAP交换空间利用率要低于70%,太多的交换将会引起系统性能低下。\n\nSwap解释:\n\n当物理内存接近崩溃时，将物理内存中最近一段时间最少频率使用到的页框移出物理内存，放进该存储空间，这段存储空间我们称之为**交换空间（Swap）**\n\n## 磁盘吞吐量 Disk Throughput.\n\n磁盘吞吐量是指在无磁盘故障的情况下单位时间内通过磁盘的数据量。\n\n磁盘指标主要有每秒读写多少兆，磁盘繁忙率，磁盘队列数，平均服务时间，平均等待时间，空间利用率。其中磁盘繁忙率是直接反映磁盘是否有瓶颈的的重要依据，一般情况下，磁盘繁忙率要低于70%。\n\n## 网络吞吐量 Network Throughput\n\n**10Mbit带宽，每秒传输的字节数1.25MBytes**\n\n网络吞吐量是指在无网络故障的情况下单位时间内通过的网络的数据数量。单位为Byte/s。网络吞吐量指标用于衡量系统对于网络设备或链路传输能力的需求。当网络吞吐量指标接近网络设备或链路最大传输能力时，则需要考虑升级网络设备。\n\n网络吞吐量指标主要有每秒有多少兆流量进出，一般情况下不能超过设备或链路最大传输能力的70%。\n\n# 性能测试基本流程\n\n![image-20230103174138051](pictures/08JMeter/image-20230103174138051.png)\n\n性能测试需求:\n\n1)  最终用户体验，例如2-5-10原则，即按照正常用户体验，如果用户能够在2秒内得到响应，会感觉速度很快，如果2-5秒得到响应，用户感觉系统的响应速度还不多，在5-10秒之内得到响应时，用户会感觉系统的响应速度慢，但是可以接受，超过10秒后还没有响应，用户就会感觉不能够接受。\n\n2)  技术需求, cpu，内存，网络吞吐量，磁盘吞吐量\n\n3)  标准要求:\n\n    竞品分析-\n\n    响应时间\n\n-   互联网企业：500毫秒以下，例如淘宝业务10毫秒左右。\n\n-   金融企业：1秒以下为佳，部分复杂业务3秒以下。\n\n-   保险企业：3秒以下为佳。\n\n-   制造业：5秒以下为佳。\n\n    TPS\n\n-   金融行业：1000TPS\\~9000TPS，不包括互联网化的活动\n\n-   保险行业：100TPS\\~1000TPS，不包括互联网化的活动\n\n-   制造行业：10TPS\\~50TPS\n\n-   互联网电子商务：10000TPS\\~100000TPS,例如天猫5万TPS\n\n-   互联网中型网站：100TPS\\~500TPS\n\n-   互联网小型网站: 50TPS\\~100TPS\n\n    性能测试计划\n\n测试环境，测试需求，测试方法，测试时间表，测试组织架构，测试风险，输入输出文档\n\n性能测试步骤:\n\n![](pictures/08JMeter/image-20230103174223823.png)\n\n性能测试执行\n\n![](pictures/08JMeter/image-20230103174207519.png)\n\n# 性能测试工具\n\n![](pictures/08JMeter/image-20230103174236971.png)\n\n# Jmeter简介\n\n## Jmeter的基本概念\n\nApache JMeter是Apache组织开发的基于Java的压力测试工具。用于对软件做压力测试，它最初被设计用于Web应用测试，但后来扩展到其他测试领域。 它可以用于测试静态和动态资源，例如静态文件、Java 小服务程序、CGI 脚本、Java 对象、数据库、FTP 服务器， 等等。JMeter 可以用于对服务器、网络或对象模拟巨大的负载，来自不同压力类别下测试它们的强度和分析整体性能。另外，JMeter能够对应用程序做功能/回归测试，通过创建带有断言的脚本来验证你的程序返回了你期望的结果。为了最大限度的灵活性，JMeter允许使用正则表达式创建断言\n\n## 我们为什么使用Jmeter\n\n开源免费还很好用，基于Java编写，可集成到其他系统可拓展各个功能插件\n\n支持接口测试，压力（负载和压力）测试等多种功能，支持录制回放，入门简单\n\n相较于自己编写框架活其他开源工具，有较为完善的UI界面，便于接口调试\n\n多平台支持，可在Linux，Windows，Mac上运行\n\n# Jmeter安装配置及目录结构\n\n## Windows下Jmeter下载安装\n\n[登录官网]( http://jmeter.apache.org/download\\_jmeter.cgi) ，根据自己平台，下载对应文件\n\n![](pictures/08JMeter/image-20230103174419336.png)\n\n![](pictures/08JMeter/image-20230103174430456.png)\n\n![](pictures/08JMeter/image-20230103174437006.png)\n\n安装JDK，配置环境变量（具体步骤不做介绍）\n\n将下载Jmeter文件解压，打开/bin/jmeter.bat\n\n![](pictures/08JMeter/image-20230103174557321.png)\n\n![](pictures/08JMeter/image-20230103174657692.png)\n\n## Jmeter的目录结构\n\nSourceURL:file:///home/babyfengfjx/Downloads/JMeter操作手册大全.docx\n\n/bin 目录（常用文件介绍）\n\nexamples：目录下包含Jmeter使用实例\n\nApacheJMeter.jar：JMeter源码包\n\njmeter.bat：windows下启动文件\n\njmeter.sh：Linux下启动文件\n\njmeter.log：Jmeter运行日志文件\n\njmeter.properties：Jmeter配置文件\n\njmeter-server.bat：windows下启动负载生成器服务文件\n\njmeter-server：Linux下启动负载生成器文件\n\n/docs目录——Jmeter帮助文档\n\n/extras目录——提供了对Ant的支持文件，可也用于持续集成\n\n/lib目录——存放Jmeter依赖的jar包，同时安装插件也放于此目录\n\n/licenses目录——软件许可文件，不用管\n\n/printable_docs目录——Jmeter用户手册\n\n# Jmeter简单入门\n\n## 修改语言\n\n![](pictures/08JMeter/image-20230103174825289.png)\n\n## 创建测试计划\n\n![](pictures/08JMeter/image-20230103174843945.png)\n\n## 添加线程组\n\n![](pictures/08JMeter/image-20230103174901916.png)\n\n## 添加sampler设置http请求\n\n![](pictures/08JMeter/image-20230103175006565.png)\n\n## 添加结果树\n\n![](pictures/08JMeter/image-20230103175024887.png)\n\n## 查看结果\n\n![](pictures/08JMeter/image-20230103175048590.png)\n\n# 测试计划\n\n![](pictures/08JMeter/image-20230103175428021.png)\n\n独立运行每个线程组：\n\n再每一组运行结束后启动下一个\n\nRun tearDown Thread Groups after shutdown of main threads：  \n\n主线程关闭运行后拆除线程组，\n\n# 线程组\n\n![](pictures/08JMeter/image-20230104092545954.png)\n\nDelay Thread creation until needed         \\\n      延迟创建线程，直到该线程开始采样，即之后的任何线程组延迟和加速时间为线程本身。这样可以支持更多的线程，但不会有太多是同时处于活动状态。\n\n 持续时间（秒）：测试计划持续多长时间，会覆盖结束时间。\n\n 启动延迟（秒）：测试计划延迟多长时间启动，会覆盖启动时间。\n\n# Sampler \\--HTTP请求\n\n![](pictures/08JMeter/image-20230104092628654.png)\n\n请求方式\n\n请求路径\n\n请求ip\n\n请求协议\n\n请求编码\n\n![](pictures/08JMeter/image-20230104092652159.png)\n\n重定向之前的和之后的请求都会在结果树中显示出来\n\n![](pictures/08JMeter/image-20230104092707205.png)\n\n自动重定向，只会显示重定向之后的地址。\n\n![](pictures/08JMeter/image-20230104092735864.png)\n\n# 结果收集\n\n## 查看结果树\n\n![](pictures/08JMeter/image-20230104092807270.png)\n\n## 表格查看结果\n\n![](pictures/08JMeter/image-20230104092825613.png)\n\n偏离表示服务器响应时间变化、离散程度测量值的大小，或者，换句话说，就是数据的分布。\n\n## 聚合报告\n\n![](pictures/08JMeter/image-20230104092842121.png)\n\n## Summary Report\n\n![](pictures/08JMeter/image-20230104092857441.png)\n\n# Jmeter参数化\n\n## 用户定义的变量\n\n使用配置原件中用户定义的变量可以进行参数化\n\n![](pictures/08JMeter/image-20230104092916211.png)\n\n## 用户参数\n\n使用前置管理器设置用户参数\n\n![](pictures/08JMeter/image-20230104092938544.png)\n\n## 使用csv配置原件\n\n配置元件(Config Element)维护Sampler需要的配置信息，并根据实际的需要会修改请求的内容。我们主要在参数化中用到CSV Data Set Config![](pictures/08JMeter/image-20230104092956569.png)\n\n## 使用随机函数助手\n\n### 生成随机字符串\n\n![](pictures/08JMeter/image-20230104093024788.png)\n\n### 生成随机数字\n\n![](pictures/08JMeter/image-20230104094422449.png)\n\n### 参数引用\n\n![](pictures/08JMeter/image-20230104094437099.png)\n\n# Jmeter断言\\--检查点\n\n断言(Assertions)可以用来判断请求响应的结果是否如用户所期望的。它可以用来隔离问题域，即在确保功能正确的前提下执行压力测试。这个限制对于有效的测试是非常有用的。\n\n设置响应内容监听\n\n![](pictures/08JMeter/image-20230104094455677.png)\n\n设置响应头断言\n\n![](pictures/08JMeter/image-20230104094516722.png)\n\n# Jmeter定时器\n\n## 固定定时器\n\n定时器(Timer)负责定义请求之间的延迟间隔\n\n![](pictures/08JMeter/image-20230104094539586.png)\n\n## 高斯定时器\n\n![](pictures/08JMeter/image-20230104094605360.png)\n\n## **同步定时器（Synchronizing Timer）**\n\n![](pictures/08JMeter/image-20230104094622810.png)\n\n# Jmeter配置原件\n\n## HTTP Cookie管理器\n\n默认保存cookie信息\n\n![](pictures/08JMeter/image-20230104094646033.png)\n\n## HTTP信息头管理器\n\n默认保存常规的请求头\n\n![](pictures/08JMeter/image-20230104094701081.png)\n\n## HTTP Cache管理器\n\n默认管理http请求缓存的信息\n\n![](pictures/08JMeter/image-20230104094718002.png)\n\n## HTTP 请求默认值\n\n可以设置http请求的默认值，在单个的请求中不需要再设置其他内容\n\n![](pictures/08JMeter/image-20230104094737517.png)\n\n# Jmeter逻辑控制器\n\n## 简单控制器\n\n作用：这是Jmeter里最简单的一个控制器，它可以让我们组织我们的采样器和其它的逻辑控制器（分组功能），提供一个块的结构和控制，并不具有任何的逻辑控制或运行时的功能。\n\n![](pictures/08JMeter/image-20230104094756958.png)\n\n![](pictures/08JMeter/image-20230104094816885.png)\n\n## 循环控制器\n\n在之前基础上再去循环,线程10,迭代1,一共十次,放到循环控制器可以多次x请求,用于在某一组中对哪些请求循环执行\n\n![](pictures/08JMeter/image-20230104094909398.png)\n\n![](pictures/08JMeter/image-20230104094926170.png)\n\n## 事务控制器\n\n在线程组下创建事务控制器\n\n![](pictures/08JMeter/image-20230104094947187.png)\n\n创建sample 访问首页和注册页面,放到事务中\n\n![](pictures/08JMeter/image-20230104095110900.png)\n\n# Jmeter关联-后置处理器\n\n## 正则表达式提取\n\n![](pictures/08JMeter/image-20230104095127103.png)\n\n**位置1**：名称及注释\n\n**位置2**：正则表达式提取内容的范围。（关于各字段的详细说明请查阅协议的相关说明）\n\n**位置3**：正则表达式提取的相关设置\n\n-   **引用名称**：自己定义的变量名称，后续**请求**将要引用到的**变量名**,如填写的是：user\\_id，后面的引用方式是\\${user\\_id}\n\n-   **正则表达式**：提取内容的正则表达式，相当于lr中的关联函数\n\n-   ()     括起来的部分就是需要提取的，对于你要提的内容需要用小括号括起来\n\n-   .    点号表示匹配任何字符串\n\n-   \\+   一次或多次\n\n-   ？   在找到第一个匹配项后停止\n\n-   **模板**：用\\$\\$引用起来，如果在正则表达式中有多个正则表达式（多个括号括起来的东东），则可以是\\$2\\$，\\$3\\$等等，表示解析到的第几个值给user\\_id。例如：\\$1\\$表示匹配到的第一个值\n\n-   **匹配数字**：0代表随机取值，-1代表所有值，此时提取结果是一个数组，其余正整数代表第几个匹配的内容提取出来。如果匹配数字选择的是-1，还可以通过\\${user\\_id\\_1}的方式来取第1个匹配的内容，\\${user\\_id\\_2}来取第2个匹配的内容。 \n\n-   缺省值：正则匹配失败时，取的值\n\n## 使用debug Sampler获取参数的名称\n\n![](pictures/08JMeter/image-20230104095144838.png)\n\n## 参数化获取参数内容\n\n![](pictures/08JMeter/image-20230104095202731.png)\n\n# 元件的执行顺序\n\n![](pictures/08JMeter/image-20230104095219503.png)\n\n顺序:\n\nHTTP Cookie管理器\n\nHTTP Cache Manager\n\nHTTP 信息头管理器\n\nHTTP 请求默认值\n\n用户参数\n\n固定定时器\n\n简单控制器\n\n第一个请求\n\nHTTP Cookie管理器\n\nHTTP Cache Manager\n\nHTTP 信息头管理器\n\nHTTP 请求默认值\n\n用户参数\n\n固定定时器\n\n第二个请求\n\n响应断言\n\n正则表达式提取器\n\n查看结果树\n\n# Jmeter添加插件\n\nJmeter本身是不能够展示内存，cpu和吞吐量的，但是可以通过添加插件的方式来对jmeter添加这些功能\n\n![](pictures/08JMeter/image-20230104095234652.png)\n\n## 打开Jmeter，查看是否有插件管理器\n\n![](pictures/08JMeter/image-20230104095258849.png)\n\n\n\n![](pictures/08JMeter/image-20230104095321272.png)\n\n不一定一次成功\n\n## 场景控制插件\n\n### Stepping Thread Group\n\n![](pictures/08JMeter/image-20230104095409344.png)\n\n### 设置启动场景\n\n![](pictures/08JMeter/image-20230104095421303.png)\n\n## 结果监听插件\n\n![](pictures/08JMeter/image-20230104095440597.png)\n\n![](pictures/08JMeter/image-20230104095453077.png)\n\n![](pictures/08JMeter/image-20230104095511561.png)\n\n![](pictures/08JMeter/image-20230104095533363.png)\n\n![](pictures/08JMeter/image-20230104095917593.png)\n\n![](pictures/08JMeter/image-20230104095932798.png)\n\n![](pictures/08JMeter/image-20230104100053253.png)\n\n# Jmeter脚本录制\n\n## 什么是脚本录制\n\n在进行测试的时候，可能有好多脚本或者界面需要操作测试，并且有些测试链接需要重复多线程高并发进行测试，我们一般会针对这一些操作，进行一个脚本录制，录制好之后，之后测试就可以在这个基础上进行测试。\n\n## Jemeter脚本录制方式\n\nBadBoy脚本录制\n\n使用Jmeter自带的代理服务器进行脚本录制\n\n# 使用Jmeter自带的代理服务器进行脚本录制\n\n## 在测试计划上创建线程组\n\n![](pictures/08JMeter/image-20230104100121708.png)\n\n## 添加录制控制器\n\n![image-20230104100133886](pictures/08JMeter/image-20230104100133886.png)\n\n## 在工作台上添加http代理服务器\n\n![](pictures/08JMeter/image-20230104100207529.png)\n\n## 配置Http代理服务器\n\n![](pictures/08JMeter/image-20230104100221519.png)\n\n## 配置浏览器\n\n### Google浏览器\n\n![](pictures/08JMeter/image-20230104100253418.png)\n\n![](pictures/08JMeter/image-20230104100306738.png)\n\n![](pictures/08JMeter/image-20230104100329839.png)\n\n### 火狐浏览器\n\n![](pictures/08JMeter/image-20230104100347408.png)\n\n![](pictures/08JMeter/image-20230104100355679.png)\n\n## 浏览器请求测试\n\n![](pictures/08JMeter/image-20230104100426913.png)\n\n## 过滤信息\n\n添加如下内容\n\n.\\*\\\\.js.\\*\\|.\\*\\\\.css.\\*\\|.\\*\\\\.png.\\*\\|.\\*\\\\.jpg.\\*\\|.\\*\\\\.gif.\\*\\|.\\*\\\\.bmp.\\*\n\n![](pictures/08JMeter/image-20230104100447101.png)\n\n![](pictures/08JMeter/image-20230104100500830.png)\n\n# Android手机端脚本录制\n\n## 查看电脑IP\n\n![](pictures/08JMeter/image-20230104100513719.png)\n\n## 配置手机网路连接\n\n![](pictures/08JMeter/image-20230104100534974.png)\n\n![](pictures/08JMeter/image-20230104100600278.png)\n\n## 手机访问app\n\n![](pictures/08JMeter/image-20230104100620418.png)\n\n![](pictures/08JMeter/image-20230104100635987.png)\n\n## 模拟登陆操作\n\n![](pictures/08JMeter/image-20230104100650698.png)\n\n![](pictures/08JMeter/image-20230104100705102.png)\n\n## 执行结束之后，停止脚本录制\n\n![](pictures/08JMeter/image-20230104100722577.png)\n\n## 脚本测试-线程组设置10个线程分别请求10次\n\n![](pictures/08JMeter/image-20230104100737832.png)\n\n## 查看结果树\n\n![](pictures/08JMeter/image-20230104100757522.png)\n\n# BadBoy脚本录制\n\n## 安装badboy脚本软件\n\n傻瓜式安装即可\n\n## 打开badboy软件\n\n![](pictures/08JMeter/image-20230104100818008.png)\n\n## badboy脚本录制\n\n点击录制按钮进行脚本录制，完成打开搜狗搜索，搜索zhiyuan0932操作，然后停止，回放，（回放的时候，会因为编码原因导致乱码，需要手动调乱码问题）\n\n![](pictures/08JMeter/image-20230104100832454.png)\n\n![](pictures/08JMeter/image-20230104100856535.png)\n\n![](pictures/08JMeter/image-20230104100908487.png)\n\n![](pictures/08JMeter/image-20230104100917874.png)\n\n## 添加验证点\n\n验证点的作用就是验证脚本是否按照我们测试的思路执行，判断脚本执行过程中是否存现问题\n\n![](pictures/08JMeter/image-20230104100933098.png)\n\n## badboy参数化\n\n所谓参数化，是指请求的某个参数提前设定多个值，在具体请求的时候，去获取提前设定的值，不同的业务场景设置的参数不一致。\n\n![](pictures/08JMeter/image-20230104100952874.png)\n\n![](pictures/08JMeter/image-20230104101000440.png)\n\n![](pictures/08JMeter/image-20230104101007977.png)\n\n![](pictures/08JMeter/image-20230104101015465.png)\n\n## 导出Jmeter脚本\n\n![](pictures/08JMeter/image-20230104101031073.png)\n\n## 在Jmeter中导入badboy生成的脚本，验证测试\n\n![](pictures/08JMeter/image-20230104101040623.png)\n\n## badboy并发测试\n\n本身是能做接口测试和压力测试的,并且能兼容jemeter\n\n选择tools run background\n\n![](pictures/08JMeter/image-20230104101050000.png)\n\n## badboy测试报告\n\n在badboy\\--\\>view\\-\\--\\>report下可以看到测试报告\n\n![](pictures/08JMeter/image-20230104101059830.png)\n\n# Jmeter数据库压力测试\n\n## 先配置jdbc驱动\n\n![](pictures/08JMeter/image-20230104101134264.png)\n\n添加上jar后,在测试计划添加配置原件,jdbc进行配置\n\n![](pictures/08JMeter/image-20230104101200409.png)\n\n添加操作数据库请求 samplerjdbcRequest\n\n## 数据库普通查询操作 \n\n![](pictures/08JMeter/image-20230104101354190.png)\n\n## Jmeter预编译参数查询方式\n\n![](pictures/08JMeter/image-20230104101402444.png)\n\n## ForEach控制器循环请求\n\n![](pictures/08JMeter/image-20230104101410482.png)\n\n## JDBC预编译方式修改数据\n\n### 配置csv文件\n\n![](pictures/08JMeter/image-20230104101419180.png)\n\n### 修改数据\n\n![](pictures/08JMeter/image-20230104101428004.png)\n\n# Jmeter压测接口的性能优化\n\n简介：讲解Jmeter压测减少资源使用的一些建议，即压测结果更准确\n\n1、使用非GUI模式：jmeter -n -t test.jmx -l result.jtl\n\n2、少使用Listener， 如果使用-l参数，它们都可以被删除或禁用。\n\n3、在加载测试期间不要使用\"查看结果树\"或\"查看结果\"表监听器，只能在脚本阶段使用它们来调试脚本。\n\n4、包含控制器在这里没有帮助，因为它将文件中的所有测试元素添加到测试计划中。\n\n5、不要使用功能模式,使用CSV输出而不是XML\n\n6、只保存你需要的数据,尽可能少地使用断言\n\n7、如果测试需要大量数据，可以提前准备好测试数据放到数据文件中，以CSV Read方式读取。\n\n8、用内网压测，减少其他带宽影响压测结果\n\n9、如果压测大流量，尽量用多几个节点以非GUI模式向服务器施压\n\n# Linux下运行jmeter压测\n\n我们在做测试的时候，有时候要运行很久，公司用的测试服务器一般都是linux，就可以运行在linux下面，linux下面不能像windows一样有图形化界面，那怎么运行脚本呢。\n\n##  解压JDK8到Linux\n\ntar -xvf jdk-8u171-linux-i586.tar.gz -C /usr/local\n\nmv jdk-8u171-linux-i586 java\n\n![](pictures/08JMeter/image-20230104101441890.png)\n\n## 配置环境变量\n\n\\[root\\@localhost /\\]\\# vim /etc/profile\n\n+----------------------------------+\n| JAVA\\_HOME=/usr/local/java/      |\n|                                  |\n| CLASSPATH=\\$JAVA\\_HOME/lib/      |\n|                                  |\n| PATH=\\$PATH:\\$JAVA\\_HOME/bin     |\n|                                  |\n| export PATH JAVA\\_HOME CLASSPATH |\n+----------------------------------+\n\n## 刷新配置文件\n\nsource /etc/profile\n\njava -version\n\n## 解压并安装jmeter4.0\n\n## 配置jmeter环境变量\n\n### 解压jmeter到usr/local\n\n![](pictures/08JMeter/image-20230104101517327.png)\n\n### 启动Jmeter\n\n![](pictures/08JMeter/image-20230104101524299.png)\n\n### 打开系统配置文件\n\nvim /etc/profile\n\n### 配置环境变量\n\n+------------------------------------+\n| JMETER\\_HOME=/usr/local/jmeter/    |\n|                                    |\n| CLASSPATH=\\$JMETER\\_HOME/lib/      |\n|                                    |\n| PATH=\\$PATH:\\$JMETER\\_HOME/bin     |\n|                                    |\n| export PATH JMETER\\_HOME CLASSPATH |\n+------------------------------------+\n\n### 刷新系统配置文件\n\nsource /etc/profile\n\n### 执行jmeter -?\n\n![](pictures/08JMeter/image-20230104101538473.png)\n\n### 将windows上写好的脚本导入到Linux\n\n### 进行测试\n\n非GUI界面，压测参数讲解\n\n-h 帮助\n\n-n 非GUI模式\n\n-t 指定要运行的 JMeter 测试脚本文件\n\n-l 记录结果的文件 每次运行之前，(要确保之前没有运行过,即xxx.jtl不存在，不然报错)\n\n-r Jmter.properties文件中指定的所有远程服务器\n\n-e 在脚本运行结束后生成html报告\n\n-o 用于存放html报告的目录（目录要为空，不然报错）\n\njmeter -n --t a.jmx -l res.jtl\n\n![](pictures/08JMeter/image-20230104101551634.png)\n\n## 将测试结果导入到Jmeter中查看结果数据\n\n![](pictures/08JMeter/image-20230104101600808.png)\n\n# Jmeter压测生成HTML测试报告\n\n创建文件夹\n\nmkdir result\n\n指令执行\n\njmeter -n -t baidu.jmx -l res.jtl -e -o /result\n\n# Jmeter HTML报告dashboard讲解\n\n## **Test and Report informations**\n\n![](pictures/08JMeter/image-20230104101620957.png)\n\n+----------------------------+\n| Source file：jtl文件名     |\n|                            |\n| Start Time ：压测开始时间  |\n|                            |\n| End Time ：压测结束时间    |\n|                            |\n| Filter for display：过滤器 |\n|                            |\n| Lable:sampler采样器名称    |\n+----------------------------+\n\n## APDEX(Application performance Index)\n\n![](pictures/08JMeter/image-20230104101631888.png)\n\n+----------------------------------------------------------------+\n| apdex:应用程序性能指标,范围在0\\~1之间，1表示达到所有用户均满意 |\n|                                                                |\n| T(Toleration threshold)：可接受阀值                            |\n|                                                                |\n| F(Frustration threshold)：失败阀值                             |\n+----------------------------------------------------------------+\n\n## Requests Summary\n\n![](pictures/08JMeter/image-20230104101644480.png)OK:成功率\n\nKO:失败率\n\n## Statistics 统计数据\n\n![](pictures/08JMeter/image-20230104101652991.png)\n\nlable:sampler采样器名称\n\nsamples:请求总数，并发数*循环次数\n\nKO:失败次数\n\nError%:失败率\n\nAverage:平均响应时间\n\nMin:最小响应时间\n\nMax:最大响应时间\n\n90th pct: 90%的用户响应时间不会超过这个值（关注这个就可以了）\n\n95th pct: 95%的用户响应时间不会超过这个值\n\n99th pct: 99%的用户响应时间不会超过这个值 (存在极端值)\n\nthroughtput:Request per Second吞吐量 qps\n\nreceived:每秒从服务器接收的数据量\n\nsend：每秒发送的数据量\n\n## 错误信息统计\n\n![](pictures/08JMeter/image-20230104101704720.png)\n\n# Jmeter图形化HTML压测报告Charts报表讲解\n\n## Over Time（随着时间的变化）\n\n![](pictures/08JMeter/image-20230104101717927.png)\n\nResponse Times Over Time：响应时间变化趋势\n\nResponse Time Percentiles Over Time (successful responses)：最大，最小，平均，用户响应时间分布\n\nActive Threads Over Time：并发用户数趋势\n\nBytes Throughput Over Time：每秒接收和请求字节数变化，蓝色表示发送，黄色表示接受\n\nLatencies Over Time：平均响应延时趋势\n\nConnect Time Over Time\t：连接耗时趋势\n\n## Throughput\n\nHits Per Second (excluding embedded resources):每秒点击次数\n\nCodes Per Second (excluding embedded resources)：每秒状态码数量\n\nTransactions Per Second：即TPS，每秒事务数\n\nResponse Time Vs Request：响应时间和请求数对比\n\nLatency Vs Request：延迟时间和请求数对比\n\n## Response Times\n\nResponse Time Percentiles：响应时间百分比\n\n![](pictures/08JMeter/image-20230104101732576.png)\n\nResponse Time Overview：响应时间概述\n\n![](pictures/08JMeter/image-20230104101739594.png)\n\nTime Vs Threads：活跃线程数和响应时间\n\n![](pictures/08JMeter/image-20230104101746321.png)\n\nResponse Time Distribution：响应时间分布图\n\n![](pictures/08JMeter/image-20230104101754968.png)\n\n# Windows jmeter unGUI测试\n\n## 设置环境变量\n\n![](pictures/08JMeter/image-20230104101805282.png)\n\n## 无界面测试\n\n![](pictures/08JMeter/image-20230104101812589.png)\n\n# 分布式压测介绍\n\n普通压测：\n\n单台机可以对目标机器产生的压力比较小，受限因素包括CPU，网络，IO等\n\n分布式压测：\n\n利用多台机器向目标机器产生压力，模拟几万用户并发访问\n\n![](pictures/08JMeter/image-20230104101821321.png)\n\n# Jmeter分布式压测原理\n\n![](pictures/08JMeter/image-20230104101829831.png)\n\n1、总控机器的节点master，其他产生压力的机器叫\"肉鸡\" server\n\n2、master会把压测脚本发送到 server上面\n\n3、执行的时候，server上只需要把jmeter-server打开就可以了，不用启动jmeter\n\n4、结束后，server会把压测数据回传给master,然后master汇总输出报告\n\n5、配置详情\n\n# Jmeter分布式压测实战\n\n## Slave机器设置\n\n第一步:禁用ssl\n\n到slave Jmeter的jmeter.properties文件中修改\n\nserver.rmi.ssl.disable=true\n\n第二步:修改slave Jmeter的远程连接端口\n\nserver\\_port=8899 表示master机器要远程连接的端口\n\n第三步:启动slave Jmeter\n\n./jmeter-server\n\n./jmeter-server -Djava.rmi.server.hostname=192.168.179.128\n\n第四步:关闭防火墙\n\nservice iptables stop\n\n## 设置Master设备\n\n关闭防火墙\n\nservice iptables stop\n\n到slave Jmeter的jmeter.properties文件中修改\n\nserver.rmi.ssl.disable=true\n\n修改remote\\_hosts=127.0.0.1\n\n为remote\\_hosts=192.168.179.128:9999\n\nGUI方式启动\n\n![](pictures/08JMeter/image-20230104101846545.png)\n\n无GUI方式启动\n\nJmeter -n -t baidu.jmx -r -l result.jtl -e -o result\n\n![](pictures/08JMeter/image-20230104101853765.png)\n\n# 并发用户和TPS关系\n\n简单计算:\n\n在线用户数量(日活量)：\n\n在做性能测试的时候，传统方式都是用并发用户数来衡量系统的性能，觉得系统能支撑的并发用户数越多，系统的性能就越好；同时对TPS不是非常理解，也根本不知道它们之间的关系，因此非常有必要进行解释。因为TPS模式（吞吐量模式）是一种更好的方式衡量服务端系统的能力。\n\n## Vu和TPS换算\n\n简单例子:\n\n在术语中解释了TPS是每秒事务数，但是事务时要靠虚拟用户做出来的，\n\n假如1个虚拟用户在1秒内完成1笔事务，那么TPS明显就是1；\n\n如果某笔业务响应时间是1ms,那么1个用户在1秒内能完成1000笔事务，TPS就是1000了；\n\n如果某笔业务响应时间是1s,那么1个用户在1秒内只能完成1笔事务，要想达到1000TPS，至少需要1000个用户；\n\n## 如何获取Vu和TPS\n\n并发用户数(Vu)获取新系统：没有历史数据作参考，只能通过业务部门进行评估。旧系统：对于已经上线的系统，可以选取高峰时刻，在一定时间内使用系统的人数，这些人数认为属于在线用户数，并发用户数取10%就可以了，例如在半个小时内，使用系统的用户数为10000，那么取10%作为并发用户数基本就够了。\n\n其他计算方式：根据pv计算\n\nPV(访问量)：即Page View, 即页面浏览量或点击量，用户每次刷新即被计算一次。\n\n假设:pv数是80w\n\n（1）平均值情况：80w个用户在时间上均匀地发起请求。那么并发用户数为800000/24\\*60\\*60=9.25并发/s。\n\n （2）80\\~20原则：根据统计学原理，采用80\\~20原则计算并发用户数。\\\n             800000\\*0.8/（24\\*60\\*60\\*0.2）=37并发/s\n\nTPS获取新系统：没有历史数据作参考，只能通过业务部门进行评估。旧系统：对于已经上线的系统，可以选取高峰时刻，在5分钟或10分钟内，获取系统每笔交易的业务量和总业务量，按照单位时间内完成的笔数计算出TPS，即业务笔数/单位时间。\n\n##  总结\n\n-   系统的性能由TPS决定，跟并发用户数没有多大关系。\n\n-   系统的最大TPS是一定的（在一个范围内），但并发用户数不一定，可以调整。\n\n-   建议性能测试的时候，不要设置过长的思考时间，以最坏的情况下对服务器施压。\n\n-   一般情况下，大型系统（业务量大、机器多）做压力测试，10000～50000个用户并发，中小型系统做压力测试，5000个用户并发比较常见。\n\n# 性能指标\n\n## 中间件指标 \n\n### 定义及解释\n\n常用的中间件例如Tomcat、Weblogic等指标主要包括JVM, ThreadPool, JDBC,具体如下：\n\n| **一级指标** | **二级指标**           | **解释**                   | **备注** |      |\n| ------------ | ---------------------- | -------------------------- | -------- | ---- |\n| GC           | GC频率                 | java虚拟机垃圾部分回收频率 |          |      |\n|              | Full GC频率            | java虚拟机垃圾完全回收频率 |          |      |\n|              | Full GC平均时长        | 用于垃圾完全回收的平均时长 |          |      |\n|              | Full GC最大时长        | 用于垃圾完全回收的最大时长 |          |      |\n|              | 堆使用率               | 堆使用率                   |          |      |\n| ThreadPool   | Active Thread Count    | 活动的线程数               |          |      |\n|              | Pending User Request   | 处于排队的用户请求个数     |          |      |\n| JDBC         | JDBC Active Connection | JDBC活动连接数             |          |      |\n\n### 标准\n\n-   当前正在运行的线程数不能超过设定的最大值。一般情况下系统性能较好的情况下，线程数最小值设置50和最大值设置200比较合适。\n\n-   当前运行的JDBC连接数不能超过设定的最大值。一般情况下系统性能较好的情况下，JDBC最小值设置50和最大值设置200比较合适。\n\n-   ＧＣ频率不能频繁，特别是FULL GC更不能频繁，一般情况下系统性能较好的情况下，JVM最小堆大小和最大堆大小分别设置1024M比较合适。\n\n## 数据库指标\n\n### 定义及解释\n\n常用的数据库例如ＭySQL指标主要包括SQL、吞吐量、缓存命中率、连接数等，具体如下：\n\n| **一级指标** | **二级指标**        | **单位** | **解释**           |      |\n| ------------ | ------------------- | -------- | ------------------ | ---- |\n| SQL          | 耗时                | 微秒     | 执行SQL耗时        |      |\n| 吞吐量       | QPS                 | 个       | 每秒查询次数       |      |\n|              | TPS                 | 个       | 每秒事务次数       |      |\n| 命中率       | Key Buffer命中率    | 百分之   | 索引缓冲区命中率   |      |\n|              | InnoDB Buffer命中率 | 百分之   | InnoDB缓冲区命中率 |      |\n|              | Query Cache命中率   | 百分之   | 查询缓存命中率     |      |\n|              | Table Cache命中率   | 百分之   | 表缓存命中率       |      |\n|              | Thread Cache命中率  | 百分之   | 线程缓存命中率     |      |\n| 锁           | 等待次数            | 次       | 锁等待次数         |      |\n|              | 等待时间            | 微秒     | 锁等待时间         |      |\n\n-------------- --------------------- ---------- -------------------- --\n-------------- --------------------- ---------- -------------------- --\n\n###  标准\n\n-   SQL耗时越小越好，一般情况下微秒级别。\n\n-   命中率越高越好，一般情况下不能低于95%。\n\n-   锁等待次数越低越好，等待时间越短越好。\n\n## 前端指标\n\n### 定义及解释\n\n前端指标主要包括页面展示和网络所花的时间，具体如下：\n\n| **一级指标** | **二级指标**   | **单位** | **解释**                                                     | **备注** |      |\n| ------------ | -------------- | -------- | ------------------------------------------------------------ | -------- | ---- |\n| 页面展示     | 首次显示时间   | 毫秒     | 在浏览器地址栏输入URL按回车到用户看到网页的第一个视觉标志为止 |          |      |\n|              | OnLoad事件时间 | 毫秒     | 浏览器触发onLoad事件的时间，当原始文档和所有引用的内容完全下载后才会触发这个事件 |          |      |\n|              | 完全载入的时间 | 毫秒     | 所有onLoad JavaScript 处理程序执行完毕，所有动态的或延迟加载的内容都通过这些处理程序触发的时间 |          |      |\n| 页面数量     | 页面大小       | KB       | 整个页面大小                                                 |          |      |\n|              | 请求数量       | 次       | 从网站下载资源时所有网络请求的总数，尽量少                   |          |      |\n| 网络         | DNS时间        | 毫秒     | DNS查找时间                                                  |          |      |\n|              | 连接时间       | 毫秒     | 连接时间就是浏览器与Web服务器建立TCP/IP连接的时间            |          |      |\n|              | 服务器时间     | 毫秒     | 服务器处理时间                                               |          |      |\n|              | 传输时间       | 毫秒     | 内容传输所用时间                                             |          |      |\n|              | 等待时间       | 毫秒     | 等待某个资源释放的时间                                       |          |      |\n\n### 标准\n\n-   页面要尽可能小及压缩。\n\n-   页面展示和花费时间越短越好。\n\n##  稳定性指标\n\n### 定义及解释\n\n最短稳定时间：系统按照最大容量的80%或标准压力（系统的预期日常压力）情况下运行，能够稳定运行的最短时间。一般来说，对于正常工作日（8小时）运行的系统，至少应该能保证系统稳定运行８小时以上。对于7\\*24运行的系统，至少应该能够保证系统稳定运行24小时以上。如果系统不能稳定的运行，上线后，随着业务量的增长和长时间运行，将会出现性能下降甚至崩溃的风险。\n\n### 标准\n\n-   TPS曲线稳定，没有大幅度的波动。\n\n-   各项资源指标没有泄露或异常情况。\n\n# 性能分析\n\n性能分析的前提除了需要丰富的性能测试监控，还要了解操作系统、中间件(tomcat)、数据库(mysql oracle sqlserver)、开发等。\n\n## 流程\n\n-   很多情况下压测流量并没有完全进入到后端（服务端），在网络接入层（云化的架构比如：SLB/WAF/高防IP，甚至是CDN/全站加速等）可能就会出现由于各种规格（带宽、最大连接数、新建连接数等）限制或者因为压测的某些特征符合CC和DDoS的行为而触发了防护策略导致压测结果达不到预期。\n\n-   接着看关键指标是否满足要求，如果不满足，需要确定是哪个地方有问题，一般情况下，服务器端问题可能性比较大，也有可能是客户端问题（这种情况非常小）。\n\n-   对于服务器端问题，需要定位的是硬件相关指标，例如CPU，Memory, Disk I/O, Network I/O, 如果是某个硬件指标有问题，需要深入的进行分析。\n\n-   如果硬件指标都没有问题，需要查看中间件相关指标，例如：线程池、连接池、GC等，如果是这些指标问题，需要深入的 分析。\n\n-   如果中间件相关指标没问题，需要查看数据库相关指标，例如：慢查SQL，命中率，锁、参数设置。\n\n-   如果以上指标都正常，应用程序的算法、缓冲、缓存、同步或异步可能有问题，需要具体深入的分析。\n\n    ![](pictures/08JMeter/image-20230104101937127.png)可能瓶颈点\n\n###  **硬件/规格上的瓶颈**\n\n一般指的是CPU、内存、磁盘I/O 方面的问题，分为服务器硬件瓶颈、网络瓶颈（对局域网可以不考虑）。\n\n### **中间件上的性能瓶颈**\n\n一般指的是应用服务器、web 服务器等应用软件，还包括数据库系统。例如：中间件weblogic/tomcat平台上配置的JDBC连接池的参数设置不合理，造成的瓶颈。\n\n### **应用程序上的性能瓶颈**\n\n一般指的是开发人员开发出来的应用程序。例如，JVM参数不合理，容器配置不合理，慢SQL，数据库设计不合理，程序架构规划不合理，程序本身设计有问题（串行处理、请求的处理线程不够、无缓冲、无缓存、生产者和消费者不协调等），造成系统在大量用户方位时性能低下而造成的瓶颈。\n\n###  **操作系统上的性能瓶颈**\n\n一般指的是windows、UNIX、Linux等操作系统。例如，在进行性能测试，出现物理内存不足时，虚拟内存设置也不合理，虚拟内存的交换效率就会大大降低，从而导致行为的响应时间大大增加，这时认为操作系统上出现性能瓶颈。\n\n### **网络设备上的性能瓶颈**\n\n一般指的是防火墙、动态负载均衡器、交换机等设备。当前更多的云化服务架构使用的网络接入产品：包括但不限于SLB/WAF/高防IP/CDN/全站加速等等。例如，在动态负载均衡器上设置了动态分发负载的机制，当发现某个应用服务器上的硬件资源已经到达极限时，动态负载均衡器将后续的交易请求发送到其他负载较轻的应用服务器上。在测试时发现，动态负载均衡器没有起到相应的作用，这时可以认为网络瓶颈。\n\n## 方法\n\n### **CPU**\n\nCPU资源利用率很高的话，需要看CPU消耗User,Sys,Wait那种状态下。\n\n-   如果CPU User非常高，需要查看消耗在哪个进程，可以用top(linux)命令看出，接着用top --H --p \\<pid\\>看哪个线程消耗资源高，如果是java应用，就可以用jstack看出此线程正在执行的堆栈，看资源消耗在哪个方法上，查看源代码就知道问题所在；如果是c++应用，可以用gprof性能工具进行分析。\n\n-   如果CPU Sys非常高，可以用strace(linux)看系统调用的资源消耗及时间。\n\n-   如果CPU Wait非常高，考虑磁盘读写了，可以通过减少日志输出、异步或换速度快的硬盘。\n\n###  **Memory**\n\n操作系统未了最大化利用内存，一般都设置大量的cache,因此，内存利用率高达99%并不是问题，内存的问题主要看某个进程占用的内存是否非常大以及是否有大量的swap(虚拟内存交换)。\n\n###  **磁盘I/O**\n\n磁盘I/O一个最显著的指标是繁忙率，可以通过减少日志输出、异步或换速度快的硬盘。\n\n###  **网络I/O**\n\n网络I/O主要考虑传输内容大小，不能超过硬件网络传输的最大值70%，可以通过压缩、减少内容大小、在本地设置缓存以及分多次传输等。\n\n### **JVM**\n\njvm主要分析GC/FULL GC是否频繁，以及垃圾回收的时间，可以用jstat命令来查看，对于每个代大小以及GC频繁，通过jmap将内存dump,再借助工具HeapAnalyzer来分析哪地方占用的内存较高以及是否有内存泄漏可能。简单点可以使用APM工具，比如阿里云ARMS，下同。\n\n### **线程池**\n\n如果线程不够用，可以通过参数调整，增加线程；对于线程池中的线程设置比较大的情况，还是不够用可能的原因是：某个线程被阻塞来不及释放，可能在等锁、方法耗时较长、数据库等待时间很长等原因导致，需要进一步分析才能定位。\n\n###  **JDBC连接池**\n\n连接池不够用的情况下，可以通过参数进行调整增加；但是对于数据库本身处理很慢的情况下，调整没有多大的效果，需要查看数据库方面以及因代码导致连接未释放的原因。\n\n###  **SQL**\n\nSQL效率低下也是导致性能差的一个非常重要的原因，可以通过查看执行计划看SQL慢在哪里，一般情况，SQL效率低下原因主要有：\n\n| ***\\*类别\\**** | ***\\*子类\\****             | ***\\*表达式或描述\\****                                   | ***\\*原因\\****                                               |\n| -------------- | -------------------------- | -------------------------------------------------------- | ------------------------------------------------------------ |\n| 索引           | 未建索引                   |                                                          | 产生全表扫描                                                 |\n|                | 未利用索引                 | substring(card_no,1,4)=′5378′                            | 产生全表扫描                                                 |\n|                |                            | amount/30< 1000                                          | 产生全表扫描                                                 |\n|                |                            | convert(char(10),date,112)=′19991201′                    | 产生全表扫描                                                 |\n|                |                            | where salary<>3000                                       | 产生全表扫描                                                 |\n|                |                            | name like ‘%张’                                          | 产生全表扫描                                                 |\n|                |                            | first_name + last_name =’beill cliton’                   | 产生全表扫描                                                 |\n|                |                            | id_no in(′0′,′1′)                                        | 产生全表扫描                                                 |\n|                |                            | select id from t where num=@num                          | 有参数也会产生全表扫描                                       |\n|                | 使用效能低的索引           | oder by 非聚族索引                                       | 索引性能低                                                   |\n|                |                            | username=’张三’ and age>20                               | 字符串索引低于整形索引                                       |\n|                |                            | 表中列与空NULL值                                         | 索引性能低                                                   |\n|                |                            | 尽量不要使用IS NULL或IS NOT NULL                         | 索引性能低                                                   |\n| 数据量         | 所有数据量                 | select *                                                 | 很多列产生大量数据                                           |\n|                |                            | select id,name                                           | 表中有几百万行，产生大量数据                                 |\n|                | 嵌套查询                   | 先不过滤数据，后过滤数据                                 | 产生大量无用的数据                                           |\n|                | 关联查询                   | 多表进行关联查询，先过滤掉小部分数据，在过滤大部分数据   | 大量关联操作                                                 |\n|                | 大数据量插入               | 一次次插入                                               | 产生大量日志，消耗资源                                       |\n| 锁             | 锁等待                     | update account set banlance=100 where id=10              | 产生表级锁，将会锁住整个表                                   |\n|                | 死锁                       | A:update a;update b;B:update b;update a;                 | 将会产生死锁                                                 |\n|                | 游标                       | Cursor Open cursor,fetch;close cursor                    | 性能很低                                                     |\n|                | 临时表                     | create tmp table 创建临时表                              | 产生大量日志                                                 |\n|                | drop table                 | 删除临时表                                               | 需要显示删除，避免系统表长时间锁定                           |\n| 其他           | exist 代替 IN              | select num from a where num in(select num from b)        | in会逐个判断,exist有一条就结束                               |\n|                | exist 代替select count(*)  | 判断记录是否存在                                         | count(*)将累加计算，exist有就结束                            |\n|                | between 代替 IN            | ID in(1,2,3)                                             | IN逐个判断，between是范围判断                                |\n|                | left outer join 代替Not IN | select ID from a where ID not in(select b.Mainid from b) | NOT IN逐个判断，效率非常低                                   |\n|                | union all 代替union        | select ID from a union select id from b union            | 删除重复的行，可能会在磁盘进行排序而union all只是简单的将结果并在一起 |\n|                | 常用SQL尽量用绑定变量方法  | insert into A(ID) values(1)                              | 直接写SQL每次都要编译，用绑定变量的方法只编译一次，下次就可以用了 |\n","source":"_posts/08JMeter.md","raw":"---\ntitle: JMeter基础\ncategories: \n- Jmeter\ntags:\n- Jmeter\n- 性能测试\ndate: 2019-06-20 15:21:34\n---\n\n# 性能测试基本概念\n\n## RT -Response time\n\n请求响应时间\n\n从客户端发出请求到得到响应的整个时间\n\n一般包括网络响应时间+server的响应时间。\n\n用户接受准则:\n\n例如2-5-10原则，即按照正常用户体验，如果用户能够在2秒内得到响应，会感觉速度很快，如果2-5秒得到响应，用户感觉系统的响应速度还不多，在5-10秒之内得到响应时，用户会感觉系统的响应速度慢，但是可以接受，超过10秒后还没有响应，用户就会感觉不能够接受。\n\n不同行业不同业务可接受的响应时间是不同的，一般情况，对于在线实时交易：\n\n-   互联网企业：500毫秒以下，例如淘宝业务10毫秒左右。\n-   金融企业：1秒以下为佳，部分复杂业务3秒以下。\n-   保险企业：3秒以下为佳。\n-   制造业：5秒以下为佳。\n-   阿里云规范\n\n## **系统处理能力**\n\n系统处理能力是指系统在利用系统硬件平台和软件平台进行信息处理的能力。系统处理能力通过系统每秒钟能够处理的交易数量来评价，交易有两种理解：\n\n- 一是业务人员角度的一笔业务过程；\n\n- 二是系统角度的一次交易申请和响应过程。\n\n前者称为业务交易过程，后者称为事务。两种交易指标都可以评价应用系统的处理能力。一般的建议与系统交易日志保持一致，以便于统计业务量或者交易量。系统处理能力指标是技术测试活动中重要指标。\n\n### **简称**\n\n一般情况下，用以下几个指标来度量：\n\n-   HPS（Hits Per Second） ：每秒点击次数，单位是次/秒。\n\n-   TPS（Transaction per Second）：系统每秒处理事务数，单位是笔/秒。吞吐量。\n\n    不可分割的。要么完全成功，要么完全失败。\n\n-   QPS（Query per Second）：系统每秒处理查询次数，单位是次/秒。\n\n    对于互联网业务中，如果某些业务有且仅有一个请求连接，那么TPS=QPS=HPS，\n\n    一般情况下用TPS来衡量整个业务流程，用QPS来衡量接口查询次数，用HPS来表示对服务器点击请求。\n\n每秒钟处理完的事务次数，一般TPS是对整个系统来讲的。一个应用系统1s能完成多少事务处理，一个事务在分布式处理中，可能会对应多个请求，对于衡量单个接口服务的处理能力，用QPS比较多。\n\n### **标准**\n\n无论TPS、QPS、HPS,此指标是衡量系统处理能力非常重要的指标，越大越好，根据经验，一般情况下：\n\n-   金融行业：1000TPS\\~9000TPS，不包括互联网化的活动\n\n-   保险行业：100TPS\\~1000TPS，不包括互联网化的活动\n\n-   制造行业：10TPS\\~50TPS\n\n-   互联网电子商务：10000TPS\\~100000TPS,例如天猫5万TPS\n\n-   互联网中型网站：100TPS\\~500TPS\n\n-   互联网小型网站: 50TPS\\~100TPS\n\n## 并发用户数量\n\n常见的错误理解:\n\n使用系统的全部用户数量(注册用户)\n\n使用系统的全部在线用户数量\n\n正确理解\n\n并发用户数指在同一时刻内，打开系统并进行业务操作的用户数量，并发用户数对于长连接(数据库连接时长连接，web请求时短连接)系统来说最大并发用户数即是系统的并发接入能力。对于短连接系统而言最大并发用户数并不等于系统的并发接入能力，而是与系统架构、系统处理能力等各种情况相关\n\nhttp:请求只能由客户端发出，服务端被动响应。\n\n###  简称\n\nVirtual User: VU\n\n### **标准**\n\n一般情况下，性能测试是将系统处理能力容量测出来，而不是测试并发用户数，除了服务器长连接可能影响并发用户数外，系统处理能力不完全受并发用户数影响，可以用最小的用户数将系统处理能力容量测试出来，也可以用更多的用户将系统处理能力容量测试出来。\n\n并发用户数量:\n\n并发用户多少为好？\n\n中小企业:5000用户\n\n## 错误率\n\n###  定义及解释\n\n错误率指系统在负载情况下，失败交易的概率。错误率＝(失败交易数/交易总数)\\*100%。稳定性较好的系统，其错误率应该由超时引起，即为超时率。\n\n### **标准**\n\n不同系统对错误率的要求不同，但一般不超出千分之六，即成功率不低于99.4%\n\n## CPU\n\n### **定义及解释** {定义及解释-1 .ListParagraph}\n\n中央处理器是一块超大规模的集成电路，是一台计算机的运算核心（Core）和控制核心（ Control Unit）。它的功能主要是解释计算机指令以及处理计算机软件中的数据。CPU Load: 系统正在干活的多少的度量，队列长度。系统平均负载。\n\nCPU指标主要指的CPU利用率，包括用户态(user)、系统态(sys)、等待态(wait)、空闲态(idle)。CPU 利用率要低于业界警戒值范围之内，即小于或者等于75%;CPU sys%小于或者等于30%, CPU wait%小于或者等于5%。单核CPU也需遵循上述指标要求。\n\n7\\*24不允许宕机\n\n##  Memory\n\n内存是计算机中重要的部件之一，它是与CPU进行沟通的桥梁。计算机中所有程序的运行都是在内存中进行的，因此内存的性能对计算机的影响非常大。\n\n现代的操作系统为了最大利用内存，在内存中存放了缓存，因此内存利用率100%并不代表内存有瓶颈，衡量系统内有有瓶颈主要靠SWAP（与虚拟内存交换）交换空间利用率，一般情况下，SWAP交换空间利用率要低于70%,太多的交换将会引起系统性能低下。\n\nSwap解释:\n\n当物理内存接近崩溃时，将物理内存中最近一段时间最少频率使用到的页框移出物理内存，放进该存储空间，这段存储空间我们称之为**交换空间（Swap）**\n\n## 磁盘吞吐量 Disk Throughput.\n\n磁盘吞吐量是指在无磁盘故障的情况下单位时间内通过磁盘的数据量。\n\n磁盘指标主要有每秒读写多少兆，磁盘繁忙率，磁盘队列数，平均服务时间，平均等待时间，空间利用率。其中磁盘繁忙率是直接反映磁盘是否有瓶颈的的重要依据，一般情况下，磁盘繁忙率要低于70%。\n\n## 网络吞吐量 Network Throughput\n\n**10Mbit带宽，每秒传输的字节数1.25MBytes**\n\n网络吞吐量是指在无网络故障的情况下单位时间内通过的网络的数据数量。单位为Byte/s。网络吞吐量指标用于衡量系统对于网络设备或链路传输能力的需求。当网络吞吐量指标接近网络设备或链路最大传输能力时，则需要考虑升级网络设备。\n\n网络吞吐量指标主要有每秒有多少兆流量进出，一般情况下不能超过设备或链路最大传输能力的70%。\n\n# 性能测试基本流程\n\n![image-20230103174138051](pictures/08JMeter/image-20230103174138051.png)\n\n性能测试需求:\n\n1)  最终用户体验，例如2-5-10原则，即按照正常用户体验，如果用户能够在2秒内得到响应，会感觉速度很快，如果2-5秒得到响应，用户感觉系统的响应速度还不多，在5-10秒之内得到响应时，用户会感觉系统的响应速度慢，但是可以接受，超过10秒后还没有响应，用户就会感觉不能够接受。\n\n2)  技术需求, cpu，内存，网络吞吐量，磁盘吞吐量\n\n3)  标准要求:\n\n    竞品分析-\n\n    响应时间\n\n-   互联网企业：500毫秒以下，例如淘宝业务10毫秒左右。\n\n-   金融企业：1秒以下为佳，部分复杂业务3秒以下。\n\n-   保险企业：3秒以下为佳。\n\n-   制造业：5秒以下为佳。\n\n    TPS\n\n-   金融行业：1000TPS\\~9000TPS，不包括互联网化的活动\n\n-   保险行业：100TPS\\~1000TPS，不包括互联网化的活动\n\n-   制造行业：10TPS\\~50TPS\n\n-   互联网电子商务：10000TPS\\~100000TPS,例如天猫5万TPS\n\n-   互联网中型网站：100TPS\\~500TPS\n\n-   互联网小型网站: 50TPS\\~100TPS\n\n    性能测试计划\n\n测试环境，测试需求，测试方法，测试时间表，测试组织架构，测试风险，输入输出文档\n\n性能测试步骤:\n\n![](pictures/08JMeter/image-20230103174223823.png)\n\n性能测试执行\n\n![](pictures/08JMeter/image-20230103174207519.png)\n\n# 性能测试工具\n\n![](pictures/08JMeter/image-20230103174236971.png)\n\n# Jmeter简介\n\n## Jmeter的基本概念\n\nApache JMeter是Apache组织开发的基于Java的压力测试工具。用于对软件做压力测试，它最初被设计用于Web应用测试，但后来扩展到其他测试领域。 它可以用于测试静态和动态资源，例如静态文件、Java 小服务程序、CGI 脚本、Java 对象、数据库、FTP 服务器， 等等。JMeter 可以用于对服务器、网络或对象模拟巨大的负载，来自不同压力类别下测试它们的强度和分析整体性能。另外，JMeter能够对应用程序做功能/回归测试，通过创建带有断言的脚本来验证你的程序返回了你期望的结果。为了最大限度的灵活性，JMeter允许使用正则表达式创建断言\n\n## 我们为什么使用Jmeter\n\n开源免费还很好用，基于Java编写，可集成到其他系统可拓展各个功能插件\n\n支持接口测试，压力（负载和压力）测试等多种功能，支持录制回放，入门简单\n\n相较于自己编写框架活其他开源工具，有较为完善的UI界面，便于接口调试\n\n多平台支持，可在Linux，Windows，Mac上运行\n\n# Jmeter安装配置及目录结构\n\n## Windows下Jmeter下载安装\n\n[登录官网]( http://jmeter.apache.org/download\\_jmeter.cgi) ，根据自己平台，下载对应文件\n\n![](pictures/08JMeter/image-20230103174419336.png)\n\n![](pictures/08JMeter/image-20230103174430456.png)\n\n![](pictures/08JMeter/image-20230103174437006.png)\n\n安装JDK，配置环境变量（具体步骤不做介绍）\n\n将下载Jmeter文件解压，打开/bin/jmeter.bat\n\n![](pictures/08JMeter/image-20230103174557321.png)\n\n![](pictures/08JMeter/image-20230103174657692.png)\n\n## Jmeter的目录结构\n\nSourceURL:file:///home/babyfengfjx/Downloads/JMeter操作手册大全.docx\n\n/bin 目录（常用文件介绍）\n\nexamples：目录下包含Jmeter使用实例\n\nApacheJMeter.jar：JMeter源码包\n\njmeter.bat：windows下启动文件\n\njmeter.sh：Linux下启动文件\n\njmeter.log：Jmeter运行日志文件\n\njmeter.properties：Jmeter配置文件\n\njmeter-server.bat：windows下启动负载生成器服务文件\n\njmeter-server：Linux下启动负载生成器文件\n\n/docs目录——Jmeter帮助文档\n\n/extras目录——提供了对Ant的支持文件，可也用于持续集成\n\n/lib目录——存放Jmeter依赖的jar包，同时安装插件也放于此目录\n\n/licenses目录——软件许可文件，不用管\n\n/printable_docs目录——Jmeter用户手册\n\n# Jmeter简单入门\n\n## 修改语言\n\n![](pictures/08JMeter/image-20230103174825289.png)\n\n## 创建测试计划\n\n![](pictures/08JMeter/image-20230103174843945.png)\n\n## 添加线程组\n\n![](pictures/08JMeter/image-20230103174901916.png)\n\n## 添加sampler设置http请求\n\n![](pictures/08JMeter/image-20230103175006565.png)\n\n## 添加结果树\n\n![](pictures/08JMeter/image-20230103175024887.png)\n\n## 查看结果\n\n![](pictures/08JMeter/image-20230103175048590.png)\n\n# 测试计划\n\n![](pictures/08JMeter/image-20230103175428021.png)\n\n独立运行每个线程组：\n\n再每一组运行结束后启动下一个\n\nRun tearDown Thread Groups after shutdown of main threads：  \n\n主线程关闭运行后拆除线程组，\n\n# 线程组\n\n![](pictures/08JMeter/image-20230104092545954.png)\n\nDelay Thread creation until needed         \\\n      延迟创建线程，直到该线程开始采样，即之后的任何线程组延迟和加速时间为线程本身。这样可以支持更多的线程，但不会有太多是同时处于活动状态。\n\n 持续时间（秒）：测试计划持续多长时间，会覆盖结束时间。\n\n 启动延迟（秒）：测试计划延迟多长时间启动，会覆盖启动时间。\n\n# Sampler \\--HTTP请求\n\n![](pictures/08JMeter/image-20230104092628654.png)\n\n请求方式\n\n请求路径\n\n请求ip\n\n请求协议\n\n请求编码\n\n![](pictures/08JMeter/image-20230104092652159.png)\n\n重定向之前的和之后的请求都会在结果树中显示出来\n\n![](pictures/08JMeter/image-20230104092707205.png)\n\n自动重定向，只会显示重定向之后的地址。\n\n![](pictures/08JMeter/image-20230104092735864.png)\n\n# 结果收集\n\n## 查看结果树\n\n![](pictures/08JMeter/image-20230104092807270.png)\n\n## 表格查看结果\n\n![](pictures/08JMeter/image-20230104092825613.png)\n\n偏离表示服务器响应时间变化、离散程度测量值的大小，或者，换句话说，就是数据的分布。\n\n## 聚合报告\n\n![](pictures/08JMeter/image-20230104092842121.png)\n\n## Summary Report\n\n![](pictures/08JMeter/image-20230104092857441.png)\n\n# Jmeter参数化\n\n## 用户定义的变量\n\n使用配置原件中用户定义的变量可以进行参数化\n\n![](pictures/08JMeter/image-20230104092916211.png)\n\n## 用户参数\n\n使用前置管理器设置用户参数\n\n![](pictures/08JMeter/image-20230104092938544.png)\n\n## 使用csv配置原件\n\n配置元件(Config Element)维护Sampler需要的配置信息，并根据实际的需要会修改请求的内容。我们主要在参数化中用到CSV Data Set Config![](pictures/08JMeter/image-20230104092956569.png)\n\n## 使用随机函数助手\n\n### 生成随机字符串\n\n![](pictures/08JMeter/image-20230104093024788.png)\n\n### 生成随机数字\n\n![](pictures/08JMeter/image-20230104094422449.png)\n\n### 参数引用\n\n![](pictures/08JMeter/image-20230104094437099.png)\n\n# Jmeter断言\\--检查点\n\n断言(Assertions)可以用来判断请求响应的结果是否如用户所期望的。它可以用来隔离问题域，即在确保功能正确的前提下执行压力测试。这个限制对于有效的测试是非常有用的。\n\n设置响应内容监听\n\n![](pictures/08JMeter/image-20230104094455677.png)\n\n设置响应头断言\n\n![](pictures/08JMeter/image-20230104094516722.png)\n\n# Jmeter定时器\n\n## 固定定时器\n\n定时器(Timer)负责定义请求之间的延迟间隔\n\n![](pictures/08JMeter/image-20230104094539586.png)\n\n## 高斯定时器\n\n![](pictures/08JMeter/image-20230104094605360.png)\n\n## **同步定时器（Synchronizing Timer）**\n\n![](pictures/08JMeter/image-20230104094622810.png)\n\n# Jmeter配置原件\n\n## HTTP Cookie管理器\n\n默认保存cookie信息\n\n![](pictures/08JMeter/image-20230104094646033.png)\n\n## HTTP信息头管理器\n\n默认保存常规的请求头\n\n![](pictures/08JMeter/image-20230104094701081.png)\n\n## HTTP Cache管理器\n\n默认管理http请求缓存的信息\n\n![](pictures/08JMeter/image-20230104094718002.png)\n\n## HTTP 请求默认值\n\n可以设置http请求的默认值，在单个的请求中不需要再设置其他内容\n\n![](pictures/08JMeter/image-20230104094737517.png)\n\n# Jmeter逻辑控制器\n\n## 简单控制器\n\n作用：这是Jmeter里最简单的一个控制器，它可以让我们组织我们的采样器和其它的逻辑控制器（分组功能），提供一个块的结构和控制，并不具有任何的逻辑控制或运行时的功能。\n\n![](pictures/08JMeter/image-20230104094756958.png)\n\n![](pictures/08JMeter/image-20230104094816885.png)\n\n## 循环控制器\n\n在之前基础上再去循环,线程10,迭代1,一共十次,放到循环控制器可以多次x请求,用于在某一组中对哪些请求循环执行\n\n![](pictures/08JMeter/image-20230104094909398.png)\n\n![](pictures/08JMeter/image-20230104094926170.png)\n\n## 事务控制器\n\n在线程组下创建事务控制器\n\n![](pictures/08JMeter/image-20230104094947187.png)\n\n创建sample 访问首页和注册页面,放到事务中\n\n![](pictures/08JMeter/image-20230104095110900.png)\n\n# Jmeter关联-后置处理器\n\n## 正则表达式提取\n\n![](pictures/08JMeter/image-20230104095127103.png)\n\n**位置1**：名称及注释\n\n**位置2**：正则表达式提取内容的范围。（关于各字段的详细说明请查阅协议的相关说明）\n\n**位置3**：正则表达式提取的相关设置\n\n-   **引用名称**：自己定义的变量名称，后续**请求**将要引用到的**变量名**,如填写的是：user\\_id，后面的引用方式是\\${user\\_id}\n\n-   **正则表达式**：提取内容的正则表达式，相当于lr中的关联函数\n\n-   ()     括起来的部分就是需要提取的，对于你要提的内容需要用小括号括起来\n\n-   .    点号表示匹配任何字符串\n\n-   \\+   一次或多次\n\n-   ？   在找到第一个匹配项后停止\n\n-   **模板**：用\\$\\$引用起来，如果在正则表达式中有多个正则表达式（多个括号括起来的东东），则可以是\\$2\\$，\\$3\\$等等，表示解析到的第几个值给user\\_id。例如：\\$1\\$表示匹配到的第一个值\n\n-   **匹配数字**：0代表随机取值，-1代表所有值，此时提取结果是一个数组，其余正整数代表第几个匹配的内容提取出来。如果匹配数字选择的是-1，还可以通过\\${user\\_id\\_1}的方式来取第1个匹配的内容，\\${user\\_id\\_2}来取第2个匹配的内容。 \n\n-   缺省值：正则匹配失败时，取的值\n\n## 使用debug Sampler获取参数的名称\n\n![](pictures/08JMeter/image-20230104095144838.png)\n\n## 参数化获取参数内容\n\n![](pictures/08JMeter/image-20230104095202731.png)\n\n# 元件的执行顺序\n\n![](pictures/08JMeter/image-20230104095219503.png)\n\n顺序:\n\nHTTP Cookie管理器\n\nHTTP Cache Manager\n\nHTTP 信息头管理器\n\nHTTP 请求默认值\n\n用户参数\n\n固定定时器\n\n简单控制器\n\n第一个请求\n\nHTTP Cookie管理器\n\nHTTP Cache Manager\n\nHTTP 信息头管理器\n\nHTTP 请求默认值\n\n用户参数\n\n固定定时器\n\n第二个请求\n\n响应断言\n\n正则表达式提取器\n\n查看结果树\n\n# Jmeter添加插件\n\nJmeter本身是不能够展示内存，cpu和吞吐量的，但是可以通过添加插件的方式来对jmeter添加这些功能\n\n![](pictures/08JMeter/image-20230104095234652.png)\n\n## 打开Jmeter，查看是否有插件管理器\n\n![](pictures/08JMeter/image-20230104095258849.png)\n\n\n\n![](pictures/08JMeter/image-20230104095321272.png)\n\n不一定一次成功\n\n## 场景控制插件\n\n### Stepping Thread Group\n\n![](pictures/08JMeter/image-20230104095409344.png)\n\n### 设置启动场景\n\n![](pictures/08JMeter/image-20230104095421303.png)\n\n## 结果监听插件\n\n![](pictures/08JMeter/image-20230104095440597.png)\n\n![](pictures/08JMeter/image-20230104095453077.png)\n\n![](pictures/08JMeter/image-20230104095511561.png)\n\n![](pictures/08JMeter/image-20230104095533363.png)\n\n![](pictures/08JMeter/image-20230104095917593.png)\n\n![](pictures/08JMeter/image-20230104095932798.png)\n\n![](pictures/08JMeter/image-20230104100053253.png)\n\n# Jmeter脚本录制\n\n## 什么是脚本录制\n\n在进行测试的时候，可能有好多脚本或者界面需要操作测试，并且有些测试链接需要重复多线程高并发进行测试，我们一般会针对这一些操作，进行一个脚本录制，录制好之后，之后测试就可以在这个基础上进行测试。\n\n## Jemeter脚本录制方式\n\nBadBoy脚本录制\n\n使用Jmeter自带的代理服务器进行脚本录制\n\n# 使用Jmeter自带的代理服务器进行脚本录制\n\n## 在测试计划上创建线程组\n\n![](pictures/08JMeter/image-20230104100121708.png)\n\n## 添加录制控制器\n\n![image-20230104100133886](pictures/08JMeter/image-20230104100133886.png)\n\n## 在工作台上添加http代理服务器\n\n![](pictures/08JMeter/image-20230104100207529.png)\n\n## 配置Http代理服务器\n\n![](pictures/08JMeter/image-20230104100221519.png)\n\n## 配置浏览器\n\n### Google浏览器\n\n![](pictures/08JMeter/image-20230104100253418.png)\n\n![](pictures/08JMeter/image-20230104100306738.png)\n\n![](pictures/08JMeter/image-20230104100329839.png)\n\n### 火狐浏览器\n\n![](pictures/08JMeter/image-20230104100347408.png)\n\n![](pictures/08JMeter/image-20230104100355679.png)\n\n## 浏览器请求测试\n\n![](pictures/08JMeter/image-20230104100426913.png)\n\n## 过滤信息\n\n添加如下内容\n\n.\\*\\\\.js.\\*\\|.\\*\\\\.css.\\*\\|.\\*\\\\.png.\\*\\|.\\*\\\\.jpg.\\*\\|.\\*\\\\.gif.\\*\\|.\\*\\\\.bmp.\\*\n\n![](pictures/08JMeter/image-20230104100447101.png)\n\n![](pictures/08JMeter/image-20230104100500830.png)\n\n# Android手机端脚本录制\n\n## 查看电脑IP\n\n![](pictures/08JMeter/image-20230104100513719.png)\n\n## 配置手机网路连接\n\n![](pictures/08JMeter/image-20230104100534974.png)\n\n![](pictures/08JMeter/image-20230104100600278.png)\n\n## 手机访问app\n\n![](pictures/08JMeter/image-20230104100620418.png)\n\n![](pictures/08JMeter/image-20230104100635987.png)\n\n## 模拟登陆操作\n\n![](pictures/08JMeter/image-20230104100650698.png)\n\n![](pictures/08JMeter/image-20230104100705102.png)\n\n## 执行结束之后，停止脚本录制\n\n![](pictures/08JMeter/image-20230104100722577.png)\n\n## 脚本测试-线程组设置10个线程分别请求10次\n\n![](pictures/08JMeter/image-20230104100737832.png)\n\n## 查看结果树\n\n![](pictures/08JMeter/image-20230104100757522.png)\n\n# BadBoy脚本录制\n\n## 安装badboy脚本软件\n\n傻瓜式安装即可\n\n## 打开badboy软件\n\n![](pictures/08JMeter/image-20230104100818008.png)\n\n## badboy脚本录制\n\n点击录制按钮进行脚本录制，完成打开搜狗搜索，搜索zhiyuan0932操作，然后停止，回放，（回放的时候，会因为编码原因导致乱码，需要手动调乱码问题）\n\n![](pictures/08JMeter/image-20230104100832454.png)\n\n![](pictures/08JMeter/image-20230104100856535.png)\n\n![](pictures/08JMeter/image-20230104100908487.png)\n\n![](pictures/08JMeter/image-20230104100917874.png)\n\n## 添加验证点\n\n验证点的作用就是验证脚本是否按照我们测试的思路执行，判断脚本执行过程中是否存现问题\n\n![](pictures/08JMeter/image-20230104100933098.png)\n\n## badboy参数化\n\n所谓参数化，是指请求的某个参数提前设定多个值，在具体请求的时候，去获取提前设定的值，不同的业务场景设置的参数不一致。\n\n![](pictures/08JMeter/image-20230104100952874.png)\n\n![](pictures/08JMeter/image-20230104101000440.png)\n\n![](pictures/08JMeter/image-20230104101007977.png)\n\n![](pictures/08JMeter/image-20230104101015465.png)\n\n## 导出Jmeter脚本\n\n![](pictures/08JMeter/image-20230104101031073.png)\n\n## 在Jmeter中导入badboy生成的脚本，验证测试\n\n![](pictures/08JMeter/image-20230104101040623.png)\n\n## badboy并发测试\n\n本身是能做接口测试和压力测试的,并且能兼容jemeter\n\n选择tools run background\n\n![](pictures/08JMeter/image-20230104101050000.png)\n\n## badboy测试报告\n\n在badboy\\--\\>view\\-\\--\\>report下可以看到测试报告\n\n![](pictures/08JMeter/image-20230104101059830.png)\n\n# Jmeter数据库压力测试\n\n## 先配置jdbc驱动\n\n![](pictures/08JMeter/image-20230104101134264.png)\n\n添加上jar后,在测试计划添加配置原件,jdbc进行配置\n\n![](pictures/08JMeter/image-20230104101200409.png)\n\n添加操作数据库请求 samplerjdbcRequest\n\n## 数据库普通查询操作 \n\n![](pictures/08JMeter/image-20230104101354190.png)\n\n## Jmeter预编译参数查询方式\n\n![](pictures/08JMeter/image-20230104101402444.png)\n\n## ForEach控制器循环请求\n\n![](pictures/08JMeter/image-20230104101410482.png)\n\n## JDBC预编译方式修改数据\n\n### 配置csv文件\n\n![](pictures/08JMeter/image-20230104101419180.png)\n\n### 修改数据\n\n![](pictures/08JMeter/image-20230104101428004.png)\n\n# Jmeter压测接口的性能优化\n\n简介：讲解Jmeter压测减少资源使用的一些建议，即压测结果更准确\n\n1、使用非GUI模式：jmeter -n -t test.jmx -l result.jtl\n\n2、少使用Listener， 如果使用-l参数，它们都可以被删除或禁用。\n\n3、在加载测试期间不要使用\"查看结果树\"或\"查看结果\"表监听器，只能在脚本阶段使用它们来调试脚本。\n\n4、包含控制器在这里没有帮助，因为它将文件中的所有测试元素添加到测试计划中。\n\n5、不要使用功能模式,使用CSV输出而不是XML\n\n6、只保存你需要的数据,尽可能少地使用断言\n\n7、如果测试需要大量数据，可以提前准备好测试数据放到数据文件中，以CSV Read方式读取。\n\n8、用内网压测，减少其他带宽影响压测结果\n\n9、如果压测大流量，尽量用多几个节点以非GUI模式向服务器施压\n\n# Linux下运行jmeter压测\n\n我们在做测试的时候，有时候要运行很久，公司用的测试服务器一般都是linux，就可以运行在linux下面，linux下面不能像windows一样有图形化界面，那怎么运行脚本呢。\n\n##  解压JDK8到Linux\n\ntar -xvf jdk-8u171-linux-i586.tar.gz -C /usr/local\n\nmv jdk-8u171-linux-i586 java\n\n![](pictures/08JMeter/image-20230104101441890.png)\n\n## 配置环境变量\n\n\\[root\\@localhost /\\]\\# vim /etc/profile\n\n+----------------------------------+\n| JAVA\\_HOME=/usr/local/java/      |\n|                                  |\n| CLASSPATH=\\$JAVA\\_HOME/lib/      |\n|                                  |\n| PATH=\\$PATH:\\$JAVA\\_HOME/bin     |\n|                                  |\n| export PATH JAVA\\_HOME CLASSPATH |\n+----------------------------------+\n\n## 刷新配置文件\n\nsource /etc/profile\n\njava -version\n\n## 解压并安装jmeter4.0\n\n## 配置jmeter环境变量\n\n### 解压jmeter到usr/local\n\n![](pictures/08JMeter/image-20230104101517327.png)\n\n### 启动Jmeter\n\n![](pictures/08JMeter/image-20230104101524299.png)\n\n### 打开系统配置文件\n\nvim /etc/profile\n\n### 配置环境变量\n\n+------------------------------------+\n| JMETER\\_HOME=/usr/local/jmeter/    |\n|                                    |\n| CLASSPATH=\\$JMETER\\_HOME/lib/      |\n|                                    |\n| PATH=\\$PATH:\\$JMETER\\_HOME/bin     |\n|                                    |\n| export PATH JMETER\\_HOME CLASSPATH |\n+------------------------------------+\n\n### 刷新系统配置文件\n\nsource /etc/profile\n\n### 执行jmeter -?\n\n![](pictures/08JMeter/image-20230104101538473.png)\n\n### 将windows上写好的脚本导入到Linux\n\n### 进行测试\n\n非GUI界面，压测参数讲解\n\n-h 帮助\n\n-n 非GUI模式\n\n-t 指定要运行的 JMeter 测试脚本文件\n\n-l 记录结果的文件 每次运行之前，(要确保之前没有运行过,即xxx.jtl不存在，不然报错)\n\n-r Jmter.properties文件中指定的所有远程服务器\n\n-e 在脚本运行结束后生成html报告\n\n-o 用于存放html报告的目录（目录要为空，不然报错）\n\njmeter -n --t a.jmx -l res.jtl\n\n![](pictures/08JMeter/image-20230104101551634.png)\n\n## 将测试结果导入到Jmeter中查看结果数据\n\n![](pictures/08JMeter/image-20230104101600808.png)\n\n# Jmeter压测生成HTML测试报告\n\n创建文件夹\n\nmkdir result\n\n指令执行\n\njmeter -n -t baidu.jmx -l res.jtl -e -o /result\n\n# Jmeter HTML报告dashboard讲解\n\n## **Test and Report informations**\n\n![](pictures/08JMeter/image-20230104101620957.png)\n\n+----------------------------+\n| Source file：jtl文件名     |\n|                            |\n| Start Time ：压测开始时间  |\n|                            |\n| End Time ：压测结束时间    |\n|                            |\n| Filter for display：过滤器 |\n|                            |\n| Lable:sampler采样器名称    |\n+----------------------------+\n\n## APDEX(Application performance Index)\n\n![](pictures/08JMeter/image-20230104101631888.png)\n\n+----------------------------------------------------------------+\n| apdex:应用程序性能指标,范围在0\\~1之间，1表示达到所有用户均满意 |\n|                                                                |\n| T(Toleration threshold)：可接受阀值                            |\n|                                                                |\n| F(Frustration threshold)：失败阀值                             |\n+----------------------------------------------------------------+\n\n## Requests Summary\n\n![](pictures/08JMeter/image-20230104101644480.png)OK:成功率\n\nKO:失败率\n\n## Statistics 统计数据\n\n![](pictures/08JMeter/image-20230104101652991.png)\n\nlable:sampler采样器名称\n\nsamples:请求总数，并发数*循环次数\n\nKO:失败次数\n\nError%:失败率\n\nAverage:平均响应时间\n\nMin:最小响应时间\n\nMax:最大响应时间\n\n90th pct: 90%的用户响应时间不会超过这个值（关注这个就可以了）\n\n95th pct: 95%的用户响应时间不会超过这个值\n\n99th pct: 99%的用户响应时间不会超过这个值 (存在极端值)\n\nthroughtput:Request per Second吞吐量 qps\n\nreceived:每秒从服务器接收的数据量\n\nsend：每秒发送的数据量\n\n## 错误信息统计\n\n![](pictures/08JMeter/image-20230104101704720.png)\n\n# Jmeter图形化HTML压测报告Charts报表讲解\n\n## Over Time（随着时间的变化）\n\n![](pictures/08JMeter/image-20230104101717927.png)\n\nResponse Times Over Time：响应时间变化趋势\n\nResponse Time Percentiles Over Time (successful responses)：最大，最小，平均，用户响应时间分布\n\nActive Threads Over Time：并发用户数趋势\n\nBytes Throughput Over Time：每秒接收和请求字节数变化，蓝色表示发送，黄色表示接受\n\nLatencies Over Time：平均响应延时趋势\n\nConnect Time Over Time\t：连接耗时趋势\n\n## Throughput\n\nHits Per Second (excluding embedded resources):每秒点击次数\n\nCodes Per Second (excluding embedded resources)：每秒状态码数量\n\nTransactions Per Second：即TPS，每秒事务数\n\nResponse Time Vs Request：响应时间和请求数对比\n\nLatency Vs Request：延迟时间和请求数对比\n\n## Response Times\n\nResponse Time Percentiles：响应时间百分比\n\n![](pictures/08JMeter/image-20230104101732576.png)\n\nResponse Time Overview：响应时间概述\n\n![](pictures/08JMeter/image-20230104101739594.png)\n\nTime Vs Threads：活跃线程数和响应时间\n\n![](pictures/08JMeter/image-20230104101746321.png)\n\nResponse Time Distribution：响应时间分布图\n\n![](pictures/08JMeter/image-20230104101754968.png)\n\n# Windows jmeter unGUI测试\n\n## 设置环境变量\n\n![](pictures/08JMeter/image-20230104101805282.png)\n\n## 无界面测试\n\n![](pictures/08JMeter/image-20230104101812589.png)\n\n# 分布式压测介绍\n\n普通压测：\n\n单台机可以对目标机器产生的压力比较小，受限因素包括CPU，网络，IO等\n\n分布式压测：\n\n利用多台机器向目标机器产生压力，模拟几万用户并发访问\n\n![](pictures/08JMeter/image-20230104101821321.png)\n\n# Jmeter分布式压测原理\n\n![](pictures/08JMeter/image-20230104101829831.png)\n\n1、总控机器的节点master，其他产生压力的机器叫\"肉鸡\" server\n\n2、master会把压测脚本发送到 server上面\n\n3、执行的时候，server上只需要把jmeter-server打开就可以了，不用启动jmeter\n\n4、结束后，server会把压测数据回传给master,然后master汇总输出报告\n\n5、配置详情\n\n# Jmeter分布式压测实战\n\n## Slave机器设置\n\n第一步:禁用ssl\n\n到slave Jmeter的jmeter.properties文件中修改\n\nserver.rmi.ssl.disable=true\n\n第二步:修改slave Jmeter的远程连接端口\n\nserver\\_port=8899 表示master机器要远程连接的端口\n\n第三步:启动slave Jmeter\n\n./jmeter-server\n\n./jmeter-server -Djava.rmi.server.hostname=192.168.179.128\n\n第四步:关闭防火墙\n\nservice iptables stop\n\n## 设置Master设备\n\n关闭防火墙\n\nservice iptables stop\n\n到slave Jmeter的jmeter.properties文件中修改\n\nserver.rmi.ssl.disable=true\n\n修改remote\\_hosts=127.0.0.1\n\n为remote\\_hosts=192.168.179.128:9999\n\nGUI方式启动\n\n![](pictures/08JMeter/image-20230104101846545.png)\n\n无GUI方式启动\n\nJmeter -n -t baidu.jmx -r -l result.jtl -e -o result\n\n![](pictures/08JMeter/image-20230104101853765.png)\n\n# 并发用户和TPS关系\n\n简单计算:\n\n在线用户数量(日活量)：\n\n在做性能测试的时候，传统方式都是用并发用户数来衡量系统的性能，觉得系统能支撑的并发用户数越多，系统的性能就越好；同时对TPS不是非常理解，也根本不知道它们之间的关系，因此非常有必要进行解释。因为TPS模式（吞吐量模式）是一种更好的方式衡量服务端系统的能力。\n\n## Vu和TPS换算\n\n简单例子:\n\n在术语中解释了TPS是每秒事务数，但是事务时要靠虚拟用户做出来的，\n\n假如1个虚拟用户在1秒内完成1笔事务，那么TPS明显就是1；\n\n如果某笔业务响应时间是1ms,那么1个用户在1秒内能完成1000笔事务，TPS就是1000了；\n\n如果某笔业务响应时间是1s,那么1个用户在1秒内只能完成1笔事务，要想达到1000TPS，至少需要1000个用户；\n\n## 如何获取Vu和TPS\n\n并发用户数(Vu)获取新系统：没有历史数据作参考，只能通过业务部门进行评估。旧系统：对于已经上线的系统，可以选取高峰时刻，在一定时间内使用系统的人数，这些人数认为属于在线用户数，并发用户数取10%就可以了，例如在半个小时内，使用系统的用户数为10000，那么取10%作为并发用户数基本就够了。\n\n其他计算方式：根据pv计算\n\nPV(访问量)：即Page View, 即页面浏览量或点击量，用户每次刷新即被计算一次。\n\n假设:pv数是80w\n\n（1）平均值情况：80w个用户在时间上均匀地发起请求。那么并发用户数为800000/24\\*60\\*60=9.25并发/s。\n\n （2）80\\~20原则：根据统计学原理，采用80\\~20原则计算并发用户数。\\\n             800000\\*0.8/（24\\*60\\*60\\*0.2）=37并发/s\n\nTPS获取新系统：没有历史数据作参考，只能通过业务部门进行评估。旧系统：对于已经上线的系统，可以选取高峰时刻，在5分钟或10分钟内，获取系统每笔交易的业务量和总业务量，按照单位时间内完成的笔数计算出TPS，即业务笔数/单位时间。\n\n##  总结\n\n-   系统的性能由TPS决定，跟并发用户数没有多大关系。\n\n-   系统的最大TPS是一定的（在一个范围内），但并发用户数不一定，可以调整。\n\n-   建议性能测试的时候，不要设置过长的思考时间，以最坏的情况下对服务器施压。\n\n-   一般情况下，大型系统（业务量大、机器多）做压力测试，10000～50000个用户并发，中小型系统做压力测试，5000个用户并发比较常见。\n\n# 性能指标\n\n## 中间件指标 \n\n### 定义及解释\n\n常用的中间件例如Tomcat、Weblogic等指标主要包括JVM, ThreadPool, JDBC,具体如下：\n\n| **一级指标** | **二级指标**           | **解释**                   | **备注** |      |\n| ------------ | ---------------------- | -------------------------- | -------- | ---- |\n| GC           | GC频率                 | java虚拟机垃圾部分回收频率 |          |      |\n|              | Full GC频率            | java虚拟机垃圾完全回收频率 |          |      |\n|              | Full GC平均时长        | 用于垃圾完全回收的平均时长 |          |      |\n|              | Full GC最大时长        | 用于垃圾完全回收的最大时长 |          |      |\n|              | 堆使用率               | 堆使用率                   |          |      |\n| ThreadPool   | Active Thread Count    | 活动的线程数               |          |      |\n|              | Pending User Request   | 处于排队的用户请求个数     |          |      |\n| JDBC         | JDBC Active Connection | JDBC活动连接数             |          |      |\n\n### 标准\n\n-   当前正在运行的线程数不能超过设定的最大值。一般情况下系统性能较好的情况下，线程数最小值设置50和最大值设置200比较合适。\n\n-   当前运行的JDBC连接数不能超过设定的最大值。一般情况下系统性能较好的情况下，JDBC最小值设置50和最大值设置200比较合适。\n\n-   ＧＣ频率不能频繁，特别是FULL GC更不能频繁，一般情况下系统性能较好的情况下，JVM最小堆大小和最大堆大小分别设置1024M比较合适。\n\n## 数据库指标\n\n### 定义及解释\n\n常用的数据库例如ＭySQL指标主要包括SQL、吞吐量、缓存命中率、连接数等，具体如下：\n\n| **一级指标** | **二级指标**        | **单位** | **解释**           |      |\n| ------------ | ------------------- | -------- | ------------------ | ---- |\n| SQL          | 耗时                | 微秒     | 执行SQL耗时        |      |\n| 吞吐量       | QPS                 | 个       | 每秒查询次数       |      |\n|              | TPS                 | 个       | 每秒事务次数       |      |\n| 命中率       | Key Buffer命中率    | 百分之   | 索引缓冲区命中率   |      |\n|              | InnoDB Buffer命中率 | 百分之   | InnoDB缓冲区命中率 |      |\n|              | Query Cache命中率   | 百分之   | 查询缓存命中率     |      |\n|              | Table Cache命中率   | 百分之   | 表缓存命中率       |      |\n|              | Thread Cache命中率  | 百分之   | 线程缓存命中率     |      |\n| 锁           | 等待次数            | 次       | 锁等待次数         |      |\n|              | 等待时间            | 微秒     | 锁等待时间         |      |\n\n-------------- --------------------- ---------- -------------------- --\n-------------- --------------------- ---------- -------------------- --\n\n###  标准\n\n-   SQL耗时越小越好，一般情况下微秒级别。\n\n-   命中率越高越好，一般情况下不能低于95%。\n\n-   锁等待次数越低越好，等待时间越短越好。\n\n## 前端指标\n\n### 定义及解释\n\n前端指标主要包括页面展示和网络所花的时间，具体如下：\n\n| **一级指标** | **二级指标**   | **单位** | **解释**                                                     | **备注** |      |\n| ------------ | -------------- | -------- | ------------------------------------------------------------ | -------- | ---- |\n| 页面展示     | 首次显示时间   | 毫秒     | 在浏览器地址栏输入URL按回车到用户看到网页的第一个视觉标志为止 |          |      |\n|              | OnLoad事件时间 | 毫秒     | 浏览器触发onLoad事件的时间，当原始文档和所有引用的内容完全下载后才会触发这个事件 |          |      |\n|              | 完全载入的时间 | 毫秒     | 所有onLoad JavaScript 处理程序执行完毕，所有动态的或延迟加载的内容都通过这些处理程序触发的时间 |          |      |\n| 页面数量     | 页面大小       | KB       | 整个页面大小                                                 |          |      |\n|              | 请求数量       | 次       | 从网站下载资源时所有网络请求的总数，尽量少                   |          |      |\n| 网络         | DNS时间        | 毫秒     | DNS查找时间                                                  |          |      |\n|              | 连接时间       | 毫秒     | 连接时间就是浏览器与Web服务器建立TCP/IP连接的时间            |          |      |\n|              | 服务器时间     | 毫秒     | 服务器处理时间                                               |          |      |\n|              | 传输时间       | 毫秒     | 内容传输所用时间                                             |          |      |\n|              | 等待时间       | 毫秒     | 等待某个资源释放的时间                                       |          |      |\n\n### 标准\n\n-   页面要尽可能小及压缩。\n\n-   页面展示和花费时间越短越好。\n\n##  稳定性指标\n\n### 定义及解释\n\n最短稳定时间：系统按照最大容量的80%或标准压力（系统的预期日常压力）情况下运行，能够稳定运行的最短时间。一般来说，对于正常工作日（8小时）运行的系统，至少应该能保证系统稳定运行８小时以上。对于7\\*24运行的系统，至少应该能够保证系统稳定运行24小时以上。如果系统不能稳定的运行，上线后，随着业务量的增长和长时间运行，将会出现性能下降甚至崩溃的风险。\n\n### 标准\n\n-   TPS曲线稳定，没有大幅度的波动。\n\n-   各项资源指标没有泄露或异常情况。\n\n# 性能分析\n\n性能分析的前提除了需要丰富的性能测试监控，还要了解操作系统、中间件(tomcat)、数据库(mysql oracle sqlserver)、开发等。\n\n## 流程\n\n-   很多情况下压测流量并没有完全进入到后端（服务端），在网络接入层（云化的架构比如：SLB/WAF/高防IP，甚至是CDN/全站加速等）可能就会出现由于各种规格（带宽、最大连接数、新建连接数等）限制或者因为压测的某些特征符合CC和DDoS的行为而触发了防护策略导致压测结果达不到预期。\n\n-   接着看关键指标是否满足要求，如果不满足，需要确定是哪个地方有问题，一般情况下，服务器端问题可能性比较大，也有可能是客户端问题（这种情况非常小）。\n\n-   对于服务器端问题，需要定位的是硬件相关指标，例如CPU，Memory, Disk I/O, Network I/O, 如果是某个硬件指标有问题，需要深入的进行分析。\n\n-   如果硬件指标都没有问题，需要查看中间件相关指标，例如：线程池、连接池、GC等，如果是这些指标问题，需要深入的 分析。\n\n-   如果中间件相关指标没问题，需要查看数据库相关指标，例如：慢查SQL，命中率，锁、参数设置。\n\n-   如果以上指标都正常，应用程序的算法、缓冲、缓存、同步或异步可能有问题，需要具体深入的分析。\n\n    ![](pictures/08JMeter/image-20230104101937127.png)可能瓶颈点\n\n###  **硬件/规格上的瓶颈**\n\n一般指的是CPU、内存、磁盘I/O 方面的问题，分为服务器硬件瓶颈、网络瓶颈（对局域网可以不考虑）。\n\n### **中间件上的性能瓶颈**\n\n一般指的是应用服务器、web 服务器等应用软件，还包括数据库系统。例如：中间件weblogic/tomcat平台上配置的JDBC连接池的参数设置不合理，造成的瓶颈。\n\n### **应用程序上的性能瓶颈**\n\n一般指的是开发人员开发出来的应用程序。例如，JVM参数不合理，容器配置不合理，慢SQL，数据库设计不合理，程序架构规划不合理，程序本身设计有问题（串行处理、请求的处理线程不够、无缓冲、无缓存、生产者和消费者不协调等），造成系统在大量用户方位时性能低下而造成的瓶颈。\n\n###  **操作系统上的性能瓶颈**\n\n一般指的是windows、UNIX、Linux等操作系统。例如，在进行性能测试，出现物理内存不足时，虚拟内存设置也不合理，虚拟内存的交换效率就会大大降低，从而导致行为的响应时间大大增加，这时认为操作系统上出现性能瓶颈。\n\n### **网络设备上的性能瓶颈**\n\n一般指的是防火墙、动态负载均衡器、交换机等设备。当前更多的云化服务架构使用的网络接入产品：包括但不限于SLB/WAF/高防IP/CDN/全站加速等等。例如，在动态负载均衡器上设置了动态分发负载的机制，当发现某个应用服务器上的硬件资源已经到达极限时，动态负载均衡器将后续的交易请求发送到其他负载较轻的应用服务器上。在测试时发现，动态负载均衡器没有起到相应的作用，这时可以认为网络瓶颈。\n\n## 方法\n\n### **CPU**\n\nCPU资源利用率很高的话，需要看CPU消耗User,Sys,Wait那种状态下。\n\n-   如果CPU User非常高，需要查看消耗在哪个进程，可以用top(linux)命令看出，接着用top --H --p \\<pid\\>看哪个线程消耗资源高，如果是java应用，就可以用jstack看出此线程正在执行的堆栈，看资源消耗在哪个方法上，查看源代码就知道问题所在；如果是c++应用，可以用gprof性能工具进行分析。\n\n-   如果CPU Sys非常高，可以用strace(linux)看系统调用的资源消耗及时间。\n\n-   如果CPU Wait非常高，考虑磁盘读写了，可以通过减少日志输出、异步或换速度快的硬盘。\n\n###  **Memory**\n\n操作系统未了最大化利用内存，一般都设置大量的cache,因此，内存利用率高达99%并不是问题，内存的问题主要看某个进程占用的内存是否非常大以及是否有大量的swap(虚拟内存交换)。\n\n###  **磁盘I/O**\n\n磁盘I/O一个最显著的指标是繁忙率，可以通过减少日志输出、异步或换速度快的硬盘。\n\n###  **网络I/O**\n\n网络I/O主要考虑传输内容大小，不能超过硬件网络传输的最大值70%，可以通过压缩、减少内容大小、在本地设置缓存以及分多次传输等。\n\n### **JVM**\n\njvm主要分析GC/FULL GC是否频繁，以及垃圾回收的时间，可以用jstat命令来查看，对于每个代大小以及GC频繁，通过jmap将内存dump,再借助工具HeapAnalyzer来分析哪地方占用的内存较高以及是否有内存泄漏可能。简单点可以使用APM工具，比如阿里云ARMS，下同。\n\n### **线程池**\n\n如果线程不够用，可以通过参数调整，增加线程；对于线程池中的线程设置比较大的情况，还是不够用可能的原因是：某个线程被阻塞来不及释放，可能在等锁、方法耗时较长、数据库等待时间很长等原因导致，需要进一步分析才能定位。\n\n###  **JDBC连接池**\n\n连接池不够用的情况下，可以通过参数进行调整增加；但是对于数据库本身处理很慢的情况下，调整没有多大的效果，需要查看数据库方面以及因代码导致连接未释放的原因。\n\n###  **SQL**\n\nSQL效率低下也是导致性能差的一个非常重要的原因，可以通过查看执行计划看SQL慢在哪里，一般情况，SQL效率低下原因主要有：\n\n| ***\\*类别\\**** | ***\\*子类\\****             | ***\\*表达式或描述\\****                                   | ***\\*原因\\****                                               |\n| -------------- | -------------------------- | -------------------------------------------------------- | ------------------------------------------------------------ |\n| 索引           | 未建索引                   |                                                          | 产生全表扫描                                                 |\n|                | 未利用索引                 | substring(card_no,1,4)=′5378′                            | 产生全表扫描                                                 |\n|                |                            | amount/30< 1000                                          | 产生全表扫描                                                 |\n|                |                            | convert(char(10),date,112)=′19991201′                    | 产生全表扫描                                                 |\n|                |                            | where salary<>3000                                       | 产生全表扫描                                                 |\n|                |                            | name like ‘%张’                                          | 产生全表扫描                                                 |\n|                |                            | first_name + last_name =’beill cliton’                   | 产生全表扫描                                                 |\n|                |                            | id_no in(′0′,′1′)                                        | 产生全表扫描                                                 |\n|                |                            | select id from t where num=@num                          | 有参数也会产生全表扫描                                       |\n|                | 使用效能低的索引           | oder by 非聚族索引                                       | 索引性能低                                                   |\n|                |                            | username=’张三’ and age>20                               | 字符串索引低于整形索引                                       |\n|                |                            | 表中列与空NULL值                                         | 索引性能低                                                   |\n|                |                            | 尽量不要使用IS NULL或IS NOT NULL                         | 索引性能低                                                   |\n| 数据量         | 所有数据量                 | select *                                                 | 很多列产生大量数据                                           |\n|                |                            | select id,name                                           | 表中有几百万行，产生大量数据                                 |\n|                | 嵌套查询                   | 先不过滤数据，后过滤数据                                 | 产生大量无用的数据                                           |\n|                | 关联查询                   | 多表进行关联查询，先过滤掉小部分数据，在过滤大部分数据   | 大量关联操作                                                 |\n|                | 大数据量插入               | 一次次插入                                               | 产生大量日志，消耗资源                                       |\n| 锁             | 锁等待                     | update account set banlance=100 where id=10              | 产生表级锁，将会锁住整个表                                   |\n|                | 死锁                       | A:update a;update b;B:update b;update a;                 | 将会产生死锁                                                 |\n|                | 游标                       | Cursor Open cursor,fetch;close cursor                    | 性能很低                                                     |\n|                | 临时表                     | create tmp table 创建临时表                              | 产生大量日志                                                 |\n|                | drop table                 | 删除临时表                                               | 需要显示删除，避免系统表长时间锁定                           |\n| 其他           | exist 代替 IN              | select num from a where num in(select num from b)        | in会逐个判断,exist有一条就结束                               |\n|                | exist 代替select count(*)  | 判断记录是否存在                                         | count(*)将累加计算，exist有就结束                            |\n|                | between 代替 IN            | ID in(1,2,3)                                             | IN逐个判断，between是范围判断                                |\n|                | left outer join 代替Not IN | select ID from a where ID not in(select b.Mainid from b) | NOT IN逐个判断，效率非常低                                   |\n|                | union all 代替union        | select ID from a union select id from b union            | 删除重复的行，可能会在磁盘进行排序而union all只是简单的将结果并在一起 |\n|                | 常用SQL尽量用绑定变量方法  | insert into A(ID) values(1)                              | 直接写SQL每次都要编译，用绑定变量的方法只编译一次，下次就可以用了 |\n","slug":"08JMeter","published":1,"updated":"2023-01-04T02:51:00.622Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clciheilb000hrdxheeg48oki","content":"<h1 id=\"性能测试基本概念\"><a href=\"#性能测试基本概念\" class=\"headerlink\" title=\"性能测试基本概念\"></a>性能测试基本概念</h1><h2 id=\"RT-Response-time\"><a href=\"#RT-Response-time\" class=\"headerlink\" title=\"RT -Response time\"></a>RT -Response time</h2><p>请求响应时间</p>\n<p>从客户端发出请求到得到响应的整个时间</p>\n<p>一般包括网络响应时间+server的响应时间。</p>\n<p>用户接受准则:</p>\n<p>例如2-5-10原则，即按照正常用户体验，如果用户能够在2秒内得到响应，会感觉速度很快，如果2-5秒得到响应，用户感觉系统的响应速度还不多，在5-10秒之内得到响应时，用户会感觉系统的响应速度慢，但是可以接受，超过10秒后还没有响应，用户就会感觉不能够接受。</p>\n<p>不同行业不同业务可接受的响应时间是不同的，一般情况，对于在线实时交易：</p>\n<ul>\n<li>互联网企业：500毫秒以下，例如淘宝业务10毫秒左右。</li>\n<li>金融企业：1秒以下为佳，部分复杂业务3秒以下。</li>\n<li>保险企业：3秒以下为佳。</li>\n<li>制造业：5秒以下为佳。</li>\n<li>阿里云规范</li>\n</ul>\n<h2 id=\"系统处理能力\"><a href=\"#系统处理能力\" class=\"headerlink\" title=\"系统处理能力\"></a><strong>系统处理能力</strong></h2><p>系统处理能力是指系统在利用系统硬件平台和软件平台进行信息处理的能力。系统处理能力通过系统每秒钟能够处理的交易数量来评价，交易有两种理解：</p>\n<ul>\n<li><p>一是业务人员角度的一笔业务过程；</p>\n</li>\n<li><p>二是系统角度的一次交易申请和响应过程。</p>\n</li>\n</ul>\n<p>前者称为业务交易过程，后者称为事务。两种交易指标都可以评价应用系统的处理能力。一般的建议与系统交易日志保持一致，以便于统计业务量或者交易量。系统处理能力指标是技术测试活动中重要指标。</p>\n<h3 id=\"简称\"><a href=\"#简称\" class=\"headerlink\" title=\"简称\"></a><strong>简称</strong></h3><p>一般情况下，用以下几个指标来度量：</p>\n<ul>\n<li><p>HPS（Hits Per Second） ：每秒点击次数，单位是次&#x2F;秒。</p>\n</li>\n<li><p>TPS（Transaction per Second）：系统每秒处理事务数，单位是笔&#x2F;秒。吞吐量。</p>\n<p>不可分割的。要么完全成功，要么完全失败。</p>\n</li>\n<li><p>QPS（Query per Second）：系统每秒处理查询次数，单位是次&#x2F;秒。</p>\n<p>对于互联网业务中，如果某些业务有且仅有一个请求连接，那么TPS&#x3D;QPS&#x3D;HPS，</p>\n<p>一般情况下用TPS来衡量整个业务流程，用QPS来衡量接口查询次数，用HPS来表示对服务器点击请求。</p>\n</li>\n</ul>\n<p>每秒钟处理完的事务次数，一般TPS是对整个系统来讲的。一个应用系统1s能完成多少事务处理，一个事务在分布式处理中，可能会对应多个请求，对于衡量单个接口服务的处理能力，用QPS比较多。</p>\n<h3 id=\"标准\"><a href=\"#标准\" class=\"headerlink\" title=\"标准\"></a><strong>标准</strong></h3><p>无论TPS、QPS、HPS,此指标是衡量系统处理能力非常重要的指标，越大越好，根据经验，一般情况下：</p>\n<ul>\n<li><p>金融行业：1000TPS~9000TPS，不包括互联网化的活动</p>\n</li>\n<li><p>保险行业：100TPS~1000TPS，不包括互联网化的活动</p>\n</li>\n<li><p>制造行业：10TPS~50TPS</p>\n</li>\n<li><p>互联网电子商务：10000TPS~100000TPS,例如天猫5万TPS</p>\n</li>\n<li><p>互联网中型网站：100TPS~500TPS</p>\n</li>\n<li><p>互联网小型网站: 50TPS~100TPS</p>\n</li>\n</ul>\n<h2 id=\"并发用户数量\"><a href=\"#并发用户数量\" class=\"headerlink\" title=\"并发用户数量\"></a>并发用户数量</h2><p>常见的错误理解:</p>\n<p>使用系统的全部用户数量(注册用户)</p>\n<p>使用系统的全部在线用户数量</p>\n<p>正确理解</p>\n<p>并发用户数指在同一时刻内，打开系统并进行业务操作的用户数量，并发用户数对于长连接(数据库连接时长连接，web请求时短连接)系统来说最大并发用户数即是系统的并发接入能力。对于短连接系统而言最大并发用户数并不等于系统的并发接入能力，而是与系统架构、系统处理能力等各种情况相关</p>\n<p>http:请求只能由客户端发出，服务端被动响应。</p>\n<h3 id=\"简称-1\"><a href=\"#简称-1\" class=\"headerlink\" title=\"简称\"></a>简称</h3><p>Virtual User: VU</p>\n<h3 id=\"标准-1\"><a href=\"#标准-1\" class=\"headerlink\" title=\"标准\"></a><strong>标准</strong></h3><p>一般情况下，性能测试是将系统处理能力容量测出来，而不是测试并发用户数，除了服务器长连接可能影响并发用户数外，系统处理能力不完全受并发用户数影响，可以用最小的用户数将系统处理能力容量测试出来，也可以用更多的用户将系统处理能力容量测试出来。</p>\n<p>并发用户数量:</p>\n<p>并发用户多少为好？</p>\n<p>中小企业:5000用户</p>\n<h2 id=\"错误率\"><a href=\"#错误率\" class=\"headerlink\" title=\"错误率\"></a>错误率</h2><h3 id=\"定义及解释\"><a href=\"#定义及解释\" class=\"headerlink\" title=\"定义及解释\"></a>定义及解释</h3><p>错误率指系统在负载情况下，失败交易的概率。错误率＝(失败交易数&#x2F;交易总数)*100%。稳定性较好的系统，其错误率应该由超时引起，即为超时率。</p>\n<h3 id=\"标准-2\"><a href=\"#标准-2\" class=\"headerlink\" title=\"标准\"></a><strong>标准</strong></h3><p>不同系统对错误率的要求不同，但一般不超出千分之六，即成功率不低于99.4%</p>\n<h2 id=\"CPU\"><a href=\"#CPU\" class=\"headerlink\" title=\"CPU\"></a>CPU</h2><h3 id=\"定义及解释-定义及解释-1-ListParagraph\"><a href=\"#定义及解释-定义及解释-1-ListParagraph\" class=\"headerlink\" title=\"定义及解释 {定义及解释-1 .ListParagraph}\"></a><strong>定义及解释</strong> {定义及解释-1 .ListParagraph}</h3><p>中央处理器是一块超大规模的集成电路，是一台计算机的运算核心（Core）和控制核心（ Control Unit）。它的功能主要是解释计算机指令以及处理计算机软件中的数据。CPU Load: 系统正在干活的多少的度量，队列长度。系统平均负载。</p>\n<p>CPU指标主要指的CPU利用率，包括用户态(user)、系统态(sys)、等待态(wait)、空闲态(idle)。CPU 利用率要低于业界警戒值范围之内，即小于或者等于75%;CPU sys%小于或者等于30%, CPU wait%小于或者等于5%。单核CPU也需遵循上述指标要求。</p>\n<p>7*24不允许宕机</p>\n<h2 id=\"Memory\"><a href=\"#Memory\" class=\"headerlink\" title=\"Memory\"></a>Memory</h2><p>内存是计算机中重要的部件之一，它是与CPU进行沟通的桥梁。计算机中所有程序的运行都是在内存中进行的，因此内存的性能对计算机的影响非常大。</p>\n<p>现代的操作系统为了最大利用内存，在内存中存放了缓存，因此内存利用率100%并不代表内存有瓶颈，衡量系统内有有瓶颈主要靠SWAP（与虚拟内存交换）交换空间利用率，一般情况下，SWAP交换空间利用率要低于70%,太多的交换将会引起系统性能低下。</p>\n<p>Swap解释:</p>\n<p>当物理内存接近崩溃时，将物理内存中最近一段时间最少频率使用到的页框移出物理内存，放进该存储空间，这段存储空间我们称之为<strong>交换空间（Swap）</strong></p>\n<h2 id=\"磁盘吞吐量-Disk-Throughput\"><a href=\"#磁盘吞吐量-Disk-Throughput\" class=\"headerlink\" title=\"磁盘吞吐量 Disk Throughput.\"></a>磁盘吞吐量 Disk Throughput.</h2><p>磁盘吞吐量是指在无磁盘故障的情况下单位时间内通过磁盘的数据量。</p>\n<p>磁盘指标主要有每秒读写多少兆，磁盘繁忙率，磁盘队列数，平均服务时间，平均等待时间，空间利用率。其中磁盘繁忙率是直接反映磁盘是否有瓶颈的的重要依据，一般情况下，磁盘繁忙率要低于70%。</p>\n<h2 id=\"网络吞吐量-Network-Throughput\"><a href=\"#网络吞吐量-Network-Throughput\" class=\"headerlink\" title=\"网络吞吐量 Network Throughput\"></a>网络吞吐量 Network Throughput</h2><p><strong>10Mbit带宽，每秒传输的字节数1.25MBytes</strong></p>\n<p>网络吞吐量是指在无网络故障的情况下单位时间内通过的网络的数据数量。单位为Byte&#x2F;s。网络吞吐量指标用于衡量系统对于网络设备或链路传输能力的需求。当网络吞吐量指标接近网络设备或链路最大传输能力时，则需要考虑升级网络设备。</p>\n<p>网络吞吐量指标主要有每秒有多少兆流量进出，一般情况下不能超过设备或链路最大传输能力的70%。</p>\n<h1 id=\"性能测试基本流程\"><a href=\"#性能测试基本流程\" class=\"headerlink\" title=\"性能测试基本流程\"></a>性能测试基本流程</h1><p><img src=\"/pictures/08JMeter/image-20230103174138051.png\" alt=\"image-20230103174138051\"></p>\n<p>性能测试需求:</p>\n<ol>\n<li><p>最终用户体验，例如2-5-10原则，即按照正常用户体验，如果用户能够在2秒内得到响应，会感觉速度很快，如果2-5秒得到响应，用户感觉系统的响应速度还不多，在5-10秒之内得到响应时，用户会感觉系统的响应速度慢，但是可以接受，超过10秒后还没有响应，用户就会感觉不能够接受。</p>\n</li>\n<li><p>技术需求, cpu，内存，网络吞吐量，磁盘吞吐量</p>\n</li>\n<li><p>标准要求:</p>\n<p>竞品分析-</p>\n<p>响应时间</p>\n</li>\n</ol>\n<ul>\n<li><p>互联网企业：500毫秒以下，例如淘宝业务10毫秒左右。</p>\n</li>\n<li><p>金融企业：1秒以下为佳，部分复杂业务3秒以下。</p>\n</li>\n<li><p>保险企业：3秒以下为佳。</p>\n</li>\n<li><p>制造业：5秒以下为佳。</p>\n<p>TPS</p>\n</li>\n<li><p>金融行业：1000TPS~9000TPS，不包括互联网化的活动</p>\n</li>\n<li><p>保险行业：100TPS~1000TPS，不包括互联网化的活动</p>\n</li>\n<li><p>制造行业：10TPS~50TPS</p>\n</li>\n<li><p>互联网电子商务：10000TPS~100000TPS,例如天猫5万TPS</p>\n</li>\n<li><p>互联网中型网站：100TPS~500TPS</p>\n</li>\n<li><p>互联网小型网站: 50TPS~100TPS</p>\n<p>性能测试计划</p>\n</li>\n</ul>\n<p>测试环境，测试需求，测试方法，测试时间表，测试组织架构，测试风险，输入输出文档</p>\n<p>性能测试步骤:</p>\n<p><img src=\"/pictures/08JMeter/image-20230103174223823.png\"></p>\n<p>性能测试执行</p>\n<p><img src=\"/pictures/08JMeter/image-20230103174207519.png\"></p>\n<h1 id=\"性能测试工具\"><a href=\"#性能测试工具\" class=\"headerlink\" title=\"性能测试工具\"></a>性能测试工具</h1><p><img src=\"/pictures/08JMeter/image-20230103174236971.png\"></p>\n<h1 id=\"Jmeter简介\"><a href=\"#Jmeter简介\" class=\"headerlink\" title=\"Jmeter简介\"></a>Jmeter简介</h1><h2 id=\"Jmeter的基本概念\"><a href=\"#Jmeter的基本概念\" class=\"headerlink\" title=\"Jmeter的基本概念\"></a>Jmeter的基本概念</h2><p>Apache JMeter是Apache组织开发的基于Java的压力测试工具。用于对软件做压力测试，它最初被设计用于Web应用测试，但后来扩展到其他测试领域。 它可以用于测试静态和动态资源，例如静态文件、Java 小服务程序、CGI 脚本、Java 对象、数据库、FTP 服务器， 等等。JMeter 可以用于对服务器、网络或对象模拟巨大的负载，来自不同压力类别下测试它们的强度和分析整体性能。另外，JMeter能够对应用程序做功能&#x2F;回归测试，通过创建带有断言的脚本来验证你的程序返回了你期望的结果。为了最大限度的灵活性，JMeter允许使用正则表达式创建断言</p>\n<h2 id=\"我们为什么使用Jmeter\"><a href=\"#我们为什么使用Jmeter\" class=\"headerlink\" title=\"我们为什么使用Jmeter\"></a>我们为什么使用Jmeter</h2><p>开源免费还很好用，基于Java编写，可集成到其他系统可拓展各个功能插件</p>\n<p>支持接口测试，压力（负载和压力）测试等多种功能，支持录制回放，入门简单</p>\n<p>相较于自己编写框架活其他开源工具，有较为完善的UI界面，便于接口调试</p>\n<p>多平台支持，可在Linux，Windows，Mac上运行</p>\n<h1 id=\"Jmeter安装配置及目录结构\"><a href=\"#Jmeter安装配置及目录结构\" class=\"headerlink\" title=\"Jmeter安装配置及目录结构\"></a>Jmeter安装配置及目录结构</h1><h2 id=\"Windows下Jmeter下载安装\"><a href=\"#Windows下Jmeter下载安装\" class=\"headerlink\" title=\"Windows下Jmeter下载安装\"></a>Windows下Jmeter下载安装</h2><p><a href=\"http://jmeter.apache.org/download_jmeter.cgi\">登录官网</a> ，根据自己平台，下载对应文件</p>\n<p><img src=\"/pictures/08JMeter/image-20230103174419336.png\"></p>\n<p><img src=\"/pictures/08JMeter/image-20230103174430456.png\"></p>\n<p><img src=\"/pictures/08JMeter/image-20230103174437006.png\"></p>\n<p>安装JDK，配置环境变量（具体步骤不做介绍）</p>\n<p>将下载Jmeter文件解压，打开&#x2F;bin&#x2F;jmeter.bat</p>\n<p><img src=\"/pictures/08JMeter/image-20230103174557321.png\"></p>\n<p><img src=\"/pictures/08JMeter/image-20230103174657692.png\"></p>\n<h2 id=\"Jmeter的目录结构\"><a href=\"#Jmeter的目录结构\" class=\"headerlink\" title=\"Jmeter的目录结构\"></a>Jmeter的目录结构</h2><p>SourceURL:file:&#x2F;&#x2F;&#x2F;home&#x2F;babyfengfjx&#x2F;Downloads&#x2F;JMeter操作手册大全.docx</p>\n<p>&#x2F;bin 目录（常用文件介绍）</p>\n<p>examples：目录下包含Jmeter使用实例</p>\n<p>ApacheJMeter.jar：JMeter源码包</p>\n<p>jmeter.bat：windows下启动文件</p>\n<p>jmeter.sh：Linux下启动文件</p>\n<p>jmeter.log：Jmeter运行日志文件</p>\n<p>jmeter.properties：Jmeter配置文件</p>\n<p>jmeter-server.bat：windows下启动负载生成器服务文件</p>\n<p>jmeter-server：Linux下启动负载生成器文件</p>\n<p>&#x2F;docs目录——Jmeter帮助文档</p>\n<p>&#x2F;extras目录——提供了对Ant的支持文件，可也用于持续集成</p>\n<p>&#x2F;lib目录——存放Jmeter依赖的jar包，同时安装插件也放于此目录</p>\n<p>&#x2F;licenses目录——软件许可文件，不用管</p>\n<p>&#x2F;printable_docs目录——Jmeter用户手册</p>\n<h1 id=\"Jmeter简单入门\"><a href=\"#Jmeter简单入门\" class=\"headerlink\" title=\"Jmeter简单入门\"></a>Jmeter简单入门</h1><h2 id=\"修改语言\"><a href=\"#修改语言\" class=\"headerlink\" title=\"修改语言\"></a>修改语言</h2><p><img src=\"/pictures/08JMeter/image-20230103174825289.png\"></p>\n<h2 id=\"创建测试计划\"><a href=\"#创建测试计划\" class=\"headerlink\" title=\"创建测试计划\"></a>创建测试计划</h2><p><img src=\"/pictures/08JMeter/image-20230103174843945.png\"></p>\n<h2 id=\"添加线程组\"><a href=\"#添加线程组\" class=\"headerlink\" title=\"添加线程组\"></a>添加线程组</h2><p><img src=\"/pictures/08JMeter/image-20230103174901916.png\"></p>\n<h2 id=\"添加sampler设置http请求\"><a href=\"#添加sampler设置http请求\" class=\"headerlink\" title=\"添加sampler设置http请求\"></a>添加sampler设置http请求</h2><p><img src=\"/pictures/08JMeter/image-20230103175006565.png\"></p>\n<h2 id=\"添加结果树\"><a href=\"#添加结果树\" class=\"headerlink\" title=\"添加结果树\"></a>添加结果树</h2><p><img src=\"/pictures/08JMeter/image-20230103175024887.png\"></p>\n<h2 id=\"查看结果\"><a href=\"#查看结果\" class=\"headerlink\" title=\"查看结果\"></a>查看结果</h2><p><img src=\"/pictures/08JMeter/image-20230103175048590.png\"></p>\n<h1 id=\"测试计划\"><a href=\"#测试计划\" class=\"headerlink\" title=\"测试计划\"></a>测试计划</h1><p><img src=\"/pictures/08JMeter/image-20230103175428021.png\"></p>\n<p>独立运行每个线程组：</p>\n<p>再每一组运行结束后启动下一个</p>\n<p>Run tearDown Thread Groups after shutdown of main threads：  </p>\n<p>主线程关闭运行后拆除线程组，</p>\n<h1 id=\"线程组\"><a href=\"#线程组\" class=\"headerlink\" title=\"线程组\"></a>线程组</h1><p><img src=\"/pictures/08JMeter/image-20230104092545954.png\"></p>\n<p>Delay Thread creation until needed         <br>      延迟创建线程，直到该线程开始采样，即之后的任何线程组延迟和加速时间为线程本身。这样可以支持更多的线程，但不会有太多是同时处于活动状态。</p>\n<p> 持续时间（秒）：测试计划持续多长时间，会覆盖结束时间。</p>\n<p> 启动延迟（秒）：测试计划延迟多长时间启动，会覆盖启动时间。</p>\n<h1 id=\"Sampler-HTTP请求\"><a href=\"#Sampler-HTTP请求\" class=\"headerlink\" title=\"Sampler --HTTP请求\"></a>Sampler --HTTP请求</h1><p><img src=\"/pictures/08JMeter/image-20230104092628654.png\"></p>\n<p>请求方式</p>\n<p>请求路径</p>\n<p>请求ip</p>\n<p>请求协议</p>\n<p>请求编码</p>\n<p><img src=\"/pictures/08JMeter/image-20230104092652159.png\"></p>\n<p>重定向之前的和之后的请求都会在结果树中显示出来</p>\n<p><img src=\"/pictures/08JMeter/image-20230104092707205.png\"></p>\n<p>自动重定向，只会显示重定向之后的地址。</p>\n<p><img src=\"/pictures/08JMeter/image-20230104092735864.png\"></p>\n<h1 id=\"结果收集\"><a href=\"#结果收集\" class=\"headerlink\" title=\"结果收集\"></a>结果收集</h1><h2 id=\"查看结果树\"><a href=\"#查看结果树\" class=\"headerlink\" title=\"查看结果树\"></a>查看结果树</h2><p><img src=\"/pictures/08JMeter/image-20230104092807270.png\"></p>\n<h2 id=\"表格查看结果\"><a href=\"#表格查看结果\" class=\"headerlink\" title=\"表格查看结果\"></a>表格查看结果</h2><p><img src=\"/pictures/08JMeter/image-20230104092825613.png\"></p>\n<p>偏离表示服务器响应时间变化、离散程度测量值的大小，或者，换句话说，就是数据的分布。</p>\n<h2 id=\"聚合报告\"><a href=\"#聚合报告\" class=\"headerlink\" title=\"聚合报告\"></a>聚合报告</h2><p><img src=\"/pictures/08JMeter/image-20230104092842121.png\"></p>\n<h2 id=\"Summary-Report\"><a href=\"#Summary-Report\" class=\"headerlink\" title=\"Summary Report\"></a>Summary Report</h2><p><img src=\"/pictures/08JMeter/image-20230104092857441.png\"></p>\n<h1 id=\"Jmeter参数化\"><a href=\"#Jmeter参数化\" class=\"headerlink\" title=\"Jmeter参数化\"></a>Jmeter参数化</h1><h2 id=\"用户定义的变量\"><a href=\"#用户定义的变量\" class=\"headerlink\" title=\"用户定义的变量\"></a>用户定义的变量</h2><p>使用配置原件中用户定义的变量可以进行参数化</p>\n<p><img src=\"/pictures/08JMeter/image-20230104092916211.png\"></p>\n<h2 id=\"用户参数\"><a href=\"#用户参数\" class=\"headerlink\" title=\"用户参数\"></a>用户参数</h2><p>使用前置管理器设置用户参数</p>\n<p><img src=\"/pictures/08JMeter/image-20230104092938544.png\"></p>\n<h2 id=\"使用csv配置原件\"><a href=\"#使用csv配置原件\" class=\"headerlink\" title=\"使用csv配置原件\"></a>使用csv配置原件</h2><p>配置元件(Config Element)维护Sampler需要的配置信息，并根据实际的需要会修改请求的内容。我们主要在参数化中用到CSV Data Set Config<img src=\"/pictures/08JMeter/image-20230104092956569.png\"></p>\n<h2 id=\"使用随机函数助手\"><a href=\"#使用随机函数助手\" class=\"headerlink\" title=\"使用随机函数助手\"></a>使用随机函数助手</h2><h3 id=\"生成随机字符串\"><a href=\"#生成随机字符串\" class=\"headerlink\" title=\"生成随机字符串\"></a>生成随机字符串</h3><p><img src=\"/pictures/08JMeter/image-20230104093024788.png\"></p>\n<h3 id=\"生成随机数字\"><a href=\"#生成随机数字\" class=\"headerlink\" title=\"生成随机数字\"></a>生成随机数字</h3><p><img src=\"/pictures/08JMeter/image-20230104094422449.png\"></p>\n<h3 id=\"参数引用\"><a href=\"#参数引用\" class=\"headerlink\" title=\"参数引用\"></a>参数引用</h3><p><img src=\"/pictures/08JMeter/image-20230104094437099.png\"></p>\n<h1 id=\"Jmeter断言-检查点\"><a href=\"#Jmeter断言-检查点\" class=\"headerlink\" title=\"Jmeter断言--检查点\"></a>Jmeter断言--检查点</h1><p>断言(Assertions)可以用来判断请求响应的结果是否如用户所期望的。它可以用来隔离问题域，即在确保功能正确的前提下执行压力测试。这个限制对于有效的测试是非常有用的。</p>\n<p>设置响应内容监听</p>\n<p><img src=\"/pictures/08JMeter/image-20230104094455677.png\"></p>\n<p>设置响应头断言</p>\n<p><img src=\"/pictures/08JMeter/image-20230104094516722.png\"></p>\n<h1 id=\"Jmeter定时器\"><a href=\"#Jmeter定时器\" class=\"headerlink\" title=\"Jmeter定时器\"></a>Jmeter定时器</h1><h2 id=\"固定定时器\"><a href=\"#固定定时器\" class=\"headerlink\" title=\"固定定时器\"></a>固定定时器</h2><p>定时器(Timer)负责定义请求之间的延迟间隔</p>\n<p><img src=\"/pictures/08JMeter/image-20230104094539586.png\"></p>\n<h2 id=\"高斯定时器\"><a href=\"#高斯定时器\" class=\"headerlink\" title=\"高斯定时器\"></a>高斯定时器</h2><p><img src=\"/pictures/08JMeter/image-20230104094605360.png\"></p>\n<h2 id=\"同步定时器（Synchronizing-Timer）\"><a href=\"#同步定时器（Synchronizing-Timer）\" class=\"headerlink\" title=\"同步定时器（Synchronizing Timer）\"></a><strong>同步定时器（Synchronizing Timer）</strong></h2><p><img src=\"/pictures/08JMeter/image-20230104094622810.png\"></p>\n<h1 id=\"Jmeter配置原件\"><a href=\"#Jmeter配置原件\" class=\"headerlink\" title=\"Jmeter配置原件\"></a>Jmeter配置原件</h1><h2 id=\"HTTP-Cookie管理器\"><a href=\"#HTTP-Cookie管理器\" class=\"headerlink\" title=\"HTTP Cookie管理器\"></a>HTTP Cookie管理器</h2><p>默认保存cookie信息</p>\n<p><img src=\"/pictures/08JMeter/image-20230104094646033.png\"></p>\n<h2 id=\"HTTP信息头管理器\"><a href=\"#HTTP信息头管理器\" class=\"headerlink\" title=\"HTTP信息头管理器\"></a>HTTP信息头管理器</h2><p>默认保存常规的请求头</p>\n<p><img src=\"/pictures/08JMeter/image-20230104094701081.png\"></p>\n<h2 id=\"HTTP-Cache管理器\"><a href=\"#HTTP-Cache管理器\" class=\"headerlink\" title=\"HTTP Cache管理器\"></a>HTTP Cache管理器</h2><p>默认管理http请求缓存的信息</p>\n<p><img src=\"/pictures/08JMeter/image-20230104094718002.png\"></p>\n<h2 id=\"HTTP-请求默认值\"><a href=\"#HTTP-请求默认值\" class=\"headerlink\" title=\"HTTP 请求默认值\"></a>HTTP 请求默认值</h2><p>可以设置http请求的默认值，在单个的请求中不需要再设置其他内容</p>\n<p><img src=\"/pictures/08JMeter/image-20230104094737517.png\"></p>\n<h1 id=\"Jmeter逻辑控制器\"><a href=\"#Jmeter逻辑控制器\" class=\"headerlink\" title=\"Jmeter逻辑控制器\"></a>Jmeter逻辑控制器</h1><h2 id=\"简单控制器\"><a href=\"#简单控制器\" class=\"headerlink\" title=\"简单控制器\"></a>简单控制器</h2><p>作用：这是Jmeter里最简单的一个控制器，它可以让我们组织我们的采样器和其它的逻辑控制器（分组功能），提供一个块的结构和控制，并不具有任何的逻辑控制或运行时的功能。</p>\n<p><img src=\"/pictures/08JMeter/image-20230104094756958.png\"></p>\n<p><img src=\"/pictures/08JMeter/image-20230104094816885.png\"></p>\n<h2 id=\"循环控制器\"><a href=\"#循环控制器\" class=\"headerlink\" title=\"循环控制器\"></a>循环控制器</h2><p>在之前基础上再去循环,线程10,迭代1,一共十次,放到循环控制器可以多次x请求,用于在某一组中对哪些请求循环执行</p>\n<p><img src=\"/pictures/08JMeter/image-20230104094909398.png\"></p>\n<p><img src=\"/pictures/08JMeter/image-20230104094926170.png\"></p>\n<h2 id=\"事务控制器\"><a href=\"#事务控制器\" class=\"headerlink\" title=\"事务控制器\"></a>事务控制器</h2><p>在线程组下创建事务控制器</p>\n<p><img src=\"/pictures/08JMeter/image-20230104094947187.png\"></p>\n<p>创建sample 访问首页和注册页面,放到事务中</p>\n<p><img src=\"/pictures/08JMeter/image-20230104095110900.png\"></p>\n<h1 id=\"Jmeter关联-后置处理器\"><a href=\"#Jmeter关联-后置处理器\" class=\"headerlink\" title=\"Jmeter关联-后置处理器\"></a>Jmeter关联-后置处理器</h1><h2 id=\"正则表达式提取\"><a href=\"#正则表达式提取\" class=\"headerlink\" title=\"正则表达式提取\"></a>正则表达式提取</h2><p><img src=\"/pictures/08JMeter/image-20230104095127103.png\"></p>\n<p><strong>位置1</strong>：名称及注释</p>\n<p><strong>位置2</strong>：正则表达式提取内容的范围。（关于各字段的详细说明请查阅协议的相关说明）</p>\n<p><strong>位置3</strong>：正则表达式提取的相关设置</p>\n<ul>\n<li><p><strong>引用名称</strong>：自己定义的变量名称，后续<strong>请求</strong>将要引用到的<strong>变量名</strong>,如填写的是：user_id，后面的引用方式是${user_id}</p>\n</li>\n<li><p><strong>正则表达式</strong>：提取内容的正则表达式，相当于lr中的关联函数</p>\n</li>\n<li><p>()     括起来的部分就是需要提取的，对于你要提的内容需要用小括号括起来</p>\n</li>\n<li><p>.    点号表示匹配任何字符串</p>\n</li>\n<li><p>+   一次或多次</p>\n</li>\n<li><p>？   在找到第一个匹配项后停止</p>\n</li>\n<li><p><strong>模板</strong>：用$$引用起来，如果在正则表达式中有多个正则表达式（多个括号括起来的东东），则可以是$2$，$3$等等，表示解析到的第几个值给user_id。例如：$1$表示匹配到的第一个值</p>\n</li>\n<li><p><strong>匹配数字</strong>：0代表随机取值，-1代表所有值，此时提取结果是一个数组，其余正整数代表第几个匹配的内容提取出来。如果匹配数字选择的是-1，还可以通过${user_id_1}的方式来取第1个匹配的内容，${user_id_2}来取第2个匹配的内容。 </p>\n</li>\n<li><p>缺省值：正则匹配失败时，取的值</p>\n</li>\n</ul>\n<h2 id=\"使用debug-Sampler获取参数的名称\"><a href=\"#使用debug-Sampler获取参数的名称\" class=\"headerlink\" title=\"使用debug Sampler获取参数的名称\"></a>使用debug Sampler获取参数的名称</h2><p><img src=\"/pictures/08JMeter/image-20230104095144838.png\"></p>\n<h2 id=\"参数化获取参数内容\"><a href=\"#参数化获取参数内容\" class=\"headerlink\" title=\"参数化获取参数内容\"></a>参数化获取参数内容</h2><p><img src=\"/pictures/08JMeter/image-20230104095202731.png\"></p>\n<h1 id=\"元件的执行顺序\"><a href=\"#元件的执行顺序\" class=\"headerlink\" title=\"元件的执行顺序\"></a>元件的执行顺序</h1><p><img src=\"/pictures/08JMeter/image-20230104095219503.png\"></p>\n<p>顺序:</p>\n<p>HTTP Cookie管理器</p>\n<p>HTTP Cache Manager</p>\n<p>HTTP 信息头管理器</p>\n<p>HTTP 请求默认值</p>\n<p>用户参数</p>\n<p>固定定时器</p>\n<p>简单控制器</p>\n<p>第一个请求</p>\n<p>HTTP Cookie管理器</p>\n<p>HTTP Cache Manager</p>\n<p>HTTP 信息头管理器</p>\n<p>HTTP 请求默认值</p>\n<p>用户参数</p>\n<p>固定定时器</p>\n<p>第二个请求</p>\n<p>响应断言</p>\n<p>正则表达式提取器</p>\n<p>查看结果树</p>\n<h1 id=\"Jmeter添加插件\"><a href=\"#Jmeter添加插件\" class=\"headerlink\" title=\"Jmeter添加插件\"></a>Jmeter添加插件</h1><p>Jmeter本身是不能够展示内存，cpu和吞吐量的，但是可以通过添加插件的方式来对jmeter添加这些功能</p>\n<p><img src=\"/pictures/08JMeter/image-20230104095234652.png\"></p>\n<h2 id=\"打开Jmeter，查看是否有插件管理器\"><a href=\"#打开Jmeter，查看是否有插件管理器\" class=\"headerlink\" title=\"打开Jmeter，查看是否有插件管理器\"></a>打开Jmeter，查看是否有插件管理器</h2><p><img src=\"/pictures/08JMeter/image-20230104095258849.png\"></p>\n<p><img src=\"/pictures/08JMeter/image-20230104095321272.png\"></p>\n<p>不一定一次成功</p>\n<h2 id=\"场景控制插件\"><a href=\"#场景控制插件\" class=\"headerlink\" title=\"场景控制插件\"></a>场景控制插件</h2><h3 id=\"Stepping-Thread-Group\"><a href=\"#Stepping-Thread-Group\" class=\"headerlink\" title=\"Stepping Thread Group\"></a>Stepping Thread Group</h3><p><img src=\"/pictures/08JMeter/image-20230104095409344.png\"></p>\n<h3 id=\"设置启动场景\"><a href=\"#设置启动场景\" class=\"headerlink\" title=\"设置启动场景\"></a>设置启动场景</h3><p><img src=\"/pictures/08JMeter/image-20230104095421303.png\"></p>\n<h2 id=\"结果监听插件\"><a href=\"#结果监听插件\" class=\"headerlink\" title=\"结果监听插件\"></a>结果监听插件</h2><p><img src=\"/pictures/08JMeter/image-20230104095440597.png\"></p>\n<p><img src=\"/pictures/08JMeter/image-20230104095453077.png\"></p>\n<p><img src=\"/pictures/08JMeter/image-20230104095511561.png\"></p>\n<p><img src=\"/pictures/08JMeter/image-20230104095533363.png\"></p>\n<p><img src=\"/pictures/08JMeter/image-20230104095917593.png\"></p>\n<p><img src=\"/pictures/08JMeter/image-20230104095932798.png\"></p>\n<p><img src=\"/pictures/08JMeter/image-20230104100053253.png\"></p>\n<h1 id=\"Jmeter脚本录制\"><a href=\"#Jmeter脚本录制\" class=\"headerlink\" title=\"Jmeter脚本录制\"></a>Jmeter脚本录制</h1><h2 id=\"什么是脚本录制\"><a href=\"#什么是脚本录制\" class=\"headerlink\" title=\"什么是脚本录制\"></a>什么是脚本录制</h2><p>在进行测试的时候，可能有好多脚本或者界面需要操作测试，并且有些测试链接需要重复多线程高并发进行测试，我们一般会针对这一些操作，进行一个脚本录制，录制好之后，之后测试就可以在这个基础上进行测试。</p>\n<h2 id=\"Jemeter脚本录制方式\"><a href=\"#Jemeter脚本录制方式\" class=\"headerlink\" title=\"Jemeter脚本录制方式\"></a>Jemeter脚本录制方式</h2><p>BadBoy脚本录制</p>\n<p>使用Jmeter自带的代理服务器进行脚本录制</p>\n<h1 id=\"使用Jmeter自带的代理服务器进行脚本录制\"><a href=\"#使用Jmeter自带的代理服务器进行脚本录制\" class=\"headerlink\" title=\"使用Jmeter自带的代理服务器进行脚本录制\"></a>使用Jmeter自带的代理服务器进行脚本录制</h1><h2 id=\"在测试计划上创建线程组\"><a href=\"#在测试计划上创建线程组\" class=\"headerlink\" title=\"在测试计划上创建线程组\"></a>在测试计划上创建线程组</h2><p><img src=\"/pictures/08JMeter/image-20230104100121708.png\"></p>\n<h2 id=\"添加录制控制器\"><a href=\"#添加录制控制器\" class=\"headerlink\" title=\"添加录制控制器\"></a>添加录制控制器</h2><p><img src=\"/pictures/08JMeter/image-20230104100133886.png\" alt=\"image-20230104100133886\"></p>\n<h2 id=\"在工作台上添加http代理服务器\"><a href=\"#在工作台上添加http代理服务器\" class=\"headerlink\" title=\"在工作台上添加http代理服务器\"></a>在工作台上添加http代理服务器</h2><p><img src=\"/pictures/08JMeter/image-20230104100207529.png\"></p>\n<h2 id=\"配置Http代理服务器\"><a href=\"#配置Http代理服务器\" class=\"headerlink\" title=\"配置Http代理服务器\"></a>配置Http代理服务器</h2><p><img src=\"/pictures/08JMeter/image-20230104100221519.png\"></p>\n<h2 id=\"配置浏览器\"><a href=\"#配置浏览器\" class=\"headerlink\" title=\"配置浏览器\"></a>配置浏览器</h2><h3 id=\"Google浏览器\"><a href=\"#Google浏览器\" class=\"headerlink\" title=\"Google浏览器\"></a>Google浏览器</h3><p><img src=\"/pictures/08JMeter/image-20230104100253418.png\"></p>\n<p><img src=\"/pictures/08JMeter/image-20230104100306738.png\"></p>\n<p><img src=\"/pictures/08JMeter/image-20230104100329839.png\"></p>\n<h3 id=\"火狐浏览器\"><a href=\"#火狐浏览器\" class=\"headerlink\" title=\"火狐浏览器\"></a>火狐浏览器</h3><p><img src=\"/pictures/08JMeter/image-20230104100347408.png\"></p>\n<p><img src=\"/pictures/08JMeter/image-20230104100355679.png\"></p>\n<h2 id=\"浏览器请求测试\"><a href=\"#浏览器请求测试\" class=\"headerlink\" title=\"浏览器请求测试\"></a>浏览器请求测试</h2><p><img src=\"/pictures/08JMeter/image-20230104100426913.png\"></p>\n<h2 id=\"过滤信息\"><a href=\"#过滤信息\" class=\"headerlink\" title=\"过滤信息\"></a>过滤信息</h2><p>添加如下内容</p>\n<p>.*\\.js.*|.*\\.css.*|.*\\.png.*|.*\\.jpg.*|.*\\.gif.*|.*\\.bmp.*</p>\n<p><img src=\"/pictures/08JMeter/image-20230104100447101.png\"></p>\n<p><img src=\"/pictures/08JMeter/image-20230104100500830.png\"></p>\n<h1 id=\"Android手机端脚本录制\"><a href=\"#Android手机端脚本录制\" class=\"headerlink\" title=\"Android手机端脚本录制\"></a>Android手机端脚本录制</h1><h2 id=\"查看电脑IP\"><a href=\"#查看电脑IP\" class=\"headerlink\" title=\"查看电脑IP\"></a>查看电脑IP</h2><p><img src=\"/pictures/08JMeter/image-20230104100513719.png\"></p>\n<h2 id=\"配置手机网路连接\"><a href=\"#配置手机网路连接\" class=\"headerlink\" title=\"配置手机网路连接\"></a>配置手机网路连接</h2><p><img src=\"/pictures/08JMeter/image-20230104100534974.png\"></p>\n<p><img src=\"/pictures/08JMeter/image-20230104100600278.png\"></p>\n<h2 id=\"手机访问app\"><a href=\"#手机访问app\" class=\"headerlink\" title=\"手机访问app\"></a>手机访问app</h2><p><img src=\"/pictures/08JMeter/image-20230104100620418.png\"></p>\n<p><img src=\"/pictures/08JMeter/image-20230104100635987.png\"></p>\n<h2 id=\"模拟登陆操作\"><a href=\"#模拟登陆操作\" class=\"headerlink\" title=\"模拟登陆操作\"></a>模拟登陆操作</h2><p><img src=\"/pictures/08JMeter/image-20230104100650698.png\"></p>\n<p><img src=\"/pictures/08JMeter/image-20230104100705102.png\"></p>\n<h2 id=\"执行结束之后，停止脚本录制\"><a href=\"#执行结束之后，停止脚本录制\" class=\"headerlink\" title=\"执行结束之后，停止脚本录制\"></a>执行结束之后，停止脚本录制</h2><p><img src=\"/pictures/08JMeter/image-20230104100722577.png\"></p>\n<h2 id=\"脚本测试-线程组设置10个线程分别请求10次\"><a href=\"#脚本测试-线程组设置10个线程分别请求10次\" class=\"headerlink\" title=\"脚本测试-线程组设置10个线程分别请求10次\"></a>脚本测试-线程组设置10个线程分别请求10次</h2><p><img src=\"/pictures/08JMeter/image-20230104100737832.png\"></p>\n<h2 id=\"查看结果树-1\"><a href=\"#查看结果树-1\" class=\"headerlink\" title=\"查看结果树\"></a>查看结果树</h2><p><img src=\"/pictures/08JMeter/image-20230104100757522.png\"></p>\n<h1 id=\"BadBoy脚本录制\"><a href=\"#BadBoy脚本录制\" class=\"headerlink\" title=\"BadBoy脚本录制\"></a>BadBoy脚本录制</h1><h2 id=\"安装badboy脚本软件\"><a href=\"#安装badboy脚本软件\" class=\"headerlink\" title=\"安装badboy脚本软件\"></a>安装badboy脚本软件</h2><p>傻瓜式安装即可</p>\n<h2 id=\"打开badboy软件\"><a href=\"#打开badboy软件\" class=\"headerlink\" title=\"打开badboy软件\"></a>打开badboy软件</h2><p><img src=\"/pictures/08JMeter/image-20230104100818008.png\"></p>\n<h2 id=\"badboy脚本录制\"><a href=\"#badboy脚本录制\" class=\"headerlink\" title=\"badboy脚本录制\"></a>badboy脚本录制</h2><p>点击录制按钮进行脚本录制，完成打开搜狗搜索，搜索zhiyuan0932操作，然后停止，回放，（回放的时候，会因为编码原因导致乱码，需要手动调乱码问题）</p>\n<p><img src=\"/pictures/08JMeter/image-20230104100832454.png\"></p>\n<p><img src=\"/pictures/08JMeter/image-20230104100856535.png\"></p>\n<p><img src=\"/pictures/08JMeter/image-20230104100908487.png\"></p>\n<p><img src=\"/pictures/08JMeter/image-20230104100917874.png\"></p>\n<h2 id=\"添加验证点\"><a href=\"#添加验证点\" class=\"headerlink\" title=\"添加验证点\"></a>添加验证点</h2><p>验证点的作用就是验证脚本是否按照我们测试的思路执行，判断脚本执行过程中是否存现问题</p>\n<p><img src=\"/pictures/08JMeter/image-20230104100933098.png\"></p>\n<h2 id=\"badboy参数化\"><a href=\"#badboy参数化\" class=\"headerlink\" title=\"badboy参数化\"></a>badboy参数化</h2><p>所谓参数化，是指请求的某个参数提前设定多个值，在具体请求的时候，去获取提前设定的值，不同的业务场景设置的参数不一致。</p>\n<p><img src=\"/pictures/08JMeter/image-20230104100952874.png\"></p>\n<p><img src=\"/pictures/08JMeter/image-20230104101000440.png\"></p>\n<p><img src=\"/pictures/08JMeter/image-20230104101007977.png\"></p>\n<p><img src=\"/pictures/08JMeter/image-20230104101015465.png\"></p>\n<h2 id=\"导出Jmeter脚本\"><a href=\"#导出Jmeter脚本\" class=\"headerlink\" title=\"导出Jmeter脚本\"></a>导出Jmeter脚本</h2><p><img src=\"/pictures/08JMeter/image-20230104101031073.png\"></p>\n<h2 id=\"在Jmeter中导入badboy生成的脚本，验证测试\"><a href=\"#在Jmeter中导入badboy生成的脚本，验证测试\" class=\"headerlink\" title=\"在Jmeter中导入badboy生成的脚本，验证测试\"></a>在Jmeter中导入badboy生成的脚本，验证测试</h2><p><img src=\"/pictures/08JMeter/image-20230104101040623.png\"></p>\n<h2 id=\"badboy并发测试\"><a href=\"#badboy并发测试\" class=\"headerlink\" title=\"badboy并发测试\"></a>badboy并发测试</h2><p>本身是能做接口测试和压力测试的,并且能兼容jemeter</p>\n<p>选择tools run background</p>\n<p><img src=\"/pictures/08JMeter/image-20230104101050000.png\"></p>\n<h2 id=\"badboy测试报告\"><a href=\"#badboy测试报告\" class=\"headerlink\" title=\"badboy测试报告\"></a>badboy测试报告</h2><p>在badboy--&gt;view---&gt;report下可以看到测试报告</p>\n<p><img src=\"/pictures/08JMeter/image-20230104101059830.png\"></p>\n<h1 id=\"Jmeter数据库压力测试\"><a href=\"#Jmeter数据库压力测试\" class=\"headerlink\" title=\"Jmeter数据库压力测试\"></a>Jmeter数据库压力测试</h1><h2 id=\"先配置jdbc驱动\"><a href=\"#先配置jdbc驱动\" class=\"headerlink\" title=\"先配置jdbc驱动\"></a>先配置jdbc驱动</h2><p><img src=\"/pictures/08JMeter/image-20230104101134264.png\"></p>\n<p>添加上jar后,在测试计划添加配置原件,jdbc进行配置</p>\n<p><img src=\"/pictures/08JMeter/image-20230104101200409.png\"></p>\n<p>添加操作数据库请求 samplerjdbcRequest</p>\n<h2 id=\"数据库普通查询操作\"><a href=\"#数据库普通查询操作\" class=\"headerlink\" title=\"数据库普通查询操作\"></a>数据库普通查询操作</h2><p><img src=\"/pictures/08JMeter/image-20230104101354190.png\"></p>\n<h2 id=\"Jmeter预编译参数查询方式\"><a href=\"#Jmeter预编译参数查询方式\" class=\"headerlink\" title=\"Jmeter预编译参数查询方式\"></a>Jmeter预编译参数查询方式</h2><p><img src=\"/pictures/08JMeter/image-20230104101402444.png\"></p>\n<h2 id=\"ForEach控制器循环请求\"><a href=\"#ForEach控制器循环请求\" class=\"headerlink\" title=\"ForEach控制器循环请求\"></a>ForEach控制器循环请求</h2><p><img src=\"/pictures/08JMeter/image-20230104101410482.png\"></p>\n<h2 id=\"JDBC预编译方式修改数据\"><a href=\"#JDBC预编译方式修改数据\" class=\"headerlink\" title=\"JDBC预编译方式修改数据\"></a>JDBC预编译方式修改数据</h2><h3 id=\"配置csv文件\"><a href=\"#配置csv文件\" class=\"headerlink\" title=\"配置csv文件\"></a>配置csv文件</h3><p><img src=\"/pictures/08JMeter/image-20230104101419180.png\"></p>\n<h3 id=\"修改数据\"><a href=\"#修改数据\" class=\"headerlink\" title=\"修改数据\"></a>修改数据</h3><p><img src=\"/pictures/08JMeter/image-20230104101428004.png\"></p>\n<h1 id=\"Jmeter压测接口的性能优化\"><a href=\"#Jmeter压测接口的性能优化\" class=\"headerlink\" title=\"Jmeter压测接口的性能优化\"></a>Jmeter压测接口的性能优化</h1><p>简介：讲解Jmeter压测减少资源使用的一些建议，即压测结果更准确</p>\n<p>1、使用非GUI模式：jmeter -n -t test.jmx -l result.jtl</p>\n<p>2、少使用Listener， 如果使用-l参数，它们都可以被删除或禁用。</p>\n<p>3、在加载测试期间不要使用”查看结果树”或”查看结果”表监听器，只能在脚本阶段使用它们来调试脚本。</p>\n<p>4、包含控制器在这里没有帮助，因为它将文件中的所有测试元素添加到测试计划中。</p>\n<p>5、不要使用功能模式,使用CSV输出而不是XML</p>\n<p>6、只保存你需要的数据,尽可能少地使用断言</p>\n<p>7、如果测试需要大量数据，可以提前准备好测试数据放到数据文件中，以CSV Read方式读取。</p>\n<p>8、用内网压测，减少其他带宽影响压测结果</p>\n<p>9、如果压测大流量，尽量用多几个节点以非GUI模式向服务器施压</p>\n<h1 id=\"Linux下运行jmeter压测\"><a href=\"#Linux下运行jmeter压测\" class=\"headerlink\" title=\"Linux下运行jmeter压测\"></a>Linux下运行jmeter压测</h1><p>我们在做测试的时候，有时候要运行很久，公司用的测试服务器一般都是linux，就可以运行在linux下面，linux下面不能像windows一样有图形化界面，那怎么运行脚本呢。</p>\n<h2 id=\"解压JDK8到Linux\"><a href=\"#解压JDK8到Linux\" class=\"headerlink\" title=\"解压JDK8到Linux\"></a>解压JDK8到Linux</h2><p>tar -xvf jdk-8u171-linux-i586.tar.gz -C &#x2F;usr&#x2F;local</p>\n<p>mv jdk-8u171-linux-i586 java</p>\n<p><img src=\"/pictures/08JMeter/image-20230104101441890.png\"></p>\n<h2 id=\"配置环境变量\"><a href=\"#配置环境变量\" class=\"headerlink\" title=\"配置环境变量\"></a>配置环境变量</h2><p>[root@localhost &#x2F;]# vim &#x2F;etc&#x2F;profile</p>\n<p>+———————————-+<br>| JAVA_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;java&#x2F;      |<br>|                                  |<br>| CLASSPATH&#x3D;$JAVA_HOME&#x2F;lib&#x2F;      |<br>|                                  |<br>| PATH&#x3D;$PATH:$JAVA_HOME&#x2F;bin     |<br>|                                  |<br>| export PATH JAVA_HOME CLASSPATH |<br>+———————————-+</p>\n<h2 id=\"刷新配置文件\"><a href=\"#刷新配置文件\" class=\"headerlink\" title=\"刷新配置文件\"></a>刷新配置文件</h2><p>source &#x2F;etc&#x2F;profile</p>\n<p>java -version</p>\n<h2 id=\"解压并安装jmeter4-0\"><a href=\"#解压并安装jmeter4-0\" class=\"headerlink\" title=\"解压并安装jmeter4.0\"></a>解压并安装jmeter4.0</h2><h2 id=\"配置jmeter环境变量\"><a href=\"#配置jmeter环境变量\" class=\"headerlink\" title=\"配置jmeter环境变量\"></a>配置jmeter环境变量</h2><h3 id=\"解压jmeter到usr-x2F-local\"><a href=\"#解压jmeter到usr-x2F-local\" class=\"headerlink\" title=\"解压jmeter到usr&#x2F;local\"></a>解压jmeter到usr&#x2F;local</h3><p><img src=\"/pictures/08JMeter/image-20230104101517327.png\"></p>\n<h3 id=\"启动Jmeter\"><a href=\"#启动Jmeter\" class=\"headerlink\" title=\"启动Jmeter\"></a>启动Jmeter</h3><p><img src=\"/pictures/08JMeter/image-20230104101524299.png\"></p>\n<h3 id=\"打开系统配置文件\"><a href=\"#打开系统配置文件\" class=\"headerlink\" title=\"打开系统配置文件\"></a>打开系统配置文件</h3><p>vim &#x2F;etc&#x2F;profile</p>\n<h3 id=\"配置环境变量-1\"><a href=\"#配置环境变量-1\" class=\"headerlink\" title=\"配置环境变量\"></a>配置环境变量</h3><p>+————————————+<br>| JMETER_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;jmeter&#x2F;    |<br>|                                    |<br>| CLASSPATH&#x3D;$JMETER_HOME&#x2F;lib&#x2F;      |<br>|                                    |<br>| PATH&#x3D;$PATH:$JMETER_HOME&#x2F;bin     |<br>|                                    |<br>| export PATH JMETER_HOME CLASSPATH |<br>+————————————+</p>\n<h3 id=\"刷新系统配置文件\"><a href=\"#刷新系统配置文件\" class=\"headerlink\" title=\"刷新系统配置文件\"></a>刷新系统配置文件</h3><p>source &#x2F;etc&#x2F;profile</p>\n<h3 id=\"执行jmeter\"><a href=\"#执行jmeter\" class=\"headerlink\" title=\"执行jmeter -?\"></a>执行jmeter -?</h3><p><img src=\"/pictures/08JMeter/image-20230104101538473.png\"></p>\n<h3 id=\"将windows上写好的脚本导入到Linux\"><a href=\"#将windows上写好的脚本导入到Linux\" class=\"headerlink\" title=\"将windows上写好的脚本导入到Linux\"></a>将windows上写好的脚本导入到Linux</h3><h3 id=\"进行测试\"><a href=\"#进行测试\" class=\"headerlink\" title=\"进行测试\"></a>进行测试</h3><p>非GUI界面，压测参数讲解</p>\n<p>-h 帮助</p>\n<p>-n 非GUI模式</p>\n<p>-t 指定要运行的 JMeter 测试脚本文件</p>\n<p>-l 记录结果的文件 每次运行之前，(要确保之前没有运行过,即xxx.jtl不存在，不然报错)</p>\n<p>-r Jmter.properties文件中指定的所有远程服务器</p>\n<p>-e 在脚本运行结束后生成html报告</p>\n<p>-o 用于存放html报告的目录（目录要为空，不然报错）</p>\n<p>jmeter -n –t a.jmx -l res.jtl</p>\n<p><img src=\"/pictures/08JMeter/image-20230104101551634.png\"></p>\n<h2 id=\"将测试结果导入到Jmeter中查看结果数据\"><a href=\"#将测试结果导入到Jmeter中查看结果数据\" class=\"headerlink\" title=\"将测试结果导入到Jmeter中查看结果数据\"></a>将测试结果导入到Jmeter中查看结果数据</h2><p><img src=\"/pictures/08JMeter/image-20230104101600808.png\"></p>\n<h1 id=\"Jmeter压测生成HTML测试报告\"><a href=\"#Jmeter压测生成HTML测试报告\" class=\"headerlink\" title=\"Jmeter压测生成HTML测试报告\"></a>Jmeter压测生成HTML测试报告</h1><p>创建文件夹</p>\n<p>mkdir result</p>\n<p>指令执行</p>\n<p>jmeter -n -t baidu.jmx -l res.jtl -e -o &#x2F;result</p>\n<h1 id=\"Jmeter-HTML报告dashboard讲解\"><a href=\"#Jmeter-HTML报告dashboard讲解\" class=\"headerlink\" title=\"Jmeter HTML报告dashboard讲解\"></a>Jmeter HTML报告dashboard讲解</h1><h2 id=\"Test-and-Report-informations\"><a href=\"#Test-and-Report-informations\" class=\"headerlink\" title=\"Test and Report informations\"></a><strong>Test and Report informations</strong></h2><p><img src=\"/pictures/08JMeter/image-20230104101620957.png\"></p>\n<p>+—————————-+<br>| Source file：jtl文件名     |<br>|                            |<br>| Start Time ：压测开始时间  |<br>|                            |<br>| End Time ：压测结束时间    |<br>|                            |<br>| Filter for display：过滤器 |<br>|                            |<br>| Lable:sampler采样器名称    |<br>+—————————-+</p>\n<h2 id=\"APDEX-Application-performance-Index\"><a href=\"#APDEX-Application-performance-Index\" class=\"headerlink\" title=\"APDEX(Application performance Index)\"></a>APDEX(Application performance Index)</h2><p><img src=\"/pictures/08JMeter/image-20230104101631888.png\"></p>\n<p>+—————————————————————-+<br>| apdex:应用程序性能指标,范围在0~1之间，1表示达到所有用户均满意 |<br>|                                                                |<br>| T(Toleration threshold)：可接受阀值                            |<br>|                                                                |<br>| F(Frustration threshold)：失败阀值                             |<br>+—————————————————————-+</p>\n<h2 id=\"Requests-Summary\"><a href=\"#Requests-Summary\" class=\"headerlink\" title=\"Requests Summary\"></a>Requests Summary</h2><p><img src=\"/pictures/08JMeter/image-20230104101644480.png\">OK:成功率</p>\n<p>KO:失败率</p>\n<h2 id=\"Statistics-统计数据\"><a href=\"#Statistics-统计数据\" class=\"headerlink\" title=\"Statistics 统计数据\"></a>Statistics 统计数据</h2><p><img src=\"/pictures/08JMeter/image-20230104101652991.png\"></p>\n<p>lable:sampler采样器名称</p>\n<p>samples:请求总数，并发数*循环次数</p>\n<p>KO:失败次数</p>\n<p>Error%:失败率</p>\n<p>Average:平均响应时间</p>\n<p>Min:最小响应时间</p>\n<p>Max:最大响应时间</p>\n<p>90th pct: 90%的用户响应时间不会超过这个值（关注这个就可以了）</p>\n<p>95th pct: 95%的用户响应时间不会超过这个值</p>\n<p>99th pct: 99%的用户响应时间不会超过这个值 (存在极端值)</p>\n<p>throughtput:Request per Second吞吐量 qps</p>\n<p>received:每秒从服务器接收的数据量</p>\n<p>send：每秒发送的数据量</p>\n<h2 id=\"错误信息统计\"><a href=\"#错误信息统计\" class=\"headerlink\" title=\"错误信息统计\"></a>错误信息统计</h2><p><img src=\"/pictures/08JMeter/image-20230104101704720.png\"></p>\n<h1 id=\"Jmeter图形化HTML压测报告Charts报表讲解\"><a href=\"#Jmeter图形化HTML压测报告Charts报表讲解\" class=\"headerlink\" title=\"Jmeter图形化HTML压测报告Charts报表讲解\"></a>Jmeter图形化HTML压测报告Charts报表讲解</h1><h2 id=\"Over-Time（随着时间的变化）\"><a href=\"#Over-Time（随着时间的变化）\" class=\"headerlink\" title=\"Over Time（随着时间的变化）\"></a>Over Time（随着时间的变化）</h2><p><img src=\"/pictures/08JMeter/image-20230104101717927.png\"></p>\n<p>Response Times Over Time：响应时间变化趋势</p>\n<p>Response Time Percentiles Over Time (successful responses)：最大，最小，平均，用户响应时间分布</p>\n<p>Active Threads Over Time：并发用户数趋势</p>\n<p>Bytes Throughput Over Time：每秒接收和请求字节数变化，蓝色表示发送，黄色表示接受</p>\n<p>Latencies Over Time：平均响应延时趋势</p>\n<p>Connect Time Over Time\t：连接耗时趋势</p>\n<h2 id=\"Throughput\"><a href=\"#Throughput\" class=\"headerlink\" title=\"Throughput\"></a>Throughput</h2><p>Hits Per Second (excluding embedded resources):每秒点击次数</p>\n<p>Codes Per Second (excluding embedded resources)：每秒状态码数量</p>\n<p>Transactions Per Second：即TPS，每秒事务数</p>\n<p>Response Time Vs Request：响应时间和请求数对比</p>\n<p>Latency Vs Request：延迟时间和请求数对比</p>\n<h2 id=\"Response-Times\"><a href=\"#Response-Times\" class=\"headerlink\" title=\"Response Times\"></a>Response Times</h2><p>Response Time Percentiles：响应时间百分比</p>\n<p><img src=\"/pictures/08JMeter/image-20230104101732576.png\"></p>\n<p>Response Time Overview：响应时间概述</p>\n<p><img src=\"/pictures/08JMeter/image-20230104101739594.png\"></p>\n<p>Time Vs Threads：活跃线程数和响应时间</p>\n<p><img src=\"/pictures/08JMeter/image-20230104101746321.png\"></p>\n<p>Response Time Distribution：响应时间分布图</p>\n<p><img src=\"/pictures/08JMeter/image-20230104101754968.png\"></p>\n<h1 id=\"Windows-jmeter-unGUI测试\"><a href=\"#Windows-jmeter-unGUI测试\" class=\"headerlink\" title=\"Windows jmeter unGUI测试\"></a>Windows jmeter unGUI测试</h1><h2 id=\"设置环境变量\"><a href=\"#设置环境变量\" class=\"headerlink\" title=\"设置环境变量\"></a>设置环境变量</h2><p><img src=\"/pictures/08JMeter/image-20230104101805282.png\"></p>\n<h2 id=\"无界面测试\"><a href=\"#无界面测试\" class=\"headerlink\" title=\"无界面测试\"></a>无界面测试</h2><p><img src=\"/pictures/08JMeter/image-20230104101812589.png\"></p>\n<h1 id=\"分布式压测介绍\"><a href=\"#分布式压测介绍\" class=\"headerlink\" title=\"分布式压测介绍\"></a>分布式压测介绍</h1><p>普通压测：</p>\n<p>单台机可以对目标机器产生的压力比较小，受限因素包括CPU，网络，IO等</p>\n<p>分布式压测：</p>\n<p>利用多台机器向目标机器产生压力，模拟几万用户并发访问</p>\n<p><img src=\"/pictures/08JMeter/image-20230104101821321.png\"></p>\n<h1 id=\"Jmeter分布式压测原理\"><a href=\"#Jmeter分布式压测原理\" class=\"headerlink\" title=\"Jmeter分布式压测原理\"></a>Jmeter分布式压测原理</h1><p><img src=\"/pictures/08JMeter/image-20230104101829831.png\"></p>\n<p>1、总控机器的节点master，其他产生压力的机器叫”肉鸡” server</p>\n<p>2、master会把压测脚本发送到 server上面</p>\n<p>3、执行的时候，server上只需要把jmeter-server打开就可以了，不用启动jmeter</p>\n<p>4、结束后，server会把压测数据回传给master,然后master汇总输出报告</p>\n<p>5、配置详情</p>\n<h1 id=\"Jmeter分布式压测实战\"><a href=\"#Jmeter分布式压测实战\" class=\"headerlink\" title=\"Jmeter分布式压测实战\"></a>Jmeter分布式压测实战</h1><h2 id=\"Slave机器设置\"><a href=\"#Slave机器设置\" class=\"headerlink\" title=\"Slave机器设置\"></a>Slave机器设置</h2><p>第一步:禁用ssl</p>\n<p>到slave Jmeter的jmeter.properties文件中修改</p>\n<p>server.rmi.ssl.disable&#x3D;true</p>\n<p>第二步:修改slave Jmeter的远程连接端口</p>\n<p>server_port&#x3D;8899 表示master机器要远程连接的端口</p>\n<p>第三步:启动slave Jmeter</p>\n<p>.&#x2F;jmeter-server</p>\n<p>.&#x2F;jmeter-server -Djava.rmi.server.hostname&#x3D;192.168.179.128</p>\n<p>第四步:关闭防火墙</p>\n<p>service iptables stop</p>\n<h2 id=\"设置Master设备\"><a href=\"#设置Master设备\" class=\"headerlink\" title=\"设置Master设备\"></a>设置Master设备</h2><p>关闭防火墙</p>\n<p>service iptables stop</p>\n<p>到slave Jmeter的jmeter.properties文件中修改</p>\n<p>server.rmi.ssl.disable&#x3D;true</p>\n<p>修改remote_hosts&#x3D;127.0.0.1</p>\n<p>为remote_hosts&#x3D;192.168.179.128:9999</p>\n<p>GUI方式启动</p>\n<p><img src=\"/pictures/08JMeter/image-20230104101846545.png\"></p>\n<p>无GUI方式启动</p>\n<p>Jmeter -n -t baidu.jmx -r -l result.jtl -e -o result</p>\n<p><img src=\"/pictures/08JMeter/image-20230104101853765.png\"></p>\n<h1 id=\"并发用户和TPS关系\"><a href=\"#并发用户和TPS关系\" class=\"headerlink\" title=\"并发用户和TPS关系\"></a>并发用户和TPS关系</h1><p>简单计算:</p>\n<p>在线用户数量(日活量)：</p>\n<p>在做性能测试的时候，传统方式都是用并发用户数来衡量系统的性能，觉得系统能支撑的并发用户数越多，系统的性能就越好；同时对TPS不是非常理解，也根本不知道它们之间的关系，因此非常有必要进行解释。因为TPS模式（吞吐量模式）是一种更好的方式衡量服务端系统的能力。</p>\n<h2 id=\"Vu和TPS换算\"><a href=\"#Vu和TPS换算\" class=\"headerlink\" title=\"Vu和TPS换算\"></a>Vu和TPS换算</h2><p>简单例子:</p>\n<p>在术语中解释了TPS是每秒事务数，但是事务时要靠虚拟用户做出来的，</p>\n<p>假如1个虚拟用户在1秒内完成1笔事务，那么TPS明显就是1；</p>\n<p>如果某笔业务响应时间是1ms,那么1个用户在1秒内能完成1000笔事务，TPS就是1000了；</p>\n<p>如果某笔业务响应时间是1s,那么1个用户在1秒内只能完成1笔事务，要想达到1000TPS，至少需要1000个用户；</p>\n<h2 id=\"如何获取Vu和TPS\"><a href=\"#如何获取Vu和TPS\" class=\"headerlink\" title=\"如何获取Vu和TPS\"></a>如何获取Vu和TPS</h2><p>并发用户数(Vu)获取新系统：没有历史数据作参考，只能通过业务部门进行评估。旧系统：对于已经上线的系统，可以选取高峰时刻，在一定时间内使用系统的人数，这些人数认为属于在线用户数，并发用户数取10%就可以了，例如在半个小时内，使用系统的用户数为10000，那么取10%作为并发用户数基本就够了。</p>\n<p>其他计算方式：根据pv计算</p>\n<p>PV(访问量)：即Page View, 即页面浏览量或点击量，用户每次刷新即被计算一次。</p>\n<p>假设:pv数是80w</p>\n<p>（1）平均值情况：80w个用户在时间上均匀地发起请求。那么并发用户数为800000&#x2F;24*60*60&#x3D;9.25并发&#x2F;s。</p>\n<p> （2）80~20原则：根据统计学原理，采用80~20原则计算并发用户数。<br>             800000*0.8&#x2F;（24*60*60*0.2）&#x3D;37并发&#x2F;s</p>\n<p>TPS获取新系统：没有历史数据作参考，只能通过业务部门进行评估。旧系统：对于已经上线的系统，可以选取高峰时刻，在5分钟或10分钟内，获取系统每笔交易的业务量和总业务量，按照单位时间内完成的笔数计算出TPS，即业务笔数&#x2F;单位时间。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li><p>系统的性能由TPS决定，跟并发用户数没有多大关系。</p>\n</li>\n<li><p>系统的最大TPS是一定的（在一个范围内），但并发用户数不一定，可以调整。</p>\n</li>\n<li><p>建议性能测试的时候，不要设置过长的思考时间，以最坏的情况下对服务器施压。</p>\n</li>\n<li><p>一般情况下，大型系统（业务量大、机器多）做压力测试，10000～50000个用户并发，中小型系统做压力测试，5000个用户并发比较常见。</p>\n</li>\n</ul>\n<h1 id=\"性能指标\"><a href=\"#性能指标\" class=\"headerlink\" title=\"性能指标\"></a>性能指标</h1><h2 id=\"中间件指标\"><a href=\"#中间件指标\" class=\"headerlink\" title=\"中间件指标\"></a>中间件指标</h2><h3 id=\"定义及解释-1\"><a href=\"#定义及解释-1\" class=\"headerlink\" title=\"定义及解释\"></a>定义及解释</h3><p>常用的中间件例如Tomcat、Weblogic等指标主要包括JVM, ThreadPool, JDBC,具体如下：</p>\n<table>\n<thead>\n<tr>\n<th><strong>一级指标</strong></th>\n<th><strong>二级指标</strong></th>\n<th><strong>解释</strong></th>\n<th><strong>备注</strong></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>GC</td>\n<td>GC频率</td>\n<td>java虚拟机垃圾部分回收频率</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>Full GC频率</td>\n<td>java虚拟机垃圾完全回收频率</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>Full GC平均时长</td>\n<td>用于垃圾完全回收的平均时长</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>Full GC最大时长</td>\n<td>用于垃圾完全回收的最大时长</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>堆使用率</td>\n<td>堆使用率</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>ThreadPool</td>\n<td>Active Thread Count</td>\n<td>活动的线程数</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>Pending User Request</td>\n<td>处于排队的用户请求个数</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>JDBC</td>\n<td>JDBC Active Connection</td>\n<td>JDBC活动连接数</td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<h3 id=\"标准-3\"><a href=\"#标准-3\" class=\"headerlink\" title=\"标准\"></a>标准</h3><ul>\n<li><p>当前正在运行的线程数不能超过设定的最大值。一般情况下系统性能较好的情况下，线程数最小值设置50和最大值设置200比较合适。</p>\n</li>\n<li><p>当前运行的JDBC连接数不能超过设定的最大值。一般情况下系统性能较好的情况下，JDBC最小值设置50和最大值设置200比较合适。</p>\n</li>\n<li><p>ＧＣ频率不能频繁，特别是FULL GC更不能频繁，一般情况下系统性能较好的情况下，JVM最小堆大小和最大堆大小分别设置1024M比较合适。</p>\n</li>\n</ul>\n<h2 id=\"数据库指标\"><a href=\"#数据库指标\" class=\"headerlink\" title=\"数据库指标\"></a>数据库指标</h2><h3 id=\"定义及解释-2\"><a href=\"#定义及解释-2\" class=\"headerlink\" title=\"定义及解释\"></a>定义及解释</h3><p>常用的数据库例如ＭySQL指标主要包括SQL、吞吐量、缓存命中率、连接数等，具体如下：</p>\n<table>\n<thead>\n<tr>\n<th><strong>一级指标</strong></th>\n<th><strong>二级指标</strong></th>\n<th><strong>单位</strong></th>\n<th><strong>解释</strong></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>SQL</td>\n<td>耗时</td>\n<td>微秒</td>\n<td>执行SQL耗时</td>\n<td></td>\n</tr>\n<tr>\n<td>吞吐量</td>\n<td>QPS</td>\n<td>个</td>\n<td>每秒查询次数</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>TPS</td>\n<td>个</td>\n<td>每秒事务次数</td>\n<td></td>\n</tr>\n<tr>\n<td>命中率</td>\n<td>Key Buffer命中率</td>\n<td>百分之</td>\n<td>索引缓冲区命中率</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>InnoDB Buffer命中率</td>\n<td>百分之</td>\n<td>InnoDB缓冲区命中率</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>Query Cache命中率</td>\n<td>百分之</td>\n<td>查询缓存命中率</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>Table Cache命中率</td>\n<td>百分之</td>\n<td>表缓存命中率</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>Thread Cache命中率</td>\n<td>百分之</td>\n<td>线程缓存命中率</td>\n<td></td>\n</tr>\n<tr>\n<td>锁</td>\n<td>等待次数</td>\n<td>次</td>\n<td>锁等待次数</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>等待时间</td>\n<td>微秒</td>\n<td>锁等待时间</td>\n<td></td>\n</tr>\n</tbody></table>\n<hr>\n<hr>\n<h3 id=\"标准-4\"><a href=\"#标准-4\" class=\"headerlink\" title=\"标准\"></a>标准</h3><ul>\n<li><p>SQL耗时越小越好，一般情况下微秒级别。</p>\n</li>\n<li><p>命中率越高越好，一般情况下不能低于95%。</p>\n</li>\n<li><p>锁等待次数越低越好，等待时间越短越好。</p>\n</li>\n</ul>\n<h2 id=\"前端指标\"><a href=\"#前端指标\" class=\"headerlink\" title=\"前端指标\"></a>前端指标</h2><h3 id=\"定义及解释-3\"><a href=\"#定义及解释-3\" class=\"headerlink\" title=\"定义及解释\"></a>定义及解释</h3><p>前端指标主要包括页面展示和网络所花的时间，具体如下：</p>\n<table>\n<thead>\n<tr>\n<th><strong>一级指标</strong></th>\n<th><strong>二级指标</strong></th>\n<th><strong>单位</strong></th>\n<th><strong>解释</strong></th>\n<th><strong>备注</strong></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>页面展示</td>\n<td>首次显示时间</td>\n<td>毫秒</td>\n<td>在浏览器地址栏输入URL按回车到用户看到网页的第一个视觉标志为止</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>OnLoad事件时间</td>\n<td>毫秒</td>\n<td>浏览器触发onLoad事件的时间，当原始文档和所有引用的内容完全下载后才会触发这个事件</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>完全载入的时间</td>\n<td>毫秒</td>\n<td>所有onLoad JavaScript 处理程序执行完毕，所有动态的或延迟加载的内容都通过这些处理程序触发的时间</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>页面数量</td>\n<td>页面大小</td>\n<td>KB</td>\n<td>整个页面大小</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>请求数量</td>\n<td>次</td>\n<td>从网站下载资源时所有网络请求的总数，尽量少</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>网络</td>\n<td>DNS时间</td>\n<td>毫秒</td>\n<td>DNS查找时间</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>连接时间</td>\n<td>毫秒</td>\n<td>连接时间就是浏览器与Web服务器建立TCP&#x2F;IP连接的时间</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>服务器时间</td>\n<td>毫秒</td>\n<td>服务器处理时间</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>传输时间</td>\n<td>毫秒</td>\n<td>内容传输所用时间</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>等待时间</td>\n<td>毫秒</td>\n<td>等待某个资源释放的时间</td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<h3 id=\"标准-5\"><a href=\"#标准-5\" class=\"headerlink\" title=\"标准\"></a>标准</h3><ul>\n<li><p>页面要尽可能小及压缩。</p>\n</li>\n<li><p>页面展示和花费时间越短越好。</p>\n</li>\n</ul>\n<h2 id=\"稳定性指标\"><a href=\"#稳定性指标\" class=\"headerlink\" title=\"稳定性指标\"></a>稳定性指标</h2><h3 id=\"定义及解释-4\"><a href=\"#定义及解释-4\" class=\"headerlink\" title=\"定义及解释\"></a>定义及解释</h3><p>最短稳定时间：系统按照最大容量的80%或标准压力（系统的预期日常压力）情况下运行，能够稳定运行的最短时间。一般来说，对于正常工作日（8小时）运行的系统，至少应该能保证系统稳定运行８小时以上。对于7*24运行的系统，至少应该能够保证系统稳定运行24小时以上。如果系统不能稳定的运行，上线后，随着业务量的增长和长时间运行，将会出现性能下降甚至崩溃的风险。</p>\n<h3 id=\"标准-6\"><a href=\"#标准-6\" class=\"headerlink\" title=\"标准\"></a>标准</h3><ul>\n<li><p>TPS曲线稳定，没有大幅度的波动。</p>\n</li>\n<li><p>各项资源指标没有泄露或异常情况。</p>\n</li>\n</ul>\n<h1 id=\"性能分析\"><a href=\"#性能分析\" class=\"headerlink\" title=\"性能分析\"></a>性能分析</h1><p>性能分析的前提除了需要丰富的性能测试监控，还要了解操作系统、中间件(tomcat)、数据库(mysql oracle sqlserver)、开发等。</p>\n<h2 id=\"流程\"><a href=\"#流程\" class=\"headerlink\" title=\"流程\"></a>流程</h2><ul>\n<li><p>很多情况下压测流量并没有完全进入到后端（服务端），在网络接入层（云化的架构比如：SLB&#x2F;WAF&#x2F;高防IP，甚至是CDN&#x2F;全站加速等）可能就会出现由于各种规格（带宽、最大连接数、新建连接数等）限制或者因为压测的某些特征符合CC和DDoS的行为而触发了防护策略导致压测结果达不到预期。</p>\n</li>\n<li><p>接着看关键指标是否满足要求，如果不满足，需要确定是哪个地方有问题，一般情况下，服务器端问题可能性比较大，也有可能是客户端问题（这种情况非常小）。</p>\n</li>\n<li><p>对于服务器端问题，需要定位的是硬件相关指标，例如CPU，Memory, Disk I&#x2F;O, Network I&#x2F;O, 如果是某个硬件指标有问题，需要深入的进行分析。</p>\n</li>\n<li><p>如果硬件指标都没有问题，需要查看中间件相关指标，例如：线程池、连接池、GC等，如果是这些指标问题，需要深入的 分析。</p>\n</li>\n<li><p>如果中间件相关指标没问题，需要查看数据库相关指标，例如：慢查SQL，命中率，锁、参数设置。</p>\n</li>\n<li><p>如果以上指标都正常，应用程序的算法、缓冲、缓存、同步或异步可能有问题，需要具体深入的分析。</p>\n<p><img src=\"/pictures/08JMeter/image-20230104101937127.png\">可能瓶颈点</p>\n</li>\n</ul>\n<h3 id=\"硬件-x2F-规格上的瓶颈\"><a href=\"#硬件-x2F-规格上的瓶颈\" class=\"headerlink\" title=\"硬件&#x2F;规格上的瓶颈\"></a><strong>硬件&#x2F;规格上的瓶颈</strong></h3><p>一般指的是CPU、内存、磁盘I&#x2F;O 方面的问题，分为服务器硬件瓶颈、网络瓶颈（对局域网可以不考虑）。</p>\n<h3 id=\"中间件上的性能瓶颈\"><a href=\"#中间件上的性能瓶颈\" class=\"headerlink\" title=\"中间件上的性能瓶颈\"></a><strong>中间件上的性能瓶颈</strong></h3><p>一般指的是应用服务器、web 服务器等应用软件，还包括数据库系统。例如：中间件weblogic&#x2F;tomcat平台上配置的JDBC连接池的参数设置不合理，造成的瓶颈。</p>\n<h3 id=\"应用程序上的性能瓶颈\"><a href=\"#应用程序上的性能瓶颈\" class=\"headerlink\" title=\"应用程序上的性能瓶颈\"></a><strong>应用程序上的性能瓶颈</strong></h3><p>一般指的是开发人员开发出来的应用程序。例如，JVM参数不合理，容器配置不合理，慢SQL，数据库设计不合理，程序架构规划不合理，程序本身设计有问题（串行处理、请求的处理线程不够、无缓冲、无缓存、生产者和消费者不协调等），造成系统在大量用户方位时性能低下而造成的瓶颈。</p>\n<h3 id=\"操作系统上的性能瓶颈\"><a href=\"#操作系统上的性能瓶颈\" class=\"headerlink\" title=\"操作系统上的性能瓶颈\"></a><strong>操作系统上的性能瓶颈</strong></h3><p>一般指的是windows、UNIX、Linux等操作系统。例如，在进行性能测试，出现物理内存不足时，虚拟内存设置也不合理，虚拟内存的交换效率就会大大降低，从而导致行为的响应时间大大增加，这时认为操作系统上出现性能瓶颈。</p>\n<h3 id=\"网络设备上的性能瓶颈\"><a href=\"#网络设备上的性能瓶颈\" class=\"headerlink\" title=\"网络设备上的性能瓶颈\"></a><strong>网络设备上的性能瓶颈</strong></h3><p>一般指的是防火墙、动态负载均衡器、交换机等设备。当前更多的云化服务架构使用的网络接入产品：包括但不限于SLB&#x2F;WAF&#x2F;高防IP&#x2F;CDN&#x2F;全站加速等等。例如，在动态负载均衡器上设置了动态分发负载的机制，当发现某个应用服务器上的硬件资源已经到达极限时，动态负载均衡器将后续的交易请求发送到其他负载较轻的应用服务器上。在测试时发现，动态负载均衡器没有起到相应的作用，这时可以认为网络瓶颈。</p>\n<h2 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h2><h3 id=\"CPU-1\"><a href=\"#CPU-1\" class=\"headerlink\" title=\"CPU\"></a><strong>CPU</strong></h3><p>CPU资源利用率很高的话，需要看CPU消耗User,Sys,Wait那种状态下。</p>\n<ul>\n<li><p>如果CPU User非常高，需要查看消耗在哪个进程，可以用top(linux)命令看出，接着用top –H –p &lt;pid&gt;看哪个线程消耗资源高，如果是java应用，就可以用jstack看出此线程正在执行的堆栈，看资源消耗在哪个方法上，查看源代码就知道问题所在；如果是c++应用，可以用gprof性能工具进行分析。</p>\n</li>\n<li><p>如果CPU Sys非常高，可以用strace(linux)看系统调用的资源消耗及时间。</p>\n</li>\n<li><p>如果CPU Wait非常高，考虑磁盘读写了，可以通过减少日志输出、异步或换速度快的硬盘。</p>\n</li>\n</ul>\n<h3 id=\"Memory-1\"><a href=\"#Memory-1\" class=\"headerlink\" title=\"Memory\"></a><strong>Memory</strong></h3><p>操作系统未了最大化利用内存，一般都设置大量的cache,因此，内存利用率高达99%并不是问题，内存的问题主要看某个进程占用的内存是否非常大以及是否有大量的swap(虚拟内存交换)。</p>\n<h3 id=\"磁盘I-x2F-O\"><a href=\"#磁盘I-x2F-O\" class=\"headerlink\" title=\"磁盘I&#x2F;O\"></a><strong>磁盘I&#x2F;O</strong></h3><p>磁盘I&#x2F;O一个最显著的指标是繁忙率，可以通过减少日志输出、异步或换速度快的硬盘。</p>\n<h3 id=\"网络I-x2F-O\"><a href=\"#网络I-x2F-O\" class=\"headerlink\" title=\"网络I&#x2F;O\"></a><strong>网络I&#x2F;O</strong></h3><p>网络I&#x2F;O主要考虑传输内容大小，不能超过硬件网络传输的最大值70%，可以通过压缩、减少内容大小、在本地设置缓存以及分多次传输等。</p>\n<h3 id=\"JVM\"><a href=\"#JVM\" class=\"headerlink\" title=\"JVM\"></a><strong>JVM</strong></h3><p>jvm主要分析GC&#x2F;FULL GC是否频繁，以及垃圾回收的时间，可以用jstat命令来查看，对于每个代大小以及GC频繁，通过jmap将内存dump,再借助工具HeapAnalyzer来分析哪地方占用的内存较高以及是否有内存泄漏可能。简单点可以使用APM工具，比如阿里云ARMS，下同。</p>\n<h3 id=\"线程池\"><a href=\"#线程池\" class=\"headerlink\" title=\"线程池\"></a><strong>线程池</strong></h3><p>如果线程不够用，可以通过参数调整，增加线程；对于线程池中的线程设置比较大的情况，还是不够用可能的原因是：某个线程被阻塞来不及释放，可能在等锁、方法耗时较长、数据库等待时间很长等原因导致，需要进一步分析才能定位。</p>\n<h3 id=\"JDBC连接池\"><a href=\"#JDBC连接池\" class=\"headerlink\" title=\"JDBC连接池\"></a><strong>JDBC连接池</strong></h3><p>连接池不够用的情况下，可以通过参数进行调整增加；但是对于数据库本身处理很慢的情况下，调整没有多大的效果，需要查看数据库方面以及因代码导致连接未释放的原因。</p>\n<h3 id=\"SQL\"><a href=\"#SQL\" class=\"headerlink\" title=\"SQL\"></a><strong>SQL</strong></h3><p>SQL效率低下也是导致性能差的一个非常重要的原因，可以通过查看执行计划看SQL慢在哪里，一般情况，SQL效率低下原因主要有：</p>\n<table>\n<thead>\n<tr>\n<th><em><strong>*类别*</strong></em></th>\n<th><em><strong>*子类*</strong></em></th>\n<th><em><strong>*表达式或描述*</strong></em></th>\n<th><em><strong>*原因*</strong></em></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>索引</td>\n<td>未建索引</td>\n<td></td>\n<td>产生全表扫描</td>\n</tr>\n<tr>\n<td></td>\n<td>未利用索引</td>\n<td>substring(card_no,1,4)&#x3D;′5378′</td>\n<td>产生全表扫描</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>amount&#x2F;30&lt; 1000</td>\n<td>产生全表扫描</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>convert(char(10),date,112)&#x3D;′19991201′</td>\n<td>产生全表扫描</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>where salary&lt;&gt;3000</td>\n<td>产生全表扫描</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>name like ‘%张’</td>\n<td>产生全表扫描</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>first_name + last_name &#x3D;’beill cliton’</td>\n<td>产生全表扫描</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>id_no in(′0′,′1′)</td>\n<td>产生全表扫描</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>select id from t where num&#x3D;@num</td>\n<td>有参数也会产生全表扫描</td>\n</tr>\n<tr>\n<td></td>\n<td>使用效能低的索引</td>\n<td>oder by 非聚族索引</td>\n<td>索引性能低</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>username&#x3D;’张三’ and age&gt;20</td>\n<td>字符串索引低于整形索引</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>表中列与空NULL值</td>\n<td>索引性能低</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>尽量不要使用IS NULL或IS NOT NULL</td>\n<td>索引性能低</td>\n</tr>\n<tr>\n<td>数据量</td>\n<td>所有数据量</td>\n<td>select *</td>\n<td>很多列产生大量数据</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>select id,name</td>\n<td>表中有几百万行，产生大量数据</td>\n</tr>\n<tr>\n<td></td>\n<td>嵌套查询</td>\n<td>先不过滤数据，后过滤数据</td>\n<td>产生大量无用的数据</td>\n</tr>\n<tr>\n<td></td>\n<td>关联查询</td>\n<td>多表进行关联查询，先过滤掉小部分数据，在过滤大部分数据</td>\n<td>大量关联操作</td>\n</tr>\n<tr>\n<td></td>\n<td>大数据量插入</td>\n<td>一次次插入</td>\n<td>产生大量日志，消耗资源</td>\n</tr>\n<tr>\n<td>锁</td>\n<td>锁等待</td>\n<td>update account set banlance&#x3D;100 where id&#x3D;10</td>\n<td>产生表级锁，将会锁住整个表</td>\n</tr>\n<tr>\n<td></td>\n<td>死锁</td>\n<td>A:update a;update b;B:update b;update a;</td>\n<td>将会产生死锁</td>\n</tr>\n<tr>\n<td></td>\n<td>游标</td>\n<td>Cursor Open cursor,fetch;close cursor</td>\n<td>性能很低</td>\n</tr>\n<tr>\n<td></td>\n<td>临时表</td>\n<td>create tmp table 创建临时表</td>\n<td>产生大量日志</td>\n</tr>\n<tr>\n<td></td>\n<td>drop table</td>\n<td>删除临时表</td>\n<td>需要显示删除，避免系统表长时间锁定</td>\n</tr>\n<tr>\n<td>其他</td>\n<td>exist 代替 IN</td>\n<td>select num from a where num in(select num from b)</td>\n<td>in会逐个判断,exist有一条就结束</td>\n</tr>\n<tr>\n<td></td>\n<td>exist 代替select count(*)</td>\n<td>判断记录是否存在</td>\n<td>count(*)将累加计算，exist有就结束</td>\n</tr>\n<tr>\n<td></td>\n<td>between 代替 IN</td>\n<td>ID in(1,2,3)</td>\n<td>IN逐个判断，between是范围判断</td>\n</tr>\n<tr>\n<td></td>\n<td>left outer join 代替Not IN</td>\n<td>select ID from a where ID not in(select b.Mainid from b)</td>\n<td>NOT IN逐个判断，效率非常低</td>\n</tr>\n<tr>\n<td></td>\n<td>union all 代替union</td>\n<td>select ID from a union select id from b union</td>\n<td>删除重复的行，可能会在磁盘进行排序而union all只是简单的将结果并在一起</td>\n</tr>\n<tr>\n<td></td>\n<td>常用SQL尽量用绑定变量方法</td>\n<td>insert into A(ID) values(1)</td>\n<td>直接写SQL每次都要编译，用绑定变量的方法只编译一次，下次就可以用了</td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"性能测试基本概念\"><a href=\"#性能测试基本概念\" class=\"headerlink\" title=\"性能测试基本概念\"></a>性能测试基本概念</h1><h2 id=\"RT-Response-time\"><a href=\"#RT-Response-time\" class=\"headerlink\" title=\"RT -Response time\"></a>RT -Response time</h2><p>请求响应时间</p>\n<p>从客户端发出请求到得到响应的整个时间</p>\n<p>一般包括网络响应时间+server的响应时间。</p>\n<p>用户接受准则:</p>\n<p>例如2-5-10原则，即按照正常用户体验，如果用户能够在2秒内得到响应，会感觉速度很快，如果2-5秒得到响应，用户感觉系统的响应速度还不多，在5-10秒之内得到响应时，用户会感觉系统的响应速度慢，但是可以接受，超过10秒后还没有响应，用户就会感觉不能够接受。</p>\n<p>不同行业不同业务可接受的响应时间是不同的，一般情况，对于在线实时交易：</p>\n<ul>\n<li>互联网企业：500毫秒以下，例如淘宝业务10毫秒左右。</li>\n<li>金融企业：1秒以下为佳，部分复杂业务3秒以下。</li>\n<li>保险企业：3秒以下为佳。</li>\n<li>制造业：5秒以下为佳。</li>\n<li>阿里云规范</li>\n</ul>\n<h2 id=\"系统处理能力\"><a href=\"#系统处理能力\" class=\"headerlink\" title=\"系统处理能力\"></a><strong>系统处理能力</strong></h2><p>系统处理能力是指系统在利用系统硬件平台和软件平台进行信息处理的能力。系统处理能力通过系统每秒钟能够处理的交易数量来评价，交易有两种理解：</p>\n<ul>\n<li><p>一是业务人员角度的一笔业务过程；</p>\n</li>\n<li><p>二是系统角度的一次交易申请和响应过程。</p>\n</li>\n</ul>\n<p>前者称为业务交易过程，后者称为事务。两种交易指标都可以评价应用系统的处理能力。一般的建议与系统交易日志保持一致，以便于统计业务量或者交易量。系统处理能力指标是技术测试活动中重要指标。</p>\n<h3 id=\"简称\"><a href=\"#简称\" class=\"headerlink\" title=\"简称\"></a><strong>简称</strong></h3><p>一般情况下，用以下几个指标来度量：</p>\n<ul>\n<li><p>HPS（Hits Per Second） ：每秒点击次数，单位是次&#x2F;秒。</p>\n</li>\n<li><p>TPS（Transaction per Second）：系统每秒处理事务数，单位是笔&#x2F;秒。吞吐量。</p>\n<p>不可分割的。要么完全成功，要么完全失败。</p>\n</li>\n<li><p>QPS（Query per Second）：系统每秒处理查询次数，单位是次&#x2F;秒。</p>\n<p>对于互联网业务中，如果某些业务有且仅有一个请求连接，那么TPS&#x3D;QPS&#x3D;HPS，</p>\n<p>一般情况下用TPS来衡量整个业务流程，用QPS来衡量接口查询次数，用HPS来表示对服务器点击请求。</p>\n</li>\n</ul>\n<p>每秒钟处理完的事务次数，一般TPS是对整个系统来讲的。一个应用系统1s能完成多少事务处理，一个事务在分布式处理中，可能会对应多个请求，对于衡量单个接口服务的处理能力，用QPS比较多。</p>\n<h3 id=\"标准\"><a href=\"#标准\" class=\"headerlink\" title=\"标准\"></a><strong>标准</strong></h3><p>无论TPS、QPS、HPS,此指标是衡量系统处理能力非常重要的指标，越大越好，根据经验，一般情况下：</p>\n<ul>\n<li><p>金融行业：1000TPS~9000TPS，不包括互联网化的活动</p>\n</li>\n<li><p>保险行业：100TPS~1000TPS，不包括互联网化的活动</p>\n</li>\n<li><p>制造行业：10TPS~50TPS</p>\n</li>\n<li><p>互联网电子商务：10000TPS~100000TPS,例如天猫5万TPS</p>\n</li>\n<li><p>互联网中型网站：100TPS~500TPS</p>\n</li>\n<li><p>互联网小型网站: 50TPS~100TPS</p>\n</li>\n</ul>\n<h2 id=\"并发用户数量\"><a href=\"#并发用户数量\" class=\"headerlink\" title=\"并发用户数量\"></a>并发用户数量</h2><p>常见的错误理解:</p>\n<p>使用系统的全部用户数量(注册用户)</p>\n<p>使用系统的全部在线用户数量</p>\n<p>正确理解</p>\n<p>并发用户数指在同一时刻内，打开系统并进行业务操作的用户数量，并发用户数对于长连接(数据库连接时长连接，web请求时短连接)系统来说最大并发用户数即是系统的并发接入能力。对于短连接系统而言最大并发用户数并不等于系统的并发接入能力，而是与系统架构、系统处理能力等各种情况相关</p>\n<p>http:请求只能由客户端发出，服务端被动响应。</p>\n<h3 id=\"简称-1\"><a href=\"#简称-1\" class=\"headerlink\" title=\"简称\"></a>简称</h3><p>Virtual User: VU</p>\n<h3 id=\"标准-1\"><a href=\"#标准-1\" class=\"headerlink\" title=\"标准\"></a><strong>标准</strong></h3><p>一般情况下，性能测试是将系统处理能力容量测出来，而不是测试并发用户数，除了服务器长连接可能影响并发用户数外，系统处理能力不完全受并发用户数影响，可以用最小的用户数将系统处理能力容量测试出来，也可以用更多的用户将系统处理能力容量测试出来。</p>\n<p>并发用户数量:</p>\n<p>并发用户多少为好？</p>\n<p>中小企业:5000用户</p>\n<h2 id=\"错误率\"><a href=\"#错误率\" class=\"headerlink\" title=\"错误率\"></a>错误率</h2><h3 id=\"定义及解释\"><a href=\"#定义及解释\" class=\"headerlink\" title=\"定义及解释\"></a>定义及解释</h3><p>错误率指系统在负载情况下，失败交易的概率。错误率＝(失败交易数&#x2F;交易总数)*100%。稳定性较好的系统，其错误率应该由超时引起，即为超时率。</p>\n<h3 id=\"标准-2\"><a href=\"#标准-2\" class=\"headerlink\" title=\"标准\"></a><strong>标准</strong></h3><p>不同系统对错误率的要求不同，但一般不超出千分之六，即成功率不低于99.4%</p>\n<h2 id=\"CPU\"><a href=\"#CPU\" class=\"headerlink\" title=\"CPU\"></a>CPU</h2><h3 id=\"定义及解释-定义及解释-1-ListParagraph\"><a href=\"#定义及解释-定义及解释-1-ListParagraph\" class=\"headerlink\" title=\"定义及解释 {定义及解释-1 .ListParagraph}\"></a><strong>定义及解释</strong> {定义及解释-1 .ListParagraph}</h3><p>中央处理器是一块超大规模的集成电路，是一台计算机的运算核心（Core）和控制核心（ Control Unit）。它的功能主要是解释计算机指令以及处理计算机软件中的数据。CPU Load: 系统正在干活的多少的度量，队列长度。系统平均负载。</p>\n<p>CPU指标主要指的CPU利用率，包括用户态(user)、系统态(sys)、等待态(wait)、空闲态(idle)。CPU 利用率要低于业界警戒值范围之内，即小于或者等于75%;CPU sys%小于或者等于30%, CPU wait%小于或者等于5%。单核CPU也需遵循上述指标要求。</p>\n<p>7*24不允许宕机</p>\n<h2 id=\"Memory\"><a href=\"#Memory\" class=\"headerlink\" title=\"Memory\"></a>Memory</h2><p>内存是计算机中重要的部件之一，它是与CPU进行沟通的桥梁。计算机中所有程序的运行都是在内存中进行的，因此内存的性能对计算机的影响非常大。</p>\n<p>现代的操作系统为了最大利用内存，在内存中存放了缓存，因此内存利用率100%并不代表内存有瓶颈，衡量系统内有有瓶颈主要靠SWAP（与虚拟内存交换）交换空间利用率，一般情况下，SWAP交换空间利用率要低于70%,太多的交换将会引起系统性能低下。</p>\n<p>Swap解释:</p>\n<p>当物理内存接近崩溃时，将物理内存中最近一段时间最少频率使用到的页框移出物理内存，放进该存储空间，这段存储空间我们称之为<strong>交换空间（Swap）</strong></p>\n<h2 id=\"磁盘吞吐量-Disk-Throughput\"><a href=\"#磁盘吞吐量-Disk-Throughput\" class=\"headerlink\" title=\"磁盘吞吐量 Disk Throughput.\"></a>磁盘吞吐量 Disk Throughput.</h2><p>磁盘吞吐量是指在无磁盘故障的情况下单位时间内通过磁盘的数据量。</p>\n<p>磁盘指标主要有每秒读写多少兆，磁盘繁忙率，磁盘队列数，平均服务时间，平均等待时间，空间利用率。其中磁盘繁忙率是直接反映磁盘是否有瓶颈的的重要依据，一般情况下，磁盘繁忙率要低于70%。</p>\n<h2 id=\"网络吞吐量-Network-Throughput\"><a href=\"#网络吞吐量-Network-Throughput\" class=\"headerlink\" title=\"网络吞吐量 Network Throughput\"></a>网络吞吐量 Network Throughput</h2><p><strong>10Mbit带宽，每秒传输的字节数1.25MBytes</strong></p>\n<p>网络吞吐量是指在无网络故障的情况下单位时间内通过的网络的数据数量。单位为Byte&#x2F;s。网络吞吐量指标用于衡量系统对于网络设备或链路传输能力的需求。当网络吞吐量指标接近网络设备或链路最大传输能力时，则需要考虑升级网络设备。</p>\n<p>网络吞吐量指标主要有每秒有多少兆流量进出，一般情况下不能超过设备或链路最大传输能力的70%。</p>\n<h1 id=\"性能测试基本流程\"><a href=\"#性能测试基本流程\" class=\"headerlink\" title=\"性能测试基本流程\"></a>性能测试基本流程</h1><p><img src=\"/pictures/08JMeter/image-20230103174138051.png\" alt=\"image-20230103174138051\"></p>\n<p>性能测试需求:</p>\n<ol>\n<li><p>最终用户体验，例如2-5-10原则，即按照正常用户体验，如果用户能够在2秒内得到响应，会感觉速度很快，如果2-5秒得到响应，用户感觉系统的响应速度还不多，在5-10秒之内得到响应时，用户会感觉系统的响应速度慢，但是可以接受，超过10秒后还没有响应，用户就会感觉不能够接受。</p>\n</li>\n<li><p>技术需求, cpu，内存，网络吞吐量，磁盘吞吐量</p>\n</li>\n<li><p>标准要求:</p>\n<p>竞品分析-</p>\n<p>响应时间</p>\n</li>\n</ol>\n<ul>\n<li><p>互联网企业：500毫秒以下，例如淘宝业务10毫秒左右。</p>\n</li>\n<li><p>金融企业：1秒以下为佳，部分复杂业务3秒以下。</p>\n</li>\n<li><p>保险企业：3秒以下为佳。</p>\n</li>\n<li><p>制造业：5秒以下为佳。</p>\n<p>TPS</p>\n</li>\n<li><p>金融行业：1000TPS~9000TPS，不包括互联网化的活动</p>\n</li>\n<li><p>保险行业：100TPS~1000TPS，不包括互联网化的活动</p>\n</li>\n<li><p>制造行业：10TPS~50TPS</p>\n</li>\n<li><p>互联网电子商务：10000TPS~100000TPS,例如天猫5万TPS</p>\n</li>\n<li><p>互联网中型网站：100TPS~500TPS</p>\n</li>\n<li><p>互联网小型网站: 50TPS~100TPS</p>\n<p>性能测试计划</p>\n</li>\n</ul>\n<p>测试环境，测试需求，测试方法，测试时间表，测试组织架构，测试风险，输入输出文档</p>\n<p>性能测试步骤:</p>\n<p><img src=\"/pictures/08JMeter/image-20230103174223823.png\"></p>\n<p>性能测试执行</p>\n<p><img src=\"/pictures/08JMeter/image-20230103174207519.png\"></p>\n<h1 id=\"性能测试工具\"><a href=\"#性能测试工具\" class=\"headerlink\" title=\"性能测试工具\"></a>性能测试工具</h1><p><img src=\"/pictures/08JMeter/image-20230103174236971.png\"></p>\n<h1 id=\"Jmeter简介\"><a href=\"#Jmeter简介\" class=\"headerlink\" title=\"Jmeter简介\"></a>Jmeter简介</h1><h2 id=\"Jmeter的基本概念\"><a href=\"#Jmeter的基本概念\" class=\"headerlink\" title=\"Jmeter的基本概念\"></a>Jmeter的基本概念</h2><p>Apache JMeter是Apache组织开发的基于Java的压力测试工具。用于对软件做压力测试，它最初被设计用于Web应用测试，但后来扩展到其他测试领域。 它可以用于测试静态和动态资源，例如静态文件、Java 小服务程序、CGI 脚本、Java 对象、数据库、FTP 服务器， 等等。JMeter 可以用于对服务器、网络或对象模拟巨大的负载，来自不同压力类别下测试它们的强度和分析整体性能。另外，JMeter能够对应用程序做功能&#x2F;回归测试，通过创建带有断言的脚本来验证你的程序返回了你期望的结果。为了最大限度的灵活性，JMeter允许使用正则表达式创建断言</p>\n<h2 id=\"我们为什么使用Jmeter\"><a href=\"#我们为什么使用Jmeter\" class=\"headerlink\" title=\"我们为什么使用Jmeter\"></a>我们为什么使用Jmeter</h2><p>开源免费还很好用，基于Java编写，可集成到其他系统可拓展各个功能插件</p>\n<p>支持接口测试，压力（负载和压力）测试等多种功能，支持录制回放，入门简单</p>\n<p>相较于自己编写框架活其他开源工具，有较为完善的UI界面，便于接口调试</p>\n<p>多平台支持，可在Linux，Windows，Mac上运行</p>\n<h1 id=\"Jmeter安装配置及目录结构\"><a href=\"#Jmeter安装配置及目录结构\" class=\"headerlink\" title=\"Jmeter安装配置及目录结构\"></a>Jmeter安装配置及目录结构</h1><h2 id=\"Windows下Jmeter下载安装\"><a href=\"#Windows下Jmeter下载安装\" class=\"headerlink\" title=\"Windows下Jmeter下载安装\"></a>Windows下Jmeter下载安装</h2><p><a href=\"http://jmeter.apache.org/download_jmeter.cgi\">登录官网</a> ，根据自己平台，下载对应文件</p>\n<p><img src=\"/pictures/08JMeter/image-20230103174419336.png\"></p>\n<p><img src=\"/pictures/08JMeter/image-20230103174430456.png\"></p>\n<p><img src=\"/pictures/08JMeter/image-20230103174437006.png\"></p>\n<p>安装JDK，配置环境变量（具体步骤不做介绍）</p>\n<p>将下载Jmeter文件解压，打开&#x2F;bin&#x2F;jmeter.bat</p>\n<p><img src=\"/pictures/08JMeter/image-20230103174557321.png\"></p>\n<p><img src=\"/pictures/08JMeter/image-20230103174657692.png\"></p>\n<h2 id=\"Jmeter的目录结构\"><a href=\"#Jmeter的目录结构\" class=\"headerlink\" title=\"Jmeter的目录结构\"></a>Jmeter的目录结构</h2><p>SourceURL:file:&#x2F;&#x2F;&#x2F;home&#x2F;babyfengfjx&#x2F;Downloads&#x2F;JMeter操作手册大全.docx</p>\n<p>&#x2F;bin 目录（常用文件介绍）</p>\n<p>examples：目录下包含Jmeter使用实例</p>\n<p>ApacheJMeter.jar：JMeter源码包</p>\n<p>jmeter.bat：windows下启动文件</p>\n<p>jmeter.sh：Linux下启动文件</p>\n<p>jmeter.log：Jmeter运行日志文件</p>\n<p>jmeter.properties：Jmeter配置文件</p>\n<p>jmeter-server.bat：windows下启动负载生成器服务文件</p>\n<p>jmeter-server：Linux下启动负载生成器文件</p>\n<p>&#x2F;docs目录——Jmeter帮助文档</p>\n<p>&#x2F;extras目录——提供了对Ant的支持文件，可也用于持续集成</p>\n<p>&#x2F;lib目录——存放Jmeter依赖的jar包，同时安装插件也放于此目录</p>\n<p>&#x2F;licenses目录——软件许可文件，不用管</p>\n<p>&#x2F;printable_docs目录——Jmeter用户手册</p>\n<h1 id=\"Jmeter简单入门\"><a href=\"#Jmeter简单入门\" class=\"headerlink\" title=\"Jmeter简单入门\"></a>Jmeter简单入门</h1><h2 id=\"修改语言\"><a href=\"#修改语言\" class=\"headerlink\" title=\"修改语言\"></a>修改语言</h2><p><img src=\"/pictures/08JMeter/image-20230103174825289.png\"></p>\n<h2 id=\"创建测试计划\"><a href=\"#创建测试计划\" class=\"headerlink\" title=\"创建测试计划\"></a>创建测试计划</h2><p><img src=\"/pictures/08JMeter/image-20230103174843945.png\"></p>\n<h2 id=\"添加线程组\"><a href=\"#添加线程组\" class=\"headerlink\" title=\"添加线程组\"></a>添加线程组</h2><p><img src=\"/pictures/08JMeter/image-20230103174901916.png\"></p>\n<h2 id=\"添加sampler设置http请求\"><a href=\"#添加sampler设置http请求\" class=\"headerlink\" title=\"添加sampler设置http请求\"></a>添加sampler设置http请求</h2><p><img src=\"/pictures/08JMeter/image-20230103175006565.png\"></p>\n<h2 id=\"添加结果树\"><a href=\"#添加结果树\" class=\"headerlink\" title=\"添加结果树\"></a>添加结果树</h2><p><img src=\"/pictures/08JMeter/image-20230103175024887.png\"></p>\n<h2 id=\"查看结果\"><a href=\"#查看结果\" class=\"headerlink\" title=\"查看结果\"></a>查看结果</h2><p><img src=\"/pictures/08JMeter/image-20230103175048590.png\"></p>\n<h1 id=\"测试计划\"><a href=\"#测试计划\" class=\"headerlink\" title=\"测试计划\"></a>测试计划</h1><p><img src=\"/pictures/08JMeter/image-20230103175428021.png\"></p>\n<p>独立运行每个线程组：</p>\n<p>再每一组运行结束后启动下一个</p>\n<p>Run tearDown Thread Groups after shutdown of main threads：  </p>\n<p>主线程关闭运行后拆除线程组，</p>\n<h1 id=\"线程组\"><a href=\"#线程组\" class=\"headerlink\" title=\"线程组\"></a>线程组</h1><p><img src=\"/pictures/08JMeter/image-20230104092545954.png\"></p>\n<p>Delay Thread creation until needed         <br>      延迟创建线程，直到该线程开始采样，即之后的任何线程组延迟和加速时间为线程本身。这样可以支持更多的线程，但不会有太多是同时处于活动状态。</p>\n<p> 持续时间（秒）：测试计划持续多长时间，会覆盖结束时间。</p>\n<p> 启动延迟（秒）：测试计划延迟多长时间启动，会覆盖启动时间。</p>\n<h1 id=\"Sampler-HTTP请求\"><a href=\"#Sampler-HTTP请求\" class=\"headerlink\" title=\"Sampler --HTTP请求\"></a>Sampler --HTTP请求</h1><p><img src=\"/pictures/08JMeter/image-20230104092628654.png\"></p>\n<p>请求方式</p>\n<p>请求路径</p>\n<p>请求ip</p>\n<p>请求协议</p>\n<p>请求编码</p>\n<p><img src=\"/pictures/08JMeter/image-20230104092652159.png\"></p>\n<p>重定向之前的和之后的请求都会在结果树中显示出来</p>\n<p><img src=\"/pictures/08JMeter/image-20230104092707205.png\"></p>\n<p>自动重定向，只会显示重定向之后的地址。</p>\n<p><img src=\"/pictures/08JMeter/image-20230104092735864.png\"></p>\n<h1 id=\"结果收集\"><a href=\"#结果收集\" class=\"headerlink\" title=\"结果收集\"></a>结果收集</h1><h2 id=\"查看结果树\"><a href=\"#查看结果树\" class=\"headerlink\" title=\"查看结果树\"></a>查看结果树</h2><p><img src=\"/pictures/08JMeter/image-20230104092807270.png\"></p>\n<h2 id=\"表格查看结果\"><a href=\"#表格查看结果\" class=\"headerlink\" title=\"表格查看结果\"></a>表格查看结果</h2><p><img src=\"/pictures/08JMeter/image-20230104092825613.png\"></p>\n<p>偏离表示服务器响应时间变化、离散程度测量值的大小，或者，换句话说，就是数据的分布。</p>\n<h2 id=\"聚合报告\"><a href=\"#聚合报告\" class=\"headerlink\" title=\"聚合报告\"></a>聚合报告</h2><p><img src=\"/pictures/08JMeter/image-20230104092842121.png\"></p>\n<h2 id=\"Summary-Report\"><a href=\"#Summary-Report\" class=\"headerlink\" title=\"Summary Report\"></a>Summary Report</h2><p><img src=\"/pictures/08JMeter/image-20230104092857441.png\"></p>\n<h1 id=\"Jmeter参数化\"><a href=\"#Jmeter参数化\" class=\"headerlink\" title=\"Jmeter参数化\"></a>Jmeter参数化</h1><h2 id=\"用户定义的变量\"><a href=\"#用户定义的变量\" class=\"headerlink\" title=\"用户定义的变量\"></a>用户定义的变量</h2><p>使用配置原件中用户定义的变量可以进行参数化</p>\n<p><img src=\"/pictures/08JMeter/image-20230104092916211.png\"></p>\n<h2 id=\"用户参数\"><a href=\"#用户参数\" class=\"headerlink\" title=\"用户参数\"></a>用户参数</h2><p>使用前置管理器设置用户参数</p>\n<p><img src=\"/pictures/08JMeter/image-20230104092938544.png\"></p>\n<h2 id=\"使用csv配置原件\"><a href=\"#使用csv配置原件\" class=\"headerlink\" title=\"使用csv配置原件\"></a>使用csv配置原件</h2><p>配置元件(Config Element)维护Sampler需要的配置信息，并根据实际的需要会修改请求的内容。我们主要在参数化中用到CSV Data Set Config<img src=\"/pictures/08JMeter/image-20230104092956569.png\"></p>\n<h2 id=\"使用随机函数助手\"><a href=\"#使用随机函数助手\" class=\"headerlink\" title=\"使用随机函数助手\"></a>使用随机函数助手</h2><h3 id=\"生成随机字符串\"><a href=\"#生成随机字符串\" class=\"headerlink\" title=\"生成随机字符串\"></a>生成随机字符串</h3><p><img src=\"/pictures/08JMeter/image-20230104093024788.png\"></p>\n<h3 id=\"生成随机数字\"><a href=\"#生成随机数字\" class=\"headerlink\" title=\"生成随机数字\"></a>生成随机数字</h3><p><img src=\"/pictures/08JMeter/image-20230104094422449.png\"></p>\n<h3 id=\"参数引用\"><a href=\"#参数引用\" class=\"headerlink\" title=\"参数引用\"></a>参数引用</h3><p><img src=\"/pictures/08JMeter/image-20230104094437099.png\"></p>\n<h1 id=\"Jmeter断言-检查点\"><a href=\"#Jmeter断言-检查点\" class=\"headerlink\" title=\"Jmeter断言--检查点\"></a>Jmeter断言--检查点</h1><p>断言(Assertions)可以用来判断请求响应的结果是否如用户所期望的。它可以用来隔离问题域，即在确保功能正确的前提下执行压力测试。这个限制对于有效的测试是非常有用的。</p>\n<p>设置响应内容监听</p>\n<p><img src=\"/pictures/08JMeter/image-20230104094455677.png\"></p>\n<p>设置响应头断言</p>\n<p><img src=\"/pictures/08JMeter/image-20230104094516722.png\"></p>\n<h1 id=\"Jmeter定时器\"><a href=\"#Jmeter定时器\" class=\"headerlink\" title=\"Jmeter定时器\"></a>Jmeter定时器</h1><h2 id=\"固定定时器\"><a href=\"#固定定时器\" class=\"headerlink\" title=\"固定定时器\"></a>固定定时器</h2><p>定时器(Timer)负责定义请求之间的延迟间隔</p>\n<p><img src=\"/pictures/08JMeter/image-20230104094539586.png\"></p>\n<h2 id=\"高斯定时器\"><a href=\"#高斯定时器\" class=\"headerlink\" title=\"高斯定时器\"></a>高斯定时器</h2><p><img src=\"/pictures/08JMeter/image-20230104094605360.png\"></p>\n<h2 id=\"同步定时器（Synchronizing-Timer）\"><a href=\"#同步定时器（Synchronizing-Timer）\" class=\"headerlink\" title=\"同步定时器（Synchronizing Timer）\"></a><strong>同步定时器（Synchronizing Timer）</strong></h2><p><img src=\"/pictures/08JMeter/image-20230104094622810.png\"></p>\n<h1 id=\"Jmeter配置原件\"><a href=\"#Jmeter配置原件\" class=\"headerlink\" title=\"Jmeter配置原件\"></a>Jmeter配置原件</h1><h2 id=\"HTTP-Cookie管理器\"><a href=\"#HTTP-Cookie管理器\" class=\"headerlink\" title=\"HTTP Cookie管理器\"></a>HTTP Cookie管理器</h2><p>默认保存cookie信息</p>\n<p><img src=\"/pictures/08JMeter/image-20230104094646033.png\"></p>\n<h2 id=\"HTTP信息头管理器\"><a href=\"#HTTP信息头管理器\" class=\"headerlink\" title=\"HTTP信息头管理器\"></a>HTTP信息头管理器</h2><p>默认保存常规的请求头</p>\n<p><img src=\"/pictures/08JMeter/image-20230104094701081.png\"></p>\n<h2 id=\"HTTP-Cache管理器\"><a href=\"#HTTP-Cache管理器\" class=\"headerlink\" title=\"HTTP Cache管理器\"></a>HTTP Cache管理器</h2><p>默认管理http请求缓存的信息</p>\n<p><img src=\"/pictures/08JMeter/image-20230104094718002.png\"></p>\n<h2 id=\"HTTP-请求默认值\"><a href=\"#HTTP-请求默认值\" class=\"headerlink\" title=\"HTTP 请求默认值\"></a>HTTP 请求默认值</h2><p>可以设置http请求的默认值，在单个的请求中不需要再设置其他内容</p>\n<p><img src=\"/pictures/08JMeter/image-20230104094737517.png\"></p>\n<h1 id=\"Jmeter逻辑控制器\"><a href=\"#Jmeter逻辑控制器\" class=\"headerlink\" title=\"Jmeter逻辑控制器\"></a>Jmeter逻辑控制器</h1><h2 id=\"简单控制器\"><a href=\"#简单控制器\" class=\"headerlink\" title=\"简单控制器\"></a>简单控制器</h2><p>作用：这是Jmeter里最简单的一个控制器，它可以让我们组织我们的采样器和其它的逻辑控制器（分组功能），提供一个块的结构和控制，并不具有任何的逻辑控制或运行时的功能。</p>\n<p><img src=\"/pictures/08JMeter/image-20230104094756958.png\"></p>\n<p><img src=\"/pictures/08JMeter/image-20230104094816885.png\"></p>\n<h2 id=\"循环控制器\"><a href=\"#循环控制器\" class=\"headerlink\" title=\"循环控制器\"></a>循环控制器</h2><p>在之前基础上再去循环,线程10,迭代1,一共十次,放到循环控制器可以多次x请求,用于在某一组中对哪些请求循环执行</p>\n<p><img src=\"/pictures/08JMeter/image-20230104094909398.png\"></p>\n<p><img src=\"/pictures/08JMeter/image-20230104094926170.png\"></p>\n<h2 id=\"事务控制器\"><a href=\"#事务控制器\" class=\"headerlink\" title=\"事务控制器\"></a>事务控制器</h2><p>在线程组下创建事务控制器</p>\n<p><img src=\"/pictures/08JMeter/image-20230104094947187.png\"></p>\n<p>创建sample 访问首页和注册页面,放到事务中</p>\n<p><img src=\"/pictures/08JMeter/image-20230104095110900.png\"></p>\n<h1 id=\"Jmeter关联-后置处理器\"><a href=\"#Jmeter关联-后置处理器\" class=\"headerlink\" title=\"Jmeter关联-后置处理器\"></a>Jmeter关联-后置处理器</h1><h2 id=\"正则表达式提取\"><a href=\"#正则表达式提取\" class=\"headerlink\" title=\"正则表达式提取\"></a>正则表达式提取</h2><p><img src=\"/pictures/08JMeter/image-20230104095127103.png\"></p>\n<p><strong>位置1</strong>：名称及注释</p>\n<p><strong>位置2</strong>：正则表达式提取内容的范围。（关于各字段的详细说明请查阅协议的相关说明）</p>\n<p><strong>位置3</strong>：正则表达式提取的相关设置</p>\n<ul>\n<li><p><strong>引用名称</strong>：自己定义的变量名称，后续<strong>请求</strong>将要引用到的<strong>变量名</strong>,如填写的是：user_id，后面的引用方式是${user_id}</p>\n</li>\n<li><p><strong>正则表达式</strong>：提取内容的正则表达式，相当于lr中的关联函数</p>\n</li>\n<li><p>()     括起来的部分就是需要提取的，对于你要提的内容需要用小括号括起来</p>\n</li>\n<li><p>.    点号表示匹配任何字符串</p>\n</li>\n<li><p>+   一次或多次</p>\n</li>\n<li><p>？   在找到第一个匹配项后停止</p>\n</li>\n<li><p><strong>模板</strong>：用$$引用起来，如果在正则表达式中有多个正则表达式（多个括号括起来的东东），则可以是$2$，$3$等等，表示解析到的第几个值给user_id。例如：$1$表示匹配到的第一个值</p>\n</li>\n<li><p><strong>匹配数字</strong>：0代表随机取值，-1代表所有值，此时提取结果是一个数组，其余正整数代表第几个匹配的内容提取出来。如果匹配数字选择的是-1，还可以通过${user_id_1}的方式来取第1个匹配的内容，${user_id_2}来取第2个匹配的内容。 </p>\n</li>\n<li><p>缺省值：正则匹配失败时，取的值</p>\n</li>\n</ul>\n<h2 id=\"使用debug-Sampler获取参数的名称\"><a href=\"#使用debug-Sampler获取参数的名称\" class=\"headerlink\" title=\"使用debug Sampler获取参数的名称\"></a>使用debug Sampler获取参数的名称</h2><p><img src=\"/pictures/08JMeter/image-20230104095144838.png\"></p>\n<h2 id=\"参数化获取参数内容\"><a href=\"#参数化获取参数内容\" class=\"headerlink\" title=\"参数化获取参数内容\"></a>参数化获取参数内容</h2><p><img src=\"/pictures/08JMeter/image-20230104095202731.png\"></p>\n<h1 id=\"元件的执行顺序\"><a href=\"#元件的执行顺序\" class=\"headerlink\" title=\"元件的执行顺序\"></a>元件的执行顺序</h1><p><img src=\"/pictures/08JMeter/image-20230104095219503.png\"></p>\n<p>顺序:</p>\n<p>HTTP Cookie管理器</p>\n<p>HTTP Cache Manager</p>\n<p>HTTP 信息头管理器</p>\n<p>HTTP 请求默认值</p>\n<p>用户参数</p>\n<p>固定定时器</p>\n<p>简单控制器</p>\n<p>第一个请求</p>\n<p>HTTP Cookie管理器</p>\n<p>HTTP Cache Manager</p>\n<p>HTTP 信息头管理器</p>\n<p>HTTP 请求默认值</p>\n<p>用户参数</p>\n<p>固定定时器</p>\n<p>第二个请求</p>\n<p>响应断言</p>\n<p>正则表达式提取器</p>\n<p>查看结果树</p>\n<h1 id=\"Jmeter添加插件\"><a href=\"#Jmeter添加插件\" class=\"headerlink\" title=\"Jmeter添加插件\"></a>Jmeter添加插件</h1><p>Jmeter本身是不能够展示内存，cpu和吞吐量的，但是可以通过添加插件的方式来对jmeter添加这些功能</p>\n<p><img src=\"/pictures/08JMeter/image-20230104095234652.png\"></p>\n<h2 id=\"打开Jmeter，查看是否有插件管理器\"><a href=\"#打开Jmeter，查看是否有插件管理器\" class=\"headerlink\" title=\"打开Jmeter，查看是否有插件管理器\"></a>打开Jmeter，查看是否有插件管理器</h2><p><img src=\"/pictures/08JMeter/image-20230104095258849.png\"></p>\n<p><img src=\"/pictures/08JMeter/image-20230104095321272.png\"></p>\n<p>不一定一次成功</p>\n<h2 id=\"场景控制插件\"><a href=\"#场景控制插件\" class=\"headerlink\" title=\"场景控制插件\"></a>场景控制插件</h2><h3 id=\"Stepping-Thread-Group\"><a href=\"#Stepping-Thread-Group\" class=\"headerlink\" title=\"Stepping Thread Group\"></a>Stepping Thread Group</h3><p><img src=\"/pictures/08JMeter/image-20230104095409344.png\"></p>\n<h3 id=\"设置启动场景\"><a href=\"#设置启动场景\" class=\"headerlink\" title=\"设置启动场景\"></a>设置启动场景</h3><p><img src=\"/pictures/08JMeter/image-20230104095421303.png\"></p>\n<h2 id=\"结果监听插件\"><a href=\"#结果监听插件\" class=\"headerlink\" title=\"结果监听插件\"></a>结果监听插件</h2><p><img src=\"/pictures/08JMeter/image-20230104095440597.png\"></p>\n<p><img src=\"/pictures/08JMeter/image-20230104095453077.png\"></p>\n<p><img src=\"/pictures/08JMeter/image-20230104095511561.png\"></p>\n<p><img src=\"/pictures/08JMeter/image-20230104095533363.png\"></p>\n<p><img src=\"/pictures/08JMeter/image-20230104095917593.png\"></p>\n<p><img src=\"/pictures/08JMeter/image-20230104095932798.png\"></p>\n<p><img src=\"/pictures/08JMeter/image-20230104100053253.png\"></p>\n<h1 id=\"Jmeter脚本录制\"><a href=\"#Jmeter脚本录制\" class=\"headerlink\" title=\"Jmeter脚本录制\"></a>Jmeter脚本录制</h1><h2 id=\"什么是脚本录制\"><a href=\"#什么是脚本录制\" class=\"headerlink\" title=\"什么是脚本录制\"></a>什么是脚本录制</h2><p>在进行测试的时候，可能有好多脚本或者界面需要操作测试，并且有些测试链接需要重复多线程高并发进行测试，我们一般会针对这一些操作，进行一个脚本录制，录制好之后，之后测试就可以在这个基础上进行测试。</p>\n<h2 id=\"Jemeter脚本录制方式\"><a href=\"#Jemeter脚本录制方式\" class=\"headerlink\" title=\"Jemeter脚本录制方式\"></a>Jemeter脚本录制方式</h2><p>BadBoy脚本录制</p>\n<p>使用Jmeter自带的代理服务器进行脚本录制</p>\n<h1 id=\"使用Jmeter自带的代理服务器进行脚本录制\"><a href=\"#使用Jmeter自带的代理服务器进行脚本录制\" class=\"headerlink\" title=\"使用Jmeter自带的代理服务器进行脚本录制\"></a>使用Jmeter自带的代理服务器进行脚本录制</h1><h2 id=\"在测试计划上创建线程组\"><a href=\"#在测试计划上创建线程组\" class=\"headerlink\" title=\"在测试计划上创建线程组\"></a>在测试计划上创建线程组</h2><p><img src=\"/pictures/08JMeter/image-20230104100121708.png\"></p>\n<h2 id=\"添加录制控制器\"><a href=\"#添加录制控制器\" class=\"headerlink\" title=\"添加录制控制器\"></a>添加录制控制器</h2><p><img src=\"/pictures/08JMeter/image-20230104100133886.png\" alt=\"image-20230104100133886\"></p>\n<h2 id=\"在工作台上添加http代理服务器\"><a href=\"#在工作台上添加http代理服务器\" class=\"headerlink\" title=\"在工作台上添加http代理服务器\"></a>在工作台上添加http代理服务器</h2><p><img src=\"/pictures/08JMeter/image-20230104100207529.png\"></p>\n<h2 id=\"配置Http代理服务器\"><a href=\"#配置Http代理服务器\" class=\"headerlink\" title=\"配置Http代理服务器\"></a>配置Http代理服务器</h2><p><img src=\"/pictures/08JMeter/image-20230104100221519.png\"></p>\n<h2 id=\"配置浏览器\"><a href=\"#配置浏览器\" class=\"headerlink\" title=\"配置浏览器\"></a>配置浏览器</h2><h3 id=\"Google浏览器\"><a href=\"#Google浏览器\" class=\"headerlink\" title=\"Google浏览器\"></a>Google浏览器</h3><p><img src=\"/pictures/08JMeter/image-20230104100253418.png\"></p>\n<p><img src=\"/pictures/08JMeter/image-20230104100306738.png\"></p>\n<p><img src=\"/pictures/08JMeter/image-20230104100329839.png\"></p>\n<h3 id=\"火狐浏览器\"><a href=\"#火狐浏览器\" class=\"headerlink\" title=\"火狐浏览器\"></a>火狐浏览器</h3><p><img src=\"/pictures/08JMeter/image-20230104100347408.png\"></p>\n<p><img src=\"/pictures/08JMeter/image-20230104100355679.png\"></p>\n<h2 id=\"浏览器请求测试\"><a href=\"#浏览器请求测试\" class=\"headerlink\" title=\"浏览器请求测试\"></a>浏览器请求测试</h2><p><img src=\"/pictures/08JMeter/image-20230104100426913.png\"></p>\n<h2 id=\"过滤信息\"><a href=\"#过滤信息\" class=\"headerlink\" title=\"过滤信息\"></a>过滤信息</h2><p>添加如下内容</p>\n<p>.*\\.js.*|.*\\.css.*|.*\\.png.*|.*\\.jpg.*|.*\\.gif.*|.*\\.bmp.*</p>\n<p><img src=\"/pictures/08JMeter/image-20230104100447101.png\"></p>\n<p><img src=\"/pictures/08JMeter/image-20230104100500830.png\"></p>\n<h1 id=\"Android手机端脚本录制\"><a href=\"#Android手机端脚本录制\" class=\"headerlink\" title=\"Android手机端脚本录制\"></a>Android手机端脚本录制</h1><h2 id=\"查看电脑IP\"><a href=\"#查看电脑IP\" class=\"headerlink\" title=\"查看电脑IP\"></a>查看电脑IP</h2><p><img src=\"/pictures/08JMeter/image-20230104100513719.png\"></p>\n<h2 id=\"配置手机网路连接\"><a href=\"#配置手机网路连接\" class=\"headerlink\" title=\"配置手机网路连接\"></a>配置手机网路连接</h2><p><img src=\"/pictures/08JMeter/image-20230104100534974.png\"></p>\n<p><img src=\"/pictures/08JMeter/image-20230104100600278.png\"></p>\n<h2 id=\"手机访问app\"><a href=\"#手机访问app\" class=\"headerlink\" title=\"手机访问app\"></a>手机访问app</h2><p><img src=\"/pictures/08JMeter/image-20230104100620418.png\"></p>\n<p><img src=\"/pictures/08JMeter/image-20230104100635987.png\"></p>\n<h2 id=\"模拟登陆操作\"><a href=\"#模拟登陆操作\" class=\"headerlink\" title=\"模拟登陆操作\"></a>模拟登陆操作</h2><p><img src=\"/pictures/08JMeter/image-20230104100650698.png\"></p>\n<p><img src=\"/pictures/08JMeter/image-20230104100705102.png\"></p>\n<h2 id=\"执行结束之后，停止脚本录制\"><a href=\"#执行结束之后，停止脚本录制\" class=\"headerlink\" title=\"执行结束之后，停止脚本录制\"></a>执行结束之后，停止脚本录制</h2><p><img src=\"/pictures/08JMeter/image-20230104100722577.png\"></p>\n<h2 id=\"脚本测试-线程组设置10个线程分别请求10次\"><a href=\"#脚本测试-线程组设置10个线程分别请求10次\" class=\"headerlink\" title=\"脚本测试-线程组设置10个线程分别请求10次\"></a>脚本测试-线程组设置10个线程分别请求10次</h2><p><img src=\"/pictures/08JMeter/image-20230104100737832.png\"></p>\n<h2 id=\"查看结果树-1\"><a href=\"#查看结果树-1\" class=\"headerlink\" title=\"查看结果树\"></a>查看结果树</h2><p><img src=\"/pictures/08JMeter/image-20230104100757522.png\"></p>\n<h1 id=\"BadBoy脚本录制\"><a href=\"#BadBoy脚本录制\" class=\"headerlink\" title=\"BadBoy脚本录制\"></a>BadBoy脚本录制</h1><h2 id=\"安装badboy脚本软件\"><a href=\"#安装badboy脚本软件\" class=\"headerlink\" title=\"安装badboy脚本软件\"></a>安装badboy脚本软件</h2><p>傻瓜式安装即可</p>\n<h2 id=\"打开badboy软件\"><a href=\"#打开badboy软件\" class=\"headerlink\" title=\"打开badboy软件\"></a>打开badboy软件</h2><p><img src=\"/pictures/08JMeter/image-20230104100818008.png\"></p>\n<h2 id=\"badboy脚本录制\"><a href=\"#badboy脚本录制\" class=\"headerlink\" title=\"badboy脚本录制\"></a>badboy脚本录制</h2><p>点击录制按钮进行脚本录制，完成打开搜狗搜索，搜索zhiyuan0932操作，然后停止，回放，（回放的时候，会因为编码原因导致乱码，需要手动调乱码问题）</p>\n<p><img src=\"/pictures/08JMeter/image-20230104100832454.png\"></p>\n<p><img src=\"/pictures/08JMeter/image-20230104100856535.png\"></p>\n<p><img src=\"/pictures/08JMeter/image-20230104100908487.png\"></p>\n<p><img src=\"/pictures/08JMeter/image-20230104100917874.png\"></p>\n<h2 id=\"添加验证点\"><a href=\"#添加验证点\" class=\"headerlink\" title=\"添加验证点\"></a>添加验证点</h2><p>验证点的作用就是验证脚本是否按照我们测试的思路执行，判断脚本执行过程中是否存现问题</p>\n<p><img src=\"/pictures/08JMeter/image-20230104100933098.png\"></p>\n<h2 id=\"badboy参数化\"><a href=\"#badboy参数化\" class=\"headerlink\" title=\"badboy参数化\"></a>badboy参数化</h2><p>所谓参数化，是指请求的某个参数提前设定多个值，在具体请求的时候，去获取提前设定的值，不同的业务场景设置的参数不一致。</p>\n<p><img src=\"/pictures/08JMeter/image-20230104100952874.png\"></p>\n<p><img src=\"/pictures/08JMeter/image-20230104101000440.png\"></p>\n<p><img src=\"/pictures/08JMeter/image-20230104101007977.png\"></p>\n<p><img src=\"/pictures/08JMeter/image-20230104101015465.png\"></p>\n<h2 id=\"导出Jmeter脚本\"><a href=\"#导出Jmeter脚本\" class=\"headerlink\" title=\"导出Jmeter脚本\"></a>导出Jmeter脚本</h2><p><img src=\"/pictures/08JMeter/image-20230104101031073.png\"></p>\n<h2 id=\"在Jmeter中导入badboy生成的脚本，验证测试\"><a href=\"#在Jmeter中导入badboy生成的脚本，验证测试\" class=\"headerlink\" title=\"在Jmeter中导入badboy生成的脚本，验证测试\"></a>在Jmeter中导入badboy生成的脚本，验证测试</h2><p><img src=\"/pictures/08JMeter/image-20230104101040623.png\"></p>\n<h2 id=\"badboy并发测试\"><a href=\"#badboy并发测试\" class=\"headerlink\" title=\"badboy并发测试\"></a>badboy并发测试</h2><p>本身是能做接口测试和压力测试的,并且能兼容jemeter</p>\n<p>选择tools run background</p>\n<p><img src=\"/pictures/08JMeter/image-20230104101050000.png\"></p>\n<h2 id=\"badboy测试报告\"><a href=\"#badboy测试报告\" class=\"headerlink\" title=\"badboy测试报告\"></a>badboy测试报告</h2><p>在badboy--&gt;view---&gt;report下可以看到测试报告</p>\n<p><img src=\"/pictures/08JMeter/image-20230104101059830.png\"></p>\n<h1 id=\"Jmeter数据库压力测试\"><a href=\"#Jmeter数据库压力测试\" class=\"headerlink\" title=\"Jmeter数据库压力测试\"></a>Jmeter数据库压力测试</h1><h2 id=\"先配置jdbc驱动\"><a href=\"#先配置jdbc驱动\" class=\"headerlink\" title=\"先配置jdbc驱动\"></a>先配置jdbc驱动</h2><p><img src=\"/pictures/08JMeter/image-20230104101134264.png\"></p>\n<p>添加上jar后,在测试计划添加配置原件,jdbc进行配置</p>\n<p><img src=\"/pictures/08JMeter/image-20230104101200409.png\"></p>\n<p>添加操作数据库请求 samplerjdbcRequest</p>\n<h2 id=\"数据库普通查询操作\"><a href=\"#数据库普通查询操作\" class=\"headerlink\" title=\"数据库普通查询操作\"></a>数据库普通查询操作</h2><p><img src=\"/pictures/08JMeter/image-20230104101354190.png\"></p>\n<h2 id=\"Jmeter预编译参数查询方式\"><a href=\"#Jmeter预编译参数查询方式\" class=\"headerlink\" title=\"Jmeter预编译参数查询方式\"></a>Jmeter预编译参数查询方式</h2><p><img src=\"/pictures/08JMeter/image-20230104101402444.png\"></p>\n<h2 id=\"ForEach控制器循环请求\"><a href=\"#ForEach控制器循环请求\" class=\"headerlink\" title=\"ForEach控制器循环请求\"></a>ForEach控制器循环请求</h2><p><img src=\"/pictures/08JMeter/image-20230104101410482.png\"></p>\n<h2 id=\"JDBC预编译方式修改数据\"><a href=\"#JDBC预编译方式修改数据\" class=\"headerlink\" title=\"JDBC预编译方式修改数据\"></a>JDBC预编译方式修改数据</h2><h3 id=\"配置csv文件\"><a href=\"#配置csv文件\" class=\"headerlink\" title=\"配置csv文件\"></a>配置csv文件</h3><p><img src=\"/pictures/08JMeter/image-20230104101419180.png\"></p>\n<h3 id=\"修改数据\"><a href=\"#修改数据\" class=\"headerlink\" title=\"修改数据\"></a>修改数据</h3><p><img src=\"/pictures/08JMeter/image-20230104101428004.png\"></p>\n<h1 id=\"Jmeter压测接口的性能优化\"><a href=\"#Jmeter压测接口的性能优化\" class=\"headerlink\" title=\"Jmeter压测接口的性能优化\"></a>Jmeter压测接口的性能优化</h1><p>简介：讲解Jmeter压测减少资源使用的一些建议，即压测结果更准确</p>\n<p>1、使用非GUI模式：jmeter -n -t test.jmx -l result.jtl</p>\n<p>2、少使用Listener， 如果使用-l参数，它们都可以被删除或禁用。</p>\n<p>3、在加载测试期间不要使用”查看结果树”或”查看结果”表监听器，只能在脚本阶段使用它们来调试脚本。</p>\n<p>4、包含控制器在这里没有帮助，因为它将文件中的所有测试元素添加到测试计划中。</p>\n<p>5、不要使用功能模式,使用CSV输出而不是XML</p>\n<p>6、只保存你需要的数据,尽可能少地使用断言</p>\n<p>7、如果测试需要大量数据，可以提前准备好测试数据放到数据文件中，以CSV Read方式读取。</p>\n<p>8、用内网压测，减少其他带宽影响压测结果</p>\n<p>9、如果压测大流量，尽量用多几个节点以非GUI模式向服务器施压</p>\n<h1 id=\"Linux下运行jmeter压测\"><a href=\"#Linux下运行jmeter压测\" class=\"headerlink\" title=\"Linux下运行jmeter压测\"></a>Linux下运行jmeter压测</h1><p>我们在做测试的时候，有时候要运行很久，公司用的测试服务器一般都是linux，就可以运行在linux下面，linux下面不能像windows一样有图形化界面，那怎么运行脚本呢。</p>\n<h2 id=\"解压JDK8到Linux\"><a href=\"#解压JDK8到Linux\" class=\"headerlink\" title=\"解压JDK8到Linux\"></a>解压JDK8到Linux</h2><p>tar -xvf jdk-8u171-linux-i586.tar.gz -C &#x2F;usr&#x2F;local</p>\n<p>mv jdk-8u171-linux-i586 java</p>\n<p><img src=\"/pictures/08JMeter/image-20230104101441890.png\"></p>\n<h2 id=\"配置环境变量\"><a href=\"#配置环境变量\" class=\"headerlink\" title=\"配置环境变量\"></a>配置环境变量</h2><p>[root@localhost &#x2F;]# vim &#x2F;etc&#x2F;profile</p>\n<p>+———————————-+<br>| JAVA_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;java&#x2F;      |<br>|                                  |<br>| CLASSPATH&#x3D;$JAVA_HOME&#x2F;lib&#x2F;      |<br>|                                  |<br>| PATH&#x3D;$PATH:$JAVA_HOME&#x2F;bin     |<br>|                                  |<br>| export PATH JAVA_HOME CLASSPATH |<br>+———————————-+</p>\n<h2 id=\"刷新配置文件\"><a href=\"#刷新配置文件\" class=\"headerlink\" title=\"刷新配置文件\"></a>刷新配置文件</h2><p>source &#x2F;etc&#x2F;profile</p>\n<p>java -version</p>\n<h2 id=\"解压并安装jmeter4-0\"><a href=\"#解压并安装jmeter4-0\" class=\"headerlink\" title=\"解压并安装jmeter4.0\"></a>解压并安装jmeter4.0</h2><h2 id=\"配置jmeter环境变量\"><a href=\"#配置jmeter环境变量\" class=\"headerlink\" title=\"配置jmeter环境变量\"></a>配置jmeter环境变量</h2><h3 id=\"解压jmeter到usr-x2F-local\"><a href=\"#解压jmeter到usr-x2F-local\" class=\"headerlink\" title=\"解压jmeter到usr&#x2F;local\"></a>解压jmeter到usr&#x2F;local</h3><p><img src=\"/pictures/08JMeter/image-20230104101517327.png\"></p>\n<h3 id=\"启动Jmeter\"><a href=\"#启动Jmeter\" class=\"headerlink\" title=\"启动Jmeter\"></a>启动Jmeter</h3><p><img src=\"/pictures/08JMeter/image-20230104101524299.png\"></p>\n<h3 id=\"打开系统配置文件\"><a href=\"#打开系统配置文件\" class=\"headerlink\" title=\"打开系统配置文件\"></a>打开系统配置文件</h3><p>vim &#x2F;etc&#x2F;profile</p>\n<h3 id=\"配置环境变量-1\"><a href=\"#配置环境变量-1\" class=\"headerlink\" title=\"配置环境变量\"></a>配置环境变量</h3><p>+————————————+<br>| JMETER_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;jmeter&#x2F;    |<br>|                                    |<br>| CLASSPATH&#x3D;$JMETER_HOME&#x2F;lib&#x2F;      |<br>|                                    |<br>| PATH&#x3D;$PATH:$JMETER_HOME&#x2F;bin     |<br>|                                    |<br>| export PATH JMETER_HOME CLASSPATH |<br>+————————————+</p>\n<h3 id=\"刷新系统配置文件\"><a href=\"#刷新系统配置文件\" class=\"headerlink\" title=\"刷新系统配置文件\"></a>刷新系统配置文件</h3><p>source &#x2F;etc&#x2F;profile</p>\n<h3 id=\"执行jmeter\"><a href=\"#执行jmeter\" class=\"headerlink\" title=\"执行jmeter -?\"></a>执行jmeter -?</h3><p><img src=\"/pictures/08JMeter/image-20230104101538473.png\"></p>\n<h3 id=\"将windows上写好的脚本导入到Linux\"><a href=\"#将windows上写好的脚本导入到Linux\" class=\"headerlink\" title=\"将windows上写好的脚本导入到Linux\"></a>将windows上写好的脚本导入到Linux</h3><h3 id=\"进行测试\"><a href=\"#进行测试\" class=\"headerlink\" title=\"进行测试\"></a>进行测试</h3><p>非GUI界面，压测参数讲解</p>\n<p>-h 帮助</p>\n<p>-n 非GUI模式</p>\n<p>-t 指定要运行的 JMeter 测试脚本文件</p>\n<p>-l 记录结果的文件 每次运行之前，(要确保之前没有运行过,即xxx.jtl不存在，不然报错)</p>\n<p>-r Jmter.properties文件中指定的所有远程服务器</p>\n<p>-e 在脚本运行结束后生成html报告</p>\n<p>-o 用于存放html报告的目录（目录要为空，不然报错）</p>\n<p>jmeter -n –t a.jmx -l res.jtl</p>\n<p><img src=\"/pictures/08JMeter/image-20230104101551634.png\"></p>\n<h2 id=\"将测试结果导入到Jmeter中查看结果数据\"><a href=\"#将测试结果导入到Jmeter中查看结果数据\" class=\"headerlink\" title=\"将测试结果导入到Jmeter中查看结果数据\"></a>将测试结果导入到Jmeter中查看结果数据</h2><p><img src=\"/pictures/08JMeter/image-20230104101600808.png\"></p>\n<h1 id=\"Jmeter压测生成HTML测试报告\"><a href=\"#Jmeter压测生成HTML测试报告\" class=\"headerlink\" title=\"Jmeter压测生成HTML测试报告\"></a>Jmeter压测生成HTML测试报告</h1><p>创建文件夹</p>\n<p>mkdir result</p>\n<p>指令执行</p>\n<p>jmeter -n -t baidu.jmx -l res.jtl -e -o &#x2F;result</p>\n<h1 id=\"Jmeter-HTML报告dashboard讲解\"><a href=\"#Jmeter-HTML报告dashboard讲解\" class=\"headerlink\" title=\"Jmeter HTML报告dashboard讲解\"></a>Jmeter HTML报告dashboard讲解</h1><h2 id=\"Test-and-Report-informations\"><a href=\"#Test-and-Report-informations\" class=\"headerlink\" title=\"Test and Report informations\"></a><strong>Test and Report informations</strong></h2><p><img src=\"/pictures/08JMeter/image-20230104101620957.png\"></p>\n<p>+—————————-+<br>| Source file：jtl文件名     |<br>|                            |<br>| Start Time ：压测开始时间  |<br>|                            |<br>| End Time ：压测结束时间    |<br>|                            |<br>| Filter for display：过滤器 |<br>|                            |<br>| Lable:sampler采样器名称    |<br>+—————————-+</p>\n<h2 id=\"APDEX-Application-performance-Index\"><a href=\"#APDEX-Application-performance-Index\" class=\"headerlink\" title=\"APDEX(Application performance Index)\"></a>APDEX(Application performance Index)</h2><p><img src=\"/pictures/08JMeter/image-20230104101631888.png\"></p>\n<p>+—————————————————————-+<br>| apdex:应用程序性能指标,范围在0~1之间，1表示达到所有用户均满意 |<br>|                                                                |<br>| T(Toleration threshold)：可接受阀值                            |<br>|                                                                |<br>| F(Frustration threshold)：失败阀值                             |<br>+—————————————————————-+</p>\n<h2 id=\"Requests-Summary\"><a href=\"#Requests-Summary\" class=\"headerlink\" title=\"Requests Summary\"></a>Requests Summary</h2><p><img src=\"/pictures/08JMeter/image-20230104101644480.png\">OK:成功率</p>\n<p>KO:失败率</p>\n<h2 id=\"Statistics-统计数据\"><a href=\"#Statistics-统计数据\" class=\"headerlink\" title=\"Statistics 统计数据\"></a>Statistics 统计数据</h2><p><img src=\"/pictures/08JMeter/image-20230104101652991.png\"></p>\n<p>lable:sampler采样器名称</p>\n<p>samples:请求总数，并发数*循环次数</p>\n<p>KO:失败次数</p>\n<p>Error%:失败率</p>\n<p>Average:平均响应时间</p>\n<p>Min:最小响应时间</p>\n<p>Max:最大响应时间</p>\n<p>90th pct: 90%的用户响应时间不会超过这个值（关注这个就可以了）</p>\n<p>95th pct: 95%的用户响应时间不会超过这个值</p>\n<p>99th pct: 99%的用户响应时间不会超过这个值 (存在极端值)</p>\n<p>throughtput:Request per Second吞吐量 qps</p>\n<p>received:每秒从服务器接收的数据量</p>\n<p>send：每秒发送的数据量</p>\n<h2 id=\"错误信息统计\"><a href=\"#错误信息统计\" class=\"headerlink\" title=\"错误信息统计\"></a>错误信息统计</h2><p><img src=\"/pictures/08JMeter/image-20230104101704720.png\"></p>\n<h1 id=\"Jmeter图形化HTML压测报告Charts报表讲解\"><a href=\"#Jmeter图形化HTML压测报告Charts报表讲解\" class=\"headerlink\" title=\"Jmeter图形化HTML压测报告Charts报表讲解\"></a>Jmeter图形化HTML压测报告Charts报表讲解</h1><h2 id=\"Over-Time（随着时间的变化）\"><a href=\"#Over-Time（随着时间的变化）\" class=\"headerlink\" title=\"Over Time（随着时间的变化）\"></a>Over Time（随着时间的变化）</h2><p><img src=\"/pictures/08JMeter/image-20230104101717927.png\"></p>\n<p>Response Times Over Time：响应时间变化趋势</p>\n<p>Response Time Percentiles Over Time (successful responses)：最大，最小，平均，用户响应时间分布</p>\n<p>Active Threads Over Time：并发用户数趋势</p>\n<p>Bytes Throughput Over Time：每秒接收和请求字节数变化，蓝色表示发送，黄色表示接受</p>\n<p>Latencies Over Time：平均响应延时趋势</p>\n<p>Connect Time Over Time\t：连接耗时趋势</p>\n<h2 id=\"Throughput\"><a href=\"#Throughput\" class=\"headerlink\" title=\"Throughput\"></a>Throughput</h2><p>Hits Per Second (excluding embedded resources):每秒点击次数</p>\n<p>Codes Per Second (excluding embedded resources)：每秒状态码数量</p>\n<p>Transactions Per Second：即TPS，每秒事务数</p>\n<p>Response Time Vs Request：响应时间和请求数对比</p>\n<p>Latency Vs Request：延迟时间和请求数对比</p>\n<h2 id=\"Response-Times\"><a href=\"#Response-Times\" class=\"headerlink\" title=\"Response Times\"></a>Response Times</h2><p>Response Time Percentiles：响应时间百分比</p>\n<p><img src=\"/pictures/08JMeter/image-20230104101732576.png\"></p>\n<p>Response Time Overview：响应时间概述</p>\n<p><img src=\"/pictures/08JMeter/image-20230104101739594.png\"></p>\n<p>Time Vs Threads：活跃线程数和响应时间</p>\n<p><img src=\"/pictures/08JMeter/image-20230104101746321.png\"></p>\n<p>Response Time Distribution：响应时间分布图</p>\n<p><img src=\"/pictures/08JMeter/image-20230104101754968.png\"></p>\n<h1 id=\"Windows-jmeter-unGUI测试\"><a href=\"#Windows-jmeter-unGUI测试\" class=\"headerlink\" title=\"Windows jmeter unGUI测试\"></a>Windows jmeter unGUI测试</h1><h2 id=\"设置环境变量\"><a href=\"#设置环境变量\" class=\"headerlink\" title=\"设置环境变量\"></a>设置环境变量</h2><p><img src=\"/pictures/08JMeter/image-20230104101805282.png\"></p>\n<h2 id=\"无界面测试\"><a href=\"#无界面测试\" class=\"headerlink\" title=\"无界面测试\"></a>无界面测试</h2><p><img src=\"/pictures/08JMeter/image-20230104101812589.png\"></p>\n<h1 id=\"分布式压测介绍\"><a href=\"#分布式压测介绍\" class=\"headerlink\" title=\"分布式压测介绍\"></a>分布式压测介绍</h1><p>普通压测：</p>\n<p>单台机可以对目标机器产生的压力比较小，受限因素包括CPU，网络，IO等</p>\n<p>分布式压测：</p>\n<p>利用多台机器向目标机器产生压力，模拟几万用户并发访问</p>\n<p><img src=\"/pictures/08JMeter/image-20230104101821321.png\"></p>\n<h1 id=\"Jmeter分布式压测原理\"><a href=\"#Jmeter分布式压测原理\" class=\"headerlink\" title=\"Jmeter分布式压测原理\"></a>Jmeter分布式压测原理</h1><p><img src=\"/pictures/08JMeter/image-20230104101829831.png\"></p>\n<p>1、总控机器的节点master，其他产生压力的机器叫”肉鸡” server</p>\n<p>2、master会把压测脚本发送到 server上面</p>\n<p>3、执行的时候，server上只需要把jmeter-server打开就可以了，不用启动jmeter</p>\n<p>4、结束后，server会把压测数据回传给master,然后master汇总输出报告</p>\n<p>5、配置详情</p>\n<h1 id=\"Jmeter分布式压测实战\"><a href=\"#Jmeter分布式压测实战\" class=\"headerlink\" title=\"Jmeter分布式压测实战\"></a>Jmeter分布式压测实战</h1><h2 id=\"Slave机器设置\"><a href=\"#Slave机器设置\" class=\"headerlink\" title=\"Slave机器设置\"></a>Slave机器设置</h2><p>第一步:禁用ssl</p>\n<p>到slave Jmeter的jmeter.properties文件中修改</p>\n<p>server.rmi.ssl.disable&#x3D;true</p>\n<p>第二步:修改slave Jmeter的远程连接端口</p>\n<p>server_port&#x3D;8899 表示master机器要远程连接的端口</p>\n<p>第三步:启动slave Jmeter</p>\n<p>.&#x2F;jmeter-server</p>\n<p>.&#x2F;jmeter-server -Djava.rmi.server.hostname&#x3D;192.168.179.128</p>\n<p>第四步:关闭防火墙</p>\n<p>service iptables stop</p>\n<h2 id=\"设置Master设备\"><a href=\"#设置Master设备\" class=\"headerlink\" title=\"设置Master设备\"></a>设置Master设备</h2><p>关闭防火墙</p>\n<p>service iptables stop</p>\n<p>到slave Jmeter的jmeter.properties文件中修改</p>\n<p>server.rmi.ssl.disable&#x3D;true</p>\n<p>修改remote_hosts&#x3D;127.0.0.1</p>\n<p>为remote_hosts&#x3D;192.168.179.128:9999</p>\n<p>GUI方式启动</p>\n<p><img src=\"/pictures/08JMeter/image-20230104101846545.png\"></p>\n<p>无GUI方式启动</p>\n<p>Jmeter -n -t baidu.jmx -r -l result.jtl -e -o result</p>\n<p><img src=\"/pictures/08JMeter/image-20230104101853765.png\"></p>\n<h1 id=\"并发用户和TPS关系\"><a href=\"#并发用户和TPS关系\" class=\"headerlink\" title=\"并发用户和TPS关系\"></a>并发用户和TPS关系</h1><p>简单计算:</p>\n<p>在线用户数量(日活量)：</p>\n<p>在做性能测试的时候，传统方式都是用并发用户数来衡量系统的性能，觉得系统能支撑的并发用户数越多，系统的性能就越好；同时对TPS不是非常理解，也根本不知道它们之间的关系，因此非常有必要进行解释。因为TPS模式（吞吐量模式）是一种更好的方式衡量服务端系统的能力。</p>\n<h2 id=\"Vu和TPS换算\"><a href=\"#Vu和TPS换算\" class=\"headerlink\" title=\"Vu和TPS换算\"></a>Vu和TPS换算</h2><p>简单例子:</p>\n<p>在术语中解释了TPS是每秒事务数，但是事务时要靠虚拟用户做出来的，</p>\n<p>假如1个虚拟用户在1秒内完成1笔事务，那么TPS明显就是1；</p>\n<p>如果某笔业务响应时间是1ms,那么1个用户在1秒内能完成1000笔事务，TPS就是1000了；</p>\n<p>如果某笔业务响应时间是1s,那么1个用户在1秒内只能完成1笔事务，要想达到1000TPS，至少需要1000个用户；</p>\n<h2 id=\"如何获取Vu和TPS\"><a href=\"#如何获取Vu和TPS\" class=\"headerlink\" title=\"如何获取Vu和TPS\"></a>如何获取Vu和TPS</h2><p>并发用户数(Vu)获取新系统：没有历史数据作参考，只能通过业务部门进行评估。旧系统：对于已经上线的系统，可以选取高峰时刻，在一定时间内使用系统的人数，这些人数认为属于在线用户数，并发用户数取10%就可以了，例如在半个小时内，使用系统的用户数为10000，那么取10%作为并发用户数基本就够了。</p>\n<p>其他计算方式：根据pv计算</p>\n<p>PV(访问量)：即Page View, 即页面浏览量或点击量，用户每次刷新即被计算一次。</p>\n<p>假设:pv数是80w</p>\n<p>（1）平均值情况：80w个用户在时间上均匀地发起请求。那么并发用户数为800000&#x2F;24*60*60&#x3D;9.25并发&#x2F;s。</p>\n<p> （2）80~20原则：根据统计学原理，采用80~20原则计算并发用户数。<br>             800000*0.8&#x2F;（24*60*60*0.2）&#x3D;37并发&#x2F;s</p>\n<p>TPS获取新系统：没有历史数据作参考，只能通过业务部门进行评估。旧系统：对于已经上线的系统，可以选取高峰时刻，在5分钟或10分钟内，获取系统每笔交易的业务量和总业务量，按照单位时间内完成的笔数计算出TPS，即业务笔数&#x2F;单位时间。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li><p>系统的性能由TPS决定，跟并发用户数没有多大关系。</p>\n</li>\n<li><p>系统的最大TPS是一定的（在一个范围内），但并发用户数不一定，可以调整。</p>\n</li>\n<li><p>建议性能测试的时候，不要设置过长的思考时间，以最坏的情况下对服务器施压。</p>\n</li>\n<li><p>一般情况下，大型系统（业务量大、机器多）做压力测试，10000～50000个用户并发，中小型系统做压力测试，5000个用户并发比较常见。</p>\n</li>\n</ul>\n<h1 id=\"性能指标\"><a href=\"#性能指标\" class=\"headerlink\" title=\"性能指标\"></a>性能指标</h1><h2 id=\"中间件指标\"><a href=\"#中间件指标\" class=\"headerlink\" title=\"中间件指标\"></a>中间件指标</h2><h3 id=\"定义及解释-1\"><a href=\"#定义及解释-1\" class=\"headerlink\" title=\"定义及解释\"></a>定义及解释</h3><p>常用的中间件例如Tomcat、Weblogic等指标主要包括JVM, ThreadPool, JDBC,具体如下：</p>\n<table>\n<thead>\n<tr>\n<th><strong>一级指标</strong></th>\n<th><strong>二级指标</strong></th>\n<th><strong>解释</strong></th>\n<th><strong>备注</strong></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>GC</td>\n<td>GC频率</td>\n<td>java虚拟机垃圾部分回收频率</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>Full GC频率</td>\n<td>java虚拟机垃圾完全回收频率</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>Full GC平均时长</td>\n<td>用于垃圾完全回收的平均时长</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>Full GC最大时长</td>\n<td>用于垃圾完全回收的最大时长</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>堆使用率</td>\n<td>堆使用率</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>ThreadPool</td>\n<td>Active Thread Count</td>\n<td>活动的线程数</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>Pending User Request</td>\n<td>处于排队的用户请求个数</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>JDBC</td>\n<td>JDBC Active Connection</td>\n<td>JDBC活动连接数</td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<h3 id=\"标准-3\"><a href=\"#标准-3\" class=\"headerlink\" title=\"标准\"></a>标准</h3><ul>\n<li><p>当前正在运行的线程数不能超过设定的最大值。一般情况下系统性能较好的情况下，线程数最小值设置50和最大值设置200比较合适。</p>\n</li>\n<li><p>当前运行的JDBC连接数不能超过设定的最大值。一般情况下系统性能较好的情况下，JDBC最小值设置50和最大值设置200比较合适。</p>\n</li>\n<li><p>ＧＣ频率不能频繁，特别是FULL GC更不能频繁，一般情况下系统性能较好的情况下，JVM最小堆大小和最大堆大小分别设置1024M比较合适。</p>\n</li>\n</ul>\n<h2 id=\"数据库指标\"><a href=\"#数据库指标\" class=\"headerlink\" title=\"数据库指标\"></a>数据库指标</h2><h3 id=\"定义及解释-2\"><a href=\"#定义及解释-2\" class=\"headerlink\" title=\"定义及解释\"></a>定义及解释</h3><p>常用的数据库例如ＭySQL指标主要包括SQL、吞吐量、缓存命中率、连接数等，具体如下：</p>\n<table>\n<thead>\n<tr>\n<th><strong>一级指标</strong></th>\n<th><strong>二级指标</strong></th>\n<th><strong>单位</strong></th>\n<th><strong>解释</strong></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>SQL</td>\n<td>耗时</td>\n<td>微秒</td>\n<td>执行SQL耗时</td>\n<td></td>\n</tr>\n<tr>\n<td>吞吐量</td>\n<td>QPS</td>\n<td>个</td>\n<td>每秒查询次数</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>TPS</td>\n<td>个</td>\n<td>每秒事务次数</td>\n<td></td>\n</tr>\n<tr>\n<td>命中率</td>\n<td>Key Buffer命中率</td>\n<td>百分之</td>\n<td>索引缓冲区命中率</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>InnoDB Buffer命中率</td>\n<td>百分之</td>\n<td>InnoDB缓冲区命中率</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>Query Cache命中率</td>\n<td>百分之</td>\n<td>查询缓存命中率</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>Table Cache命中率</td>\n<td>百分之</td>\n<td>表缓存命中率</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>Thread Cache命中率</td>\n<td>百分之</td>\n<td>线程缓存命中率</td>\n<td></td>\n</tr>\n<tr>\n<td>锁</td>\n<td>等待次数</td>\n<td>次</td>\n<td>锁等待次数</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>等待时间</td>\n<td>微秒</td>\n<td>锁等待时间</td>\n<td></td>\n</tr>\n</tbody></table>\n<hr>\n<hr>\n<h3 id=\"标准-4\"><a href=\"#标准-4\" class=\"headerlink\" title=\"标准\"></a>标准</h3><ul>\n<li><p>SQL耗时越小越好，一般情况下微秒级别。</p>\n</li>\n<li><p>命中率越高越好，一般情况下不能低于95%。</p>\n</li>\n<li><p>锁等待次数越低越好，等待时间越短越好。</p>\n</li>\n</ul>\n<h2 id=\"前端指标\"><a href=\"#前端指标\" class=\"headerlink\" title=\"前端指标\"></a>前端指标</h2><h3 id=\"定义及解释-3\"><a href=\"#定义及解释-3\" class=\"headerlink\" title=\"定义及解释\"></a>定义及解释</h3><p>前端指标主要包括页面展示和网络所花的时间，具体如下：</p>\n<table>\n<thead>\n<tr>\n<th><strong>一级指标</strong></th>\n<th><strong>二级指标</strong></th>\n<th><strong>单位</strong></th>\n<th><strong>解释</strong></th>\n<th><strong>备注</strong></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>页面展示</td>\n<td>首次显示时间</td>\n<td>毫秒</td>\n<td>在浏览器地址栏输入URL按回车到用户看到网页的第一个视觉标志为止</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>OnLoad事件时间</td>\n<td>毫秒</td>\n<td>浏览器触发onLoad事件的时间，当原始文档和所有引用的内容完全下载后才会触发这个事件</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>完全载入的时间</td>\n<td>毫秒</td>\n<td>所有onLoad JavaScript 处理程序执行完毕，所有动态的或延迟加载的内容都通过这些处理程序触发的时间</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>页面数量</td>\n<td>页面大小</td>\n<td>KB</td>\n<td>整个页面大小</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>请求数量</td>\n<td>次</td>\n<td>从网站下载资源时所有网络请求的总数，尽量少</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>网络</td>\n<td>DNS时间</td>\n<td>毫秒</td>\n<td>DNS查找时间</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>连接时间</td>\n<td>毫秒</td>\n<td>连接时间就是浏览器与Web服务器建立TCP&#x2F;IP连接的时间</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>服务器时间</td>\n<td>毫秒</td>\n<td>服务器处理时间</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>传输时间</td>\n<td>毫秒</td>\n<td>内容传输所用时间</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>等待时间</td>\n<td>毫秒</td>\n<td>等待某个资源释放的时间</td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<h3 id=\"标准-5\"><a href=\"#标准-5\" class=\"headerlink\" title=\"标准\"></a>标准</h3><ul>\n<li><p>页面要尽可能小及压缩。</p>\n</li>\n<li><p>页面展示和花费时间越短越好。</p>\n</li>\n</ul>\n<h2 id=\"稳定性指标\"><a href=\"#稳定性指标\" class=\"headerlink\" title=\"稳定性指标\"></a>稳定性指标</h2><h3 id=\"定义及解释-4\"><a href=\"#定义及解释-4\" class=\"headerlink\" title=\"定义及解释\"></a>定义及解释</h3><p>最短稳定时间：系统按照最大容量的80%或标准压力（系统的预期日常压力）情况下运行，能够稳定运行的最短时间。一般来说，对于正常工作日（8小时）运行的系统，至少应该能保证系统稳定运行８小时以上。对于7*24运行的系统，至少应该能够保证系统稳定运行24小时以上。如果系统不能稳定的运行，上线后，随着业务量的增长和长时间运行，将会出现性能下降甚至崩溃的风险。</p>\n<h3 id=\"标准-6\"><a href=\"#标准-6\" class=\"headerlink\" title=\"标准\"></a>标准</h3><ul>\n<li><p>TPS曲线稳定，没有大幅度的波动。</p>\n</li>\n<li><p>各项资源指标没有泄露或异常情况。</p>\n</li>\n</ul>\n<h1 id=\"性能分析\"><a href=\"#性能分析\" class=\"headerlink\" title=\"性能分析\"></a>性能分析</h1><p>性能分析的前提除了需要丰富的性能测试监控，还要了解操作系统、中间件(tomcat)、数据库(mysql oracle sqlserver)、开发等。</p>\n<h2 id=\"流程\"><a href=\"#流程\" class=\"headerlink\" title=\"流程\"></a>流程</h2><ul>\n<li><p>很多情况下压测流量并没有完全进入到后端（服务端），在网络接入层（云化的架构比如：SLB&#x2F;WAF&#x2F;高防IP，甚至是CDN&#x2F;全站加速等）可能就会出现由于各种规格（带宽、最大连接数、新建连接数等）限制或者因为压测的某些特征符合CC和DDoS的行为而触发了防护策略导致压测结果达不到预期。</p>\n</li>\n<li><p>接着看关键指标是否满足要求，如果不满足，需要确定是哪个地方有问题，一般情况下，服务器端问题可能性比较大，也有可能是客户端问题（这种情况非常小）。</p>\n</li>\n<li><p>对于服务器端问题，需要定位的是硬件相关指标，例如CPU，Memory, Disk I&#x2F;O, Network I&#x2F;O, 如果是某个硬件指标有问题，需要深入的进行分析。</p>\n</li>\n<li><p>如果硬件指标都没有问题，需要查看中间件相关指标，例如：线程池、连接池、GC等，如果是这些指标问题，需要深入的 分析。</p>\n</li>\n<li><p>如果中间件相关指标没问题，需要查看数据库相关指标，例如：慢查SQL，命中率，锁、参数设置。</p>\n</li>\n<li><p>如果以上指标都正常，应用程序的算法、缓冲、缓存、同步或异步可能有问题，需要具体深入的分析。</p>\n<p><img src=\"/pictures/08JMeter/image-20230104101937127.png\">可能瓶颈点</p>\n</li>\n</ul>\n<h3 id=\"硬件-x2F-规格上的瓶颈\"><a href=\"#硬件-x2F-规格上的瓶颈\" class=\"headerlink\" title=\"硬件&#x2F;规格上的瓶颈\"></a><strong>硬件&#x2F;规格上的瓶颈</strong></h3><p>一般指的是CPU、内存、磁盘I&#x2F;O 方面的问题，分为服务器硬件瓶颈、网络瓶颈（对局域网可以不考虑）。</p>\n<h3 id=\"中间件上的性能瓶颈\"><a href=\"#中间件上的性能瓶颈\" class=\"headerlink\" title=\"中间件上的性能瓶颈\"></a><strong>中间件上的性能瓶颈</strong></h3><p>一般指的是应用服务器、web 服务器等应用软件，还包括数据库系统。例如：中间件weblogic&#x2F;tomcat平台上配置的JDBC连接池的参数设置不合理，造成的瓶颈。</p>\n<h3 id=\"应用程序上的性能瓶颈\"><a href=\"#应用程序上的性能瓶颈\" class=\"headerlink\" title=\"应用程序上的性能瓶颈\"></a><strong>应用程序上的性能瓶颈</strong></h3><p>一般指的是开发人员开发出来的应用程序。例如，JVM参数不合理，容器配置不合理，慢SQL，数据库设计不合理，程序架构规划不合理，程序本身设计有问题（串行处理、请求的处理线程不够、无缓冲、无缓存、生产者和消费者不协调等），造成系统在大量用户方位时性能低下而造成的瓶颈。</p>\n<h3 id=\"操作系统上的性能瓶颈\"><a href=\"#操作系统上的性能瓶颈\" class=\"headerlink\" title=\"操作系统上的性能瓶颈\"></a><strong>操作系统上的性能瓶颈</strong></h3><p>一般指的是windows、UNIX、Linux等操作系统。例如，在进行性能测试，出现物理内存不足时，虚拟内存设置也不合理，虚拟内存的交换效率就会大大降低，从而导致行为的响应时间大大增加，这时认为操作系统上出现性能瓶颈。</p>\n<h3 id=\"网络设备上的性能瓶颈\"><a href=\"#网络设备上的性能瓶颈\" class=\"headerlink\" title=\"网络设备上的性能瓶颈\"></a><strong>网络设备上的性能瓶颈</strong></h3><p>一般指的是防火墙、动态负载均衡器、交换机等设备。当前更多的云化服务架构使用的网络接入产品：包括但不限于SLB&#x2F;WAF&#x2F;高防IP&#x2F;CDN&#x2F;全站加速等等。例如，在动态负载均衡器上设置了动态分发负载的机制，当发现某个应用服务器上的硬件资源已经到达极限时，动态负载均衡器将后续的交易请求发送到其他负载较轻的应用服务器上。在测试时发现，动态负载均衡器没有起到相应的作用，这时可以认为网络瓶颈。</p>\n<h2 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h2><h3 id=\"CPU-1\"><a href=\"#CPU-1\" class=\"headerlink\" title=\"CPU\"></a><strong>CPU</strong></h3><p>CPU资源利用率很高的话，需要看CPU消耗User,Sys,Wait那种状态下。</p>\n<ul>\n<li><p>如果CPU User非常高，需要查看消耗在哪个进程，可以用top(linux)命令看出，接着用top –H –p &lt;pid&gt;看哪个线程消耗资源高，如果是java应用，就可以用jstack看出此线程正在执行的堆栈，看资源消耗在哪个方法上，查看源代码就知道问题所在；如果是c++应用，可以用gprof性能工具进行分析。</p>\n</li>\n<li><p>如果CPU Sys非常高，可以用strace(linux)看系统调用的资源消耗及时间。</p>\n</li>\n<li><p>如果CPU Wait非常高，考虑磁盘读写了，可以通过减少日志输出、异步或换速度快的硬盘。</p>\n</li>\n</ul>\n<h3 id=\"Memory-1\"><a href=\"#Memory-1\" class=\"headerlink\" title=\"Memory\"></a><strong>Memory</strong></h3><p>操作系统未了最大化利用内存，一般都设置大量的cache,因此，内存利用率高达99%并不是问题，内存的问题主要看某个进程占用的内存是否非常大以及是否有大量的swap(虚拟内存交换)。</p>\n<h3 id=\"磁盘I-x2F-O\"><a href=\"#磁盘I-x2F-O\" class=\"headerlink\" title=\"磁盘I&#x2F;O\"></a><strong>磁盘I&#x2F;O</strong></h3><p>磁盘I&#x2F;O一个最显著的指标是繁忙率，可以通过减少日志输出、异步或换速度快的硬盘。</p>\n<h3 id=\"网络I-x2F-O\"><a href=\"#网络I-x2F-O\" class=\"headerlink\" title=\"网络I&#x2F;O\"></a><strong>网络I&#x2F;O</strong></h3><p>网络I&#x2F;O主要考虑传输内容大小，不能超过硬件网络传输的最大值70%，可以通过压缩、减少内容大小、在本地设置缓存以及分多次传输等。</p>\n<h3 id=\"JVM\"><a href=\"#JVM\" class=\"headerlink\" title=\"JVM\"></a><strong>JVM</strong></h3><p>jvm主要分析GC&#x2F;FULL GC是否频繁，以及垃圾回收的时间，可以用jstat命令来查看，对于每个代大小以及GC频繁，通过jmap将内存dump,再借助工具HeapAnalyzer来分析哪地方占用的内存较高以及是否有内存泄漏可能。简单点可以使用APM工具，比如阿里云ARMS，下同。</p>\n<h3 id=\"线程池\"><a href=\"#线程池\" class=\"headerlink\" title=\"线程池\"></a><strong>线程池</strong></h3><p>如果线程不够用，可以通过参数调整，增加线程；对于线程池中的线程设置比较大的情况，还是不够用可能的原因是：某个线程被阻塞来不及释放，可能在等锁、方法耗时较长、数据库等待时间很长等原因导致，需要进一步分析才能定位。</p>\n<h3 id=\"JDBC连接池\"><a href=\"#JDBC连接池\" class=\"headerlink\" title=\"JDBC连接池\"></a><strong>JDBC连接池</strong></h3><p>连接池不够用的情况下，可以通过参数进行调整增加；但是对于数据库本身处理很慢的情况下，调整没有多大的效果，需要查看数据库方面以及因代码导致连接未释放的原因。</p>\n<h3 id=\"SQL\"><a href=\"#SQL\" class=\"headerlink\" title=\"SQL\"></a><strong>SQL</strong></h3><p>SQL效率低下也是导致性能差的一个非常重要的原因，可以通过查看执行计划看SQL慢在哪里，一般情况，SQL效率低下原因主要有：</p>\n<table>\n<thead>\n<tr>\n<th><em><strong>*类别*</strong></em></th>\n<th><em><strong>*子类*</strong></em></th>\n<th><em><strong>*表达式或描述*</strong></em></th>\n<th><em><strong>*原因*</strong></em></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>索引</td>\n<td>未建索引</td>\n<td></td>\n<td>产生全表扫描</td>\n</tr>\n<tr>\n<td></td>\n<td>未利用索引</td>\n<td>substring(card_no,1,4)&#x3D;′5378′</td>\n<td>产生全表扫描</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>amount&#x2F;30&lt; 1000</td>\n<td>产生全表扫描</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>convert(char(10),date,112)&#x3D;′19991201′</td>\n<td>产生全表扫描</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>where salary&lt;&gt;3000</td>\n<td>产生全表扫描</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>name like ‘%张’</td>\n<td>产生全表扫描</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>first_name + last_name &#x3D;’beill cliton’</td>\n<td>产生全表扫描</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>id_no in(′0′,′1′)</td>\n<td>产生全表扫描</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>select id from t where num&#x3D;@num</td>\n<td>有参数也会产生全表扫描</td>\n</tr>\n<tr>\n<td></td>\n<td>使用效能低的索引</td>\n<td>oder by 非聚族索引</td>\n<td>索引性能低</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>username&#x3D;’张三’ and age&gt;20</td>\n<td>字符串索引低于整形索引</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>表中列与空NULL值</td>\n<td>索引性能低</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>尽量不要使用IS NULL或IS NOT NULL</td>\n<td>索引性能低</td>\n</tr>\n<tr>\n<td>数据量</td>\n<td>所有数据量</td>\n<td>select *</td>\n<td>很多列产生大量数据</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>select id,name</td>\n<td>表中有几百万行，产生大量数据</td>\n</tr>\n<tr>\n<td></td>\n<td>嵌套查询</td>\n<td>先不过滤数据，后过滤数据</td>\n<td>产生大量无用的数据</td>\n</tr>\n<tr>\n<td></td>\n<td>关联查询</td>\n<td>多表进行关联查询，先过滤掉小部分数据，在过滤大部分数据</td>\n<td>大量关联操作</td>\n</tr>\n<tr>\n<td></td>\n<td>大数据量插入</td>\n<td>一次次插入</td>\n<td>产生大量日志，消耗资源</td>\n</tr>\n<tr>\n<td>锁</td>\n<td>锁等待</td>\n<td>update account set banlance&#x3D;100 where id&#x3D;10</td>\n<td>产生表级锁，将会锁住整个表</td>\n</tr>\n<tr>\n<td></td>\n<td>死锁</td>\n<td>A:update a;update b;B:update b;update a;</td>\n<td>将会产生死锁</td>\n</tr>\n<tr>\n<td></td>\n<td>游标</td>\n<td>Cursor Open cursor,fetch;close cursor</td>\n<td>性能很低</td>\n</tr>\n<tr>\n<td></td>\n<td>临时表</td>\n<td>create tmp table 创建临时表</td>\n<td>产生大量日志</td>\n</tr>\n<tr>\n<td></td>\n<td>drop table</td>\n<td>删除临时表</td>\n<td>需要显示删除，避免系统表长时间锁定</td>\n</tr>\n<tr>\n<td>其他</td>\n<td>exist 代替 IN</td>\n<td>select num from a where num in(select num from b)</td>\n<td>in会逐个判断,exist有一条就结束</td>\n</tr>\n<tr>\n<td></td>\n<td>exist 代替select count(*)</td>\n<td>判断记录是否存在</td>\n<td>count(*)将累加计算，exist有就结束</td>\n</tr>\n<tr>\n<td></td>\n<td>between 代替 IN</td>\n<td>ID in(1,2,3)</td>\n<td>IN逐个判断，between是范围判断</td>\n</tr>\n<tr>\n<td></td>\n<td>left outer join 代替Not IN</td>\n<td>select ID from a where ID not in(select b.Mainid from b)</td>\n<td>NOT IN逐个判断，效率非常低</td>\n</tr>\n<tr>\n<td></td>\n<td>union all 代替union</td>\n<td>select ID from a union select id from b union</td>\n<td>删除重复的行，可能会在磁盘进行排序而union all只是简单的将结果并在一起</td>\n</tr>\n<tr>\n<td></td>\n<td>常用SQL尽量用绑定变量方法</td>\n<td>insert into A(ID) values(1)</td>\n<td>直接写SQL每次都要编译，用绑定变量的方法只编译一次，下次就可以用了</td>\n</tr>\n</tbody></table>\n"},{"title":"linux系统启动时间明细","date":"2022-12-22T07:21:34.000Z","_content":"---\n# systemd-analyze\n> systemd-analyze 命令可以方便的记录系统启动耗时详情\n\n**可以通过：**\n``` systemd-analyze blame``` 来获得详细的进程耗时排名信息：\n\n```babyfengfjx@babyfengfjx:~$ systemd-analyze blame\n8.382s vmware-USBArbitrator.service\n8.140s upower.service\n6.655s NetworkManager-wait-online.service\n5.138s man-db.service\n4.477s deepin-authenticate.service\n2.042s plymouth-quit-wait.service\n1.222s vmware.service\n1.172s udisks2.service\n1.138s deepin-accounts-daemon.service\n1.122s smartmontools.service\n 996ms apt-daily-upgrade.service\n 974ms logrotate.service\n 876ms systemd-journal-flush.service\n 756ms nvidia-persistenced.service\n 613ms user@1000.service\n 600ms accounts-daemon.service\n 600ms ModemManager.service\n 594ms NetworkManager.service\n 591ms laptop-mode.service\n 591ms gpu-manager.service\n 582ms vboxdrv.service\n 495ms polkit.service\n 477ms apparmor.service\n 425ms dde-filemanager-daemon.service\n 421ms colord.service\n 380ms lightdm.service\n 341ms systemd-modules-load.service\n 315ms ipwatchd.service\n 302ms apt-daily.service\n 236ms winbind.service\n 228ms uengine-container.service\n 226ms libvirt-guests.service\n 180ms smbd.service\n 143ms systemd-fsck@dev-disk-by\\x2duuid-4bd99115\\x2d99b6\\x2d4ab7\\x2dae9b\\x2d72bfa8c9020d.servic\n 142ms dev-nvme0n1p4.device\n 131ms lvm2-monitor.service\n 126ms nmbd.service\n  97ms bluetooth.service\n  96ms avahi-daemon.service\n  92ms fprintd.service\n  81ms systemd-logind.service\n  81ms systemd-machined.service\n  80ms wpa_supplicant.service\n  77ms lxc.service\n  68ms libvirtd.service\n  51ms home.mount\n  51ms data.mount\n  50ms systemd-udev-trigger.service\n  49ms systemd-udevd.service\n  41ms systemd-fsck@dev-disk-by\\x2duuid-75d72b1d\\x2d874c\\x2d4a3a\\x2da715\\x2d986a996ee814.servic\n  39ms rsyslog.service\n  38ms systemd-timesyncd.service\n  37ms systemd-fsck@dev-disk-by\\x2duuid-048fef2c\\x2ded60\\x2d4e39\\x2daeef\\x2d0f43b208f9ad.servic\n  35ms opt.mount\n  32ms systemd-journald.service\n  27ms systemd-fsck@dev-disk-by\\x2duuid-FD8E\\x2d6C7A.service\n  24ms root.mount\n  21ms plymouth-read-write.service\n  20ms systemd-tmpfiles-setup-dev.service\n  20ms systemd-tmpfiles-setup.service\n  19ms alsa-restore.service\n  19ms networking.service\n  18ms systemd-binfmt.service\n  18ms systemd-random-seed.service\n  14ms plymouth-start.service\n  13ms systemd-update-utmp.service\n  13ms lm-sensors.service\n  11ms hddtemp.service\n  11ms dev-disk-by\\x2duuid-9ee15dc1\\x2d16af\\x2d4dbb\\x2d9161\\x2d6b17bee2461e.swap\n  10ms pppd-dns.service\n   9ms systemd-tmpfiles-clean.service\n   9ms dev-hugepages.mount\n   9ms proc-sys-fs-binfmt_misc.mount\n   8ms dev-mqueue.mount\n   8ms sys-kernel-debug.mount\n   7ms sys-kernel-tracing.mount\n   7ms modprobe@drm.service\n   7ms blk-availability.service\n   7ms kmod-static-nodes.service\n   7ms systemd-remount-fs.service\n   6ms modprobe@configfs.service\n   6ms user-runtime-dir@1000.service\n   5ms lmt-poll.service\n   5ms boot.mount\n   5ms modprobe@fuse.service\n   5ms systemd-sysusers.service\n   5ms systemd-user-sessions.service\n   5ms systemd-update-utmp-runlevel.service\n   5ms recovery.mount\n   4ms lxc-net.service\n   4ms ufw.service\n   3ms dev-loop0.device\n   3ms boot-efi.mount\n   3ms systemd-sysctl.service\n   3ms vboxautostart-service.service\n   3ms ifupdown-pre.service\n   3ms vboxballoonctrl-service.service\n   2ms var.mount\n   2ms systemd-rfkill.service\n   2ms vboxweb-service.service\n   1ms sys-fs-fuse-connections.mount\n   1ms deepin-login-sound.service\n   1ms sys-kernel-config.mount\n```\n\n**可以通过：**\n```systemd-analyze plot > start_analyze.svg```命令来输出启动耗时的矢量图，如下图所示：\n\n![](pictures/10systemd_analyze/image-20230105100608640.png)\n","source":"_posts/10systemd_analyze.md","raw":"---\ntitle: linux系统启动时间明细\ncategories: \n- linux\n\ntags:\n- linux\n- systemd\ndate: 2022-12-22 15:21:34\n---\n---\n# systemd-analyze\n> systemd-analyze 命令可以方便的记录系统启动耗时详情\n\n**可以通过：**\n``` systemd-analyze blame``` 来获得详细的进程耗时排名信息：\n\n```babyfengfjx@babyfengfjx:~$ systemd-analyze blame\n8.382s vmware-USBArbitrator.service\n8.140s upower.service\n6.655s NetworkManager-wait-online.service\n5.138s man-db.service\n4.477s deepin-authenticate.service\n2.042s plymouth-quit-wait.service\n1.222s vmware.service\n1.172s udisks2.service\n1.138s deepin-accounts-daemon.service\n1.122s smartmontools.service\n 996ms apt-daily-upgrade.service\n 974ms logrotate.service\n 876ms systemd-journal-flush.service\n 756ms nvidia-persistenced.service\n 613ms user@1000.service\n 600ms accounts-daemon.service\n 600ms ModemManager.service\n 594ms NetworkManager.service\n 591ms laptop-mode.service\n 591ms gpu-manager.service\n 582ms vboxdrv.service\n 495ms polkit.service\n 477ms apparmor.service\n 425ms dde-filemanager-daemon.service\n 421ms colord.service\n 380ms lightdm.service\n 341ms systemd-modules-load.service\n 315ms ipwatchd.service\n 302ms apt-daily.service\n 236ms winbind.service\n 228ms uengine-container.service\n 226ms libvirt-guests.service\n 180ms smbd.service\n 143ms systemd-fsck@dev-disk-by\\x2duuid-4bd99115\\x2d99b6\\x2d4ab7\\x2dae9b\\x2d72bfa8c9020d.servic\n 142ms dev-nvme0n1p4.device\n 131ms lvm2-monitor.service\n 126ms nmbd.service\n  97ms bluetooth.service\n  96ms avahi-daemon.service\n  92ms fprintd.service\n  81ms systemd-logind.service\n  81ms systemd-machined.service\n  80ms wpa_supplicant.service\n  77ms lxc.service\n  68ms libvirtd.service\n  51ms home.mount\n  51ms data.mount\n  50ms systemd-udev-trigger.service\n  49ms systemd-udevd.service\n  41ms systemd-fsck@dev-disk-by\\x2duuid-75d72b1d\\x2d874c\\x2d4a3a\\x2da715\\x2d986a996ee814.servic\n  39ms rsyslog.service\n  38ms systemd-timesyncd.service\n  37ms systemd-fsck@dev-disk-by\\x2duuid-048fef2c\\x2ded60\\x2d4e39\\x2daeef\\x2d0f43b208f9ad.servic\n  35ms opt.mount\n  32ms systemd-journald.service\n  27ms systemd-fsck@dev-disk-by\\x2duuid-FD8E\\x2d6C7A.service\n  24ms root.mount\n  21ms plymouth-read-write.service\n  20ms systemd-tmpfiles-setup-dev.service\n  20ms systemd-tmpfiles-setup.service\n  19ms alsa-restore.service\n  19ms networking.service\n  18ms systemd-binfmt.service\n  18ms systemd-random-seed.service\n  14ms plymouth-start.service\n  13ms systemd-update-utmp.service\n  13ms lm-sensors.service\n  11ms hddtemp.service\n  11ms dev-disk-by\\x2duuid-9ee15dc1\\x2d16af\\x2d4dbb\\x2d9161\\x2d6b17bee2461e.swap\n  10ms pppd-dns.service\n   9ms systemd-tmpfiles-clean.service\n   9ms dev-hugepages.mount\n   9ms proc-sys-fs-binfmt_misc.mount\n   8ms dev-mqueue.mount\n   8ms sys-kernel-debug.mount\n   7ms sys-kernel-tracing.mount\n   7ms modprobe@drm.service\n   7ms blk-availability.service\n   7ms kmod-static-nodes.service\n   7ms systemd-remount-fs.service\n   6ms modprobe@configfs.service\n   6ms user-runtime-dir@1000.service\n   5ms lmt-poll.service\n   5ms boot.mount\n   5ms modprobe@fuse.service\n   5ms systemd-sysusers.service\n   5ms systemd-user-sessions.service\n   5ms systemd-update-utmp-runlevel.service\n   5ms recovery.mount\n   4ms lxc-net.service\n   4ms ufw.service\n   3ms dev-loop0.device\n   3ms boot-efi.mount\n   3ms systemd-sysctl.service\n   3ms vboxautostart-service.service\n   3ms ifupdown-pre.service\n   3ms vboxballoonctrl-service.service\n   2ms var.mount\n   2ms systemd-rfkill.service\n   2ms vboxweb-service.service\n   1ms sys-fs-fuse-connections.mount\n   1ms deepin-login-sound.service\n   1ms sys-kernel-config.mount\n```\n\n**可以通过：**\n```systemd-analyze plot > start_analyze.svg```命令来输出启动耗时的矢量图，如下图所示：\n\n![](pictures/10systemd_analyze/image-20230105100608640.png)\n","slug":"10systemd_analyze","published":1,"updated":"2023-01-05T02:08:22.093Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clciheilb000irdxh7blsb3p8","content":"<hr>\n<h1 id=\"systemd-analyze\"><a href=\"#systemd-analyze\" class=\"headerlink\" title=\"systemd-analyze\"></a>systemd-analyze</h1><blockquote>\n<p>systemd-analyze 命令可以方便的记录系统启动耗时详情</p>\n</blockquote>\n<p><strong>可以通过：</strong></p>\n<figure class=\"highlight plaintext\"><figcaption><span>blame``` 来获得详细的进程耗时排名信息：</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">```babyfengfjx@babyfengfjx:~$ systemd-analyze blame</span><br><span class=\"line\">8.382s vmware-USBArbitrator.service</span><br><span class=\"line\">8.140s upower.service</span><br><span class=\"line\">6.655s NetworkManager-wait-online.service</span><br><span class=\"line\">5.138s man-db.service</span><br><span class=\"line\">4.477s deepin-authenticate.service</span><br><span class=\"line\">2.042s plymouth-quit-wait.service</span><br><span class=\"line\">1.222s vmware.service</span><br><span class=\"line\">1.172s udisks2.service</span><br><span class=\"line\">1.138s deepin-accounts-daemon.service</span><br><span class=\"line\">1.122s smartmontools.service</span><br><span class=\"line\"> 996ms apt-daily-upgrade.service</span><br><span class=\"line\"> 974ms logrotate.service</span><br><span class=\"line\"> 876ms systemd-journal-flush.service</span><br><span class=\"line\"> 756ms nvidia-persistenced.service</span><br><span class=\"line\"> 613ms user@1000.service</span><br><span class=\"line\"> 600ms accounts-daemon.service</span><br><span class=\"line\"> 600ms ModemManager.service</span><br><span class=\"line\"> 594ms NetworkManager.service</span><br><span class=\"line\"> 591ms laptop-mode.service</span><br><span class=\"line\"> 591ms gpu-manager.service</span><br><span class=\"line\"> 582ms vboxdrv.service</span><br><span class=\"line\"> 495ms polkit.service</span><br><span class=\"line\"> 477ms apparmor.service</span><br><span class=\"line\"> 425ms dde-filemanager-daemon.service</span><br><span class=\"line\"> 421ms colord.service</span><br><span class=\"line\"> 380ms lightdm.service</span><br><span class=\"line\"> 341ms systemd-modules-load.service</span><br><span class=\"line\"> 315ms ipwatchd.service</span><br><span class=\"line\"> 302ms apt-daily.service</span><br><span class=\"line\"> 236ms winbind.service</span><br><span class=\"line\"> 228ms uengine-container.service</span><br><span class=\"line\"> 226ms libvirt-guests.service</span><br><span class=\"line\"> 180ms smbd.service</span><br><span class=\"line\"> 143ms systemd-fsck@dev-disk-by\\x2duuid-4bd99115\\x2d99b6\\x2d4ab7\\x2dae9b\\x2d72bfa8c9020d.servic</span><br><span class=\"line\"> 142ms dev-nvme0n1p4.device</span><br><span class=\"line\"> 131ms lvm2-monitor.service</span><br><span class=\"line\"> 126ms nmbd.service</span><br><span class=\"line\">  97ms bluetooth.service</span><br><span class=\"line\">  96ms avahi-daemon.service</span><br><span class=\"line\">  92ms fprintd.service</span><br><span class=\"line\">  81ms systemd-logind.service</span><br><span class=\"line\">  81ms systemd-machined.service</span><br><span class=\"line\">  80ms wpa_supplicant.service</span><br><span class=\"line\">  77ms lxc.service</span><br><span class=\"line\">  68ms libvirtd.service</span><br><span class=\"line\">  51ms home.mount</span><br><span class=\"line\">  51ms data.mount</span><br><span class=\"line\">  50ms systemd-udev-trigger.service</span><br><span class=\"line\">  49ms systemd-udevd.service</span><br><span class=\"line\">  41ms systemd-fsck@dev-disk-by\\x2duuid-75d72b1d\\x2d874c\\x2d4a3a\\x2da715\\x2d986a996ee814.servic</span><br><span class=\"line\">  39ms rsyslog.service</span><br><span class=\"line\">  38ms systemd-timesyncd.service</span><br><span class=\"line\">  37ms systemd-fsck@dev-disk-by\\x2duuid-048fef2c\\x2ded60\\x2d4e39\\x2daeef\\x2d0f43b208f9ad.servic</span><br><span class=\"line\">  35ms opt.mount</span><br><span class=\"line\">  32ms systemd-journald.service</span><br><span class=\"line\">  27ms systemd-fsck@dev-disk-by\\x2duuid-FD8E\\x2d6C7A.service</span><br><span class=\"line\">  24ms root.mount</span><br><span class=\"line\">  21ms plymouth-read-write.service</span><br><span class=\"line\">  20ms systemd-tmpfiles-setup-dev.service</span><br><span class=\"line\">  20ms systemd-tmpfiles-setup.service</span><br><span class=\"line\">  19ms alsa-restore.service</span><br><span class=\"line\">  19ms networking.service</span><br><span class=\"line\">  18ms systemd-binfmt.service</span><br><span class=\"line\">  18ms systemd-random-seed.service</span><br><span class=\"line\">  14ms plymouth-start.service</span><br><span class=\"line\">  13ms systemd-update-utmp.service</span><br><span class=\"line\">  13ms lm-sensors.service</span><br><span class=\"line\">  11ms hddtemp.service</span><br><span class=\"line\">  11ms dev-disk-by\\x2duuid-9ee15dc1\\x2d16af\\x2d4dbb\\x2d9161\\x2d6b17bee2461e.swap</span><br><span class=\"line\">  10ms pppd-dns.service</span><br><span class=\"line\">   9ms systemd-tmpfiles-clean.service</span><br><span class=\"line\">   9ms dev-hugepages.mount</span><br><span class=\"line\">   9ms proc-sys-fs-binfmt_misc.mount</span><br><span class=\"line\">   8ms dev-mqueue.mount</span><br><span class=\"line\">   8ms sys-kernel-debug.mount</span><br><span class=\"line\">   7ms sys-kernel-tracing.mount</span><br><span class=\"line\">   7ms modprobe@drm.service</span><br><span class=\"line\">   7ms blk-availability.service</span><br><span class=\"line\">   7ms kmod-static-nodes.service</span><br><span class=\"line\">   7ms systemd-remount-fs.service</span><br><span class=\"line\">   6ms modprobe@configfs.service</span><br><span class=\"line\">   6ms user-runtime-dir@1000.service</span><br><span class=\"line\">   5ms lmt-poll.service</span><br><span class=\"line\">   5ms boot.mount</span><br><span class=\"line\">   5ms modprobe@fuse.service</span><br><span class=\"line\">   5ms systemd-sysusers.service</span><br><span class=\"line\">   5ms systemd-user-sessions.service</span><br><span class=\"line\">   5ms systemd-update-utmp-runlevel.service</span><br><span class=\"line\">   5ms recovery.mount</span><br><span class=\"line\">   4ms lxc-net.service</span><br><span class=\"line\">   4ms ufw.service</span><br><span class=\"line\">   3ms dev-loop0.device</span><br><span class=\"line\">   3ms boot-efi.mount</span><br><span class=\"line\">   3ms systemd-sysctl.service</span><br><span class=\"line\">   3ms vboxautostart-service.service</span><br><span class=\"line\">   3ms ifupdown-pre.service</span><br><span class=\"line\">   3ms vboxballoonctrl-service.service</span><br><span class=\"line\">   2ms var.mount</span><br><span class=\"line\">   2ms systemd-rfkill.service</span><br><span class=\"line\">   2ms vboxweb-service.service</span><br><span class=\"line\">   1ms sys-fs-fuse-connections.mount</span><br><span class=\"line\">   1ms deepin-login-sound.service</span><br><span class=\"line\">   1ms sys-kernel-config.mount</span><br></pre></td></tr></table></figure>\n\n<p><strong>可以通过：</strong><br><code>systemd-analyze plot &gt; start_analyze.svg</code>命令来输出启动耗时的矢量图，如下图所示：</p>\n<p><img src=\"/pictures/10systemd_analyze/image-20230105100608640.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<hr>\n<h1 id=\"systemd-analyze\"><a href=\"#systemd-analyze\" class=\"headerlink\" title=\"systemd-analyze\"></a>systemd-analyze</h1><blockquote>\n<p>systemd-analyze 命令可以方便的记录系统启动耗时详情</p>\n</blockquote>\n<p><strong>可以通过：</strong></p>\n<figure class=\"highlight plaintext\"><figcaption><span>blame``` 来获得详细的进程耗时排名信息：</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">```babyfengfjx@babyfengfjx:~$ systemd-analyze blame</span><br><span class=\"line\">8.382s vmware-USBArbitrator.service</span><br><span class=\"line\">8.140s upower.service</span><br><span class=\"line\">6.655s NetworkManager-wait-online.service</span><br><span class=\"line\">5.138s man-db.service</span><br><span class=\"line\">4.477s deepin-authenticate.service</span><br><span class=\"line\">2.042s plymouth-quit-wait.service</span><br><span class=\"line\">1.222s vmware.service</span><br><span class=\"line\">1.172s udisks2.service</span><br><span class=\"line\">1.138s deepin-accounts-daemon.service</span><br><span class=\"line\">1.122s smartmontools.service</span><br><span class=\"line\"> 996ms apt-daily-upgrade.service</span><br><span class=\"line\"> 974ms logrotate.service</span><br><span class=\"line\"> 876ms systemd-journal-flush.service</span><br><span class=\"line\"> 756ms nvidia-persistenced.service</span><br><span class=\"line\"> 613ms user@1000.service</span><br><span class=\"line\"> 600ms accounts-daemon.service</span><br><span class=\"line\"> 600ms ModemManager.service</span><br><span class=\"line\"> 594ms NetworkManager.service</span><br><span class=\"line\"> 591ms laptop-mode.service</span><br><span class=\"line\"> 591ms gpu-manager.service</span><br><span class=\"line\"> 582ms vboxdrv.service</span><br><span class=\"line\"> 495ms polkit.service</span><br><span class=\"line\"> 477ms apparmor.service</span><br><span class=\"line\"> 425ms dde-filemanager-daemon.service</span><br><span class=\"line\"> 421ms colord.service</span><br><span class=\"line\"> 380ms lightdm.service</span><br><span class=\"line\"> 341ms systemd-modules-load.service</span><br><span class=\"line\"> 315ms ipwatchd.service</span><br><span class=\"line\"> 302ms apt-daily.service</span><br><span class=\"line\"> 236ms winbind.service</span><br><span class=\"line\"> 228ms uengine-container.service</span><br><span class=\"line\"> 226ms libvirt-guests.service</span><br><span class=\"line\"> 180ms smbd.service</span><br><span class=\"line\"> 143ms systemd-fsck@dev-disk-by\\x2duuid-4bd99115\\x2d99b6\\x2d4ab7\\x2dae9b\\x2d72bfa8c9020d.servic</span><br><span class=\"line\"> 142ms dev-nvme0n1p4.device</span><br><span class=\"line\"> 131ms lvm2-monitor.service</span><br><span class=\"line\"> 126ms nmbd.service</span><br><span class=\"line\">  97ms bluetooth.service</span><br><span class=\"line\">  96ms avahi-daemon.service</span><br><span class=\"line\">  92ms fprintd.service</span><br><span class=\"line\">  81ms systemd-logind.service</span><br><span class=\"line\">  81ms systemd-machined.service</span><br><span class=\"line\">  80ms wpa_supplicant.service</span><br><span class=\"line\">  77ms lxc.service</span><br><span class=\"line\">  68ms libvirtd.service</span><br><span class=\"line\">  51ms home.mount</span><br><span class=\"line\">  51ms data.mount</span><br><span class=\"line\">  50ms systemd-udev-trigger.service</span><br><span class=\"line\">  49ms systemd-udevd.service</span><br><span class=\"line\">  41ms systemd-fsck@dev-disk-by\\x2duuid-75d72b1d\\x2d874c\\x2d4a3a\\x2da715\\x2d986a996ee814.servic</span><br><span class=\"line\">  39ms rsyslog.service</span><br><span class=\"line\">  38ms systemd-timesyncd.service</span><br><span class=\"line\">  37ms systemd-fsck@dev-disk-by\\x2duuid-048fef2c\\x2ded60\\x2d4e39\\x2daeef\\x2d0f43b208f9ad.servic</span><br><span class=\"line\">  35ms opt.mount</span><br><span class=\"line\">  32ms systemd-journald.service</span><br><span class=\"line\">  27ms systemd-fsck@dev-disk-by\\x2duuid-FD8E\\x2d6C7A.service</span><br><span class=\"line\">  24ms root.mount</span><br><span class=\"line\">  21ms plymouth-read-write.service</span><br><span class=\"line\">  20ms systemd-tmpfiles-setup-dev.service</span><br><span class=\"line\">  20ms systemd-tmpfiles-setup.service</span><br><span class=\"line\">  19ms alsa-restore.service</span><br><span class=\"line\">  19ms networking.service</span><br><span class=\"line\">  18ms systemd-binfmt.service</span><br><span class=\"line\">  18ms systemd-random-seed.service</span><br><span class=\"line\">  14ms plymouth-start.service</span><br><span class=\"line\">  13ms systemd-update-utmp.service</span><br><span class=\"line\">  13ms lm-sensors.service</span><br><span class=\"line\">  11ms hddtemp.service</span><br><span class=\"line\">  11ms dev-disk-by\\x2duuid-9ee15dc1\\x2d16af\\x2d4dbb\\x2d9161\\x2d6b17bee2461e.swap</span><br><span class=\"line\">  10ms pppd-dns.service</span><br><span class=\"line\">   9ms systemd-tmpfiles-clean.service</span><br><span class=\"line\">   9ms dev-hugepages.mount</span><br><span class=\"line\">   9ms proc-sys-fs-binfmt_misc.mount</span><br><span class=\"line\">   8ms dev-mqueue.mount</span><br><span class=\"line\">   8ms sys-kernel-debug.mount</span><br><span class=\"line\">   7ms sys-kernel-tracing.mount</span><br><span class=\"line\">   7ms modprobe@drm.service</span><br><span class=\"line\">   7ms blk-availability.service</span><br><span class=\"line\">   7ms kmod-static-nodes.service</span><br><span class=\"line\">   7ms systemd-remount-fs.service</span><br><span class=\"line\">   6ms modprobe@configfs.service</span><br><span class=\"line\">   6ms user-runtime-dir@1000.service</span><br><span class=\"line\">   5ms lmt-poll.service</span><br><span class=\"line\">   5ms boot.mount</span><br><span class=\"line\">   5ms modprobe@fuse.service</span><br><span class=\"line\">   5ms systemd-sysusers.service</span><br><span class=\"line\">   5ms systemd-user-sessions.service</span><br><span class=\"line\">   5ms systemd-update-utmp-runlevel.service</span><br><span class=\"line\">   5ms recovery.mount</span><br><span class=\"line\">   4ms lxc-net.service</span><br><span class=\"line\">   4ms ufw.service</span><br><span class=\"line\">   3ms dev-loop0.device</span><br><span class=\"line\">   3ms boot-efi.mount</span><br><span class=\"line\">   3ms systemd-sysctl.service</span><br><span class=\"line\">   3ms vboxautostart-service.service</span><br><span class=\"line\">   3ms ifupdown-pre.service</span><br><span class=\"line\">   3ms vboxballoonctrl-service.service</span><br><span class=\"line\">   2ms var.mount</span><br><span class=\"line\">   2ms systemd-rfkill.service</span><br><span class=\"line\">   2ms vboxweb-service.service</span><br><span class=\"line\">   1ms sys-fs-fuse-connections.mount</span><br><span class=\"line\">   1ms deepin-login-sound.service</span><br><span class=\"line\">   1ms sys-kernel-config.mount</span><br></pre></td></tr></table></figure>\n\n<p><strong>可以通过：</strong><br><code>systemd-analyze plot &gt; start_analyze.svg</code>命令来输出启动耗时的矢量图，如下图所示：</p>\n<p><img src=\"/pictures/10systemd_analyze/image-20230105100608640.png\"></p>\n"},{"title":"linux系统根目录扩容（图形化操作）","date":"2022-10-21T07:21:34.000Z","_content":"> **友情提醒**：数据无价，以下操作请大家提前备份好自己的个人数据，以防操作失误造成不可逆损失。操作前确认自己知晓可能存在的系统损坏或者数据丢失风险！\n> {.is-warning}\n\n# 前言\n\n基于一些历史原因，deepin在全盘安装的时候，划分给根分区的空间只有区区15G，随着用户日渐使用过程中，这15G空间总会是捉襟见肘的，况且当下硬盘动不动就是几个T，其他都给那“没用”的data了，但是已经使用这么久了，总不该要我重新安装选择手动分区吧，而且用户也需要AB分区的备份功能怎么办？\n\n**这个时候就需要进行扩容操作了，过程其实非常简单，当前方案操作流程主要涉及如下内容：**\n\n![操作流程图](pictures/11Root_directory_expansion/202205192200407801_UntitledDiagram.png)\n\n# Step One:进入live系统\n\n![Grub界面](pictures/11Root_directory_expansion/202205201618318171_1.gif)\n\n**很多人可能还不知道如何进入deepin的live系统，可以看上面动图的操作，也是非常简单：**\n\n## 方案一\n\n1. 首先准备好一个装有deepin镜像的启动U盘（推荐使用ventoy）；\n2. 直接走装镜像的路子,启动到系统安装界面；\n3. 唯一区别是在grub安装界面的时候，不要选择任何选项，而是按一下键盘上的 <kbd>E</kbd> 按键（如果是非EFI启动，可能需要按 <kbd>TAB</kbd> 键）；\n4. 按过之后就会出现下图的编辑界面，通过上下左右按键移动到下方红框标识处，删除 **“cd-installer”** 内容；\n\n   ![编辑启动参数](pictures/11Root_directory_expansion/20220520162047272_2.png)\n\n5. 然后直接按键盘上 <kbd>F10</kbd> 按键，接下来就会直接进入live系统界面了。\n6. 进入live系统后是如下界面的样子（下图是V20.6的镜像）：\n\n   > 特别提醒：在live系统下长时间也会自动锁屏了，如果你也遇到了锁屏发现没有密码无法进入系统，可能你需要重新来一次，此时可以直接通过 <kbd>Ctrl</kbd> + <kbd>Alt</kbd> + <kbd>F2</kbd> 进入TTY，然后在TTY界面设置密码即可：`sudo passwd uos`，然后再切回来用设置的密码登录即可。\n\n![桌面](pictures/11Root_directory_expansion/202205201621386209_3.png)\n\n## 方案二\n\n可以使用论坛中大佬提供的live系统，电梯直达：[https://bbs.deepin.org/post/236521](https://bbs.deepin.org/post/236521)\n\n# Step Two:连接网络\n\n我们进入live系统后，第一时间就是记得去连接好网络，准备下一步的工具安装，连接好后确认一下你的网络是否正常哦。\n\n# Step Three:新增系统仓库\n\n因为live系统本身是未带系统仓库的，我们需要手动添加系统仓库信息，具体操作可以看下面动图：\n\n```bash\n# 编辑源文件\nsudo vim /etc/apt/sources.list\n# 然后敲入下面的源地址\ndeb https://community-packages.deepin.com/deepin/ apricot main contrib non-free\n\n```\n\n![添加软件源](pictures/11Root_directory_expansion/202205201623177976_4.gif)\n\n# Step Four:安装gparted应用\n\n1. 先通过 `sudo apt update`更新源信息；\n2. 然后通过 `sudo apt install gparted` 命令来安装gparted工具。\n\n![更新](pictures/11Root_directory_expansion/202205201623434987_5.gif)\n\n# Step Five 使用gparted进行扩容操作\n\n## 观察当前分区\n\n- 应用打开后，可以观察到如下硬盘分区的情况，其中Roota 和 Rootb 则是我们说的AB镜像分区，他们的大小是一样大，也就是我们根目录的大小；\n- 可以看到下图中我的根目录已经被我调整成了30G了（原来只有15G）；\n- 那么下面我们在这30G的基础上，再将其调整成40G大小。\n\n![GParted截图](pictures/11Root_directory_expansion/202205201148141907_image.png)\n\n## 压缩data分区\n\n- 我们首先需要压缩data分区的空间，总共压缩20G出来，后面给Roota 和 Rootb一人分配个10G；\n- 先选中data分区，然后右键选择【更改大小/移动】选项；\n- 然后在“之前的空余空间”设置项中，填写20G大小换算成MB，就是  **20480** ；\n- 再然后在“之后的空余空间”输入框中点击一下，确保为0；\n- 最后点击一下【调整大小】按钮就完事了。\n\n![缩小Data分区](pictures/11Root_directory_expansion/202205201624567146_6.gif)\n\n压缩后的效果如下图所示，多出一个20G可用的空间了：\n\n![结果](pictures/11Root_directory_expansion/202205201625447933_7.png)\n\n完成上面那步骤后，估计你也知道下面该怎么玩了，跟拼积木一样，先将这20G空间与上面紧挨着的Rootb空间合并；\n\n- 然后再将Rootb的空间压缩个10G出来；\n- 最后将这10G空间与Roota合并；\n- 最终应用就大功能告成了！\n\n## Rootb分区合并空闲空间\n\n按照下图操作完成合并\n\n![合并空闲空间](pictures/11Root_directory_expansion/202205201626106018_8.gif)\n\n## Rootb分区压缩空间\n\n与上面同样的操作，将此时扩容后的Rootb空间再压缩10G给Roota。\n\n![缩小B分区](pictures/11Root_directory_expansion/20220520162711983_9.gif)\n\n压缩完后就像下图一样，这个空间接下来就可以给Roota了：\n\n![结果2](pictures/11Root_directory_expansion/202205201627504966_10.png)\n\n## Roota合并空闲空间\n\n老办法，直接按照下图将空余空间直接给Roota拉满即可：\n\n![合并空闲空间2](pictures/11Root_directory_expansion/202205201629096274_12.gif)\n\n## 核实最终空间分配情况\n\n- 有时候可能在操作的时候没注意，会跑出来个1MB的未分配空间，不用理会也是可以的；\n- 不过你要是有强迫症，那按照上面方法，把这些未分配的空间随便合并到哪个空间就行；\n- 要学会举一反三不能钻牛角尖哈。\n\n![最终结果](pictures/11Root_directory_expansion/202205201629343521_13.png)\n\n## 应用最终的数据变更\n\n- 在做这一步之间，还有后悔药，一旦执行了这一步，有可能会存在意外，导致数据不可恢复；\n- **请在执行此操作之前，确认你是想好了，出了问题这锅自己背呀。**\n- 这一步的操作，根据自己机器性能和数据量大小不同，耐心等待即可，完成后就会有成功的提示。\n\n![应用更改](pictures/11Root_directory_expansion/202205201629545073_15.gif)\n\n## 最终核实分区情况：\n\n完成后，即可看到上方的应用按钮是置灰的，此时分区大小也是与你预期是一致的。\n\n![重新分区完成](pictures/11Root_directory_expansion/202205201630101848_16.png)\n\n## 验证你的成果\n\n直接重启你的系统，检查下你的系统盘容量吧！\n\n![重启后](pictures/11Root_directory_expansion/202205201630304146_17.png)\n\n# 后记\n\n- 基于这个根分区大小的诉求，我们也在新版本的安装器中，增加了在全盘安装时可以自定义调整根分区大小的功能，在V20.6新版本镜像中就可以体验了。\n- 此方案不仅仅只是适用于全盘分区的情况，适用于任何分区安装方式的后期调整，只要思路原理清晰，即可顺利完成。\n","source":"_posts/11Root_directory_expansion.md","raw":"---\ntitle: linux系统根目录扩容（图形化操作）\ncategories: \n- linux\n\ntags:\n- linux\n- 扩容\ndate: 2022-10-21 15:21:34\n---\n> **友情提醒**：数据无价，以下操作请大家提前备份好自己的个人数据，以防操作失误造成不可逆损失。操作前确认自己知晓可能存在的系统损坏或者数据丢失风险！\n> {.is-warning}\n\n# 前言\n\n基于一些历史原因，deepin在全盘安装的时候，划分给根分区的空间只有区区15G，随着用户日渐使用过程中，这15G空间总会是捉襟见肘的，况且当下硬盘动不动就是几个T，其他都给那“没用”的data了，但是已经使用这么久了，总不该要我重新安装选择手动分区吧，而且用户也需要AB分区的备份功能怎么办？\n\n**这个时候就需要进行扩容操作了，过程其实非常简单，当前方案操作流程主要涉及如下内容：**\n\n![操作流程图](pictures/11Root_directory_expansion/202205192200407801_UntitledDiagram.png)\n\n# Step One:进入live系统\n\n![Grub界面](pictures/11Root_directory_expansion/202205201618318171_1.gif)\n\n**很多人可能还不知道如何进入deepin的live系统，可以看上面动图的操作，也是非常简单：**\n\n## 方案一\n\n1. 首先准备好一个装有deepin镜像的启动U盘（推荐使用ventoy）；\n2. 直接走装镜像的路子,启动到系统安装界面；\n3. 唯一区别是在grub安装界面的时候，不要选择任何选项，而是按一下键盘上的 <kbd>E</kbd> 按键（如果是非EFI启动，可能需要按 <kbd>TAB</kbd> 键）；\n4. 按过之后就会出现下图的编辑界面，通过上下左右按键移动到下方红框标识处，删除 **“cd-installer”** 内容；\n\n   ![编辑启动参数](pictures/11Root_directory_expansion/20220520162047272_2.png)\n\n5. 然后直接按键盘上 <kbd>F10</kbd> 按键，接下来就会直接进入live系统界面了。\n6. 进入live系统后是如下界面的样子（下图是V20.6的镜像）：\n\n   > 特别提醒：在live系统下长时间也会自动锁屏了，如果你也遇到了锁屏发现没有密码无法进入系统，可能你需要重新来一次，此时可以直接通过 <kbd>Ctrl</kbd> + <kbd>Alt</kbd> + <kbd>F2</kbd> 进入TTY，然后在TTY界面设置密码即可：`sudo passwd uos`，然后再切回来用设置的密码登录即可。\n\n![桌面](pictures/11Root_directory_expansion/202205201621386209_3.png)\n\n## 方案二\n\n可以使用论坛中大佬提供的live系统，电梯直达：[https://bbs.deepin.org/post/236521](https://bbs.deepin.org/post/236521)\n\n# Step Two:连接网络\n\n我们进入live系统后，第一时间就是记得去连接好网络，准备下一步的工具安装，连接好后确认一下你的网络是否正常哦。\n\n# Step Three:新增系统仓库\n\n因为live系统本身是未带系统仓库的，我们需要手动添加系统仓库信息，具体操作可以看下面动图：\n\n```bash\n# 编辑源文件\nsudo vim /etc/apt/sources.list\n# 然后敲入下面的源地址\ndeb https://community-packages.deepin.com/deepin/ apricot main contrib non-free\n\n```\n\n![添加软件源](pictures/11Root_directory_expansion/202205201623177976_4.gif)\n\n# Step Four:安装gparted应用\n\n1. 先通过 `sudo apt update`更新源信息；\n2. 然后通过 `sudo apt install gparted` 命令来安装gparted工具。\n\n![更新](pictures/11Root_directory_expansion/202205201623434987_5.gif)\n\n# Step Five 使用gparted进行扩容操作\n\n## 观察当前分区\n\n- 应用打开后，可以观察到如下硬盘分区的情况，其中Roota 和 Rootb 则是我们说的AB镜像分区，他们的大小是一样大，也就是我们根目录的大小；\n- 可以看到下图中我的根目录已经被我调整成了30G了（原来只有15G）；\n- 那么下面我们在这30G的基础上，再将其调整成40G大小。\n\n![GParted截图](pictures/11Root_directory_expansion/202205201148141907_image.png)\n\n## 压缩data分区\n\n- 我们首先需要压缩data分区的空间，总共压缩20G出来，后面给Roota 和 Rootb一人分配个10G；\n- 先选中data分区，然后右键选择【更改大小/移动】选项；\n- 然后在“之前的空余空间”设置项中，填写20G大小换算成MB，就是  **20480** ；\n- 再然后在“之后的空余空间”输入框中点击一下，确保为0；\n- 最后点击一下【调整大小】按钮就完事了。\n\n![缩小Data分区](pictures/11Root_directory_expansion/202205201624567146_6.gif)\n\n压缩后的效果如下图所示，多出一个20G可用的空间了：\n\n![结果](pictures/11Root_directory_expansion/202205201625447933_7.png)\n\n完成上面那步骤后，估计你也知道下面该怎么玩了，跟拼积木一样，先将这20G空间与上面紧挨着的Rootb空间合并；\n\n- 然后再将Rootb的空间压缩个10G出来；\n- 最后将这10G空间与Roota合并；\n- 最终应用就大功能告成了！\n\n## Rootb分区合并空闲空间\n\n按照下图操作完成合并\n\n![合并空闲空间](pictures/11Root_directory_expansion/202205201626106018_8.gif)\n\n## Rootb分区压缩空间\n\n与上面同样的操作，将此时扩容后的Rootb空间再压缩10G给Roota。\n\n![缩小B分区](pictures/11Root_directory_expansion/20220520162711983_9.gif)\n\n压缩完后就像下图一样，这个空间接下来就可以给Roota了：\n\n![结果2](pictures/11Root_directory_expansion/202205201627504966_10.png)\n\n## Roota合并空闲空间\n\n老办法，直接按照下图将空余空间直接给Roota拉满即可：\n\n![合并空闲空间2](pictures/11Root_directory_expansion/202205201629096274_12.gif)\n\n## 核实最终空间分配情况\n\n- 有时候可能在操作的时候没注意，会跑出来个1MB的未分配空间，不用理会也是可以的；\n- 不过你要是有强迫症，那按照上面方法，把这些未分配的空间随便合并到哪个空间就行；\n- 要学会举一反三不能钻牛角尖哈。\n\n![最终结果](pictures/11Root_directory_expansion/202205201629343521_13.png)\n\n## 应用最终的数据变更\n\n- 在做这一步之间，还有后悔药，一旦执行了这一步，有可能会存在意外，导致数据不可恢复；\n- **请在执行此操作之前，确认你是想好了，出了问题这锅自己背呀。**\n- 这一步的操作，根据自己机器性能和数据量大小不同，耐心等待即可，完成后就会有成功的提示。\n\n![应用更改](pictures/11Root_directory_expansion/202205201629545073_15.gif)\n\n## 最终核实分区情况：\n\n完成后，即可看到上方的应用按钮是置灰的，此时分区大小也是与你预期是一致的。\n\n![重新分区完成](pictures/11Root_directory_expansion/202205201630101848_16.png)\n\n## 验证你的成果\n\n直接重启你的系统，检查下你的系统盘容量吧！\n\n![重启后](pictures/11Root_directory_expansion/202205201630304146_17.png)\n\n# 后记\n\n- 基于这个根分区大小的诉求，我们也在新版本的安装器中，增加了在全盘安装时可以自定义调整根分区大小的功能，在V20.6新版本镜像中就可以体验了。\n- 此方案不仅仅只是适用于全盘分区的情况，适用于任何分区安装方式的后期调整，只要思路原理清晰，即可顺利完成。\n","slug":"11Root_directory_expansion","published":1,"updated":"2023-01-04T10:08:48.214Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clciheilc000lrdxh5l1m7q1n","content":"<blockquote>\n<p><strong>友情提醒</strong>：数据无价，以下操作请大家提前备份好自己的个人数据，以防操作失误造成不可逆损失。操作前确认自己知晓可能存在的系统损坏或者数据丢失风险！<br>{.is-warning}</p>\n</blockquote>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>基于一些历史原因，deepin在全盘安装的时候，划分给根分区的空间只有区区15G，随着用户日渐使用过程中，这15G空间总会是捉襟见肘的，况且当下硬盘动不动就是几个T，其他都给那“没用”的data了，但是已经使用这么久了，总不该要我重新安装选择手动分区吧，而且用户也需要AB分区的备份功能怎么办？</p>\n<p><strong>这个时候就需要进行扩容操作了，过程其实非常简单，当前方案操作流程主要涉及如下内容：</strong></p>\n<p><img src=\"/pictures/11Root_directory_expansion/202205192200407801_UntitledDiagram.png\" alt=\"操作流程图\"></p>\n<h1 id=\"Step-One-进入live系统\"><a href=\"#Step-One-进入live系统\" class=\"headerlink\" title=\"Step One:进入live系统\"></a>Step One:进入live系统</h1><p><img src=\"/pictures/11Root_directory_expansion/202205201618318171_1.gif\" alt=\"Grub界面\"></p>\n<p><strong>很多人可能还不知道如何进入deepin的live系统，可以看上面动图的操作，也是非常简单：</strong></p>\n<h2 id=\"方案一\"><a href=\"#方案一\" class=\"headerlink\" title=\"方案一\"></a>方案一</h2><ol>\n<li><p>首先准备好一个装有deepin镜像的启动U盘（推荐使用ventoy）；</p>\n</li>\n<li><p>直接走装镜像的路子,启动到系统安装界面；</p>\n</li>\n<li><p>唯一区别是在grub安装界面的时候，不要选择任何选项，而是按一下键盘上的 <kbd>E</kbd> 按键（如果是非EFI启动，可能需要按 <kbd>TAB</kbd> 键）；</p>\n</li>\n<li><p>按过之后就会出现下图的编辑界面，通过上下左右按键移动到下方红框标识处，删除 <strong>“cd-installer”</strong> 内容；</p>\n<p><img src=\"/pictures/11Root_directory_expansion/20220520162047272_2.png\" alt=\"编辑启动参数\"></p>\n</li>\n<li><p>然后直接按键盘上 <kbd>F10</kbd> 按键，接下来就会直接进入live系统界面了。</p>\n</li>\n<li><p>进入live系统后是如下界面的样子（下图是V20.6的镜像）：</p>\n<blockquote>\n<p>特别提醒：在live系统下长时间也会自动锁屏了，如果你也遇到了锁屏发现没有密码无法进入系统，可能你需要重新来一次，此时可以直接通过 <kbd>Ctrl</kbd> + <kbd>Alt</kbd> + <kbd>F2</kbd> 进入TTY，然后在TTY界面设置密码即可：<code>sudo passwd uos</code>，然后再切回来用设置的密码登录即可。</p>\n</blockquote>\n</li>\n</ol>\n<p><img src=\"/pictures/11Root_directory_expansion/202205201621386209_3.png\" alt=\"桌面\"></p>\n<h2 id=\"方案二\"><a href=\"#方案二\" class=\"headerlink\" title=\"方案二\"></a>方案二</h2><p>可以使用论坛中大佬提供的live系统，电梯直达：<a href=\"https://bbs.deepin.org/post/236521\">https://bbs.deepin.org/post/236521</a></p>\n<h1 id=\"Step-Two-连接网络\"><a href=\"#Step-Two-连接网络\" class=\"headerlink\" title=\"Step Two:连接网络\"></a>Step Two:连接网络</h1><p>我们进入live系统后，第一时间就是记得去连接好网络，准备下一步的工具安装，连接好后确认一下你的网络是否正常哦。</p>\n<h1 id=\"Step-Three-新增系统仓库\"><a href=\"#Step-Three-新增系统仓库\" class=\"headerlink\" title=\"Step Three:新增系统仓库\"></a>Step Three:新增系统仓库</h1><p>因为live系统本身是未带系统仓库的，我们需要手动添加系统仓库信息，具体操作可以看下面动图：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 编辑源文件</span></span><br><span class=\"line\">sudo vim /etc/apt/sources.list</span><br><span class=\"line\"><span class=\"comment\"># 然后敲入下面的源地址</span></span><br><span class=\"line\">deb https://community-packages.deepin.com/deepin/ apricot main contrib non-free</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/pictures/11Root_directory_expansion/202205201623177976_4.gif\" alt=\"添加软件源\"></p>\n<h1 id=\"Step-Four-安装gparted应用\"><a href=\"#Step-Four-安装gparted应用\" class=\"headerlink\" title=\"Step Four:安装gparted应用\"></a>Step Four:安装gparted应用</h1><ol>\n<li>先通过 <code>sudo apt update</code>更新源信息；</li>\n<li>然后通过 <code>sudo apt install gparted</code> 命令来安装gparted工具。</li>\n</ol>\n<p><img src=\"/pictures/11Root_directory_expansion/202205201623434987_5.gif\" alt=\"更新\"></p>\n<h1 id=\"Step-Five-使用gparted进行扩容操作\"><a href=\"#Step-Five-使用gparted进行扩容操作\" class=\"headerlink\" title=\"Step Five 使用gparted进行扩容操作\"></a>Step Five 使用gparted进行扩容操作</h1><h2 id=\"观察当前分区\"><a href=\"#观察当前分区\" class=\"headerlink\" title=\"观察当前分区\"></a>观察当前分区</h2><ul>\n<li>应用打开后，可以观察到如下硬盘分区的情况，其中Roota 和 Rootb 则是我们说的AB镜像分区，他们的大小是一样大，也就是我们根目录的大小；</li>\n<li>可以看到下图中我的根目录已经被我调整成了30G了（原来只有15G）；</li>\n<li>那么下面我们在这30G的基础上，再将其调整成40G大小。</li>\n</ul>\n<p><img src=\"/pictures/11Root_directory_expansion/202205201148141907_image.png\" alt=\"GParted截图\"></p>\n<h2 id=\"压缩data分区\"><a href=\"#压缩data分区\" class=\"headerlink\" title=\"压缩data分区\"></a>压缩data分区</h2><ul>\n<li>我们首先需要压缩data分区的空间，总共压缩20G出来，后面给Roota 和 Rootb一人分配个10G；</li>\n<li>先选中data分区，然后右键选择【更改大小&#x2F;移动】选项；</li>\n<li>然后在“之前的空余空间”设置项中，填写20G大小换算成MB，就是  <strong>20480</strong> ；</li>\n<li>再然后在“之后的空余空间”输入框中点击一下，确保为0；</li>\n<li>最后点击一下【调整大小】按钮就完事了。</li>\n</ul>\n<p><img src=\"/pictures/11Root_directory_expansion/202205201624567146_6.gif\" alt=\"缩小Data分区\"></p>\n<p>压缩后的效果如下图所示，多出一个20G可用的空间了：</p>\n<p><img src=\"/pictures/11Root_directory_expansion/202205201625447933_7.png\" alt=\"结果\"></p>\n<p>完成上面那步骤后，估计你也知道下面该怎么玩了，跟拼积木一样，先将这20G空间与上面紧挨着的Rootb空间合并；</p>\n<ul>\n<li>然后再将Rootb的空间压缩个10G出来；</li>\n<li>最后将这10G空间与Roota合并；</li>\n<li>最终应用就大功能告成了！</li>\n</ul>\n<h2 id=\"Rootb分区合并空闲空间\"><a href=\"#Rootb分区合并空闲空间\" class=\"headerlink\" title=\"Rootb分区合并空闲空间\"></a>Rootb分区合并空闲空间</h2><p>按照下图操作完成合并</p>\n<p><img src=\"/pictures/11Root_directory_expansion/202205201626106018_8.gif\" alt=\"合并空闲空间\"></p>\n<h2 id=\"Rootb分区压缩空间\"><a href=\"#Rootb分区压缩空间\" class=\"headerlink\" title=\"Rootb分区压缩空间\"></a>Rootb分区压缩空间</h2><p>与上面同样的操作，将此时扩容后的Rootb空间再压缩10G给Roota。</p>\n<p><img src=\"/pictures/11Root_directory_expansion/20220520162711983_9.gif\" alt=\"缩小B分区\"></p>\n<p>压缩完后就像下图一样，这个空间接下来就可以给Roota了：</p>\n<p><img src=\"/pictures/11Root_directory_expansion/202205201627504966_10.png\" alt=\"结果2\"></p>\n<h2 id=\"Roota合并空闲空间\"><a href=\"#Roota合并空闲空间\" class=\"headerlink\" title=\"Roota合并空闲空间\"></a>Roota合并空闲空间</h2><p>老办法，直接按照下图将空余空间直接给Roota拉满即可：</p>\n<p><img src=\"/pictures/11Root_directory_expansion/202205201629096274_12.gif\" alt=\"合并空闲空间2\"></p>\n<h2 id=\"核实最终空间分配情况\"><a href=\"#核实最终空间分配情况\" class=\"headerlink\" title=\"核实最终空间分配情况\"></a>核实最终空间分配情况</h2><ul>\n<li>有时候可能在操作的时候没注意，会跑出来个1MB的未分配空间，不用理会也是可以的；</li>\n<li>不过你要是有强迫症，那按照上面方法，把这些未分配的空间随便合并到哪个空间就行；</li>\n<li>要学会举一反三不能钻牛角尖哈。</li>\n</ul>\n<p><img src=\"/pictures/11Root_directory_expansion/202205201629343521_13.png\" alt=\"最终结果\"></p>\n<h2 id=\"应用最终的数据变更\"><a href=\"#应用最终的数据变更\" class=\"headerlink\" title=\"应用最终的数据变更\"></a>应用最终的数据变更</h2><ul>\n<li>在做这一步之间，还有后悔药，一旦执行了这一步，有可能会存在意外，导致数据不可恢复；</li>\n<li><strong>请在执行此操作之前，确认你是想好了，出了问题这锅自己背呀。</strong></li>\n<li>这一步的操作，根据自己机器性能和数据量大小不同，耐心等待即可，完成后就会有成功的提示。</li>\n</ul>\n<p><img src=\"/pictures/11Root_directory_expansion/202205201629545073_15.gif\" alt=\"应用更改\"></p>\n<h2 id=\"最终核实分区情况：\"><a href=\"#最终核实分区情况：\" class=\"headerlink\" title=\"最终核实分区情况：\"></a>最终核实分区情况：</h2><p>完成后，即可看到上方的应用按钮是置灰的，此时分区大小也是与你预期是一致的。</p>\n<p><img src=\"/pictures/11Root_directory_expansion/202205201630101848_16.png\" alt=\"重新分区完成\"></p>\n<h2 id=\"验证你的成果\"><a href=\"#验证你的成果\" class=\"headerlink\" title=\"验证你的成果\"></a>验证你的成果</h2><p>直接重启你的系统，检查下你的系统盘容量吧！</p>\n<p><img src=\"/pictures/11Root_directory_expansion/202205201630304146_17.png\" alt=\"重启后\"></p>\n<h1 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h1><ul>\n<li>基于这个根分区大小的诉求，我们也在新版本的安装器中，增加了在全盘安装时可以自定义调整根分区大小的功能，在V20.6新版本镜像中就可以体验了。</li>\n<li>此方案不仅仅只是适用于全盘分区的情况，适用于任何分区安装方式的后期调整，只要思路原理清晰，即可顺利完成。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p><strong>友情提醒</strong>：数据无价，以下操作请大家提前备份好自己的个人数据，以防操作失误造成不可逆损失。操作前确认自己知晓可能存在的系统损坏或者数据丢失风险！<br>{.is-warning}</p>\n</blockquote>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>基于一些历史原因，deepin在全盘安装的时候，划分给根分区的空间只有区区15G，随着用户日渐使用过程中，这15G空间总会是捉襟见肘的，况且当下硬盘动不动就是几个T，其他都给那“没用”的data了，但是已经使用这么久了，总不该要我重新安装选择手动分区吧，而且用户也需要AB分区的备份功能怎么办？</p>\n<p><strong>这个时候就需要进行扩容操作了，过程其实非常简单，当前方案操作流程主要涉及如下内容：</strong></p>\n<p><img src=\"/pictures/11Root_directory_expansion/202205192200407801_UntitledDiagram.png\" alt=\"操作流程图\"></p>\n<h1 id=\"Step-One-进入live系统\"><a href=\"#Step-One-进入live系统\" class=\"headerlink\" title=\"Step One:进入live系统\"></a>Step One:进入live系统</h1><p><img src=\"/pictures/11Root_directory_expansion/202205201618318171_1.gif\" alt=\"Grub界面\"></p>\n<p><strong>很多人可能还不知道如何进入deepin的live系统，可以看上面动图的操作，也是非常简单：</strong></p>\n<h2 id=\"方案一\"><a href=\"#方案一\" class=\"headerlink\" title=\"方案一\"></a>方案一</h2><ol>\n<li><p>首先准备好一个装有deepin镜像的启动U盘（推荐使用ventoy）；</p>\n</li>\n<li><p>直接走装镜像的路子,启动到系统安装界面；</p>\n</li>\n<li><p>唯一区别是在grub安装界面的时候，不要选择任何选项，而是按一下键盘上的 <kbd>E</kbd> 按键（如果是非EFI启动，可能需要按 <kbd>TAB</kbd> 键）；</p>\n</li>\n<li><p>按过之后就会出现下图的编辑界面，通过上下左右按键移动到下方红框标识处，删除 <strong>“cd-installer”</strong> 内容；</p>\n<p><img src=\"/pictures/11Root_directory_expansion/20220520162047272_2.png\" alt=\"编辑启动参数\"></p>\n</li>\n<li><p>然后直接按键盘上 <kbd>F10</kbd> 按键，接下来就会直接进入live系统界面了。</p>\n</li>\n<li><p>进入live系统后是如下界面的样子（下图是V20.6的镜像）：</p>\n<blockquote>\n<p>特别提醒：在live系统下长时间也会自动锁屏了，如果你也遇到了锁屏发现没有密码无法进入系统，可能你需要重新来一次，此时可以直接通过 <kbd>Ctrl</kbd> + <kbd>Alt</kbd> + <kbd>F2</kbd> 进入TTY，然后在TTY界面设置密码即可：<code>sudo passwd uos</code>，然后再切回来用设置的密码登录即可。</p>\n</blockquote>\n</li>\n</ol>\n<p><img src=\"/pictures/11Root_directory_expansion/202205201621386209_3.png\" alt=\"桌面\"></p>\n<h2 id=\"方案二\"><a href=\"#方案二\" class=\"headerlink\" title=\"方案二\"></a>方案二</h2><p>可以使用论坛中大佬提供的live系统，电梯直达：<a href=\"https://bbs.deepin.org/post/236521\">https://bbs.deepin.org/post/236521</a></p>\n<h1 id=\"Step-Two-连接网络\"><a href=\"#Step-Two-连接网络\" class=\"headerlink\" title=\"Step Two:连接网络\"></a>Step Two:连接网络</h1><p>我们进入live系统后，第一时间就是记得去连接好网络，准备下一步的工具安装，连接好后确认一下你的网络是否正常哦。</p>\n<h1 id=\"Step-Three-新增系统仓库\"><a href=\"#Step-Three-新增系统仓库\" class=\"headerlink\" title=\"Step Three:新增系统仓库\"></a>Step Three:新增系统仓库</h1><p>因为live系统本身是未带系统仓库的，我们需要手动添加系统仓库信息，具体操作可以看下面动图：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 编辑源文件</span></span><br><span class=\"line\">sudo vim /etc/apt/sources.list</span><br><span class=\"line\"><span class=\"comment\"># 然后敲入下面的源地址</span></span><br><span class=\"line\">deb https://community-packages.deepin.com/deepin/ apricot main contrib non-free</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/pictures/11Root_directory_expansion/202205201623177976_4.gif\" alt=\"添加软件源\"></p>\n<h1 id=\"Step-Four-安装gparted应用\"><a href=\"#Step-Four-安装gparted应用\" class=\"headerlink\" title=\"Step Four:安装gparted应用\"></a>Step Four:安装gparted应用</h1><ol>\n<li>先通过 <code>sudo apt update</code>更新源信息；</li>\n<li>然后通过 <code>sudo apt install gparted</code> 命令来安装gparted工具。</li>\n</ol>\n<p><img src=\"/pictures/11Root_directory_expansion/202205201623434987_5.gif\" alt=\"更新\"></p>\n<h1 id=\"Step-Five-使用gparted进行扩容操作\"><a href=\"#Step-Five-使用gparted进行扩容操作\" class=\"headerlink\" title=\"Step Five 使用gparted进行扩容操作\"></a>Step Five 使用gparted进行扩容操作</h1><h2 id=\"观察当前分区\"><a href=\"#观察当前分区\" class=\"headerlink\" title=\"观察当前分区\"></a>观察当前分区</h2><ul>\n<li>应用打开后，可以观察到如下硬盘分区的情况，其中Roota 和 Rootb 则是我们说的AB镜像分区，他们的大小是一样大，也就是我们根目录的大小；</li>\n<li>可以看到下图中我的根目录已经被我调整成了30G了（原来只有15G）；</li>\n<li>那么下面我们在这30G的基础上，再将其调整成40G大小。</li>\n</ul>\n<p><img src=\"/pictures/11Root_directory_expansion/202205201148141907_image.png\" alt=\"GParted截图\"></p>\n<h2 id=\"压缩data分区\"><a href=\"#压缩data分区\" class=\"headerlink\" title=\"压缩data分区\"></a>压缩data分区</h2><ul>\n<li>我们首先需要压缩data分区的空间，总共压缩20G出来，后面给Roota 和 Rootb一人分配个10G；</li>\n<li>先选中data分区，然后右键选择【更改大小&#x2F;移动】选项；</li>\n<li>然后在“之前的空余空间”设置项中，填写20G大小换算成MB，就是  <strong>20480</strong> ；</li>\n<li>再然后在“之后的空余空间”输入框中点击一下，确保为0；</li>\n<li>最后点击一下【调整大小】按钮就完事了。</li>\n</ul>\n<p><img src=\"/pictures/11Root_directory_expansion/202205201624567146_6.gif\" alt=\"缩小Data分区\"></p>\n<p>压缩后的效果如下图所示，多出一个20G可用的空间了：</p>\n<p><img src=\"/pictures/11Root_directory_expansion/202205201625447933_7.png\" alt=\"结果\"></p>\n<p>完成上面那步骤后，估计你也知道下面该怎么玩了，跟拼积木一样，先将这20G空间与上面紧挨着的Rootb空间合并；</p>\n<ul>\n<li>然后再将Rootb的空间压缩个10G出来；</li>\n<li>最后将这10G空间与Roota合并；</li>\n<li>最终应用就大功能告成了！</li>\n</ul>\n<h2 id=\"Rootb分区合并空闲空间\"><a href=\"#Rootb分区合并空闲空间\" class=\"headerlink\" title=\"Rootb分区合并空闲空间\"></a>Rootb分区合并空闲空间</h2><p>按照下图操作完成合并</p>\n<p><img src=\"/pictures/11Root_directory_expansion/202205201626106018_8.gif\" alt=\"合并空闲空间\"></p>\n<h2 id=\"Rootb分区压缩空间\"><a href=\"#Rootb分区压缩空间\" class=\"headerlink\" title=\"Rootb分区压缩空间\"></a>Rootb分区压缩空间</h2><p>与上面同样的操作，将此时扩容后的Rootb空间再压缩10G给Roota。</p>\n<p><img src=\"/pictures/11Root_directory_expansion/20220520162711983_9.gif\" alt=\"缩小B分区\"></p>\n<p>压缩完后就像下图一样，这个空间接下来就可以给Roota了：</p>\n<p><img src=\"/pictures/11Root_directory_expansion/202205201627504966_10.png\" alt=\"结果2\"></p>\n<h2 id=\"Roota合并空闲空间\"><a href=\"#Roota合并空闲空间\" class=\"headerlink\" title=\"Roota合并空闲空间\"></a>Roota合并空闲空间</h2><p>老办法，直接按照下图将空余空间直接给Roota拉满即可：</p>\n<p><img src=\"/pictures/11Root_directory_expansion/202205201629096274_12.gif\" alt=\"合并空闲空间2\"></p>\n<h2 id=\"核实最终空间分配情况\"><a href=\"#核实最终空间分配情况\" class=\"headerlink\" title=\"核实最终空间分配情况\"></a>核实最终空间分配情况</h2><ul>\n<li>有时候可能在操作的时候没注意，会跑出来个1MB的未分配空间，不用理会也是可以的；</li>\n<li>不过你要是有强迫症，那按照上面方法，把这些未分配的空间随便合并到哪个空间就行；</li>\n<li>要学会举一反三不能钻牛角尖哈。</li>\n</ul>\n<p><img src=\"/pictures/11Root_directory_expansion/202205201629343521_13.png\" alt=\"最终结果\"></p>\n<h2 id=\"应用最终的数据变更\"><a href=\"#应用最终的数据变更\" class=\"headerlink\" title=\"应用最终的数据变更\"></a>应用最终的数据变更</h2><ul>\n<li>在做这一步之间，还有后悔药，一旦执行了这一步，有可能会存在意外，导致数据不可恢复；</li>\n<li><strong>请在执行此操作之前，确认你是想好了，出了问题这锅自己背呀。</strong></li>\n<li>这一步的操作，根据自己机器性能和数据量大小不同，耐心等待即可，完成后就会有成功的提示。</li>\n</ul>\n<p><img src=\"/pictures/11Root_directory_expansion/202205201629545073_15.gif\" alt=\"应用更改\"></p>\n<h2 id=\"最终核实分区情况：\"><a href=\"#最终核实分区情况：\" class=\"headerlink\" title=\"最终核实分区情况：\"></a>最终核实分区情况：</h2><p>完成后，即可看到上方的应用按钮是置灰的，此时分区大小也是与你预期是一致的。</p>\n<p><img src=\"/pictures/11Root_directory_expansion/202205201630101848_16.png\" alt=\"重新分区完成\"></p>\n<h2 id=\"验证你的成果\"><a href=\"#验证你的成果\" class=\"headerlink\" title=\"验证你的成果\"></a>验证你的成果</h2><p>直接重启你的系统，检查下你的系统盘容量吧！</p>\n<p><img src=\"/pictures/11Root_directory_expansion/202205201630304146_17.png\" alt=\"重启后\"></p>\n<h1 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h1><ul>\n<li>基于这个根分区大小的诉求，我们也在新版本的安装器中，增加了在全盘安装时可以自定义调整根分区大小的功能，在V20.6新版本镜像中就可以体验了。</li>\n<li>此方案不仅仅只是适用于全盘分区的情况，适用于任何分区安装方式的后期调整，只要思路原理清晰，即可顺利完成。</li>\n</ul>\n"},{"title":"python基础知识","date":"2024-01-20T07:21:34.000Z","_content":"# Python 简介\n\n## Python 定义\n\n![image-20230103160116244](pictures/07python_basic/image-20230103160116244.png)\n\n是一个免费、开源、跨平台、动态、面向对象的编程语言。\n\n## Python程序的执行方式\n\n### 交互式\n\n> 在命令行输入指令，回车即可得到结果。\n\n打开终端》进入交互式：python3》编写代码：print(\"hello world\")》离开交互式：exit()\n\n### 文件式\n\n将指令编写到.py文件，可以重复运行程序：编写文件》打开终端》进入程序所在目录：cd 目录》执行程序： python3 文件名\n\n## 执行过程\n\n![image-20230103160129679](pictures/07python_basic/image-20230103160129679.png)\n\n计算机只能识别机器码(1010)，不能识别源代码(python)。\n\n14. 由源代码转变成机器码的过程分成两类：编译和解释。\n\n15. 编译：在程序运行之前，通过编译器将源代码变成机器码，例如：C语言。\n\n-- 优点：运行速度快\n\n-- 缺点：开发效率低，不能跨平台。\n\n16. 解释：在程序运行之时，通过解释器对程序逐行翻译，然后执行。例如Javascript\n\n-- 优点：开发效率高，可以跨平台；\n\n-- 缺点：运行速度慢。\n\n17. python是解释型语言，但为了提高运行速度，使用了一种编译的方法。编译之后得到pyc文件，存储了字节码（特定于Python的表现形式，不是机器码）。\n\n> 源代码 -- 编译 --> 字节码 -- 解释 --> 机器码\n\n|------------1次---------|\n\n## 解释器类型\n\n18. CPython（C语言开发)\n\n19. Jython (java开发)\n\n20. IronPython (.net开发)\n\n# 数据基本运算\n\n## 基础知识\n\n### pycharm常用快捷键\n\n21. 移动到本行开头：home键\n\n22. 移动到本行末尾：end键盘\n\n23. 注释代码：ctrl + /\n\n24. 复制行：ctrl +d\n\n25. 选择列：鼠标左键 + alt\n\n26. 移动行：shift + alt + 上下箭头\n\n27. 智能提示：ctrl + space\n\n28. 代码格式化：ctrl+alt+l\n\n### 注释\n\n> 给人看的，通常是对代码的描述信息。\n\n29. 单行注释：以#号开头。\n\n30. 多行注释：三引号开头，三引号结尾。\n\n### 函数\n\n表示一个功能，函数定义者是提供功能的人，函数调用者是使用功能的人。\n\n例如：\n\n31. print(数据) 作用：将括号中的内容显示在控制台中\n\n32. 变量 = input(\"需要显示的内容\") 作用：将用户输入的内容赋值给变量\n\n## 变量\n\n33. 定义：关联一个对象的标识符。\n\n34. 命名：必须是字母或下划线开头，后跟字母、数字、下划线。\n\n不能使用关键字(蓝色)，否则发生语法错误：SyntaxError: invalid syntax。\n\n35. 建议命名：字母小写，多个单词以下划线隔开。\n\nclass_name\n\n36. 赋值：创建一个变量或改变一个变量关联的数据。\n\n37. 语法：变量名 = 数据\n\n变量名1 = 变量名2 = 数据\n\n变量名1, 变量名2, = 数据1, 数据2\n\n## del 语句\n\n38. 语法:\n\n> del 变量名1, 变量名2\n\n39. 作用：\n\n> 用于删除变量,同时解除与对象的关联.如果可能则释放对象。\n\n40. 自动化内存管理的引用计数：\n\n> 每个对象记录被变量绑定(引用)的数量,当为0时被销毁。\n\n## 核心数据类型\n\n41. 在python中变量没有类型，但关联的对象有类型。\n\n42. 通过type函数可查看。\n\n### 空值对象 None\n\n43. 表示不存在的特殊对象。\n\n44. 作用：占位和解除与对象的关联。\n\n### 整形int\n\n45. 表示整数，包含正数、负数、0。\n\n> 如： -5, 100, 0\n\n46. 字面值：\n\n> 十进制：5\n\n二进制：0b开头，后跟1或者1\n\n八进制：0o开头，后跟0~7\n\n十六进制：0x开头，后跟0~9,A~F,a~f\n\n### 浮点型float\n\n47. 表示小数，包含正数、负数，0.0)。\n\n48. 字面值：\n\n- 小数：1.0 2.5\n\n- 科学计数法：e/E (正负号) 指数\n\n- 1.23e-2 (等同于0.0123)\n\n- 1.23456e5(等同于123456.0)\n\n### 字符串str\n\n是用来记录文本信息(文字信息)。\n\n字面值：双引号\n\n### 复数complex\n\n由实部和虚部组成的数字。\n\n虚部是以j或J结尾。\n\n字面值： 1j 1+1j 1-1j\n\n### 布尔bool\n\n用来表示真和假的类型\n\nTrue 表示真(条件满足或成立)，本质是1\n\nFalse 表示假(条件不满足或不成立)，本质是0\n\n## 数据类型转换\n\n49. 转换为整形: int(数据)\n\n50. 转换为浮点型:float(数据)\n\n51. 转换为字符串:str(数据)\n\n52. 转换为布尔:bool(数据)\n\n结果为False：bool(0) bool(0.0) bool(None)\n\n53. 混合类型自动升级：\n\n- 1 + 2.14 返回的结果是 3.14\n\n- 1 + 3.0 返回结果是: 4.0\n\n## 运算符\n\n### 算术运算符\n\n+ 加法\n\n- 减法\n\n* 乘法\n\n- / 除法：结果为浮点数\n\n- // 地板除：除的结果去掉小数部分\n\n- % 求余\n\n- ** 幂运算\n\n优先级从高到低：\n\n-  ()\n\n- **\n\n* / % //\n\n+ -\n\n### 增强运算符\n\ny += x 等同于 y = y + x\n\ny -= x 等同于 y = y - x\n\ny *= x 等同于 y = y * x\n\ny /= x 等同于 y = y / x\n\ny //= x 等同于 y = y // x\n\ny %= x 等同于 y = y % x\n\ny **= x 等同于 y = y ** x\n\n### 比较运算符\n\n-  <\t\t小于\n\n- <=\t\t小于等于\n\n-  \\>\t\t大于\n\n- \\>=\t\t大于等于\n\n-  ==\t\t等于\n\n-  !=\t\t不等于\n\n返回布尔类型的值\n\n比较运算的数学表示方式:0 <= x <= 100\n\n### 逻辑运算符\n\n#### 与and\n\n表示并且的关系，一假俱假。\n\n示例:\n\nTrue and True # True\n\nTrue and False # False\n\nFalse and True # False\n\nFalse and False # False\n\n#### 或or\n\n表示或者的关系，一真俱真\n\n示例:\n\nTrue or True # True\n\nTrue or False # True\n\nFalse or True # True\n\nFalse or False # False\n\n#### 非 not\n\n表示取反\n\n例如：\n\nnot True # 返回False\n\nnot False # 返回True\n\n#### 短路运算\n\n一但结果确定，后面的语句将不再执行。\n\n### 身份运算符\n\n语法:\n\nx is y\n\nx is not y\n\n作用：\n\nis 用于判断两个对象是否是同一个对象,是时返回True,否则返回False。\n\nis not 的作用与is相反\n\n### 优先级\n\n高到低：\n\n- 算数运算符\n\n- 比较运算符\n\n- 快捷运算符\n\n- 身份运算符\n\n- 逻辑运算符\n\n# 语句\n\n## 行\n\n54. 物理行：程序员编写代码的行。\n\n55. 逻辑行：python解释器需要执行的指令。\n\n56. 建议一个逻辑行在一个物理行上。\n\n57. 如果一个物理行中使用多个逻辑行，需要使用分号；隔开。\n\n5. 如果逻辑行过长，可以使用隐式换行或显式换行。\n\n隐式换行：所有括号的内容换行,称为隐式换行\n\n括号包括: () [] {} 三种\n\n显式换行：通过折行符 \\ (反斜杠)换行，必须放在一行的末尾，目的是告诉解释器,下一行也是本行的语句。\n\n## pass 语句\n\n通常用来填充语法空白。\n\n## 选择语句\n\n### If elif else 语句\n\n58. 作用:\n\n让程序根据条件选择性的执行语句。\n\n59. 语法:\n\nif 条件1:\n\n​\t语句块1\n\nelif 条件2:\n\n​\t语句块2\n\nelse:\n\n​\t语句块3\n\n60. 说明:\n\nelif 子句可以有0个或多个。\n\nelse 子句可以有0个或1个，且只能放在if语句的最后。\n\n### if 语句的真值表达式\n\nif 100:\n\n​\tprint(\"真值\")\n\n等同于\n\nif bool(100):\n\n​\tprint(\"真值\")\n\n### 条件表达式\n\n语法：变量 = 结果1 if 条件 else 结果2\n\n作用：根据条件(True/False) 来决定返回结果1还是结果2。\n\n## 循环语句\n\n### while语句\n\n61. 作用:\n\n可以让一段代码满足条件，重复执行。\n\n62. 语法:\n\nwhile 条件:\n\n​\t满足条件执行的语句\n\nelse:\n\n​\t不满足条件执行的语句\n\n63. 说明:\n\nelse子句可以省略。\n\n在循环体内用break终止循环时,else子句不执行。\n\n### for 语句\n\n64. 作用:\n\n用来遍历可迭代对象的数据元素。\n\n可迭代对象是指能依次获取数据元素的对象，例如：容器类型。\n\n65. 语法:\n\nfor 变量列表 in 可迭代对象:\n\n​\t语句块1\n\nelse:\n\n​\t语句块2\n\n66. 说明:\n\nelse子句可以省略。\n\n在循环体内用break终止循环时,else子句不执行。\n\n### range 函数\n\n67. 作用:\n\n用来创建一个生成一系列整数的可迭代对象(也叫整数序列生成器)。\n\n68. 语法:\n\nrange(开始点，结束点，间隔)\n\n69. 说明:\n\n函数返回的可迭代对象可以用for取出其中的元素\n\n返回的数字不包含结束点\n\n开始点默认为0\n\n间隔默认值为1\n\n## 跳转语句\n\n### break 语句\n\n70. 跳出循环体，后面的代码不再执行。\n\n71. 可以让while语句的else部分不执行。\n\n### continue 语句\n\n跳过本次，继续下次循环。\n\n# 容器类型\n\n## 通用操作\n\n### 数学运算符\n\n72. +：用于拼接两个容器\n\n73. +=：用原容器与右侧容器拼接,并重新绑定变量\n\n74. *：重复生成容器元素\n\n75. *=：用原容器生成重复元素, 并重新绑定变量\n\n76. < <= > >= == !=：依次比较两个容器中元素,一但不同则返回比较结果。\n\n### 成员运算符\n\n77. 语法：\n\n数据 in 序列\n\n数据 not in 序列\n\n78. 作用：\n\n如果在指定的序列中找到值，返回bool类型。\n\n### 索引index\n\n79. 作用：定位单个容器元素\n\n80. 语法：容器[整数]\n\n81. 说明：\n\n正向索引从0开始，第二个索引为1，最后一个为len(s)-1。\n\n反向索引从-1开始,-1代表最后一个,-2代表倒数第二个,以此类推,第一个是-len(s)。\n\n### 切片slice\n\n82. 作用：\n\n定位多个容器元素。\n\n83. 语法：\n\n容器[(开始索引):(结束索引)(:(步长))]\n\n84. 说明：\n\n小括号()括起的部分代表可省略\n\n结束索引不包含该位置元素\n\n步长是切片每次获取完当前元素后移动的偏移量\n\n### 内建函数\n\n85. len(x) 返回序列的长度\n\n86. max(x) 返回序列的最大值元素\n\n87. min(x) 返回序列的最小值元素\n\n88. sum(x) 返回序列中所有元素的和(元素必须是数值类型)\n\n## 字符串 str\n\n### 定义\n\n> 由一系列字符组成的不可变序列容器，存储的是字符的编码值。\n\n### 编码\n\n89. 字节byte：计算机最小存储单位，等于8 位bit.\n\n90. 字符：单个的数字，文字与符号。\n\n91. 字符集(码表)：存储字符与二进制序列的对应关系。\n\n92. 编码：将字符转换为对应的二进制序列的过程。\n\n93. 解码：将二进制序列转换为对应的字符的过程。\n\n94. 编码方式：\n\n--ASCII编码：包含英文、数字等字符，每个字符1个字节。\n\n--GBK编码：兼容ASCII编码，包含21003个中文；英文1个字节，汉字2个字节。\n\n--Unicode字符集：国际统一编码，旧字符集每个字符2字节，新字符集4字节。\n\n--UTF-8编码：Unicode的存储与传输方式，英文1字节，中文3字节。\n\n#### 相关函数\n\n95. ord(字符串):返回该字符串的Unicode码。\n\n96. chr(整数):返回该整数对应的字符串。\n\n### 字面值\n\n#### 单引和双引号的区别\n\n97. 单引号内的双引号不算结束符\n\n98. 双引号内的单引号不算结束符\n\n#### 三引号作用\n\n99. 换行会自动转换为换行符\\n\n\n100. 三引号内可以包含单引号和双引号\n\n101. 作为文档字符串\n\n#### 转义字符\n\n102. 改变字符的原始含义。\n\n> \\' \\\" \\\"\"\" \\n \\\\ \\t \\0 空字符\n\n103. 原始字符串：取消转义。\n\na = r\"C:\\newfile\\test.py\"\n\n#### 字符串格式化\n\n104. 定义：\n\n> 生成一定格式的字符串。\n\n105. 语法：\n\n> 字符串%(变量)\n\n\"我的名字是%s,年龄是%s\" % (name, age)\n\n106. 类型码：\n\n> %s 字符串 %d整数 %f 浮点数\n\n## 列表 list\n\n### 定义\n\n由一系列变量组成的可变序列容器。\n\n### 基础操作\n\n107. 创建列表：\n\n> 列表名 = []\n\n列表名 = list(可迭代对象)\n\n108. 添加元素：\n\n> 列表名.append(元素)\n\n列表.insert(索引，元素)\n\n109. 定位元素：\n\n> 列表名[索引] = 元素\n\n变量 = 列表名[索引]\n\n变量 = 列表名[切片] # 赋值给变量的是切片所创建的新列表\n\n列表名[切片] = 容器 # 右侧必须是可迭代对象，左侧切片没有创建新列表。遍历列表：\n\n正向：\n\nfor 变量名 in 列表名:\n\n变量名就是元素\n\n反向：\n\nfor 索引名 in range(len(列表名)-1,-1,-1):\n\n列表名[索引名]就是元素\n\n110. 删除元素：\n\n> 列表名.remove(元素)\n\ndel 列表名[索引或切片]\n\n### 深拷贝和浅拷贝\n\n浅拷贝：复制过程中,只复制一层变量,不会复制深层变量绑定的对象的复制过程。\n\n深拷贝：复制整个依懒的变量。\n\n### 列表VS字符串\n\n111. 列表和字符串都是序列,元素之间有先后顺序关系。\n\n112. 字符串是不可变的序列,列表是可变的序列。\n\n113. 字符串中每个元素只能存储字符,而列表可以存储任意类型。\n\n114. 列表和字符串都是可迭代对象。\n\n115. 函数：\n\n> 将多个字符串拼接为一个。\n\nresult = \"连接符\".join(列表)\n\n将一个字符串拆分为多个。\n\n列表 = \"a-b-c-d\".split(\"分隔符\")\n\n### 列表推导式\n\n116. 定义：\n\n> 使用简易方法，将可迭代对象转换为列表。\n\n117. 语法：\n\n> 变量 = [表达式 for 变量 in 可迭代对象]\n\n变量 = [表达式 for 变量 in 可迭代对象 if 条件]\n\n118. 说明:\n\n> 如果if真值表达式的布尔值为False,则可迭代对象生成的数据将被丢弃。\n\n### 列表推导式嵌套\n\n119. 语法：\n\n> 变量 = [表达式 for 变量1 in 可迭代对象1 for 变量2 in可迭代对象2]\n\n120. 传统写法：\n\nresult = []\n\nfor r in [\"a\", \"b\", \"c\"]:\n\nfor c in [\"A\", \"B\", \"C\"]:\n\nresult.append(r + c)\n\n121. 推导式写法：\n\nresult = [r + c for r in list01 for c in list02]\n\n## 元组 tuple\n\n### 定义\n\n122. 由一系列变量组成的不可变序列容器。\n\n123. 不可变是指一但创建，不可以再添加/删除/修改元素。\n\n### 基础操作\n\n124. 创建空元组：\n\n元组名 = ()\n\n元组名 = tuple()\n\n125. 创建非空元组：\n\n元组名 = (20,)\n\n元组名 = (1, 2, 3)\n\n元组名 = 100,200,300\n\n元组名 = tuple(可迭代对象)\n\n126. 获取元素：\n\n变量 = 元组名[索引]\n\n变量 = 元组名[切片] # 赋值给变量的是切片所创建的新列表\n\n127. 遍历元组：\n\n正向：\n\nfor 变量名 in 列表名:\n\n变量名就是元素\n\n反向：\n\nfor 索引名 in range(len(列表名)-1,-1,-1):\n\n元组名[索引名]就是元素\n\n### 作用\n\n128. 元组与列表都可以存储一系列变量，由于列表会预留内存空间，所以可以增加元素。\n\n129. 元组会按需分配内存，所以如果变量数量固定，建议使用元组，因为占用空间更小。\n\n130. 应用：\n\n变量交换的本质就是创建元组：x, y = （y, x ）\n\n格式化字符串的本质就是创建元祖：\"姓名:%s, 年龄:%d\" % (\"tarena\", 15)\n\n## 字典 dict\n\n### 定义\n\n131. 由一系列键值对组成的可变散列容器。\n\n132. 散列：对键进行哈希运算，确定在内存中的存储位置，每条数据存储无先后顺序。\n\n133. 键必须惟一且不可变(字符串/数字/元组)，值没有限制。\n\n### 基础操作\n\n134. 创建字典：\n\n字典名 = {键1：值1，键2：值2}\n\n字典名 = dict (可迭代对象)\n\n135. 添加/修改元素：\n\n语法:\n\n字典名[键] = 数据\n\n说明:\n\n键不存在，创建记录。\n\n键存在，修改值。\n\n136. 获取元素：\n\n变量 = 字典名[键] # 没有键则错误\n\n137. 遍历字典：\n\nfor 键名 in 字典名:\n\n​\t字典名[键名]\n\nfor 键名,值名 in 字典名.items():\n\n语句\n\n138. 删除元素：\n\n> del 字典名[键]\n\n### 字典推导式\n\n139. 定义：\n\n使用简易方法，将可迭代对象转换为字典。\n\n140. 语法:\n\n{键:值 for 变量 in 可迭代对象}\n\n{键:值 for 变量 in 可迭代对象 if 条件}\n\n### 字典 VS 列表\n\n141. 都是可变容器。\n\n142. 获取元素方式不同,列表用索引,字典用键。\n\n143. 字典的插入,删除,修改的速度快于列表。\n\n144. 列表的存储是有序的,字典的存储是无序的。\n\n## 集合 set\n\n### 定义\n\n145. 由一系列不重复的不可变类型变量(元组/数/字符串)组成的可变散列容器。\n\n146. 相当于只有键没有值的字典(键则是集合的数据)。\n\n### 基础操作\n\n147. 创建空集合：\n\n集合名 = set()\n\n集合名 = set(可迭代对象)\n\n148. 创建具有默认值集合：\n\n集合名 = {1, 2, 3}\n\n集合名 = set(可迭代对象)\n\n149. 添加元素：\n\n集合名.add(元素)\n\n150. 删除元素：\n\n集合名.discard(元素)\n\n### 运算\n\n151. 交集&：返回共同元素。\n\ns1 = {1, 2, 3}\n\ns2 = {2, 3, 4}\n\ns3 = s1 & s2 # {2, 3}\n\n152. 并集：返回不重复元素\n\ns1 = {1, 2, 3}\n\ns2 = {2, 3, 4}\n\ns3 = s1 | s2 # {1, 2, 3, 4}\n\n153. 补集-：返回只属于其中之一的元素\n\ns1 = {1, 2, 3}\n\ns2 = {2, 3, 4}\n\ns1 - s2 # {1} 属于s1但不属于s2\n\n补集^：返回不同的的元素\n\ns1 = {1, 2, 3}\n\ns2 = {2, 3, 4}\n\ns3 = s1 ^ s2 # {1, 4} 等同于(s1-s2 | s2-s1)\n\n154. 子集<：判断一个集合的所有元素是否完全在另一个集合中\n\n155. 超集>：判断一个集合是否具有另一个集合的所有元素\n\ns1 = {1, 2, 3}\n\ns2 = {2, 3}\n\ns2 < s1 # True\n\ns1 > s2 # True\n\n156. 相同或不同== !=：判断集合中的所有元素是否和另一个集合相同。\n\ns1 = {1, 2, 3}\n\ns2 = {3, 2, 1}\n\ns1 == s2 # True\n\ns1 != s2 # False\n\n子集或相同,超集或相同 <= >=\n\n### 集合推导式\n\n157. 定义：\n\n使用简易方法，将可迭代对象转换为集合。\n\n158. 语法:\n\n{表达式 for 变量 in 可迭代对象}\n\n{表达式 for 变量 in 可迭代对象 if 条件}\n\n# 函数 function\n\n## pycharm相关设置\n\n159. \"代码自动完成\"时间延时设置\n\n> File -> Settings -> Editor -> General -> Code Completion -> Autopopup in (ms):0\n\n160. 快捷键：\n\n> Ctrl + P 参数信息（在方法中调用参数）\n\nCtrl + Q 快速查看文档\n\nCtrl + Alt + M 提取方法\n\n## 定义\n\n161. 用于封装一个特定的功能，表示一个功能或者行为。\n\n162. 函数是可以重复执行的语句块, 可以重复调用。\n\n## 作用\n\n提高代码的可重用性和可维护性（代码层次结构更清晰）。\n\n## 定义函数\n\n163. 语法：\n\n> def 函数名(形式参数):\n\n  函数体\n\n164. 说明：\n\n> def 关键字：全称是define，意为\"定义\"。\n\n函数名：对函数体中语句的描述，规则与变量名相同。\n\n形式参数：方法定义者要求调用者提供的信息。\n\n函数体：完成该功能的语句。\n\n165. 函数的第一行语句建议使用文档字符串描述函数的功能与参数。\n\n## 调用函数\n\n166. 语法：函数名(实际参数)\n\n167. 说明：根据形参传递内容。\n\n## 返回值\n\n168. 定义：\n\n> 方法定义者告诉调用者的结果。\n\n169. 语法：\n\n> return 数据 \n\n170. 说明：\n\n> return后没有语句，相当于返回 None。\n\n函数体没有return，相当于返回None。\n\n## 可变／不可变类型在传参时的区别\n\n171. 不可变类型参数有:\n\n> 数值型(整数，浮点数,复数)\n\n布尔值bool\n\nNone 空值\n\n字符串str\n\n元组tuple\n\n固定集合frozenset\n\n172. 可变类型参数有:\n\n> 列表 list\n\n字典 dict\n\n集合 set\n\n173. 传参说明：\n\n> 不可变类型的数据传参时，函数内部不会改变原数据的值。\n\n可变类型的数据传参时，函数内部可以改变原数据。\n\n## 函数参数\n\n### 实参传递方式argument\n\n#### 位置传参\n\n定义：实参与形参的位置依次对应。\n\n#### 序列传参\n\n定义：实参用*将序列拆解后与形参的位置依次对应。\n\n#### 关键字传参\n\n定义：实参根据形参的名字进行对应。\n\n#### 字典关键字传参\n\n174. 定义：实参用**将字典拆解后与形参的名字进行对应。\n\n175. 作用：配合形参的缺省参数，可以使调用者随意传参。\n\n### 形参定义方式parameter\n\n#### 缺省参数\n\n176. 语法：\n\n> def 函数名(形参名1=默认实参1, 形参名2=默认实参2, ...):\n\n函数体\n\n177. 说明：\n\n> 缺省参数必须自右至左依次存在，如果一个参数有缺省参数，则其右侧的所有参数都必须有缺省参数。\n\n缺省参数可以有0个或多个，甚至全部都有缺省参数。\n\n#### 位置形参\n\n语法：\n\n> def 函数名(形参名1, 形参名2, ...):\n\n函数体\n\n#### 星号元组形参\n\n178. 语法：\n\n> def 函数名(*元组形参名):\n\n  函数体\n\n179. 作用：\n\n> 收集多余的位置传参。\n\n180. 说明：\n\n> 一般命名为'args'\n\n形参列表中最多只能有一个\n\n#### 命名关键字形参\n\n181. 语法：\n\n> def 函数名(*, 命名关键字形参1, 命名关键字形参2, ...):\n\n函数体\n\ndef 函数名(*args, 命名关键字形参1, 命名关键字形参2, ...):\n  函数体\n\n182. 作用：\n\n> 强制实参使用关键字传参\n\n#### 双星号字典形参\n\n183. 语法：\n\ndef 函数名(**字典形参名):\n\n​\t\t函数体\n\n184. 作用：\n\n收集多余的关键字传参\n\n185. 说明:\n\n一般命名为'kwargs'\n\n形参列表中最多只能有一个\n\n#### 参数自左至右的顺序\n\n位置形参 --> 星号元组形参 --> 命名关键字形参 --> 双星号字典形参\n\n# 作用域LEGB\n\n186. 作用域：变量起作用的范围。\n\n187. Local局部作用域：函数内部。\n\n188. Enclosing 外部嵌套作用域 ：函数嵌套。\n\n189. Global全局作用域：模块(.py文件)内部。\n\n190. Builtin内置模块作用域：builtins.py文件。\n\n## 变量名的查找规则\n\n191. 由内到外：L -> E -> G -> B\n\n192. 在访问变量时，先查找本地变量，然后是包裹此函数外部的函数内部的变量，之后是全局变量，最后是内置变量。\n\n## 局部变量\n\n193. 定义在函数内部的变量(形参也是局部变量)\n\n194. 只能在函数内部使用\n\n195. 调用函数时才被创建，函数结束后自动销毁\n\n## 全局变量\n\n196. 定义在函数外部,模块内部的变量。\n\n197. 在整个模块(py文件)范围内访问（但函数内不能将其直接赋值）。\n\n## global 语句\n\n198. 作用：\n\n> 在函数内部修改全局变量。\n\n在函数内部定义全局变量(全局声明)。\n\n199. 语法：\n\n> global 变量1, 变量2, ...\n\n200. 说明\n\n> 在函数内直接为全局变量赋值，视为创建新的局部变量。\n\n不能先声明局部的变量，再用global声明为全局变量。\n\n## nonlocal 语句\n\n201. 作用：\n\n> 在内层函数修改外层嵌套函数内的变量\n\n202. 语法\n\n> nonlocal 变量名1,变量名2, ...\n\n203. 说明\n\n> 在被嵌套的内函数中进行使用\n\n# 面向对象 Object Oriented\n\n## 概述\n\n### 面向过程\n\n204. 分析出解决问题的步骤，然后逐步实现。\n\n> 例如：婚礼筹办\n\n-- 发请柬（选照片、措词、制作）\n\n-- 宴席（场地、找厨师、准备桌椅餐具、计划菜品、购买食材）\n\n-- 婚礼仪式（定婚礼仪式流程、请主持人）\n\n205. 公式：程序 = 算法 + 数据结构\n\n206. 优点：所有环节、细节自己掌控。\n\n207. 缺点：考虑所有细节，工作量大。\n\n### 面向对象\n\n208. 找出解决问题的人，然后分配职责。\n\n> 例如：婚礼筹办\n\n-- 发请柬：找摄影公司（拍照片、制作请柬）\n\n-- 宴席：找酒店（告诉对方标准、数量、挑选菜品）\n\n-- 婚礼仪式：找婚庆公司（对方提供司仪、制定流程、提供设备、帮助执行）\n\n209. 公式：程序 = 对象 + 交互\n\n210. 优点\n\n (1) 思想层面：\n\n-- 可模拟现实情景，更接近于人类思维。\n\n-- 有利于梳理归纳、分析解决问题。\n\n(2) 技术层面：\n\n-- 高复用：对重复的代码进行封装，提高开发效率。\n\n-- 高扩展：增加新的功能，不修改以前的代码。\n\n-- 高维护：代码可读性好，逻辑清晰，结构规整。\n\n211. 缺点：学习曲线陡峭。\n\n## 类和对象\n\n### 基础概念\n\n![面向对象概述](pictures/07python_basic/面向对象概述.jpg)\n\n212. 抽象：从具体事物中抽离出共性、本质，舍弃个别、非本质过程。\n\n213. 类：一个抽象的概念，即生活中的\"类别\"。\n\n214. 对象：类的具体实例，即归属于某个类别的\"个体\"。\n\n215. 类是创建对象的\"模板\"。\n\n-- 数据成员：名词类型的状态。\n\n-- 方法成员：动词类型的行为。\n\n### 语法\n\n#### 定义类\n\n216. 代码\n\n> class 类名:\n\n\"\"\"文档说明\"\"\"\n\ndef _init_(self,参数列表):\n\nself.实例变量 = 参数\n\n方法成员\n\n217. 说明\n\n-- 类名所有单词首字母大写.\n\n-- _init_ 也叫构造函数，创建对象时被调用，也可以省略。\n\n-- self 变量绑定的是被创建的对象，名称可以随意。\n\n#### 创建对象(实例化)\n\n变量 = 构造函数 (参数列表)\n\n### 实例成员\n\n#### 实例变量\n\n218. 语法\n\n \n\n(1) 定义：对象.变量名\n\n(2) 调用：对象.变量名\n\n219. 说明\n\n(1) 首次通过对象赋值为创建，再次赋值为修改.\n\nw01 = Wife()\n\nw01.name = \"建宁\"\n\nw01.name = \"建宁公主\"\n\n(2) 通常在构造函数(_init_)中创建。\n\nw01 = Wife(\"建宁公主,24)\n\nprint(w01.name)\n\n(3) 每个对象存储一份，通过对象地址访问。\n\n \n\n220. 作用：描述某个对象自己的数据。\n\n221. __dict__：对象的属性，用于存储自身实例变量的字典。\n\n#### 实例方法\n\n222. 语法\n\n(1) 定义： def 方法名称(self, 参数列表):\n\n方法体\n\n(2) 调用： 对象地址.实例方法名(参数列表)\n\n不建议通过类名访问实例方法\n\n223. 说明\n\n(1) 至少有一个形参，第一个参数绑定调用这个方法的对象,一般命名为\"self\"。\n\n(2) 无论创建多少对象，方法只有一份，并且被所有对象共享。\n\n224. 作用：表示对象行为。\n\n### 类成员\n\n#### 类变量\n\n225. 语法\n\n (1) 定义：在类中，方法外定义变量。\n\n> class 类名:\n\n变量名 = 表达式\n\n(2) 调用：类名.变量名\n\n不建议通过对象访问类变量\n\n226. 说明\n\n(1) 存储在类中。\n\n(2) 只有一份，被所有对象共享。\n\n227. 作用：描述所有对象的共有数据。\n\n#### 类方法\n\n228. 语法\n\n (1) 定义：\n\n> @classmethod\n\ndef 方法名称(cls,参数列表):\n\n方法体\n\n(2) 调用：类名.方法名(参数列表)\n\n> 不建议通过对象访问类方法\n\n229. 说明\n\n(1) 至少有一个形参，第一个形参用于绑定类，一般命名为'cls'\n\n(2) 使用@classmethod修饰的目的是调用类方法时可以隐式传递类。\n\n(3) 类方法中不能访问实例成员，实例方法中可以访问类成员。\n\n230. 作用：操作类变量。\n\n### 静态方法\n\n231. 语法\n\n (1) 定义：\n\n> @staticmethod\n\ndef 方法名称(参数列表):\n\n方法体\n\n(2) 调用：类名.方法名(参数列表)\n\n> 不建议通过对象访问静态方法\n\n232. 说明\n\n> (1) 使用@ staticmethod修饰的目的是该方法不需要隐式传参数。\n\n(2) 静态方法不能访问实例成员和类成员\n\n233. 作用：定义常用的工具函数。\n\n## 三大特征\n\n### 封装\n\n\n\n![封装思想](pictures/07python_basic/封装思想.jpg)\n\n#### 数据角度讲\n\n234. 定义：\n\n> 将一些基本数据类型复合成一个自定义类型。\n\n235. 优势：\n\n将数据与对数据的操作相关联。\n\n代码可读性更高（类是对象的模板）。\n\n#### 行为角度讲\n\n236. 定义：\n\n> 类外提供必要的功能，隐藏实现的细节。\n\n237. 优势：\n\n> 简化编程，使用者不必了解具体的实现细节，只需要调用对外提供的功能。\n\n238. 私有成员：\n\n \n\n(1) 作用：无需向类外提供的成员，可以通过私有化进行屏蔽。\n\n(2) 做法：命名使用双下划线开头。\n\n(3) 本质：障眼法，实际也可以访问。\n\n> 私有成员的名称被修改为：_类名__成员名，可以通过_dict_属性或dir函数查看。\n\n239. 属性@property：\n\n> 公开的实例变量，缺少逻辑验证。私有的实例变量与两个公开的方法相结合，又使调用者的操作略显复杂。而属性可以将两个方法的使用方式像操作变量一样方便。\n\n(1) 定义：\n\n> @property\n\ndef 属性名(self):\n\nreturn self.__属性名\n\n@属性名.setter\n\ndef 属性名(self, value):\n\nself.__属性名= value\n\n(2) 调用：\n\n> 对象.属性名 = 数据\n\n变量 = 对象.属性名\n\n(3) 说明：\n\n> 通常两个公开的属性，保护一个私有的变量。\n\n@property 负责读取，@属性名.setter 负责写入\n\n只写：属性名= property(None, 写入方法名)\n\n#### 设计角度讲\n\n240. 定义：\n\n(1) 分而治之\n\n> 将一个大的需求分解为许多类，每个类处理一个独立的功能。\n\n(2) 变则疏之\n\n> 变化的地方独立封装，避免影响其他类。\n\n(3) 高 内 聚\n\n> 类中各个方法都在完成一项任务(单一职责的类)。\n\n(4) 低 耦 合\n\n> 类与类的关联性与依赖度要低(每个类独立)，让一个类的改变，尽少影响其他类。\n\n241. 优势：\n\n便于分工，便于复用，可扩展性强。\n\n#### 案例:信息管理系统\n\n![image-20230103161103514](pictures/07python_basic/image-20230103161103514.png)\n\n#### 需求\n\n实现对学生信息的增加、删除、修改和查询。\n\n#### 分析\n\n> 界面可能使用控制台，也可能使用Web等等。\n\n242. 识别对象：界面视图类 逻辑控制类 数据模型类\n\n243. 分配职责：\n\n> 界面视图类：负责处理界面逻辑，比如显示菜单，获取输入，显示结果等。\n\n逻辑控制类：负责存储学生信息，处理业务逻辑。比如添加、删除等\n\n数据模型类：定义需要处理的数据类型。比如学生信息。\n\n244. 建立交互：\n\n> 界面视图对象 <----> 数据模型对象 <----> 逻辑控制对象\n\n#### 设计\n\n数据模型类：StudentModel\n\n数据：编号 id,姓名 name,年龄 age,成绩 score\n\n逻辑控制类：StudentManagerController\n\n数据：学生列表 __stu_list\n\n行为：获取列表 stu_list,添加学生 add_student，删除学生remove_student，修改学生update_student，根据成绩排序order_by_score。\n\n界面视图类：StudentManagerView\n\n数据：逻辑控制对象__manager\n\n行为：显示菜单__display_menu，选择菜单项__select_menu_item，入口逻辑main，\n\n输入学生__input_students，输出学生__output_students，删除学生__delete_student，修改学生信息__modify_student\n\n### 继承\n\n![继承兼容性](pictures/07python_basic/继承兼容性.jpg)\n\n![继承内存图](pictures/07python_basic/继承内存图.jpg)\n\n#### 语法角度讲\n\n#### 继承方法\n\n245. 代码:\n\n> class 父类:\n\ndef 父类方法(self):\n\n方法体\n\nclass 子类(父类)：\n\ndef 子类方法(self):\n\n方法体\n\n儿子 = 子类()\n\n儿子.子类方法()\n\n儿子.父类方法()\n\n246. 说明：\n\n> 子类直接拥有父类的方法.\n\n#### 内置函数\n\n> isinstance(对象, 类型)\n\n返回指定对象是否是某个类的对象。\n\nissubclass(类型，类型)\n\n返回指定类型是否属于某个类型。\n\n#### 继承数据\n\n247. **代码**\n\n```Python\nclass 子类(父类):\n    def __init__(self,参数列表):\n    super().__init__(参数列表)\n    self.自身实例变量 = 参数\n```\n\n248. **说明**\n\n> \n\n  - 子类如果没有构造函数，将自动执行父类的；\n\n```Plain Text\nclass Student(Person):\n    # 子类若没有构造函数，使用父类的.\n    pass\n\ns01 = Student()\nprint(s01.name)\n```\n\n> \n\n  - 但如果有构造函数将覆盖父类的,此时必须通过super()函数调用父类的构造函数，以确保父类实例变量被正常创建。\n\n```Python\nclass Person:\n    def __init__(self,name):\n        self.name = name \n        \nclass Student(Person):\n    # 子类若具有构造函数，则必须先调用父类构造函数。\n    def __init__(self,name,score):\n        super().__init__(name)  # 这里调用父类的构造函数，同时需要传参的哦\n        self.score = score\n# 实例化测试\np01 = Person(\"李四\")\nprint(p01.name)\ns01 = Student(\"张三\", 100)\nprint(s01.score)\nprint(s01.name)\n```\n\n#### 定义\n\n> 重用现有类的功能，并在此基础上进行扩展。\n\n说明：子类直接具有父类的成员（共性），还可以扩展新功能。\n\n#### 优点\n\n- 一种代码复用的方式。\n\n#### 缺点\n\n- 耦合度高：父类的变化，直接影响子类。\n\n#### 设计角度讲\n\n#### 定义\n\n> 将相关类的共性进行抽象，统一概念，隔离变化。\n\n#### 适用性\n\n- 多个类在概念上是一致的，且需要进行统一的处理。\n\n#### 相关概念\n\n- 父类（基类、超类）、子类（派生类）。\n\n- 父类相对于子类更抽象，范围更宽泛；子类相对于父类更具体，范围更狭小。\n\n- 单继承：父类只有一个（例如 Java，C#）。\n\n- 多继承：父类有多个（例如C++，Python）。\n\n- Object类：任何类都直接或间接继承自 object 类。\n\n#### 多继承\n\n一个子类继承两个或两个以上的基类，父类中的属性和方法同时被子类继承下来。\n\n同名方法的解析顺序（MRO， Method Resolution Order）:\n\n类自身 --> 父类继承列表（由左至右）--> 再上层父类\n\nA\n\n/ \\\n\n/ \\\n\nB C\n\n\\ /\n\n\\ /\n\nD\n\n```Python\n\"\"\"\n    多继承 -- 语法\n    同名方法解析顺序：MRO\n\"\"\"\n\nclass A:\n    def m01(self):\n        print(\"A - m01\")\n\nclass B(A):\n    def m01(self):\n        print(\"B - m01\")\n\nclass C(A):\n    def m01(self):\n        print(\"C - m01\")\n\nclass D(B,C):\n    def m02(self):\n        self.m01()\n\nd01 = D()\nd01.m02()\n\nprint(D.mro())# [D, B,C, A,object]\n```\n\n#### 继承练习01\n\n**设计**\n\n- 存在变化点的内容，不能直接调，而是要抽象一个父类出来；\n\n- 隔离不变和变化的内容；\n\n- 父类就是来约束子类规范的，如果按照运行来说，不写父类也是可以的，子类都写一个相同的方法也都可以满足，但是还是要用继承来规范代码编写，所以在父类中可以加一句是否继承父类的校验： `if not isinstance(damage_target, Damageable):     raise ValueError(\"不是Damageable的子类\")`\n\n- 父类如果有的方法，必须要子类也需要有，那就可以在父类中约定抛个异常来约定子类一定要实现重写这个父类方法：   `def damage(self, value):如果子类不重写，则异常。        raise NotImplementedError()`  这里的主要原理就是，如果子类没有写父类规定的类，那在实际调用这个子类的这个方法的时候，实际是会去找父类的方法，而此时一旦找到了父类的这个方法就知道这个子类肯定是没重写这个方法的，因为就可以报错了。\n\n  ![手雷爆炸](pictures/07python_basic/手雷爆炸.jpg)\n\n```Python\n\"\"\"\n    手雷炸了，可能伤害敌人/玩家的生命.\n             还可能伤害未知事物(鸭子.房子....)\n    要求：增加了新事物，不影响手雷。\n    体会：继承的作用\n         多态的体现\n         设计原则\n            开闭原则\n            单一职责\n            依赖倒置\n    画出设计图\n    15:35\n\"\"\"\nclass Granade:\n    def __init__(self, atk):\n        self.atk = atk\n\n    def explode(self, damage_target):\n        # 如果传入的不是子类，则报错.\n        if not isinstance(damage_target, Damageable):\n            raise ValueError(\"不是Damageable的子类\")\n\n        print(\"爆炸\")\n        # 多态:\n        # 调用父类代表(玩家/敌人.....)的可以受伤者.\n        # 执类行子(具体玩家/敌人.....)\n        damage_target.damage(self.atk)\n\nclass Damageable:\n    \"\"\"\n        可以受伤\n        继承:统一多个子类的概念，隔离变化。\n    \"\"\"\n\n    def damage(self, value):\n        # 如果子类不重写，则异常。\n        raise NotImplementedError()\n# ------------------------------\nclass Player(Damageable):\n    def __init__(self, hp):\n        self.hp = hp\n\n    def damage(self, value):\n        self.hp -= value\n        print(\"玩家受伤啦\")\n        print(\"碎屏\")\n\n\nclass Enemy(Damageable):\n    def __init__(self, hp):\n        self.hp = hp\n\n    def damage2(self, value):\n        self.hp -= value\n        print(\"敌人受伤喽\")\n        print(\"头顶爆字\")\n\ng01 = Granade(100)\ne01 = Enemy(200)\np01 = Player(300)\ng01.explode(p01)\n\n```\n\n#### 继承练习02\n\n- 子类的差异化问题子类自己解决，可以通过子类的构造方法来提供参数；\n\n- 差异化的部分，不能找父类去要。\n\n  ![图形管理器](pictures/07python_basic/图形管理器.jpg)\n\n```Python\n\"\"\"\n    定义图形管理器类\n        1. 管理所有图形\n        2. 提供计算所有图形总面积的方法\n\n    具体图形:\n        圆形(pi × r ** 2)\n        矩形(长*宽)\n        ...\n\n    测试：\n        创建1个圆形对象，1个矩形对象，添加到图形管理器中.\n        调用图形管理器的计算面积方法，输出结果。\n\n    要求：增加新图形，不修改图形管理器的代码.\n    体会：面向对象三大特征：\n            封装/继承/多态\n         面向对象设计原则：\n            开闭/单一/倒置\n\n\"\"\"\n\n\nclass GraphicManager:\n    def __init__(self):\n        self.__graphics = []\n\n    def add_graphic(self, graphic):\n        if isinstance(graphic, Graphic):\n            self.__graphics.append(graphic)\n        else:\n            raise ValueError()\n\n    def get_total_area(self):\n        total_area = 0\n        # 遍历图形列表，累加每个图形的面积\n        for item in self.__graphics:\n            # 多态：\n            # 调用的是图形\n            # 执行的是圆形/矩形...\n            total_area += item.calculate_area()\n        return total_area\n\nclass Graphic:\n    def calculate_area(self):\n        # 如果子类不重写，则异常.\n        raise NotImplementedError()\n#-----------------------------------\nclass Circle(Graphic):\n    def __init__(self,radius):\n        self.radius = radius\n\n    def calculate_area(self):\n        return 3.14 * self.radius **2\n\n\nclass Rectanlge(Graphic):\n    def __init__(self,length,width):\n        self.lenght = length\n        self.width = width\n\n\n    def calculate_area(self):\n        return self.lenght *  self.width\n\n\nc01 = Circle(5)\nr01 = Rectanlge(10,20)\nmanager = GraphicManager()\nmanager.add_graphic(c01)\nmanager.add_graphic(r01)\nre = manager.get_total_area()\nprint(re)\n```\n\n#### 继承练习03\n\n![员工管理器](pictures/07python_basic/员工管理器.jpg)\n\n```Python\n\"\"\"\n    定义员工管理器\n        1.管理所有员工\n        2. 计算所有员工工资\n\n    员工：\n        程序员：底薪 + 项目分红\n        销售：底薪 + 销售额 * 0.05\n        软件测试...\n        ...\n\n    要求：增加新岗位，员工管理器不变.\n\"\"\"\nclass EmployeeManager:\n    def __init__(self):\n        self.__employees = []\n\n    def add_employee(self, emp):\n        self.__employees.append(emp)\n\n    def get_total_saraly(self):\n        total_saraly = 0\n        for item in self.__employees:\n            # 调用是抽象的员工类\n            # 执行是具体的员工(程序员/销售..)\n            total_saraly += item.calculate_salary()\n        return total_saraly\n\nclass Employee:\n    def __init__(self, base_salary):\n        self.base_salary = base_salary\n\n    def calculate_salary(self):\n        return self.base_salary\n\n# ---------------------------------------\nclass Programmer(Employee):\n    def __init__(self, base_salary, bonus):\n        super().__init__(base_salary)\n        self.bonus = bonus\n\n    def calculate_salary(self):\n        # return self.base_salary + self.bonus\n        # 扩展重写\n        return super().calculate_salary()+ self.bonus\n\nclass Salesmen(Employee):\n    def __init__(self, base_salary, sale_value):\n        super().__init__(base_salary)\n        self.sale_value = sale_value\n\n    def calculate_salary(self):\n        return self.base_salary + self.sale_value * 0.05\n\n# 测试\nmanager = EmployeeManager()\nmanager.add_employee(Programmer(200000,500))\nmanager.add_employee(Salesmen(2000,1000))\nprint(manager.get_total_saraly())\n```\n\n### 多态\n\n#### 设计角度讲\n\n#### 定义\n\n> 父类的同一种动作或者行为，在不同的子类上有不同的实现。\n\n#### 作用\n\n249. 在继承的基础上，体现类型的个性化（一个行为有不同的实现）。\n\n250. 增强程序扩展性，体现开闭原则。\n\n#### 语法角度讲\n\n#### 重写\n\n- 子类实现了父类中相同的方法（方法名、参数）。\n\n- 在调用该方法时，实际执行的是子类的方法。调用父，执行子。\n\n#### 快捷键\n\nCtrl + O\n\n#### 内置可重写函数\n\nPython中，以双下划线开头、双下划线结尾的是系统定义的成员。我们可以在自定义类中进行重写，从而改变其行为。\n\n#### 转换字符串\n\n__str__函数：将对象转换为字符串(对人友好的)\n\n__repr__函数：将对象转换为字符串(解释器可识别的)\n\n```Python\n\"\"\"\n    内置可重写函数\n    练习:exercise01.py\n\"\"\"\nclass StudentModel:\n    def __init__(self, name=\"\", age=0, score=0, id=0):\n        self.name = name\n        self.age = age\n        self.score = score\n        self.id = id\n\n    # 对象 --> 字符串 (随意格式)\n    def __str__(self):\n        return \"我叫%s,编号是%d,年龄是%d,成绩是:%d\"%(self.name,self.id,self.age,self.score)\n\n    # 对象 --> 字符串(解释器可识别,有格式)\n    def __repr__(self):\n        return \"StudentModel('%s',%d,%d,%d)\"%(self.name,self.age,self.score,self.id)\n\ns01 = StudentModel(\"无忌\",27,100,101)\nstr01 = str(s01)\nprint(str01)\nprint(s01)\n\nstr02 =repr(s01)\nprint(str02)\n\n# 根据字符串执行python代码\nre = eval(\"1+2*5\")\n# exec\nprint(re)\n\n# 克隆对象\n# repr 返回python格式的字符串\n# eval根据字符串执行代码\ns02 = eval(repr(s01))   #  通过eval 配合repr（对象）来克隆一个对象\ns02.name = \"老张\"\nprint(s01.name)\n```\n\n#### 运算符重载\n\n定义：让自定义的类生成的对象(实例)能够使用运算符进行操作。\n\n#### 算数运算符\n\n![image-20230103161655636](pictures/07python_basic/image-20230103161655636.png)\n\n\n\n#### 反向算数运算符重载\n\n![image-20230103161740574](pictures/07python_basic/image-20230103161740574.png)\n\n\n#### 复合运算符重载\n\n![image-20230103161614116](pictures/07python_basic/image-20230103161614116.png)\n\n> 运算符重载的内容实际使用的很少，平常可能不会用，但是要知道有这个东西。\n\n```Python\n\"\"\"\n    运算符重载\n\"\"\"\nclass Vector1:\n    def __init__(self, x):\n        self.x = x\n\n    def __str__(self):\n        return \"一维向量的分量是：\" + str(self.x)\n\n    def __add__(self, other):\n        return Vector1(self.x + other)\n\n    def __radd__(self, other):\n        return Vector1(self.x + other)\n\n    def __iadd__(self, other):\n        self.x += other\n        return self\n\nv01 = Vector1(10)\nprint(v01 + 2)  # v01.__add__(2)\n\n# 练习:实现自定义类的对象与数值的减法，乘法运算。\n# 略...\nprint(2 + v01)\n# 练习:实现数值与自定义类的对象的减法，乘法运算。\n# 略...\n\nprint(id(v01))\n# 重写__iadd__，实现在原对象基础上的变化。\n# 如果重写__iadd__,默认使用__add__，一般会产生新对象.\nv01 += 2\nprint(v01,id(v01))\n\n# list01 = [1]\n# print(id(list01))\n# # 生成新对象\n# re = list01 + [2]\n# print(re,id(re))\n# # 在原有对象基础上，累加.\n# list01 += [2]\n# print(list01,id(list01))\n```\n\n#### 比较运算重载\n\n![image-20230103161555646](pictures/07python_basic/image-20230103161555646.png)\n\n## 设计原则\n\n### 开-闭原则（目标、总的指导思想）\n\n**O**pen **C**losed **P**rinciple\n\n- 对扩展开放，对修改关闭。\n\n- **增加新功能，不改变原有代码**。允许增加新功能，但是不能改变原来代码这就是开闭原则\n\n### 类的单一职责（一个类的定义）\n\n**S**ingle **R**esponsibility **P**rinciple\n\n- 一个类有且只有一个改变它的原因；发生变化的原因只能是一个那就是遵循了这个原则。\n\n- 一个类只做一件事情；\n\n### 依赖倒置（依赖抽象）\n\n**D**ependency **I**nversion **P**rinciple\n\n- 客户端代码(调用的类)尽量依赖(使用)抽象。就是使用者，调用的这个类就是客户端代码，抽象就是不具体的，就是父类，子类更具体，父类更抽象，父类就是把各个子类抽象一下。是先有子类，然后再抽象出父类，调类的时候，是调用父类，调用抽象类这样就能够实现更加稳定的逻辑。\n\n- 抽象不应该依赖细节，细节应该依赖抽象。\n\n- 父类约束子类在行为上保持一致\n\n  ![老张去东北设计01](pictures/07python_basic/老张去东北设计01.jpg)\n  \n  ![老张去东北设计02](pictures/07python_basic/老张去东北设计02.jpg)\n\n```Python\n\"\"\"\n    继承 -- 设计(2)\n    练习:exercise03.py\n\"\"\"\n# 需求：老张开车去东北\n# 变化：    坐飞机\n#          坐火车\n#          骑车\n#          ...\nclass Vehicle:\n    \"\"\"\n        交通工具,代表所有具体的交通工具(火车/飞机..)\n        继承：隔离子类变化,将子类的共性(坐/飞..)提取到父类(运输)中.\n    \"\"\"\n\n    def transport(self, str_position):\n        # 因为父类太过于抽象，所以写不出方法体,那就直接采用pass,这个价值就是约束子类要有这个行为。\n        pass\n\n# 客户端代码，用交通工具。\nclass Person:\n    def __init__(self, name):\n        self.name = name\n\n    def go_to(self, vehicle, str_position):\n        # 多态：调用父，执行子.\n        # 调用的是交通工具的运输方法\n        # 执行的是飞机的运输方法或者汽车的运输方法\n        vehicle.transport(str_position)\n\n# -------以上是架构师完成的--以下是程序员完成的-----\n\nclass Car(Vehicle):\n    def transport(self, str_position):\n        print(\"汽车开到\", str_position)\nclass Airplane(Vehicle):\n    def transport(self, str_position):\n        print(\"飞机飞到\", str_position)\n\np01 = Person(\"老张\")\nc01 = Car()\na01 = Airplane()\np01.go_to(c01, \"东北\")\np01.go_to(a01, \"东北\")\n```\n\n### 组合复用原则（复用的最佳实践）\n\nComposite Reuse Principle\n\n- 如果仅仅为了代码复用优先选择组合复用，而非继承复用。\n\n- 组合的耦合性相对继承低。\n\n- 组合更加灵活，下面第一个图中，如果使用继承，那就成了人是手机，实际上是一种组合关系，人有一个手机；\n\n![组合复用](pictures/07python_basic/组合复用.jpg)\n\n### 里氏替换（继承后的重写，指导继承的设计）\n\n**L**iskov **S**ubstitution **P**rinciple\n\n父类出现的地方可以被子类替换，在替换后依然保持原功能。\n\n子类要拥有父类的所有功能。\n\n子类在重写父类方法时，尽量选择扩展重写，防止改变了功能。-- 下面第46行就是扩展重写，使用父类中已经有的类容再做扩展即可，而不是子类自己又重新写一个。\n\n```Python\n\"\"\"\n    10:50 上课\n    定义员工管理器\n        1.管理所有员工\n        2. 计算所有员工工资\n\n    员工：\n        程序员：底薪 + 项目分红\n        销售：底薪 + 销售额 * 0.05\n        软件测试...\n        ...\n\n    要求：增加新岗位，员工管理器不变.\n\"\"\"\nclass EmployeeManager:\n    def __init__(self):\n        self.__employees = []\n\n    def add_employee(self, emp):\n        self.__employees.append(emp)\n\n    def get_total_saraly(self):\n        total_saraly = 0\n        for item in self.__employees:\n            # 调用是抽象的员工类\n            # 执行是具体的员工(程序员/销售..)\n            total_saraly += item.calculate_salary()\n        return total_saraly\n\nclass Employee:\n    def __init__(self, base_salary):\n        self.base_salary = base_salary\n\n    def calculate_salary(self):\n        return self.base_salary\n\n# ---------------------------------------\nclass Programmer(Employee):\n    def __init__(self, base_salary, bonus):\n        super().__init__(base_salary)\n        self.bonus = bonus\n\n    def calculate_salary(self):\n        # return self.base_salary + self.bonus\n        # 扩展重写\n        return super().calculate_salary()+ self.bonus\n\nclass Salesmen(Employee):\n    def __init__(self, base_salary, sale_value):\n        super().__init__(base_salary)\n        self.sale_value = sale_value\n\n    def calculate_salary(self):\n        return self.base_salary + self.sale_value * 0.05\n\n# 测试\nmanager = EmployeeManager()\nmanager.add_employee(Programmer(200000,500))\nmanager.add_employee(Salesmen(2000,1000))\nprint(manager.get_total_saraly())\n```\n\n### 迪米特法则（类与类交互的原则）\n\nLaw of Demeter\n\n不要和陌生人说话。\n\n类与类交互时，在满足功能要求的基础上，传递的数据量越少越好。因为这样可能降低耦合度。--要调用其他类的时候，如果只使用几个方法，那就只调用其中的这几个方法即可，这样就可以先抽象一下，抽象一个父类出来，当然，这种情况也可能出现过度设计。\n\n### 综合练习\n\n#### 需求信息\n\n|职业|名称|分类|法力消耗|冷却|描述|\n|-|-|-|-|-|-|\n|少林|少林普攻|瞬发技能|无|无|攻击单个近身敌人，对目标每秒造成100%外功攻击伤害。自动连续攻击|\n|少林|罗汉棍|瞬发技能|10法力|2秒|达摩祖师所创棍法，刚猛无敌。攻击单个近身敌人，对目标造成200%外功攻击伤害|\n|少林|摩诃无量|瞬发技能|50法力|8秒|少林七十二绝技之一，瞬间缩短和敌手的距离。像旋风一样挥舞武器，攻击以自身为中心半径4码范围内 的所有敌人，对每个目标造成每秒217%的外功攻击伤害。攻击持续3.9秒。|\n|少林|迦叶功|瞬发技能|20法力|5秒|少林七十二绝技之一，以一条齐眉棍幻出千万棍影。向单个敌人冲锋并进行凶猛攻击，对目标造成150%外功攻击伤害|\n|少林|韦陀杵|瞬发技能|20法力|10秒|少林七十二绝技之一，与大力金刚掌齐名，以浑厚内力重创敌人。重击地面，使4码内所有敌人防御降低10%，并眩晕，持续2.5秒。|\n|少林|金钟罩|瞬发技能|20法力|15秒|少林七十二绝技之一，以丹田之气发出狮吼震慑敌人胆魄。开启盾墙，所有敌人对自身造成的伤害减免20%，持续10秒。|\n|少林|狮吼功|瞬发技能|40法力|20秒|少林七十二绝技之一，刀枪不入。吼叫，嘲讽你附近8码范围内所有敌人，持续5秒。使你和附近8码内所有队友攻击提升15%，持续10秒。并使附近8码内所有敌人伤害降低10%，持续5秒。|\n|少林|金刚伏魔|瞬发技能|100%战意|20秒|以易筋经催动少林绝技的终极奥义嘲讽全屏范围内所有敌人，挥舞武器攻击地，对全屏范围内所有敌人造成100%血上限伤害。对BOSS和PVP战斗无效。|\n|逍遥|逍遥普攻|瞬发技能|||攻击6码范围内的单个敌人，对目标每秒造成100%内功攻击伤害。自动连续攻击|\n|逍遥|小无相功|瞬发技能|10法力|2秒|逍遥派无上内功，鸠摩智曾以此内功催发出少林绝技拈花指来骗取六脉神剑释放电弧，击中敌人造 成200%的内功攻击伤害。|\n|逍遥|祝融掌|瞬发技能|||祝融掌：出自庄子“逍遥游”，将敌方的内力化掉，并转化吸收内力汇聚于气海。喷射一条火焰攻击敌人， 每击造成每秒300%的内功攻击伤害，持续3.9秒。并使命中目标减速30%，持续3秒。|\n|逍遥|北冥神功|瞬发技能|||北冥神功：李秋水除白虹掌力的另一绝学，将内力汇聚一点急剧升温后劈出。对单个目标造成120%的内功攻击 伤害，并使敌人冻结3秒|\n|逍遥|寒霜怒雪|瞬发技能|||：以易经八八六十四卦为基础。按特定顺序方位进行，步法飘忽灵动。天降寒冰轰击目标区域范围内 所有敌人，造成每秒125%的内功攻击伤害，持续5秒。并使命中目标减速80%，持续5秒|\n|逍遥|凌波微步|瞬发技能|||：内力凝出的冰甲，聪哑老人苏星河曾靠此招躲过丁春秋的化功大法。将你瞬间传送到前方7码的目标位置|\n|逍遥|毁天灭地|瞬发技能|||：凝聚北冥真气释放的终极招式嘲讽全屏范围内所有敌人，召唤一颗巨大的陨石从天而降，引起全屏 范围内地面灼烧，对全屏范围内所有敌人造成100%血上限伤害。对BOSS和PVP战斗无效|\n|丐帮|丐帮普攻|瞬发技能|无|0秒|攻击单个近身敌人，每秒造成100%内功攻击伤害，自动连续攻击|\n|丐帮|飞龙在天|瞬发技能|100战意|20秒|降龙十八掌第二式，跃起半空，居高下击，威力奇大，嘲讽全屏范围内所有敌人，造成等同于其生命上限的伤 害，对BOSS和玩家无效|\n|丐帮|神龙摆尾|瞬发技能|10法力|2秒|降龙十八掌第十八式，劲道奇猛，无所不辞，攻击单个近身敌人，立即造成200%内功攻击伤害，触发“御龙” 效果，使自身暴击率提升5%，持续6秒，“御龙”效果最多可叠加3次|\n|丐帮|天下无狗|瞬发技能|50法力|8秒|打狗棒法的最精妙招式，八方皆棒，劲力甚广，挥动武器攻击4次，每击都会对前方5步半圆内所有敌人施加 \"打狗\"效果，“打狗”会在3秒内持续造成总共270%内功攻击伤害，并减速50%持续3秒|\n|丐帮|醉饮江湖|瞬发技能|20法力|5秒|气运丹田，以雄厚内力将烈酒逼出，控人心窍，眩晕7步范围内单个敌人1秒，将其迅速拉至面前|\n|丐帮|擒龙控鹤|瞬发技能|20法力|10秒|丐帮秘传擒拿功夫，使人失去反击之力，迷惑4步范围内所有敌人，使其无法使用技能，持续2.5秒|\n|丐帮|密云不雨|瞬发技能|20法力|15秒|降龙十八掌第十三式，韬光养晦，弃攻击而全力守御，将自身50%攻击转化为防御，持续3秒|\n|丐帮|亢龙有悔|瞬发技能|40法力|20秒|降龙十八掌第十一式，从至刚之中生出至柔，有余不尽，震击5步范围内所有敌人，持续造成每秒200%内功功击伤害，持续5秒|\n\n#### 设计图\n\n可能首先想到的是下面这种方式：（不妥当）\n\n换一种思路：\n\n- 文件的变化不影响功能；\n\n- 新增新技能不修改代码；\n\n- 某个算法改变，只修改某个类，其他类不受影响；\n\n![技能系统](pictures/07python_basic/技能系统.jpg)\n\n#### 编码\n\n```Python\n\"\"\"\n    技能系统\n    练习:指出下列代码哪里体现了三大特征/六大原则。\n\n    三大特征：\n        封装：将每种影响效果单独做成类.\n        继承：将各种影响效果抽象为SkillImpactEffect\n              隔离技能释放器与各种影响效果的变化。\n        多态：各种影响效果在重写SkillImpactEffect类中impact方法.\n             释放器调用SkillImpactEffect执行各种效果。\n    六大原则：\n        开闭原则：增加新(技能/影响效果)，不修改释放器代码.\n        单一职责：SkillImpactEffect 负责 隔离变化\n                 DamageEffect.. 负责定义具体的效果\n                 SkillDeployer 负责释放技能\n        依赖倒置：(1)释放器没有调用具体影响效果，而是调用SkillImpactEffect。\n                (2)抽象的不依赖于具体的。\n                  具体做法：释放器通过\"依赖注入\"(读取配置文件，创建影响效果对象),\n                          使释放器不依赖具体影响效果.\n        组合复用：释放器与影响效果是组合关系.\n                可以灵活的选择各种影响效果。\n        里氏替换：(1)父类出现的地方可以被子类替换\n                 释放器存储影响效果列表,实际可以将各种子类存入进来.\n        迪米特法则：所有类之间的耦合度都很低.\n\"\"\"\n\nclass SkillImpactEffect:  # 负责 隔离变化\n    \"\"\"\n        技能影响效果\n    \"\"\"\n\n    def impact(self):\n        raise NotImplementedError()\n\nclass DamageEffect(SkillImpactEffect): #负责定义具体的效果\n    \"\"\"\n        伤害生命效果\n    \"\"\"\n\n    def __init__(self, value):\n        self.value = value\n\n    def impact(self):\n        print(\"扣你%d血\" % self.value)\n\n\nclass LowerDeffenseEffect(SkillImpactEffect):\n    \"\"\"\n        降低防御力\n    \"\"\"\n\n    def __init__(self, value, time):\n        self.value = value\n        self.time = time\n\n    def impact(self):\n        print(\"降低%d防御力,持续%d秒\" % (self.value, self.time))\n\n\nclass DizzinessEffect(SkillImpactEffect):\n    \"\"\"\n        眩晕\n    \"\"\"\n\n    def __init__(self, time):\n        self.time = time\n\n    def impact(self):\n        print(\"眩晕%d秒\" % self.time)\n\n\nclass SkillDeployer: #负责释放技能\n    \"\"\"\n        技能释放器\n    \"\"\"\n\n    def __init__(self, name):\n        self.name = name\n        # 加载配置文件 {技能名称:[效果1,效果2...],...}\n        self.__dict_skill_config = self.__load_config_file()\n        # 创建效果对象\n        self.__effect_objects = self.__create_effect_objects()\n\n    def __load_config_file(self):\n        # 加载文件.....\n        return {\n            \"降龙十八掌\": [\"DamageEffect(200)\", \"LowerDeffenseEffect(-10,5)\", \"DizzinessEffect(6)\"],\n            \"六脉神剑\": [\"DamageEffect(100)\", \"DizzinessEffect(6)\"]\n        }\n\n    def __create_effect_objects(self):\n        # 根据name创建相应的技能对象\n        #    降龙十八掌 -> [\"技能1\"，\"技能2\"]\n        list_effect_name = self.__dict_skill_config[self.name]\n        list_effect_object = []\n        for item in list_effect_name:\n            # \"技能1\" --> 技能1的对象\n            # 对象 = eval(\"DamageEffect(200)\")\n            effect_object = eval(item)\n            list_effect_object.append(effect_object)\n        return list_effect_object\n\n    # 生成技能(执行效果)\n    def generate_skill(self):\n        print(self.name, \"技能释放啦\")\n        for item in self.__effect_objects:\n            # 调用父类，执行子类.\n            item.impact()\n\n\nxlsbz = SkillDeployer(\"降龙十八掌\")\nxlsbz.generate_skill()\n\nlmsj = SkillDeployer(\"六脉神剑\")\nlmsj.generate_skill()\n\n```\n\n# 程序结构\n\n## 模块 Module\n\n### 定义\n\n> 包含一系列数据、函数、类的文件，通常以.py结尾。\n\n### 作用\n\n> 让一些相关的数据，函数，类有逻辑的组织在一起，使逻辑结构更加清晰。\n\n有利于多人合作开发。\n\n### 导入\n\n#### `import` \n\n1. 语法：\n\n> import 模块名\n\nimport 模块名 as 别名\n\n2. 作用：将某模块整体导入到当前模块中\n\n3. 使用：模块名.成员\n\n#### `from import` \n\n4. 语法：\n\n> from 模块名 import 成员名[ as 别名1]\n\n5. 作用：将模块内的一个或多个成员导入到当前模块的作用域中。\n\n6. 使用：直接使用成员名\n\n#### `from import \\*` \n\n7. 语法：from 模块名 import *\n\n8. 作用：将某模块的所有成员导入到当前模块。\n\n9. **模块中以下划线(_)开头的属性，不会被导入，通常称这些成员为隐藏成员。**--直接通过import  * 的时候就不会导入隐藏成员，但是通过from  XX import _func   这种是可以的，毕竟你指名道姓就要用这个，也是可以的。\n\n10. **需要注意，导入进来的成员不要和当前模块中的成员冲突**，也要防止与其他模块之间冲突，如果有冲突的也可以用as来定义别名\n\n### 模块变量\n\n**__all__变量：定义可导出成员，仅对from xx import *语句有效。**\n\n__doc__变量：文档字符串。\n\n__file__变量：模块对应的文件路径名。\n\n**__name__变量：模块自身名字，可以判断是否为主模块。**\n\n当此模块作为主模块(第一个运行的模块)运行时，__name__绑定'__main__'，不是主模块，而是被其它模块导入时,存储模块名。\n\n```Python\n\"\"\"\n    模块相关概念\n\"\"\"\n# from module01 import *\n#\n# fun01()\n# # 1. 隐藏成员，不能通过from 模块 import × 形式导入\n# _fun02()\n# from module01 import _fun02\n#\n# # 隐藏成员，可以通过其他形式调用\n# _fun02()\n\n# 2. 通过__all__指定可导出成员\nfrom module01 import *\n\nMyClass.fun03()\n_fun02()\n\n# 3.可以通过该属性，查看文档注释\nprint(__doc__)\n\n# 4.返回当前模块的绝对路径（从系统根目录开始计算的）\nprint(__file__)\n\n# 5.\n# 现象：\n# 主模块叫做：__main__\n# 非主模块叫做：真名\nprint(__name__)\n# 作用1： 不是主模块不执行。(测试代码)\n# 作用2： 只有是主模块才执行。(主模块代码)\n# 使用：\nif __name__ == \"__main__\":\n    pass\n```\n\n### 加载过程\n\n> 在模块导入时，模块的所有语句会执行。\n\n如果一个模块已经导入，则再次导入时不会重新执行模块内的语句。\n\n### 分类\n\n11. 内置模块(builtins)，在解析器的内部可以直接使用。\n\n12. 标准库模块，安装Python时已安装且可直接使用。\n\n13. 第三方模块（通常为开源），需要自己安装。\n\n14. 用户自己编写的模块（可以作为其他人的第三方模块）\n\n## 包package\n\n### 定义\n\n将模块以文件夹的形式进行分组管理。\n\n### 作用\n\n> 让一些相关的模块组织在一起，使逻辑结构更加清晰。\n\n```Python\n\"\"\"\n    包\n\npython程序结构\n    文件夹  ---- 项目根目录\n        包\n            模块\n                类\n                    函数\n                        语句\n    练习：my_project\n\"\"\"\n\n# # form 包.模块 import 成员\n# from package01.module_a import fun01\n# fun01()\n#\n# form 包.包.模块 import 成员\nfrom package01.package02.module_b import fun02\nfun02()\n\n# import package01.module_a as pm\n# pm.fun01()\n```\n\n### 导入\n\n> import 包名.模块名 [as 模块新名]\n\nimport 包名.子包名.模块名 [as 模块新名]\n\nfrom 包名 import 模块名 [as 模块新名]\n\nfrom 包名.子包名 import 模块名 [as 模块新名]\n\nfrom 包名.子包名.模块名 import 成员名 [as 属性新名]\n\n# 导入包内的所有子包和模块\n\nfrom 包名 import *\n\nfrom 包名.模块名 import *\n\n### __init__.py 文件\n\n> 是包内必须存在的文件\n\n会在包加载时被自动调用\n\n#### __all__\n\n记录from 包 import * 语句需要导入的模块\n\n案例：\n\n15. 根据下列结构，创建包与模块。\n\n> my_ project /\n\nmain.py\n\ncommon/\n\n__init__.py\n\nlist_helper.py\n\nskill_system/\n\n__init__.py\n\nskill_deployer.py\n\nskill_manager.py\n\n16. 在main.py中调用skill_manager.py中实例方法。\n\n17. 在skill_manager.py中调用skill_deployer.py中实例方法。\n\n18. 在skill_deployer.py中调用list_helper.py中类方法。\n\n### 搜索顺序\n\n> 内置模块\n\nsys.path 提供的路径\n\n```Python\n\nprint(\"common -- list_helper\")\n\nimport sys\n# 如果不再pycharm中运行当前模块，则导包失败.\n# 将项目根目录加入path中，导包才会成功.\nsys.path.append(\"/home/tarena/1905/month01/code/day15/my_project\")  # 在导包失败的时候，可以手动添加项目根目录添加到路径列表中\nprint(sys.path)\n\nfrom main import *\n\nmain_fun01()\n\n```\n\n# 异常处理Error\n\n## 异常\n\n19. 定义：运行时检测到的错误。\n\n20. 现象：当异常发生时，程序不会再向下执行，而转到函数的调用语句。\n\n21. 常见异常类型：\n\n> -- 名称异常(NameError)：变量未定义。\n\n-- 类型异常(TypeError)：不同类型数据进行运算。\n\n-- 索引异常(IndexError)：超出索引范围。\n\n-- 属性异常(AttributeError)：对象没有对应名称的属性。\n\n-- 键异常(KeyError)：没有对应名称的键。\n\n-- 为实现异常(NotImplementedError)：尚未实现的方法。\n\n-- 异常基类Exception。\n\n## 处理\n\n22. 语法：\n\n> try:\n\n可能触发异常的语句\n\nexcept 错误类型1 [as 变量1]：\n\n处理语句1\n\nexcept 错误类型2 [as 变量2]：\n\n处理语句2\n\nexcept Exception [as 变量3]：\n\n不是以上错误类型的处理语句\n\nelse:\n\n未发生异常的语句\n\nfinally:\n\n无论是否发生异常的语句\n\n23. 作用：将程序由异常状态转为正常流程。\n\n24. 说明：\n\n> as 子句是用于绑定错误对象的变量，可以省略\n\nexcept子句可以有一个或多个，用来捕获某种类型的错误。\n\nelse子句最多只能有一个。\n\nfinally子句最多只能有一个，如果没有except子句，必须存在。\n\n如果异常没有被捕获到，会向上层(调用处)继续传递，直到程序终止运行。\n\n## raise 语句\n\n25. 作用：抛出一个错误，让程序进入异常状态。\n\n26. 目的：在程序调用层数较深时，向主调函数传递错误信息要层层return 比较麻烦，所以人为抛出异常，可以直接传递错误信息。。\n\n## 自定义异常\n\n27. 定义：\n\n> class 类名Error(Exception):\n\ndef __init__(self,参数):\n\nsuper().__init__(参数)\n\nself.数据 = 参数\n\n28. 调用：\n\n> try:\n\n....\n\nraise 自定义异常类名(参数)\n\n....\n\nexcept 定义异常类 as 变量名:\n\n变量名.数据\n\n29. 作用：封装错误信息\n\n#### 综合使用异常处理练习：\n\n```Python\n\"\"\"\n    界面代码\n\"\"\"\nfrom bll import *\nfrom model import *\n\nclass StudentManagerView:\n    \"\"\"\n    学生管理器视图\n    \"\"\"\n\n    def __init__(self):\n        self.__manager = StudentManagerController()\n\n    def __display_menu(self):\n        print(\"1)添加学生\")\n        print(\"2)显示学生\")\n        print(\"3)删除学生\")\n        print(\"4)修改学生\")\n        print(\"5)按照成绩升序显示学生\")\n\n    def __select_menu(self):\n        item = input(\"请输入：\")\n        if item == \"1\":\n            self.__input_student()\n        elif item == \"2\":\n            self.__output_students(self.__manager.stu_list)\n        elif item == \"3\":\n            self.__delete_student()\n        elif item == \"4\":\n            self.__modify_student()\n        elif item == \"5\":\n            self.__output_student_by_score()\n\n    def main(self):\n        \"\"\"\n            界面视图入口\n        :return:\n        \"\"\"\n        while True:\n            self.__display_menu()\n            self.__select_menu()\n\n    def __input_number(self,message):\n        while True:\n            try:\n                number = int(input(message))\n                return number\n            except:\n                print(\"输入有误\")\n\n    def __input_student(self):\n        name = input(\"请输入姓名：\")\n        # age = int(input(\"请输入年龄：\"))\n        # score = int(input(\"请输入成绩：\"))\n        age = self.__input_number(\"请输入年龄：\")\n        score = self.__input_number(\"请输入成绩：\")\n        stu = StudentModel(name, age, score)\n        self.__manager.add_student(stu)\n\n    def __output_students(self, list_output):\n        for item in list_output:\n            print(item.id, item.name, item.atk, item.score)\n\n    def __delete_student(self):\n        # id = int(input(\"请输入编号：\"))\n        id = self.__input_number(\"请输入编号：\")\n\n        if self.__manager.remove_student(id):\n            print(\"删除成功\")\n        else:\n            print(\"删除失败\")\n\n    def __modify_student(self):\n        stu = StudentModel()\n        # stu.id = int(input(\"请输入需要修改的学生编号:\"))\n        stu.id = self.__input_number(\"请输入需要修改的学生编号:\")\n        stu.name = input(\"请输入新的学生名称：\")\n        # stu.atk = int(input(\"请输入新的学生年龄：\"))\n        # stu.score = int(input(\"请输入新的学生成绩：\"))\n        stu.atk = self.__input_number(\"请输入新的学生年龄:\")\n        stu.score = self.__input_number(\"请输入新的学生成绩：\")\n\n        if self.__manager.update_student(stu):\n            print(\"修改成功\")\n        else:\n            print(\"修改失败\")\n\n    def __output_student_by_score(self):\n        self.__manager.order_by_score()\n        self.__output_students(self.__manager.stu_list)\n```\n\n# 迭代\n\n每一次对过程的重复称为一次\"迭代\"，而每一次迭代得到的结果会作为下一次迭代的初始值。例如：循环获取容器中的元素。\n\n## 可迭代对象iterable \n\n30. 定义：具有__iter__函数的对象，可以返回迭代器对象。\n\n31. 语法\n\n> -- 创建：\n\nclass 可迭代对象名称:\n\n  def __iter__(self):\n\n      return 迭代器\n\n-- 使用：\n\nfor 变量名 in 可迭代对象:\n\n语句\n\n32. 原理：\n\n> 迭代器 = 可迭代对象.__iter__()\n\nwhile True:\n\ntry:\n\nprint(迭代器.__next__())\n\nexcept StopIteration:\n\nbreak\n\n```Python\n# 练习2:不使用for，获取字典所有数据。\n#  {\"铁扇公主\":101,\"铁锤公主\":102,“扳手王子”:103}\n# 10:40\n\ndict01 = {\"铁扇公主\": 101, \"铁锤公主\": 102, \"扳手王子\": 103}\n\niterator = dict01.__iter__()  # 存的就是迭代器，迭代器就有__next__ 方法\nwhile True:\n    try:\n        key = iterator.__next__()\n        print(key, dict01[key])\n    except StopIteration:  # 取不到为止，就会抛出StopIteration异常，所以捕获后退出循环即可\n        break\n```\n\n## 迭代器对象iterator\n\n33. 定义：可以被next()函数调用并返回下一个值的对象。\n\n34. 语法\n\n> class 迭代器类名:\n\ndef __init__(self, 聚合对象):\n\nself.**聚合对象**= 聚合对象\n\ndef __next__(self):\n\nif 没有元素:\n\nraise StopIteration\n\nreturn 聚合对象元素\n\n![迭代器设计思想](pictures/07python_basic/迭代器设计思想.jpg)\n\n手写迭代器对象：\n\n```Python\n\"\"\"\n    迭代器\n    练习:exercise03.py\n\"\"\"\n\n\nclass Skill:\n    pass\n\n\nclass SkillManager:\n    \"\"\"\n        技能管理器  可迭代对象\n    \"\"\"\n\n    def __init__(self):\n        self.__skills = []\n\n    def add_skill(self, skill):\n        self.__skills.append(skill)\n\n    def __iter__(self):\n        # 创建一个迭代器对象,并传递需要迭代的数据。\n        return SkillIterator(self.__skills)\n\nclass SkillIterator:  # 创建一个迭代器，其需要有一个__next__方法和一个取值到最后抛出异常的一个方法\n    \"\"\"\n        技能迭代器\n    \"\"\"\n\n    def __init__(self, target):\n        self.__target = target\n        self.__index = 0\n\n    def __next__(self):\n        # 如果没有数据了，则抛出异常\n        if self.__index > len(self.__target) - 1:\n            raise StopIteration\n\n        # 返回下一个数据\n        temp = self.__target[self.__index]\n        self.__index += 1\n        return temp\n\nmanager = SkillManager()\nmanager.add_skill(Skill())\nmanager.add_skill(Skill())\nmanager.add_skill(Skill())\n\nfor item in manager:\n    print(item)\n\niterator = manager.__iter__()\nwhile True:\n    try:\n        item = iterator.__next__()\n        print(item)\n    except StopIteration:\n        break\n```\n\n图形迭代器\n\n```Python\n# 练习：图形管理器记录多个图形\n#      迭代图形管理器对象\nclass Graphic:\n    pass\n\nclass GraphicManager:\n    \"\"\"\n        图形管理器，可迭代对象(参与for)\n    \"\"\"\n    def __init__(self):\n        self.__graphics = []\n\n    def add_graphic(self, graphic):\n        self.__graphics.append(graphic)\n\n    def __iter__(self):\n        return GraphicIterator(self.__graphics)\n\nclass GraphicIterator:\n    \"\"\"\n        图形迭代器（获取下一个数据）\n    \"\"\"\n    def __init__(self, target):\n        self.__target = target\n        self.__index = 0\n\n    def __next__(self):\n        if self.__index > len(self.__target) - 1:\n            raise StopIteration\n        temp = self.__target[self.__index]\n        self.__index += 1\n        return temp\nmanager = GraphicManager()\nmanager.add_graphic(Graphic())\nmanager.add_graphic(Graphic())\nmanager.add_graphic(Graphic())\n# for item in manager:\n#     print(item)\niterator = manager.__iter__()\nwhile True:\n    try:\n        item = iterator.__next__()\n        print(item)\n    except StopIteration:\n        break\n```\n\n35. 说明：\n\n> -- 聚合对象通常是容器对象。\n\n4. 作用：使用者只需通过一种方式，便可简洁明了的获取聚合对象中各个元素，而又无需了解其内部结构。\n\n# 生成器generator\n\n36. 定义：能够动态(循环一次计算一次返回一次)提供数据的可迭代对象。\n\n37. 作用：在循环过程中，按照某种算法推算数据，不必创建容器存储完整的结果，从而节省内存空间。数据量越大，优势越明显。\n\n38. 以上作用也称之为**延迟操作或惰性操作**，通俗的讲就是在需要的时候才计算结果，而不是一次构建出所有结果。\n\n## 生成器函数\n\n39. 定义：含有**yield**语句的函数，返回值为生成器对象。-- 生成器=可迭代对象+迭代器\n\n40. 语法\n\n```Python\n# 创建：\ndef 函数名():\n            ...\n            yield 数据\n            ...\n# 调用：\nfor 变量名 in 函数名():\n        语句\n```\n\n41. 说明：\n\n> -- 调用生成器函数将返回一个生成器对象，不执行函数体。\n\n-- yield翻译为\"产生\"或\"生成\"\n\n42. 执行过程：\n\n (1) 调用生成器函数会自动创建迭代器对象。\n\n(2) 调用迭代器对象的__next__()方法时才执行生成器函数。\n\n(3) 每次执行到yield语句时返回数据，暂时离开。\n\n(4) 待下次调用__next__()方法时继续从离开处继续执行。\n\n 原理：生成迭代器对象的大致规则如下\n\n> -- 将yield关键字以前的代码放在next方法中。\n\n  - 以后在需要拿到多个同类对象的时候，可以使用yield来处理\n\n-- 将yield关键字后面的数据作为next方法的返回值。\n\n```Python\n\"\"\"\n    yield --> 生成器\n    练习:exercise07.py\n\"\"\"\n\"\"\"\nclass MyRange:\n    def __init__(self, stop_value):\n        self.stop_value = stop_value\n\n    def __iter__(self):\n        number = 0\n        while number < self.stop_value:\n            yield number\n            number += 1\n\nmy01 = MyRange(10)\n\niterator = my01.__iter__()\nwhile True:\n    try:\n        item = iterator.__next__()\n        print(item)\n    except StopIteration:\n        break\n\"\"\"\n\n\"\"\"\n# 生成器原理\nclass MyGenerator:\n    # 生成器 = 可迭代对象 + 迭代器\n    def __init__(self,stop_value):\n        self.begin = 0\n        self.stop_value = stop_value\n        \n    def __iter__(self):\n        return self\n\n    def __next__(self):\n        if self.begin >= self.stop_value:\n            raise StopIteration\n            \n        temp = self.begin\n        self.begin+=1\n        return temp\n\"\"\"\ndef my_range(stop_value):\n    number = 0\n    while number < stop_value:\n        yield number\n        number += 1\n\nmy01 = my_range(10)\nprint(type(my01), dir(my01))# dir 获取对象所有成员\n\nprint(id(my01.__iter__()), id(my01))\n\nfor item in my01:\n    print(item)\n```\n\n## 内置生成器\n\n### 枚举函数enumerate\n\n44. 语法：\n\n> for 变量 in enumerate(可迭代对象):\n\n语句\n\nfor 索引, 元素in enumerate(可迭代对象):\n\n语句\n\n45. 作用：遍历可迭代对象时，可以将索引与元素组合为一个元组。\n\n### zip\n\n46. 语法：\n\n> for item in zip(可迭代对象1, 可迭代对象2....):\n\n语句\n\n47. 作用：将多个可迭代对象中对应的元素组合成一个个元组，生成的元组个数由最小的可迭代对象决定。\n\n## 生成器表达式\n\n48. 定义：用推导式形式创建生成器对象。\n\n49. 语法：变量 = ( 表达式 for 变量 in 可迭代对象 [if 真值表达式] )\n\n```Python\n# 练习:1. 获取列表中所有字符串\n#     2. 获取列表中所有小数\n# 要求:分别使用生成器函数/生成器表达式/列表推导式完成.\nlist01 = [3, \"54\", True, 6, \"76\", 1.6, False, 3.5]\n# 练习:1\ndef find01():\n    for itme in list01:\n        if type(itme) == str:\n            yield itme\n\nre = find01()\nfor item in re:\n    print(item)\n\nre = (itme for itme in list01 if type(itme) == str)\nfor item in re:\n    print(item)\n\nre = [itme for itme in list01 if type(itme) == str]\nfor item in re:\n    print(item)\n\n# 练习:2\ndef find02():\n    for itme in list01:\n        if type(itme) == float:\n            yield itme\n\nfor item in find02():\n    print(item)\n\nfor item in (item for item in list01 if type(item) == float):\n    print(item)\n\nfor item in [item for item in list01 if type(item) == float]:\n    print(item)\n```\n\n# 函数式编程\n\n1. 定义：用一系列函数解决问题。\n\n> -- 函数可以赋值给变量，赋值后变量绑定函数。\n\n-- 允许将函数作为参数传入另一个函数。\n\n-- 允许函数返回一个函数。\n\n2. 高阶函数：将函数作为参数或返回值的函数。\n\n## 函数作为参数\n\n> 将核心逻辑传入方法体，使该方法的适用性更广，体现了面向对象的开闭原则。\n\n```Python\n\"\"\"\n\n\"\"\"\n# 1. 使用生成器函数实现以上3个需求\n# 2. 体会函数式编程的\"封装\"\n#    将三个函数变化点提取到另外三个函数中.\n#    将共性提取到另外一个函数中\n# 3. 体会函数式编程的\"继承\"与\"多态\"\n#    使用变量隔离变化点,在共性函数中调用变量.\n# 4. 测试(执行上述功能)\n\nlist01 = [43, 4, 5, 5, 6, 7, 87]\n\n# 需求1:在列表中查找所有偶数\ndef find01():\n    for item in list01:\n        if item % 2 == 0:\n            yield item\n\n# 需求2:在列表中查找所有大于10的数\ndef find02():\n    for item in list01:\n        if item > 10:\n            yield item\n\n# 需求3:在列表中查找所有范围在10--50之间的数\ndef find03():\n    for item in list01:\n        if 10 < item < 50:\n            yield item\n\n# \"封装\"\ndef condition01(item):\n    return item % 2 == 0\n\ndef condition02(item):\n    return item > 10\n\ndef condition03(item):\n    return 10 < item < 50\n\n# \"继承\"\ndef find(func_condition):\n    for item in list01:\n        # \"多态\"\n        # 调用:具体条件的抽象\n        # 执行:具体条件的函数\n        if func_condition(item):\n            yield item\n\nfor item in find(condition02):\n    print(item)\n\n# 方法参数,如果传递10/\"张无忌\"/True,叫做传递数据\n# 方法参数,如果函数1/函数2/函数3,叫做传递逻辑\n# 15:35\n```\n\n### lambda 表达式\n\n50. 定义：是一种匿名方法。\n\n51. 作用：作为参数传递时语法简洁，优雅，代码可读性强。\n\n> 随时创建和销毁，减少程序耦合度。\n\n52. 语法\n\n> -- 定义：\n\n变量 = lambda 形参: 方法体\n\n-- 调用：\n\n变量(实参)\n\n53. 说明：\n\n> -- 形参没有可以不填\n\n-- 方法体只能有一条语句，且不支持赋值语句。\n\n### 内置高阶函数\n\n54. map（函数，可迭代对象）：使用可迭代对象中的每个元素调用函数，将返回值作为新可迭代对象元素；返回值为新可迭代对象。\n\n55. filter(函数，可迭代对象)：根据条件筛选可迭代对象中的元素，返回值为新可迭代对象。\n\n56. sorted(可迭代对象，key = 函数,reverse = bool值)：排序，返回值为排序结果。\n\n57. max(可迭代对象，key = 函数)：根据函数获取可迭代对象的最大值。\n\n58. min(可迭代对象，key = 函数)：根据函数获取可迭代对象的最小值。\n\n## 函数作为返回值\n\n> 逻辑连续，当内部函数被调用时，不脱离当前的逻辑。\n\n### 闭包\n\n59. 三要素：\n\n> -- 必须有一个内嵌函数。\n\n-- 内嵌函数必须引用外部函数中变量。\n\n-- 外部函数返回值必须是内嵌函数。\n\n60. 语法\n\n> -- 定义：\n\n![image.png](pictures/07python_basic/image.png)\n\n```Python\ndef 外部函数名(参数):\n\t外部变量\n    def 内部函数名(参数):\n    使用外部变量\n    return 内部函数名\n```\n\n-- 调用：\n\n变量 = 外部函数名(参数)\n\n变量(参数)\n\n61. 定义：在一个函数内部的函数,同时内部函数又引用了外部函数的变量。\n\n62. 本质：闭包是将内部函数和外部函数的执行环境绑定在一起的对象。\n\n63. 优点：内部函数可以使用外部变量。\n\n64. 缺点：外部变量一直存在于内存中，不会在调用结束后释放，占用内存。\n\n65. 作用：实现python装饰器。\n\n### 函数装饰器decorator\n\n> 闭包的应用就是装饰器\n\n66. 定义：在不改变原函数的调用以及内部代码情况下，为其添加新功能的函数。\n\n67. 语法\n\ndef 函数装饰器名称(func):\n\n​\t\tdef 内嵌函数(*args, **kwargs):\n\n​\t\t\t\t需要添加的新功能\n\n​\t\t\t\treturn func(*args, **kwargs)\n\n​\t\treturn内嵌函数\n\n原函数 = 内嵌函数\n\n> @ 函数装饰器名称\n\ndef 原函数名称(参数):\n\n函数体\n\n原函数(参数)\n\n68. 本质：使用\"@函数装饰器名称\"修饰原函数，等同于创建与原函数名称相同的变量，关联内嵌函数；故调用原函数时执行内嵌函数。\n\n原函数名称 = 函数装饰器名称（原函数名称）\n\n69. 装饰器链：\n\n> 一个函数可以被多个装饰器修饰，执行顺序为从近到远。\n\n```Python\n\"\"\"\n    闭包\n\"\"\"\ndef fun01():\n    a = 1\n    def fun02():\n        print(a)\n    return fun02\n# 调用外部函数，返回值是内嵌函数\nresult = fun01()\n# 调用内嵌函数\nresult()  # 可以访问外部变量a\n# 闭包应用:逻辑连续，当内部函数被调用时，不脱离当前的逻辑\n# 压岁钱\ndef give_gife_money(money):\n    \"\"\"\n        得到压岁钱\n    :return:\n    \"\"\"\n    print(\"得到了%d压岁钱\" % money)\n\n    def child_buy(target, price):\n        \"\"\"\n            孩子购买商品\n        :param target: 需要购买的商品\n        :param price: 商品单价\n        \"\"\"\n        nonlocal money\n        if money >= price:\n            money -= price\n            print(\"孩子花了%.1f钱，购买了%s\" % (price, target))\n        else:\n            print(\"钱不够啦\")\n\n    return child_buy\n\n# 下列代码是一个连续的逻辑\naction = give_gife_money(10000)\naction(\"唐僧肉\", 0.5)\naction(\"小汽车\", 2000)\naction(\"手机\", 8000)\n```\n\n","source":"_posts/07python_basic.md","raw":"---\ntitle: python基础知识\ncategories: \n- python\ntags:\n- python\n- 面向对象\ndate: 2024-01-20 15:21:34\n---\n# Python 简介\n\n## Python 定义\n\n![image-20230103160116244](pictures/07python_basic/image-20230103160116244.png)\n\n是一个免费、开源、跨平台、动态、面向对象的编程语言。\n\n## Python程序的执行方式\n\n### 交互式\n\n> 在命令行输入指令，回车即可得到结果。\n\n打开终端》进入交互式：python3》编写代码：print(\"hello world\")》离开交互式：exit()\n\n### 文件式\n\n将指令编写到.py文件，可以重复运行程序：编写文件》打开终端》进入程序所在目录：cd 目录》执行程序： python3 文件名\n\n## 执行过程\n\n![image-20230103160129679](pictures/07python_basic/image-20230103160129679.png)\n\n计算机只能识别机器码(1010)，不能识别源代码(python)。\n\n14. 由源代码转变成机器码的过程分成两类：编译和解释。\n\n15. 编译：在程序运行之前，通过编译器将源代码变成机器码，例如：C语言。\n\n-- 优点：运行速度快\n\n-- 缺点：开发效率低，不能跨平台。\n\n16. 解释：在程序运行之时，通过解释器对程序逐行翻译，然后执行。例如Javascript\n\n-- 优点：开发效率高，可以跨平台；\n\n-- 缺点：运行速度慢。\n\n17. python是解释型语言，但为了提高运行速度，使用了一种编译的方法。编译之后得到pyc文件，存储了字节码（特定于Python的表现形式，不是机器码）。\n\n> 源代码 -- 编译 --> 字节码 -- 解释 --> 机器码\n\n|------------1次---------|\n\n## 解释器类型\n\n18. CPython（C语言开发)\n\n19. Jython (java开发)\n\n20. IronPython (.net开发)\n\n# 数据基本运算\n\n## 基础知识\n\n### pycharm常用快捷键\n\n21. 移动到本行开头：home键\n\n22. 移动到本行末尾：end键盘\n\n23. 注释代码：ctrl + /\n\n24. 复制行：ctrl +d\n\n25. 选择列：鼠标左键 + alt\n\n26. 移动行：shift + alt + 上下箭头\n\n27. 智能提示：ctrl + space\n\n28. 代码格式化：ctrl+alt+l\n\n### 注释\n\n> 给人看的，通常是对代码的描述信息。\n\n29. 单行注释：以#号开头。\n\n30. 多行注释：三引号开头，三引号结尾。\n\n### 函数\n\n表示一个功能，函数定义者是提供功能的人，函数调用者是使用功能的人。\n\n例如：\n\n31. print(数据) 作用：将括号中的内容显示在控制台中\n\n32. 变量 = input(\"需要显示的内容\") 作用：将用户输入的内容赋值给变量\n\n## 变量\n\n33. 定义：关联一个对象的标识符。\n\n34. 命名：必须是字母或下划线开头，后跟字母、数字、下划线。\n\n不能使用关键字(蓝色)，否则发生语法错误：SyntaxError: invalid syntax。\n\n35. 建议命名：字母小写，多个单词以下划线隔开。\n\nclass_name\n\n36. 赋值：创建一个变量或改变一个变量关联的数据。\n\n37. 语法：变量名 = 数据\n\n变量名1 = 变量名2 = 数据\n\n变量名1, 变量名2, = 数据1, 数据2\n\n## del 语句\n\n38. 语法:\n\n> del 变量名1, 变量名2\n\n39. 作用：\n\n> 用于删除变量,同时解除与对象的关联.如果可能则释放对象。\n\n40. 自动化内存管理的引用计数：\n\n> 每个对象记录被变量绑定(引用)的数量,当为0时被销毁。\n\n## 核心数据类型\n\n41. 在python中变量没有类型，但关联的对象有类型。\n\n42. 通过type函数可查看。\n\n### 空值对象 None\n\n43. 表示不存在的特殊对象。\n\n44. 作用：占位和解除与对象的关联。\n\n### 整形int\n\n45. 表示整数，包含正数、负数、0。\n\n> 如： -5, 100, 0\n\n46. 字面值：\n\n> 十进制：5\n\n二进制：0b开头，后跟1或者1\n\n八进制：0o开头，后跟0~7\n\n十六进制：0x开头，后跟0~9,A~F,a~f\n\n### 浮点型float\n\n47. 表示小数，包含正数、负数，0.0)。\n\n48. 字面值：\n\n- 小数：1.0 2.5\n\n- 科学计数法：e/E (正负号) 指数\n\n- 1.23e-2 (等同于0.0123)\n\n- 1.23456e5(等同于123456.0)\n\n### 字符串str\n\n是用来记录文本信息(文字信息)。\n\n字面值：双引号\n\n### 复数complex\n\n由实部和虚部组成的数字。\n\n虚部是以j或J结尾。\n\n字面值： 1j 1+1j 1-1j\n\n### 布尔bool\n\n用来表示真和假的类型\n\nTrue 表示真(条件满足或成立)，本质是1\n\nFalse 表示假(条件不满足或不成立)，本质是0\n\n## 数据类型转换\n\n49. 转换为整形: int(数据)\n\n50. 转换为浮点型:float(数据)\n\n51. 转换为字符串:str(数据)\n\n52. 转换为布尔:bool(数据)\n\n结果为False：bool(0) bool(0.0) bool(None)\n\n53. 混合类型自动升级：\n\n- 1 + 2.14 返回的结果是 3.14\n\n- 1 + 3.0 返回结果是: 4.0\n\n## 运算符\n\n### 算术运算符\n\n+ 加法\n\n- 减法\n\n* 乘法\n\n- / 除法：结果为浮点数\n\n- // 地板除：除的结果去掉小数部分\n\n- % 求余\n\n- ** 幂运算\n\n优先级从高到低：\n\n-  ()\n\n- **\n\n* / % //\n\n+ -\n\n### 增强运算符\n\ny += x 等同于 y = y + x\n\ny -= x 等同于 y = y - x\n\ny *= x 等同于 y = y * x\n\ny /= x 等同于 y = y / x\n\ny //= x 等同于 y = y // x\n\ny %= x 等同于 y = y % x\n\ny **= x 等同于 y = y ** x\n\n### 比较运算符\n\n-  <\t\t小于\n\n- <=\t\t小于等于\n\n-  \\>\t\t大于\n\n- \\>=\t\t大于等于\n\n-  ==\t\t等于\n\n-  !=\t\t不等于\n\n返回布尔类型的值\n\n比较运算的数学表示方式:0 <= x <= 100\n\n### 逻辑运算符\n\n#### 与and\n\n表示并且的关系，一假俱假。\n\n示例:\n\nTrue and True # True\n\nTrue and False # False\n\nFalse and True # False\n\nFalse and False # False\n\n#### 或or\n\n表示或者的关系，一真俱真\n\n示例:\n\nTrue or True # True\n\nTrue or False # True\n\nFalse or True # True\n\nFalse or False # False\n\n#### 非 not\n\n表示取反\n\n例如：\n\nnot True # 返回False\n\nnot False # 返回True\n\n#### 短路运算\n\n一但结果确定，后面的语句将不再执行。\n\n### 身份运算符\n\n语法:\n\nx is y\n\nx is not y\n\n作用：\n\nis 用于判断两个对象是否是同一个对象,是时返回True,否则返回False。\n\nis not 的作用与is相反\n\n### 优先级\n\n高到低：\n\n- 算数运算符\n\n- 比较运算符\n\n- 快捷运算符\n\n- 身份运算符\n\n- 逻辑运算符\n\n# 语句\n\n## 行\n\n54. 物理行：程序员编写代码的行。\n\n55. 逻辑行：python解释器需要执行的指令。\n\n56. 建议一个逻辑行在一个物理行上。\n\n57. 如果一个物理行中使用多个逻辑行，需要使用分号；隔开。\n\n5. 如果逻辑行过长，可以使用隐式换行或显式换行。\n\n隐式换行：所有括号的内容换行,称为隐式换行\n\n括号包括: () [] {} 三种\n\n显式换行：通过折行符 \\ (反斜杠)换行，必须放在一行的末尾，目的是告诉解释器,下一行也是本行的语句。\n\n## pass 语句\n\n通常用来填充语法空白。\n\n## 选择语句\n\n### If elif else 语句\n\n58. 作用:\n\n让程序根据条件选择性的执行语句。\n\n59. 语法:\n\nif 条件1:\n\n​\t语句块1\n\nelif 条件2:\n\n​\t语句块2\n\nelse:\n\n​\t语句块3\n\n60. 说明:\n\nelif 子句可以有0个或多个。\n\nelse 子句可以有0个或1个，且只能放在if语句的最后。\n\n### if 语句的真值表达式\n\nif 100:\n\n​\tprint(\"真值\")\n\n等同于\n\nif bool(100):\n\n​\tprint(\"真值\")\n\n### 条件表达式\n\n语法：变量 = 结果1 if 条件 else 结果2\n\n作用：根据条件(True/False) 来决定返回结果1还是结果2。\n\n## 循环语句\n\n### while语句\n\n61. 作用:\n\n可以让一段代码满足条件，重复执行。\n\n62. 语法:\n\nwhile 条件:\n\n​\t满足条件执行的语句\n\nelse:\n\n​\t不满足条件执行的语句\n\n63. 说明:\n\nelse子句可以省略。\n\n在循环体内用break终止循环时,else子句不执行。\n\n### for 语句\n\n64. 作用:\n\n用来遍历可迭代对象的数据元素。\n\n可迭代对象是指能依次获取数据元素的对象，例如：容器类型。\n\n65. 语法:\n\nfor 变量列表 in 可迭代对象:\n\n​\t语句块1\n\nelse:\n\n​\t语句块2\n\n66. 说明:\n\nelse子句可以省略。\n\n在循环体内用break终止循环时,else子句不执行。\n\n### range 函数\n\n67. 作用:\n\n用来创建一个生成一系列整数的可迭代对象(也叫整数序列生成器)。\n\n68. 语法:\n\nrange(开始点，结束点，间隔)\n\n69. 说明:\n\n函数返回的可迭代对象可以用for取出其中的元素\n\n返回的数字不包含结束点\n\n开始点默认为0\n\n间隔默认值为1\n\n## 跳转语句\n\n### break 语句\n\n70. 跳出循环体，后面的代码不再执行。\n\n71. 可以让while语句的else部分不执行。\n\n### continue 语句\n\n跳过本次，继续下次循环。\n\n# 容器类型\n\n## 通用操作\n\n### 数学运算符\n\n72. +：用于拼接两个容器\n\n73. +=：用原容器与右侧容器拼接,并重新绑定变量\n\n74. *：重复生成容器元素\n\n75. *=：用原容器生成重复元素, 并重新绑定变量\n\n76. < <= > >= == !=：依次比较两个容器中元素,一但不同则返回比较结果。\n\n### 成员运算符\n\n77. 语法：\n\n数据 in 序列\n\n数据 not in 序列\n\n78. 作用：\n\n如果在指定的序列中找到值，返回bool类型。\n\n### 索引index\n\n79. 作用：定位单个容器元素\n\n80. 语法：容器[整数]\n\n81. 说明：\n\n正向索引从0开始，第二个索引为1，最后一个为len(s)-1。\n\n反向索引从-1开始,-1代表最后一个,-2代表倒数第二个,以此类推,第一个是-len(s)。\n\n### 切片slice\n\n82. 作用：\n\n定位多个容器元素。\n\n83. 语法：\n\n容器[(开始索引):(结束索引)(:(步长))]\n\n84. 说明：\n\n小括号()括起的部分代表可省略\n\n结束索引不包含该位置元素\n\n步长是切片每次获取完当前元素后移动的偏移量\n\n### 内建函数\n\n85. len(x) 返回序列的长度\n\n86. max(x) 返回序列的最大值元素\n\n87. min(x) 返回序列的最小值元素\n\n88. sum(x) 返回序列中所有元素的和(元素必须是数值类型)\n\n## 字符串 str\n\n### 定义\n\n> 由一系列字符组成的不可变序列容器，存储的是字符的编码值。\n\n### 编码\n\n89. 字节byte：计算机最小存储单位，等于8 位bit.\n\n90. 字符：单个的数字，文字与符号。\n\n91. 字符集(码表)：存储字符与二进制序列的对应关系。\n\n92. 编码：将字符转换为对应的二进制序列的过程。\n\n93. 解码：将二进制序列转换为对应的字符的过程。\n\n94. 编码方式：\n\n--ASCII编码：包含英文、数字等字符，每个字符1个字节。\n\n--GBK编码：兼容ASCII编码，包含21003个中文；英文1个字节，汉字2个字节。\n\n--Unicode字符集：国际统一编码，旧字符集每个字符2字节，新字符集4字节。\n\n--UTF-8编码：Unicode的存储与传输方式，英文1字节，中文3字节。\n\n#### 相关函数\n\n95. ord(字符串):返回该字符串的Unicode码。\n\n96. chr(整数):返回该整数对应的字符串。\n\n### 字面值\n\n#### 单引和双引号的区别\n\n97. 单引号内的双引号不算结束符\n\n98. 双引号内的单引号不算结束符\n\n#### 三引号作用\n\n99. 换行会自动转换为换行符\\n\n\n100. 三引号内可以包含单引号和双引号\n\n101. 作为文档字符串\n\n#### 转义字符\n\n102. 改变字符的原始含义。\n\n> \\' \\\" \\\"\"\" \\n \\\\ \\t \\0 空字符\n\n103. 原始字符串：取消转义。\n\na = r\"C:\\newfile\\test.py\"\n\n#### 字符串格式化\n\n104. 定义：\n\n> 生成一定格式的字符串。\n\n105. 语法：\n\n> 字符串%(变量)\n\n\"我的名字是%s,年龄是%s\" % (name, age)\n\n106. 类型码：\n\n> %s 字符串 %d整数 %f 浮点数\n\n## 列表 list\n\n### 定义\n\n由一系列变量组成的可变序列容器。\n\n### 基础操作\n\n107. 创建列表：\n\n> 列表名 = []\n\n列表名 = list(可迭代对象)\n\n108. 添加元素：\n\n> 列表名.append(元素)\n\n列表.insert(索引，元素)\n\n109. 定位元素：\n\n> 列表名[索引] = 元素\n\n变量 = 列表名[索引]\n\n变量 = 列表名[切片] # 赋值给变量的是切片所创建的新列表\n\n列表名[切片] = 容器 # 右侧必须是可迭代对象，左侧切片没有创建新列表。遍历列表：\n\n正向：\n\nfor 变量名 in 列表名:\n\n变量名就是元素\n\n反向：\n\nfor 索引名 in range(len(列表名)-1,-1,-1):\n\n列表名[索引名]就是元素\n\n110. 删除元素：\n\n> 列表名.remove(元素)\n\ndel 列表名[索引或切片]\n\n### 深拷贝和浅拷贝\n\n浅拷贝：复制过程中,只复制一层变量,不会复制深层变量绑定的对象的复制过程。\n\n深拷贝：复制整个依懒的变量。\n\n### 列表VS字符串\n\n111. 列表和字符串都是序列,元素之间有先后顺序关系。\n\n112. 字符串是不可变的序列,列表是可变的序列。\n\n113. 字符串中每个元素只能存储字符,而列表可以存储任意类型。\n\n114. 列表和字符串都是可迭代对象。\n\n115. 函数：\n\n> 将多个字符串拼接为一个。\n\nresult = \"连接符\".join(列表)\n\n将一个字符串拆分为多个。\n\n列表 = \"a-b-c-d\".split(\"分隔符\")\n\n### 列表推导式\n\n116. 定义：\n\n> 使用简易方法，将可迭代对象转换为列表。\n\n117. 语法：\n\n> 变量 = [表达式 for 变量 in 可迭代对象]\n\n变量 = [表达式 for 变量 in 可迭代对象 if 条件]\n\n118. 说明:\n\n> 如果if真值表达式的布尔值为False,则可迭代对象生成的数据将被丢弃。\n\n### 列表推导式嵌套\n\n119. 语法：\n\n> 变量 = [表达式 for 变量1 in 可迭代对象1 for 变量2 in可迭代对象2]\n\n120. 传统写法：\n\nresult = []\n\nfor r in [\"a\", \"b\", \"c\"]:\n\nfor c in [\"A\", \"B\", \"C\"]:\n\nresult.append(r + c)\n\n121. 推导式写法：\n\nresult = [r + c for r in list01 for c in list02]\n\n## 元组 tuple\n\n### 定义\n\n122. 由一系列变量组成的不可变序列容器。\n\n123. 不可变是指一但创建，不可以再添加/删除/修改元素。\n\n### 基础操作\n\n124. 创建空元组：\n\n元组名 = ()\n\n元组名 = tuple()\n\n125. 创建非空元组：\n\n元组名 = (20,)\n\n元组名 = (1, 2, 3)\n\n元组名 = 100,200,300\n\n元组名 = tuple(可迭代对象)\n\n126. 获取元素：\n\n变量 = 元组名[索引]\n\n变量 = 元组名[切片] # 赋值给变量的是切片所创建的新列表\n\n127. 遍历元组：\n\n正向：\n\nfor 变量名 in 列表名:\n\n变量名就是元素\n\n反向：\n\nfor 索引名 in range(len(列表名)-1,-1,-1):\n\n元组名[索引名]就是元素\n\n### 作用\n\n128. 元组与列表都可以存储一系列变量，由于列表会预留内存空间，所以可以增加元素。\n\n129. 元组会按需分配内存，所以如果变量数量固定，建议使用元组，因为占用空间更小。\n\n130. 应用：\n\n变量交换的本质就是创建元组：x, y = （y, x ）\n\n格式化字符串的本质就是创建元祖：\"姓名:%s, 年龄:%d\" % (\"tarena\", 15)\n\n## 字典 dict\n\n### 定义\n\n131. 由一系列键值对组成的可变散列容器。\n\n132. 散列：对键进行哈希运算，确定在内存中的存储位置，每条数据存储无先后顺序。\n\n133. 键必须惟一且不可变(字符串/数字/元组)，值没有限制。\n\n### 基础操作\n\n134. 创建字典：\n\n字典名 = {键1：值1，键2：值2}\n\n字典名 = dict (可迭代对象)\n\n135. 添加/修改元素：\n\n语法:\n\n字典名[键] = 数据\n\n说明:\n\n键不存在，创建记录。\n\n键存在，修改值。\n\n136. 获取元素：\n\n变量 = 字典名[键] # 没有键则错误\n\n137. 遍历字典：\n\nfor 键名 in 字典名:\n\n​\t字典名[键名]\n\nfor 键名,值名 in 字典名.items():\n\n语句\n\n138. 删除元素：\n\n> del 字典名[键]\n\n### 字典推导式\n\n139. 定义：\n\n使用简易方法，将可迭代对象转换为字典。\n\n140. 语法:\n\n{键:值 for 变量 in 可迭代对象}\n\n{键:值 for 变量 in 可迭代对象 if 条件}\n\n### 字典 VS 列表\n\n141. 都是可变容器。\n\n142. 获取元素方式不同,列表用索引,字典用键。\n\n143. 字典的插入,删除,修改的速度快于列表。\n\n144. 列表的存储是有序的,字典的存储是无序的。\n\n## 集合 set\n\n### 定义\n\n145. 由一系列不重复的不可变类型变量(元组/数/字符串)组成的可变散列容器。\n\n146. 相当于只有键没有值的字典(键则是集合的数据)。\n\n### 基础操作\n\n147. 创建空集合：\n\n集合名 = set()\n\n集合名 = set(可迭代对象)\n\n148. 创建具有默认值集合：\n\n集合名 = {1, 2, 3}\n\n集合名 = set(可迭代对象)\n\n149. 添加元素：\n\n集合名.add(元素)\n\n150. 删除元素：\n\n集合名.discard(元素)\n\n### 运算\n\n151. 交集&：返回共同元素。\n\ns1 = {1, 2, 3}\n\ns2 = {2, 3, 4}\n\ns3 = s1 & s2 # {2, 3}\n\n152. 并集：返回不重复元素\n\ns1 = {1, 2, 3}\n\ns2 = {2, 3, 4}\n\ns3 = s1 | s2 # {1, 2, 3, 4}\n\n153. 补集-：返回只属于其中之一的元素\n\ns1 = {1, 2, 3}\n\ns2 = {2, 3, 4}\n\ns1 - s2 # {1} 属于s1但不属于s2\n\n补集^：返回不同的的元素\n\ns1 = {1, 2, 3}\n\ns2 = {2, 3, 4}\n\ns3 = s1 ^ s2 # {1, 4} 等同于(s1-s2 | s2-s1)\n\n154. 子集<：判断一个集合的所有元素是否完全在另一个集合中\n\n155. 超集>：判断一个集合是否具有另一个集合的所有元素\n\ns1 = {1, 2, 3}\n\ns2 = {2, 3}\n\ns2 < s1 # True\n\ns1 > s2 # True\n\n156. 相同或不同== !=：判断集合中的所有元素是否和另一个集合相同。\n\ns1 = {1, 2, 3}\n\ns2 = {3, 2, 1}\n\ns1 == s2 # True\n\ns1 != s2 # False\n\n子集或相同,超集或相同 <= >=\n\n### 集合推导式\n\n157. 定义：\n\n使用简易方法，将可迭代对象转换为集合。\n\n158. 语法:\n\n{表达式 for 变量 in 可迭代对象}\n\n{表达式 for 变量 in 可迭代对象 if 条件}\n\n# 函数 function\n\n## pycharm相关设置\n\n159. \"代码自动完成\"时间延时设置\n\n> File -> Settings -> Editor -> General -> Code Completion -> Autopopup in (ms):0\n\n160. 快捷键：\n\n> Ctrl + P 参数信息（在方法中调用参数）\n\nCtrl + Q 快速查看文档\n\nCtrl + Alt + M 提取方法\n\n## 定义\n\n161. 用于封装一个特定的功能，表示一个功能或者行为。\n\n162. 函数是可以重复执行的语句块, 可以重复调用。\n\n## 作用\n\n提高代码的可重用性和可维护性（代码层次结构更清晰）。\n\n## 定义函数\n\n163. 语法：\n\n> def 函数名(形式参数):\n\n  函数体\n\n164. 说明：\n\n> def 关键字：全称是define，意为\"定义\"。\n\n函数名：对函数体中语句的描述，规则与变量名相同。\n\n形式参数：方法定义者要求调用者提供的信息。\n\n函数体：完成该功能的语句。\n\n165. 函数的第一行语句建议使用文档字符串描述函数的功能与参数。\n\n## 调用函数\n\n166. 语法：函数名(实际参数)\n\n167. 说明：根据形参传递内容。\n\n## 返回值\n\n168. 定义：\n\n> 方法定义者告诉调用者的结果。\n\n169. 语法：\n\n> return 数据 \n\n170. 说明：\n\n> return后没有语句，相当于返回 None。\n\n函数体没有return，相当于返回None。\n\n## 可变／不可变类型在传参时的区别\n\n171. 不可变类型参数有:\n\n> 数值型(整数，浮点数,复数)\n\n布尔值bool\n\nNone 空值\n\n字符串str\n\n元组tuple\n\n固定集合frozenset\n\n172. 可变类型参数有:\n\n> 列表 list\n\n字典 dict\n\n集合 set\n\n173. 传参说明：\n\n> 不可变类型的数据传参时，函数内部不会改变原数据的值。\n\n可变类型的数据传参时，函数内部可以改变原数据。\n\n## 函数参数\n\n### 实参传递方式argument\n\n#### 位置传参\n\n定义：实参与形参的位置依次对应。\n\n#### 序列传参\n\n定义：实参用*将序列拆解后与形参的位置依次对应。\n\n#### 关键字传参\n\n定义：实参根据形参的名字进行对应。\n\n#### 字典关键字传参\n\n174. 定义：实参用**将字典拆解后与形参的名字进行对应。\n\n175. 作用：配合形参的缺省参数，可以使调用者随意传参。\n\n### 形参定义方式parameter\n\n#### 缺省参数\n\n176. 语法：\n\n> def 函数名(形参名1=默认实参1, 形参名2=默认实参2, ...):\n\n函数体\n\n177. 说明：\n\n> 缺省参数必须自右至左依次存在，如果一个参数有缺省参数，则其右侧的所有参数都必须有缺省参数。\n\n缺省参数可以有0个或多个，甚至全部都有缺省参数。\n\n#### 位置形参\n\n语法：\n\n> def 函数名(形参名1, 形参名2, ...):\n\n函数体\n\n#### 星号元组形参\n\n178. 语法：\n\n> def 函数名(*元组形参名):\n\n  函数体\n\n179. 作用：\n\n> 收集多余的位置传参。\n\n180. 说明：\n\n> 一般命名为'args'\n\n形参列表中最多只能有一个\n\n#### 命名关键字形参\n\n181. 语法：\n\n> def 函数名(*, 命名关键字形参1, 命名关键字形参2, ...):\n\n函数体\n\ndef 函数名(*args, 命名关键字形参1, 命名关键字形参2, ...):\n  函数体\n\n182. 作用：\n\n> 强制实参使用关键字传参\n\n#### 双星号字典形参\n\n183. 语法：\n\ndef 函数名(**字典形参名):\n\n​\t\t函数体\n\n184. 作用：\n\n收集多余的关键字传参\n\n185. 说明:\n\n一般命名为'kwargs'\n\n形参列表中最多只能有一个\n\n#### 参数自左至右的顺序\n\n位置形参 --> 星号元组形参 --> 命名关键字形参 --> 双星号字典形参\n\n# 作用域LEGB\n\n186. 作用域：变量起作用的范围。\n\n187. Local局部作用域：函数内部。\n\n188. Enclosing 外部嵌套作用域 ：函数嵌套。\n\n189. Global全局作用域：模块(.py文件)内部。\n\n190. Builtin内置模块作用域：builtins.py文件。\n\n## 变量名的查找规则\n\n191. 由内到外：L -> E -> G -> B\n\n192. 在访问变量时，先查找本地变量，然后是包裹此函数外部的函数内部的变量，之后是全局变量，最后是内置变量。\n\n## 局部变量\n\n193. 定义在函数内部的变量(形参也是局部变量)\n\n194. 只能在函数内部使用\n\n195. 调用函数时才被创建，函数结束后自动销毁\n\n## 全局变量\n\n196. 定义在函数外部,模块内部的变量。\n\n197. 在整个模块(py文件)范围内访问（但函数内不能将其直接赋值）。\n\n## global 语句\n\n198. 作用：\n\n> 在函数内部修改全局变量。\n\n在函数内部定义全局变量(全局声明)。\n\n199. 语法：\n\n> global 变量1, 变量2, ...\n\n200. 说明\n\n> 在函数内直接为全局变量赋值，视为创建新的局部变量。\n\n不能先声明局部的变量，再用global声明为全局变量。\n\n## nonlocal 语句\n\n201. 作用：\n\n> 在内层函数修改外层嵌套函数内的变量\n\n202. 语法\n\n> nonlocal 变量名1,变量名2, ...\n\n203. 说明\n\n> 在被嵌套的内函数中进行使用\n\n# 面向对象 Object Oriented\n\n## 概述\n\n### 面向过程\n\n204. 分析出解决问题的步骤，然后逐步实现。\n\n> 例如：婚礼筹办\n\n-- 发请柬（选照片、措词、制作）\n\n-- 宴席（场地、找厨师、准备桌椅餐具、计划菜品、购买食材）\n\n-- 婚礼仪式（定婚礼仪式流程、请主持人）\n\n205. 公式：程序 = 算法 + 数据结构\n\n206. 优点：所有环节、细节自己掌控。\n\n207. 缺点：考虑所有细节，工作量大。\n\n### 面向对象\n\n208. 找出解决问题的人，然后分配职责。\n\n> 例如：婚礼筹办\n\n-- 发请柬：找摄影公司（拍照片、制作请柬）\n\n-- 宴席：找酒店（告诉对方标准、数量、挑选菜品）\n\n-- 婚礼仪式：找婚庆公司（对方提供司仪、制定流程、提供设备、帮助执行）\n\n209. 公式：程序 = 对象 + 交互\n\n210. 优点\n\n (1) 思想层面：\n\n-- 可模拟现实情景，更接近于人类思维。\n\n-- 有利于梳理归纳、分析解决问题。\n\n(2) 技术层面：\n\n-- 高复用：对重复的代码进行封装，提高开发效率。\n\n-- 高扩展：增加新的功能，不修改以前的代码。\n\n-- 高维护：代码可读性好，逻辑清晰，结构规整。\n\n211. 缺点：学习曲线陡峭。\n\n## 类和对象\n\n### 基础概念\n\n![面向对象概述](pictures/07python_basic/面向对象概述.jpg)\n\n212. 抽象：从具体事物中抽离出共性、本质，舍弃个别、非本质过程。\n\n213. 类：一个抽象的概念，即生活中的\"类别\"。\n\n214. 对象：类的具体实例，即归属于某个类别的\"个体\"。\n\n215. 类是创建对象的\"模板\"。\n\n-- 数据成员：名词类型的状态。\n\n-- 方法成员：动词类型的行为。\n\n### 语法\n\n#### 定义类\n\n216. 代码\n\n> class 类名:\n\n\"\"\"文档说明\"\"\"\n\ndef _init_(self,参数列表):\n\nself.实例变量 = 参数\n\n方法成员\n\n217. 说明\n\n-- 类名所有单词首字母大写.\n\n-- _init_ 也叫构造函数，创建对象时被调用，也可以省略。\n\n-- self 变量绑定的是被创建的对象，名称可以随意。\n\n#### 创建对象(实例化)\n\n变量 = 构造函数 (参数列表)\n\n### 实例成员\n\n#### 实例变量\n\n218. 语法\n\n \n\n(1) 定义：对象.变量名\n\n(2) 调用：对象.变量名\n\n219. 说明\n\n(1) 首次通过对象赋值为创建，再次赋值为修改.\n\nw01 = Wife()\n\nw01.name = \"建宁\"\n\nw01.name = \"建宁公主\"\n\n(2) 通常在构造函数(_init_)中创建。\n\nw01 = Wife(\"建宁公主,24)\n\nprint(w01.name)\n\n(3) 每个对象存储一份，通过对象地址访问。\n\n \n\n220. 作用：描述某个对象自己的数据。\n\n221. __dict__：对象的属性，用于存储自身实例变量的字典。\n\n#### 实例方法\n\n222. 语法\n\n(1) 定义： def 方法名称(self, 参数列表):\n\n方法体\n\n(2) 调用： 对象地址.实例方法名(参数列表)\n\n不建议通过类名访问实例方法\n\n223. 说明\n\n(1) 至少有一个形参，第一个参数绑定调用这个方法的对象,一般命名为\"self\"。\n\n(2) 无论创建多少对象，方法只有一份，并且被所有对象共享。\n\n224. 作用：表示对象行为。\n\n### 类成员\n\n#### 类变量\n\n225. 语法\n\n (1) 定义：在类中，方法外定义变量。\n\n> class 类名:\n\n变量名 = 表达式\n\n(2) 调用：类名.变量名\n\n不建议通过对象访问类变量\n\n226. 说明\n\n(1) 存储在类中。\n\n(2) 只有一份，被所有对象共享。\n\n227. 作用：描述所有对象的共有数据。\n\n#### 类方法\n\n228. 语法\n\n (1) 定义：\n\n> @classmethod\n\ndef 方法名称(cls,参数列表):\n\n方法体\n\n(2) 调用：类名.方法名(参数列表)\n\n> 不建议通过对象访问类方法\n\n229. 说明\n\n(1) 至少有一个形参，第一个形参用于绑定类，一般命名为'cls'\n\n(2) 使用@classmethod修饰的目的是调用类方法时可以隐式传递类。\n\n(3) 类方法中不能访问实例成员，实例方法中可以访问类成员。\n\n230. 作用：操作类变量。\n\n### 静态方法\n\n231. 语法\n\n (1) 定义：\n\n> @staticmethod\n\ndef 方法名称(参数列表):\n\n方法体\n\n(2) 调用：类名.方法名(参数列表)\n\n> 不建议通过对象访问静态方法\n\n232. 说明\n\n> (1) 使用@ staticmethod修饰的目的是该方法不需要隐式传参数。\n\n(2) 静态方法不能访问实例成员和类成员\n\n233. 作用：定义常用的工具函数。\n\n## 三大特征\n\n### 封装\n\n\n\n![封装思想](pictures/07python_basic/封装思想.jpg)\n\n#### 数据角度讲\n\n234. 定义：\n\n> 将一些基本数据类型复合成一个自定义类型。\n\n235. 优势：\n\n将数据与对数据的操作相关联。\n\n代码可读性更高（类是对象的模板）。\n\n#### 行为角度讲\n\n236. 定义：\n\n> 类外提供必要的功能，隐藏实现的细节。\n\n237. 优势：\n\n> 简化编程，使用者不必了解具体的实现细节，只需要调用对外提供的功能。\n\n238. 私有成员：\n\n \n\n(1) 作用：无需向类外提供的成员，可以通过私有化进行屏蔽。\n\n(2) 做法：命名使用双下划线开头。\n\n(3) 本质：障眼法，实际也可以访问。\n\n> 私有成员的名称被修改为：_类名__成员名，可以通过_dict_属性或dir函数查看。\n\n239. 属性@property：\n\n> 公开的实例变量，缺少逻辑验证。私有的实例变量与两个公开的方法相结合，又使调用者的操作略显复杂。而属性可以将两个方法的使用方式像操作变量一样方便。\n\n(1) 定义：\n\n> @property\n\ndef 属性名(self):\n\nreturn self.__属性名\n\n@属性名.setter\n\ndef 属性名(self, value):\n\nself.__属性名= value\n\n(2) 调用：\n\n> 对象.属性名 = 数据\n\n变量 = 对象.属性名\n\n(3) 说明：\n\n> 通常两个公开的属性，保护一个私有的变量。\n\n@property 负责读取，@属性名.setter 负责写入\n\n只写：属性名= property(None, 写入方法名)\n\n#### 设计角度讲\n\n240. 定义：\n\n(1) 分而治之\n\n> 将一个大的需求分解为许多类，每个类处理一个独立的功能。\n\n(2) 变则疏之\n\n> 变化的地方独立封装，避免影响其他类。\n\n(3) 高 内 聚\n\n> 类中各个方法都在完成一项任务(单一职责的类)。\n\n(4) 低 耦 合\n\n> 类与类的关联性与依赖度要低(每个类独立)，让一个类的改变，尽少影响其他类。\n\n241. 优势：\n\n便于分工，便于复用，可扩展性强。\n\n#### 案例:信息管理系统\n\n![image-20230103161103514](pictures/07python_basic/image-20230103161103514.png)\n\n#### 需求\n\n实现对学生信息的增加、删除、修改和查询。\n\n#### 分析\n\n> 界面可能使用控制台，也可能使用Web等等。\n\n242. 识别对象：界面视图类 逻辑控制类 数据模型类\n\n243. 分配职责：\n\n> 界面视图类：负责处理界面逻辑，比如显示菜单，获取输入，显示结果等。\n\n逻辑控制类：负责存储学生信息，处理业务逻辑。比如添加、删除等\n\n数据模型类：定义需要处理的数据类型。比如学生信息。\n\n244. 建立交互：\n\n> 界面视图对象 <----> 数据模型对象 <----> 逻辑控制对象\n\n#### 设计\n\n数据模型类：StudentModel\n\n数据：编号 id,姓名 name,年龄 age,成绩 score\n\n逻辑控制类：StudentManagerController\n\n数据：学生列表 __stu_list\n\n行为：获取列表 stu_list,添加学生 add_student，删除学生remove_student，修改学生update_student，根据成绩排序order_by_score。\n\n界面视图类：StudentManagerView\n\n数据：逻辑控制对象__manager\n\n行为：显示菜单__display_menu，选择菜单项__select_menu_item，入口逻辑main，\n\n输入学生__input_students，输出学生__output_students，删除学生__delete_student，修改学生信息__modify_student\n\n### 继承\n\n![继承兼容性](pictures/07python_basic/继承兼容性.jpg)\n\n![继承内存图](pictures/07python_basic/继承内存图.jpg)\n\n#### 语法角度讲\n\n#### 继承方法\n\n245. 代码:\n\n> class 父类:\n\ndef 父类方法(self):\n\n方法体\n\nclass 子类(父类)：\n\ndef 子类方法(self):\n\n方法体\n\n儿子 = 子类()\n\n儿子.子类方法()\n\n儿子.父类方法()\n\n246. 说明：\n\n> 子类直接拥有父类的方法.\n\n#### 内置函数\n\n> isinstance(对象, 类型)\n\n返回指定对象是否是某个类的对象。\n\nissubclass(类型，类型)\n\n返回指定类型是否属于某个类型。\n\n#### 继承数据\n\n247. **代码**\n\n```Python\nclass 子类(父类):\n    def __init__(self,参数列表):\n    super().__init__(参数列表)\n    self.自身实例变量 = 参数\n```\n\n248. **说明**\n\n> \n\n  - 子类如果没有构造函数，将自动执行父类的；\n\n```Plain Text\nclass Student(Person):\n    # 子类若没有构造函数，使用父类的.\n    pass\n\ns01 = Student()\nprint(s01.name)\n```\n\n> \n\n  - 但如果有构造函数将覆盖父类的,此时必须通过super()函数调用父类的构造函数，以确保父类实例变量被正常创建。\n\n```Python\nclass Person:\n    def __init__(self,name):\n        self.name = name \n        \nclass Student(Person):\n    # 子类若具有构造函数，则必须先调用父类构造函数。\n    def __init__(self,name,score):\n        super().__init__(name)  # 这里调用父类的构造函数，同时需要传参的哦\n        self.score = score\n# 实例化测试\np01 = Person(\"李四\")\nprint(p01.name)\ns01 = Student(\"张三\", 100)\nprint(s01.score)\nprint(s01.name)\n```\n\n#### 定义\n\n> 重用现有类的功能，并在此基础上进行扩展。\n\n说明：子类直接具有父类的成员（共性），还可以扩展新功能。\n\n#### 优点\n\n- 一种代码复用的方式。\n\n#### 缺点\n\n- 耦合度高：父类的变化，直接影响子类。\n\n#### 设计角度讲\n\n#### 定义\n\n> 将相关类的共性进行抽象，统一概念，隔离变化。\n\n#### 适用性\n\n- 多个类在概念上是一致的，且需要进行统一的处理。\n\n#### 相关概念\n\n- 父类（基类、超类）、子类（派生类）。\n\n- 父类相对于子类更抽象，范围更宽泛；子类相对于父类更具体，范围更狭小。\n\n- 单继承：父类只有一个（例如 Java，C#）。\n\n- 多继承：父类有多个（例如C++，Python）。\n\n- Object类：任何类都直接或间接继承自 object 类。\n\n#### 多继承\n\n一个子类继承两个或两个以上的基类，父类中的属性和方法同时被子类继承下来。\n\n同名方法的解析顺序（MRO， Method Resolution Order）:\n\n类自身 --> 父类继承列表（由左至右）--> 再上层父类\n\nA\n\n/ \\\n\n/ \\\n\nB C\n\n\\ /\n\n\\ /\n\nD\n\n```Python\n\"\"\"\n    多继承 -- 语法\n    同名方法解析顺序：MRO\n\"\"\"\n\nclass A:\n    def m01(self):\n        print(\"A - m01\")\n\nclass B(A):\n    def m01(self):\n        print(\"B - m01\")\n\nclass C(A):\n    def m01(self):\n        print(\"C - m01\")\n\nclass D(B,C):\n    def m02(self):\n        self.m01()\n\nd01 = D()\nd01.m02()\n\nprint(D.mro())# [D, B,C, A,object]\n```\n\n#### 继承练习01\n\n**设计**\n\n- 存在变化点的内容，不能直接调，而是要抽象一个父类出来；\n\n- 隔离不变和变化的内容；\n\n- 父类就是来约束子类规范的，如果按照运行来说，不写父类也是可以的，子类都写一个相同的方法也都可以满足，但是还是要用继承来规范代码编写，所以在父类中可以加一句是否继承父类的校验： `if not isinstance(damage_target, Damageable):     raise ValueError(\"不是Damageable的子类\")`\n\n- 父类如果有的方法，必须要子类也需要有，那就可以在父类中约定抛个异常来约定子类一定要实现重写这个父类方法：   `def damage(self, value):如果子类不重写，则异常。        raise NotImplementedError()`  这里的主要原理就是，如果子类没有写父类规定的类，那在实际调用这个子类的这个方法的时候，实际是会去找父类的方法，而此时一旦找到了父类的这个方法就知道这个子类肯定是没重写这个方法的，因为就可以报错了。\n\n  ![手雷爆炸](pictures/07python_basic/手雷爆炸.jpg)\n\n```Python\n\"\"\"\n    手雷炸了，可能伤害敌人/玩家的生命.\n             还可能伤害未知事物(鸭子.房子....)\n    要求：增加了新事物，不影响手雷。\n    体会：继承的作用\n         多态的体现\n         设计原则\n            开闭原则\n            单一职责\n            依赖倒置\n    画出设计图\n    15:35\n\"\"\"\nclass Granade:\n    def __init__(self, atk):\n        self.atk = atk\n\n    def explode(self, damage_target):\n        # 如果传入的不是子类，则报错.\n        if not isinstance(damage_target, Damageable):\n            raise ValueError(\"不是Damageable的子类\")\n\n        print(\"爆炸\")\n        # 多态:\n        # 调用父类代表(玩家/敌人.....)的可以受伤者.\n        # 执类行子(具体玩家/敌人.....)\n        damage_target.damage(self.atk)\n\nclass Damageable:\n    \"\"\"\n        可以受伤\n        继承:统一多个子类的概念，隔离变化。\n    \"\"\"\n\n    def damage(self, value):\n        # 如果子类不重写，则异常。\n        raise NotImplementedError()\n# ------------------------------\nclass Player(Damageable):\n    def __init__(self, hp):\n        self.hp = hp\n\n    def damage(self, value):\n        self.hp -= value\n        print(\"玩家受伤啦\")\n        print(\"碎屏\")\n\n\nclass Enemy(Damageable):\n    def __init__(self, hp):\n        self.hp = hp\n\n    def damage2(self, value):\n        self.hp -= value\n        print(\"敌人受伤喽\")\n        print(\"头顶爆字\")\n\ng01 = Granade(100)\ne01 = Enemy(200)\np01 = Player(300)\ng01.explode(p01)\n\n```\n\n#### 继承练习02\n\n- 子类的差异化问题子类自己解决，可以通过子类的构造方法来提供参数；\n\n- 差异化的部分，不能找父类去要。\n\n  ![图形管理器](pictures/07python_basic/图形管理器.jpg)\n\n```Python\n\"\"\"\n    定义图形管理器类\n        1. 管理所有图形\n        2. 提供计算所有图形总面积的方法\n\n    具体图形:\n        圆形(pi × r ** 2)\n        矩形(长*宽)\n        ...\n\n    测试：\n        创建1个圆形对象，1个矩形对象，添加到图形管理器中.\n        调用图形管理器的计算面积方法，输出结果。\n\n    要求：增加新图形，不修改图形管理器的代码.\n    体会：面向对象三大特征：\n            封装/继承/多态\n         面向对象设计原则：\n            开闭/单一/倒置\n\n\"\"\"\n\n\nclass GraphicManager:\n    def __init__(self):\n        self.__graphics = []\n\n    def add_graphic(self, graphic):\n        if isinstance(graphic, Graphic):\n            self.__graphics.append(graphic)\n        else:\n            raise ValueError()\n\n    def get_total_area(self):\n        total_area = 0\n        # 遍历图形列表，累加每个图形的面积\n        for item in self.__graphics:\n            # 多态：\n            # 调用的是图形\n            # 执行的是圆形/矩形...\n            total_area += item.calculate_area()\n        return total_area\n\nclass Graphic:\n    def calculate_area(self):\n        # 如果子类不重写，则异常.\n        raise NotImplementedError()\n#-----------------------------------\nclass Circle(Graphic):\n    def __init__(self,radius):\n        self.radius = radius\n\n    def calculate_area(self):\n        return 3.14 * self.radius **2\n\n\nclass Rectanlge(Graphic):\n    def __init__(self,length,width):\n        self.lenght = length\n        self.width = width\n\n\n    def calculate_area(self):\n        return self.lenght *  self.width\n\n\nc01 = Circle(5)\nr01 = Rectanlge(10,20)\nmanager = GraphicManager()\nmanager.add_graphic(c01)\nmanager.add_graphic(r01)\nre = manager.get_total_area()\nprint(re)\n```\n\n#### 继承练习03\n\n![员工管理器](pictures/07python_basic/员工管理器.jpg)\n\n```Python\n\"\"\"\n    定义员工管理器\n        1.管理所有员工\n        2. 计算所有员工工资\n\n    员工：\n        程序员：底薪 + 项目分红\n        销售：底薪 + 销售额 * 0.05\n        软件测试...\n        ...\n\n    要求：增加新岗位，员工管理器不变.\n\"\"\"\nclass EmployeeManager:\n    def __init__(self):\n        self.__employees = []\n\n    def add_employee(self, emp):\n        self.__employees.append(emp)\n\n    def get_total_saraly(self):\n        total_saraly = 0\n        for item in self.__employees:\n            # 调用是抽象的员工类\n            # 执行是具体的员工(程序员/销售..)\n            total_saraly += item.calculate_salary()\n        return total_saraly\n\nclass Employee:\n    def __init__(self, base_salary):\n        self.base_salary = base_salary\n\n    def calculate_salary(self):\n        return self.base_salary\n\n# ---------------------------------------\nclass Programmer(Employee):\n    def __init__(self, base_salary, bonus):\n        super().__init__(base_salary)\n        self.bonus = bonus\n\n    def calculate_salary(self):\n        # return self.base_salary + self.bonus\n        # 扩展重写\n        return super().calculate_salary()+ self.bonus\n\nclass Salesmen(Employee):\n    def __init__(self, base_salary, sale_value):\n        super().__init__(base_salary)\n        self.sale_value = sale_value\n\n    def calculate_salary(self):\n        return self.base_salary + self.sale_value * 0.05\n\n# 测试\nmanager = EmployeeManager()\nmanager.add_employee(Programmer(200000,500))\nmanager.add_employee(Salesmen(2000,1000))\nprint(manager.get_total_saraly())\n```\n\n### 多态\n\n#### 设计角度讲\n\n#### 定义\n\n> 父类的同一种动作或者行为，在不同的子类上有不同的实现。\n\n#### 作用\n\n249. 在继承的基础上，体现类型的个性化（一个行为有不同的实现）。\n\n250. 增强程序扩展性，体现开闭原则。\n\n#### 语法角度讲\n\n#### 重写\n\n- 子类实现了父类中相同的方法（方法名、参数）。\n\n- 在调用该方法时，实际执行的是子类的方法。调用父，执行子。\n\n#### 快捷键\n\nCtrl + O\n\n#### 内置可重写函数\n\nPython中，以双下划线开头、双下划线结尾的是系统定义的成员。我们可以在自定义类中进行重写，从而改变其行为。\n\n#### 转换字符串\n\n__str__函数：将对象转换为字符串(对人友好的)\n\n__repr__函数：将对象转换为字符串(解释器可识别的)\n\n```Python\n\"\"\"\n    内置可重写函数\n    练习:exercise01.py\n\"\"\"\nclass StudentModel:\n    def __init__(self, name=\"\", age=0, score=0, id=0):\n        self.name = name\n        self.age = age\n        self.score = score\n        self.id = id\n\n    # 对象 --> 字符串 (随意格式)\n    def __str__(self):\n        return \"我叫%s,编号是%d,年龄是%d,成绩是:%d\"%(self.name,self.id,self.age,self.score)\n\n    # 对象 --> 字符串(解释器可识别,有格式)\n    def __repr__(self):\n        return \"StudentModel('%s',%d,%d,%d)\"%(self.name,self.age,self.score,self.id)\n\ns01 = StudentModel(\"无忌\",27,100,101)\nstr01 = str(s01)\nprint(str01)\nprint(s01)\n\nstr02 =repr(s01)\nprint(str02)\n\n# 根据字符串执行python代码\nre = eval(\"1+2*5\")\n# exec\nprint(re)\n\n# 克隆对象\n# repr 返回python格式的字符串\n# eval根据字符串执行代码\ns02 = eval(repr(s01))   #  通过eval 配合repr（对象）来克隆一个对象\ns02.name = \"老张\"\nprint(s01.name)\n```\n\n#### 运算符重载\n\n定义：让自定义的类生成的对象(实例)能够使用运算符进行操作。\n\n#### 算数运算符\n\n![image-20230103161655636](pictures/07python_basic/image-20230103161655636.png)\n\n\n\n#### 反向算数运算符重载\n\n![image-20230103161740574](pictures/07python_basic/image-20230103161740574.png)\n\n\n#### 复合运算符重载\n\n![image-20230103161614116](pictures/07python_basic/image-20230103161614116.png)\n\n> 运算符重载的内容实际使用的很少，平常可能不会用，但是要知道有这个东西。\n\n```Python\n\"\"\"\n    运算符重载\n\"\"\"\nclass Vector1:\n    def __init__(self, x):\n        self.x = x\n\n    def __str__(self):\n        return \"一维向量的分量是：\" + str(self.x)\n\n    def __add__(self, other):\n        return Vector1(self.x + other)\n\n    def __radd__(self, other):\n        return Vector1(self.x + other)\n\n    def __iadd__(self, other):\n        self.x += other\n        return self\n\nv01 = Vector1(10)\nprint(v01 + 2)  # v01.__add__(2)\n\n# 练习:实现自定义类的对象与数值的减法，乘法运算。\n# 略...\nprint(2 + v01)\n# 练习:实现数值与自定义类的对象的减法，乘法运算。\n# 略...\n\nprint(id(v01))\n# 重写__iadd__，实现在原对象基础上的变化。\n# 如果重写__iadd__,默认使用__add__，一般会产生新对象.\nv01 += 2\nprint(v01,id(v01))\n\n# list01 = [1]\n# print(id(list01))\n# # 生成新对象\n# re = list01 + [2]\n# print(re,id(re))\n# # 在原有对象基础上，累加.\n# list01 += [2]\n# print(list01,id(list01))\n```\n\n#### 比较运算重载\n\n![image-20230103161555646](pictures/07python_basic/image-20230103161555646.png)\n\n## 设计原则\n\n### 开-闭原则（目标、总的指导思想）\n\n**O**pen **C**losed **P**rinciple\n\n- 对扩展开放，对修改关闭。\n\n- **增加新功能，不改变原有代码**。允许增加新功能，但是不能改变原来代码这就是开闭原则\n\n### 类的单一职责（一个类的定义）\n\n**S**ingle **R**esponsibility **P**rinciple\n\n- 一个类有且只有一个改变它的原因；发生变化的原因只能是一个那就是遵循了这个原则。\n\n- 一个类只做一件事情；\n\n### 依赖倒置（依赖抽象）\n\n**D**ependency **I**nversion **P**rinciple\n\n- 客户端代码(调用的类)尽量依赖(使用)抽象。就是使用者，调用的这个类就是客户端代码，抽象就是不具体的，就是父类，子类更具体，父类更抽象，父类就是把各个子类抽象一下。是先有子类，然后再抽象出父类，调类的时候，是调用父类，调用抽象类这样就能够实现更加稳定的逻辑。\n\n- 抽象不应该依赖细节，细节应该依赖抽象。\n\n- 父类约束子类在行为上保持一致\n\n  ![老张去东北设计01](pictures/07python_basic/老张去东北设计01.jpg)\n  \n  ![老张去东北设计02](pictures/07python_basic/老张去东北设计02.jpg)\n\n```Python\n\"\"\"\n    继承 -- 设计(2)\n    练习:exercise03.py\n\"\"\"\n# 需求：老张开车去东北\n# 变化：    坐飞机\n#          坐火车\n#          骑车\n#          ...\nclass Vehicle:\n    \"\"\"\n        交通工具,代表所有具体的交通工具(火车/飞机..)\n        继承：隔离子类变化,将子类的共性(坐/飞..)提取到父类(运输)中.\n    \"\"\"\n\n    def transport(self, str_position):\n        # 因为父类太过于抽象，所以写不出方法体,那就直接采用pass,这个价值就是约束子类要有这个行为。\n        pass\n\n# 客户端代码，用交通工具。\nclass Person:\n    def __init__(self, name):\n        self.name = name\n\n    def go_to(self, vehicle, str_position):\n        # 多态：调用父，执行子.\n        # 调用的是交通工具的运输方法\n        # 执行的是飞机的运输方法或者汽车的运输方法\n        vehicle.transport(str_position)\n\n# -------以上是架构师完成的--以下是程序员完成的-----\n\nclass Car(Vehicle):\n    def transport(self, str_position):\n        print(\"汽车开到\", str_position)\nclass Airplane(Vehicle):\n    def transport(self, str_position):\n        print(\"飞机飞到\", str_position)\n\np01 = Person(\"老张\")\nc01 = Car()\na01 = Airplane()\np01.go_to(c01, \"东北\")\np01.go_to(a01, \"东北\")\n```\n\n### 组合复用原则（复用的最佳实践）\n\nComposite Reuse Principle\n\n- 如果仅仅为了代码复用优先选择组合复用，而非继承复用。\n\n- 组合的耦合性相对继承低。\n\n- 组合更加灵活，下面第一个图中，如果使用继承，那就成了人是手机，实际上是一种组合关系，人有一个手机；\n\n![组合复用](pictures/07python_basic/组合复用.jpg)\n\n### 里氏替换（继承后的重写，指导继承的设计）\n\n**L**iskov **S**ubstitution **P**rinciple\n\n父类出现的地方可以被子类替换，在替换后依然保持原功能。\n\n子类要拥有父类的所有功能。\n\n子类在重写父类方法时，尽量选择扩展重写，防止改变了功能。-- 下面第46行就是扩展重写，使用父类中已经有的类容再做扩展即可，而不是子类自己又重新写一个。\n\n```Python\n\"\"\"\n    10:50 上课\n    定义员工管理器\n        1.管理所有员工\n        2. 计算所有员工工资\n\n    员工：\n        程序员：底薪 + 项目分红\n        销售：底薪 + 销售额 * 0.05\n        软件测试...\n        ...\n\n    要求：增加新岗位，员工管理器不变.\n\"\"\"\nclass EmployeeManager:\n    def __init__(self):\n        self.__employees = []\n\n    def add_employee(self, emp):\n        self.__employees.append(emp)\n\n    def get_total_saraly(self):\n        total_saraly = 0\n        for item in self.__employees:\n            # 调用是抽象的员工类\n            # 执行是具体的员工(程序员/销售..)\n            total_saraly += item.calculate_salary()\n        return total_saraly\n\nclass Employee:\n    def __init__(self, base_salary):\n        self.base_salary = base_salary\n\n    def calculate_salary(self):\n        return self.base_salary\n\n# ---------------------------------------\nclass Programmer(Employee):\n    def __init__(self, base_salary, bonus):\n        super().__init__(base_salary)\n        self.bonus = bonus\n\n    def calculate_salary(self):\n        # return self.base_salary + self.bonus\n        # 扩展重写\n        return super().calculate_salary()+ self.bonus\n\nclass Salesmen(Employee):\n    def __init__(self, base_salary, sale_value):\n        super().__init__(base_salary)\n        self.sale_value = sale_value\n\n    def calculate_salary(self):\n        return self.base_salary + self.sale_value * 0.05\n\n# 测试\nmanager = EmployeeManager()\nmanager.add_employee(Programmer(200000,500))\nmanager.add_employee(Salesmen(2000,1000))\nprint(manager.get_total_saraly())\n```\n\n### 迪米特法则（类与类交互的原则）\n\nLaw of Demeter\n\n不要和陌生人说话。\n\n类与类交互时，在满足功能要求的基础上，传递的数据量越少越好。因为这样可能降低耦合度。--要调用其他类的时候，如果只使用几个方法，那就只调用其中的这几个方法即可，这样就可以先抽象一下，抽象一个父类出来，当然，这种情况也可能出现过度设计。\n\n### 综合练习\n\n#### 需求信息\n\n|职业|名称|分类|法力消耗|冷却|描述|\n|-|-|-|-|-|-|\n|少林|少林普攻|瞬发技能|无|无|攻击单个近身敌人，对目标每秒造成100%外功攻击伤害。自动连续攻击|\n|少林|罗汉棍|瞬发技能|10法力|2秒|达摩祖师所创棍法，刚猛无敌。攻击单个近身敌人，对目标造成200%外功攻击伤害|\n|少林|摩诃无量|瞬发技能|50法力|8秒|少林七十二绝技之一，瞬间缩短和敌手的距离。像旋风一样挥舞武器，攻击以自身为中心半径4码范围内 的所有敌人，对每个目标造成每秒217%的外功攻击伤害。攻击持续3.9秒。|\n|少林|迦叶功|瞬发技能|20法力|5秒|少林七十二绝技之一，以一条齐眉棍幻出千万棍影。向单个敌人冲锋并进行凶猛攻击，对目标造成150%外功攻击伤害|\n|少林|韦陀杵|瞬发技能|20法力|10秒|少林七十二绝技之一，与大力金刚掌齐名，以浑厚内力重创敌人。重击地面，使4码内所有敌人防御降低10%，并眩晕，持续2.5秒。|\n|少林|金钟罩|瞬发技能|20法力|15秒|少林七十二绝技之一，以丹田之气发出狮吼震慑敌人胆魄。开启盾墙，所有敌人对自身造成的伤害减免20%，持续10秒。|\n|少林|狮吼功|瞬发技能|40法力|20秒|少林七十二绝技之一，刀枪不入。吼叫，嘲讽你附近8码范围内所有敌人，持续5秒。使你和附近8码内所有队友攻击提升15%，持续10秒。并使附近8码内所有敌人伤害降低10%，持续5秒。|\n|少林|金刚伏魔|瞬发技能|100%战意|20秒|以易筋经催动少林绝技的终极奥义嘲讽全屏范围内所有敌人，挥舞武器攻击地，对全屏范围内所有敌人造成100%血上限伤害。对BOSS和PVP战斗无效。|\n|逍遥|逍遥普攻|瞬发技能|||攻击6码范围内的单个敌人，对目标每秒造成100%内功攻击伤害。自动连续攻击|\n|逍遥|小无相功|瞬发技能|10法力|2秒|逍遥派无上内功，鸠摩智曾以此内功催发出少林绝技拈花指来骗取六脉神剑释放电弧，击中敌人造 成200%的内功攻击伤害。|\n|逍遥|祝融掌|瞬发技能|||祝融掌：出自庄子“逍遥游”，将敌方的内力化掉，并转化吸收内力汇聚于气海。喷射一条火焰攻击敌人， 每击造成每秒300%的内功攻击伤害，持续3.9秒。并使命中目标减速30%，持续3秒。|\n|逍遥|北冥神功|瞬发技能|||北冥神功：李秋水除白虹掌力的另一绝学，将内力汇聚一点急剧升温后劈出。对单个目标造成120%的内功攻击 伤害，并使敌人冻结3秒|\n|逍遥|寒霜怒雪|瞬发技能|||：以易经八八六十四卦为基础。按特定顺序方位进行，步法飘忽灵动。天降寒冰轰击目标区域范围内 所有敌人，造成每秒125%的内功攻击伤害，持续5秒。并使命中目标减速80%，持续5秒|\n|逍遥|凌波微步|瞬发技能|||：内力凝出的冰甲，聪哑老人苏星河曾靠此招躲过丁春秋的化功大法。将你瞬间传送到前方7码的目标位置|\n|逍遥|毁天灭地|瞬发技能|||：凝聚北冥真气释放的终极招式嘲讽全屏范围内所有敌人，召唤一颗巨大的陨石从天而降，引起全屏 范围内地面灼烧，对全屏范围内所有敌人造成100%血上限伤害。对BOSS和PVP战斗无效|\n|丐帮|丐帮普攻|瞬发技能|无|0秒|攻击单个近身敌人，每秒造成100%内功攻击伤害，自动连续攻击|\n|丐帮|飞龙在天|瞬发技能|100战意|20秒|降龙十八掌第二式，跃起半空，居高下击，威力奇大，嘲讽全屏范围内所有敌人，造成等同于其生命上限的伤 害，对BOSS和玩家无效|\n|丐帮|神龙摆尾|瞬发技能|10法力|2秒|降龙十八掌第十八式，劲道奇猛，无所不辞，攻击单个近身敌人，立即造成200%内功攻击伤害，触发“御龙” 效果，使自身暴击率提升5%，持续6秒，“御龙”效果最多可叠加3次|\n|丐帮|天下无狗|瞬发技能|50法力|8秒|打狗棒法的最精妙招式，八方皆棒，劲力甚广，挥动武器攻击4次，每击都会对前方5步半圆内所有敌人施加 \"打狗\"效果，“打狗”会在3秒内持续造成总共270%内功攻击伤害，并减速50%持续3秒|\n|丐帮|醉饮江湖|瞬发技能|20法力|5秒|气运丹田，以雄厚内力将烈酒逼出，控人心窍，眩晕7步范围内单个敌人1秒，将其迅速拉至面前|\n|丐帮|擒龙控鹤|瞬发技能|20法力|10秒|丐帮秘传擒拿功夫，使人失去反击之力，迷惑4步范围内所有敌人，使其无法使用技能，持续2.5秒|\n|丐帮|密云不雨|瞬发技能|20法力|15秒|降龙十八掌第十三式，韬光养晦，弃攻击而全力守御，将自身50%攻击转化为防御，持续3秒|\n|丐帮|亢龙有悔|瞬发技能|40法力|20秒|降龙十八掌第十一式，从至刚之中生出至柔，有余不尽，震击5步范围内所有敌人，持续造成每秒200%内功功击伤害，持续5秒|\n\n#### 设计图\n\n可能首先想到的是下面这种方式：（不妥当）\n\n换一种思路：\n\n- 文件的变化不影响功能；\n\n- 新增新技能不修改代码；\n\n- 某个算法改变，只修改某个类，其他类不受影响；\n\n![技能系统](pictures/07python_basic/技能系统.jpg)\n\n#### 编码\n\n```Python\n\"\"\"\n    技能系统\n    练习:指出下列代码哪里体现了三大特征/六大原则。\n\n    三大特征：\n        封装：将每种影响效果单独做成类.\n        继承：将各种影响效果抽象为SkillImpactEffect\n              隔离技能释放器与各种影响效果的变化。\n        多态：各种影响效果在重写SkillImpactEffect类中impact方法.\n             释放器调用SkillImpactEffect执行各种效果。\n    六大原则：\n        开闭原则：增加新(技能/影响效果)，不修改释放器代码.\n        单一职责：SkillImpactEffect 负责 隔离变化\n                 DamageEffect.. 负责定义具体的效果\n                 SkillDeployer 负责释放技能\n        依赖倒置：(1)释放器没有调用具体影响效果，而是调用SkillImpactEffect。\n                (2)抽象的不依赖于具体的。\n                  具体做法：释放器通过\"依赖注入\"(读取配置文件，创建影响效果对象),\n                          使释放器不依赖具体影响效果.\n        组合复用：释放器与影响效果是组合关系.\n                可以灵活的选择各种影响效果。\n        里氏替换：(1)父类出现的地方可以被子类替换\n                 释放器存储影响效果列表,实际可以将各种子类存入进来.\n        迪米特法则：所有类之间的耦合度都很低.\n\"\"\"\n\nclass SkillImpactEffect:  # 负责 隔离变化\n    \"\"\"\n        技能影响效果\n    \"\"\"\n\n    def impact(self):\n        raise NotImplementedError()\n\nclass DamageEffect(SkillImpactEffect): #负责定义具体的效果\n    \"\"\"\n        伤害生命效果\n    \"\"\"\n\n    def __init__(self, value):\n        self.value = value\n\n    def impact(self):\n        print(\"扣你%d血\" % self.value)\n\n\nclass LowerDeffenseEffect(SkillImpactEffect):\n    \"\"\"\n        降低防御力\n    \"\"\"\n\n    def __init__(self, value, time):\n        self.value = value\n        self.time = time\n\n    def impact(self):\n        print(\"降低%d防御力,持续%d秒\" % (self.value, self.time))\n\n\nclass DizzinessEffect(SkillImpactEffect):\n    \"\"\"\n        眩晕\n    \"\"\"\n\n    def __init__(self, time):\n        self.time = time\n\n    def impact(self):\n        print(\"眩晕%d秒\" % self.time)\n\n\nclass SkillDeployer: #负责释放技能\n    \"\"\"\n        技能释放器\n    \"\"\"\n\n    def __init__(self, name):\n        self.name = name\n        # 加载配置文件 {技能名称:[效果1,效果2...],...}\n        self.__dict_skill_config = self.__load_config_file()\n        # 创建效果对象\n        self.__effect_objects = self.__create_effect_objects()\n\n    def __load_config_file(self):\n        # 加载文件.....\n        return {\n            \"降龙十八掌\": [\"DamageEffect(200)\", \"LowerDeffenseEffect(-10,5)\", \"DizzinessEffect(6)\"],\n            \"六脉神剑\": [\"DamageEffect(100)\", \"DizzinessEffect(6)\"]\n        }\n\n    def __create_effect_objects(self):\n        # 根据name创建相应的技能对象\n        #    降龙十八掌 -> [\"技能1\"，\"技能2\"]\n        list_effect_name = self.__dict_skill_config[self.name]\n        list_effect_object = []\n        for item in list_effect_name:\n            # \"技能1\" --> 技能1的对象\n            # 对象 = eval(\"DamageEffect(200)\")\n            effect_object = eval(item)\n            list_effect_object.append(effect_object)\n        return list_effect_object\n\n    # 生成技能(执行效果)\n    def generate_skill(self):\n        print(self.name, \"技能释放啦\")\n        for item in self.__effect_objects:\n            # 调用父类，执行子类.\n            item.impact()\n\n\nxlsbz = SkillDeployer(\"降龙十八掌\")\nxlsbz.generate_skill()\n\nlmsj = SkillDeployer(\"六脉神剑\")\nlmsj.generate_skill()\n\n```\n\n# 程序结构\n\n## 模块 Module\n\n### 定义\n\n> 包含一系列数据、函数、类的文件，通常以.py结尾。\n\n### 作用\n\n> 让一些相关的数据，函数，类有逻辑的组织在一起，使逻辑结构更加清晰。\n\n有利于多人合作开发。\n\n### 导入\n\n#### `import` \n\n1. 语法：\n\n> import 模块名\n\nimport 模块名 as 别名\n\n2. 作用：将某模块整体导入到当前模块中\n\n3. 使用：模块名.成员\n\n#### `from import` \n\n4. 语法：\n\n> from 模块名 import 成员名[ as 别名1]\n\n5. 作用：将模块内的一个或多个成员导入到当前模块的作用域中。\n\n6. 使用：直接使用成员名\n\n#### `from import \\*` \n\n7. 语法：from 模块名 import *\n\n8. 作用：将某模块的所有成员导入到当前模块。\n\n9. **模块中以下划线(_)开头的属性，不会被导入，通常称这些成员为隐藏成员。**--直接通过import  * 的时候就不会导入隐藏成员，但是通过from  XX import _func   这种是可以的，毕竟你指名道姓就要用这个，也是可以的。\n\n10. **需要注意，导入进来的成员不要和当前模块中的成员冲突**，也要防止与其他模块之间冲突，如果有冲突的也可以用as来定义别名\n\n### 模块变量\n\n**__all__变量：定义可导出成员，仅对from xx import *语句有效。**\n\n__doc__变量：文档字符串。\n\n__file__变量：模块对应的文件路径名。\n\n**__name__变量：模块自身名字，可以判断是否为主模块。**\n\n当此模块作为主模块(第一个运行的模块)运行时，__name__绑定'__main__'，不是主模块，而是被其它模块导入时,存储模块名。\n\n```Python\n\"\"\"\n    模块相关概念\n\"\"\"\n# from module01 import *\n#\n# fun01()\n# # 1. 隐藏成员，不能通过from 模块 import × 形式导入\n# _fun02()\n# from module01 import _fun02\n#\n# # 隐藏成员，可以通过其他形式调用\n# _fun02()\n\n# 2. 通过__all__指定可导出成员\nfrom module01 import *\n\nMyClass.fun03()\n_fun02()\n\n# 3.可以通过该属性，查看文档注释\nprint(__doc__)\n\n# 4.返回当前模块的绝对路径（从系统根目录开始计算的）\nprint(__file__)\n\n# 5.\n# 现象：\n# 主模块叫做：__main__\n# 非主模块叫做：真名\nprint(__name__)\n# 作用1： 不是主模块不执行。(测试代码)\n# 作用2： 只有是主模块才执行。(主模块代码)\n# 使用：\nif __name__ == \"__main__\":\n    pass\n```\n\n### 加载过程\n\n> 在模块导入时，模块的所有语句会执行。\n\n如果一个模块已经导入，则再次导入时不会重新执行模块内的语句。\n\n### 分类\n\n11. 内置模块(builtins)，在解析器的内部可以直接使用。\n\n12. 标准库模块，安装Python时已安装且可直接使用。\n\n13. 第三方模块（通常为开源），需要自己安装。\n\n14. 用户自己编写的模块（可以作为其他人的第三方模块）\n\n## 包package\n\n### 定义\n\n将模块以文件夹的形式进行分组管理。\n\n### 作用\n\n> 让一些相关的模块组织在一起，使逻辑结构更加清晰。\n\n```Python\n\"\"\"\n    包\n\npython程序结构\n    文件夹  ---- 项目根目录\n        包\n            模块\n                类\n                    函数\n                        语句\n    练习：my_project\n\"\"\"\n\n# # form 包.模块 import 成员\n# from package01.module_a import fun01\n# fun01()\n#\n# form 包.包.模块 import 成员\nfrom package01.package02.module_b import fun02\nfun02()\n\n# import package01.module_a as pm\n# pm.fun01()\n```\n\n### 导入\n\n> import 包名.模块名 [as 模块新名]\n\nimport 包名.子包名.模块名 [as 模块新名]\n\nfrom 包名 import 模块名 [as 模块新名]\n\nfrom 包名.子包名 import 模块名 [as 模块新名]\n\nfrom 包名.子包名.模块名 import 成员名 [as 属性新名]\n\n# 导入包内的所有子包和模块\n\nfrom 包名 import *\n\nfrom 包名.模块名 import *\n\n### __init__.py 文件\n\n> 是包内必须存在的文件\n\n会在包加载时被自动调用\n\n#### __all__\n\n记录from 包 import * 语句需要导入的模块\n\n案例：\n\n15. 根据下列结构，创建包与模块。\n\n> my_ project /\n\nmain.py\n\ncommon/\n\n__init__.py\n\nlist_helper.py\n\nskill_system/\n\n__init__.py\n\nskill_deployer.py\n\nskill_manager.py\n\n16. 在main.py中调用skill_manager.py中实例方法。\n\n17. 在skill_manager.py中调用skill_deployer.py中实例方法。\n\n18. 在skill_deployer.py中调用list_helper.py中类方法。\n\n### 搜索顺序\n\n> 内置模块\n\nsys.path 提供的路径\n\n```Python\n\nprint(\"common -- list_helper\")\n\nimport sys\n# 如果不再pycharm中运行当前模块，则导包失败.\n# 将项目根目录加入path中，导包才会成功.\nsys.path.append(\"/home/tarena/1905/month01/code/day15/my_project\")  # 在导包失败的时候，可以手动添加项目根目录添加到路径列表中\nprint(sys.path)\n\nfrom main import *\n\nmain_fun01()\n\n```\n\n# 异常处理Error\n\n## 异常\n\n19. 定义：运行时检测到的错误。\n\n20. 现象：当异常发生时，程序不会再向下执行，而转到函数的调用语句。\n\n21. 常见异常类型：\n\n> -- 名称异常(NameError)：变量未定义。\n\n-- 类型异常(TypeError)：不同类型数据进行运算。\n\n-- 索引异常(IndexError)：超出索引范围。\n\n-- 属性异常(AttributeError)：对象没有对应名称的属性。\n\n-- 键异常(KeyError)：没有对应名称的键。\n\n-- 为实现异常(NotImplementedError)：尚未实现的方法。\n\n-- 异常基类Exception。\n\n## 处理\n\n22. 语法：\n\n> try:\n\n可能触发异常的语句\n\nexcept 错误类型1 [as 变量1]：\n\n处理语句1\n\nexcept 错误类型2 [as 变量2]：\n\n处理语句2\n\nexcept Exception [as 变量3]：\n\n不是以上错误类型的处理语句\n\nelse:\n\n未发生异常的语句\n\nfinally:\n\n无论是否发生异常的语句\n\n23. 作用：将程序由异常状态转为正常流程。\n\n24. 说明：\n\n> as 子句是用于绑定错误对象的变量，可以省略\n\nexcept子句可以有一个或多个，用来捕获某种类型的错误。\n\nelse子句最多只能有一个。\n\nfinally子句最多只能有一个，如果没有except子句，必须存在。\n\n如果异常没有被捕获到，会向上层(调用处)继续传递，直到程序终止运行。\n\n## raise 语句\n\n25. 作用：抛出一个错误，让程序进入异常状态。\n\n26. 目的：在程序调用层数较深时，向主调函数传递错误信息要层层return 比较麻烦，所以人为抛出异常，可以直接传递错误信息。。\n\n## 自定义异常\n\n27. 定义：\n\n> class 类名Error(Exception):\n\ndef __init__(self,参数):\n\nsuper().__init__(参数)\n\nself.数据 = 参数\n\n28. 调用：\n\n> try:\n\n....\n\nraise 自定义异常类名(参数)\n\n....\n\nexcept 定义异常类 as 变量名:\n\n变量名.数据\n\n29. 作用：封装错误信息\n\n#### 综合使用异常处理练习：\n\n```Python\n\"\"\"\n    界面代码\n\"\"\"\nfrom bll import *\nfrom model import *\n\nclass StudentManagerView:\n    \"\"\"\n    学生管理器视图\n    \"\"\"\n\n    def __init__(self):\n        self.__manager = StudentManagerController()\n\n    def __display_menu(self):\n        print(\"1)添加学生\")\n        print(\"2)显示学生\")\n        print(\"3)删除学生\")\n        print(\"4)修改学生\")\n        print(\"5)按照成绩升序显示学生\")\n\n    def __select_menu(self):\n        item = input(\"请输入：\")\n        if item == \"1\":\n            self.__input_student()\n        elif item == \"2\":\n            self.__output_students(self.__manager.stu_list)\n        elif item == \"3\":\n            self.__delete_student()\n        elif item == \"4\":\n            self.__modify_student()\n        elif item == \"5\":\n            self.__output_student_by_score()\n\n    def main(self):\n        \"\"\"\n            界面视图入口\n        :return:\n        \"\"\"\n        while True:\n            self.__display_menu()\n            self.__select_menu()\n\n    def __input_number(self,message):\n        while True:\n            try:\n                number = int(input(message))\n                return number\n            except:\n                print(\"输入有误\")\n\n    def __input_student(self):\n        name = input(\"请输入姓名：\")\n        # age = int(input(\"请输入年龄：\"))\n        # score = int(input(\"请输入成绩：\"))\n        age = self.__input_number(\"请输入年龄：\")\n        score = self.__input_number(\"请输入成绩：\")\n        stu = StudentModel(name, age, score)\n        self.__manager.add_student(stu)\n\n    def __output_students(self, list_output):\n        for item in list_output:\n            print(item.id, item.name, item.atk, item.score)\n\n    def __delete_student(self):\n        # id = int(input(\"请输入编号：\"))\n        id = self.__input_number(\"请输入编号：\")\n\n        if self.__manager.remove_student(id):\n            print(\"删除成功\")\n        else:\n            print(\"删除失败\")\n\n    def __modify_student(self):\n        stu = StudentModel()\n        # stu.id = int(input(\"请输入需要修改的学生编号:\"))\n        stu.id = self.__input_number(\"请输入需要修改的学生编号:\")\n        stu.name = input(\"请输入新的学生名称：\")\n        # stu.atk = int(input(\"请输入新的学生年龄：\"))\n        # stu.score = int(input(\"请输入新的学生成绩：\"))\n        stu.atk = self.__input_number(\"请输入新的学生年龄:\")\n        stu.score = self.__input_number(\"请输入新的学生成绩：\")\n\n        if self.__manager.update_student(stu):\n            print(\"修改成功\")\n        else:\n            print(\"修改失败\")\n\n    def __output_student_by_score(self):\n        self.__manager.order_by_score()\n        self.__output_students(self.__manager.stu_list)\n```\n\n# 迭代\n\n每一次对过程的重复称为一次\"迭代\"，而每一次迭代得到的结果会作为下一次迭代的初始值。例如：循环获取容器中的元素。\n\n## 可迭代对象iterable \n\n30. 定义：具有__iter__函数的对象，可以返回迭代器对象。\n\n31. 语法\n\n> -- 创建：\n\nclass 可迭代对象名称:\n\n  def __iter__(self):\n\n      return 迭代器\n\n-- 使用：\n\nfor 变量名 in 可迭代对象:\n\n语句\n\n32. 原理：\n\n> 迭代器 = 可迭代对象.__iter__()\n\nwhile True:\n\ntry:\n\nprint(迭代器.__next__())\n\nexcept StopIteration:\n\nbreak\n\n```Python\n# 练习2:不使用for，获取字典所有数据。\n#  {\"铁扇公主\":101,\"铁锤公主\":102,“扳手王子”:103}\n# 10:40\n\ndict01 = {\"铁扇公主\": 101, \"铁锤公主\": 102, \"扳手王子\": 103}\n\niterator = dict01.__iter__()  # 存的就是迭代器，迭代器就有__next__ 方法\nwhile True:\n    try:\n        key = iterator.__next__()\n        print(key, dict01[key])\n    except StopIteration:  # 取不到为止，就会抛出StopIteration异常，所以捕获后退出循环即可\n        break\n```\n\n## 迭代器对象iterator\n\n33. 定义：可以被next()函数调用并返回下一个值的对象。\n\n34. 语法\n\n> class 迭代器类名:\n\ndef __init__(self, 聚合对象):\n\nself.**聚合对象**= 聚合对象\n\ndef __next__(self):\n\nif 没有元素:\n\nraise StopIteration\n\nreturn 聚合对象元素\n\n![迭代器设计思想](pictures/07python_basic/迭代器设计思想.jpg)\n\n手写迭代器对象：\n\n```Python\n\"\"\"\n    迭代器\n    练习:exercise03.py\n\"\"\"\n\n\nclass Skill:\n    pass\n\n\nclass SkillManager:\n    \"\"\"\n        技能管理器  可迭代对象\n    \"\"\"\n\n    def __init__(self):\n        self.__skills = []\n\n    def add_skill(self, skill):\n        self.__skills.append(skill)\n\n    def __iter__(self):\n        # 创建一个迭代器对象,并传递需要迭代的数据。\n        return SkillIterator(self.__skills)\n\nclass SkillIterator:  # 创建一个迭代器，其需要有一个__next__方法和一个取值到最后抛出异常的一个方法\n    \"\"\"\n        技能迭代器\n    \"\"\"\n\n    def __init__(self, target):\n        self.__target = target\n        self.__index = 0\n\n    def __next__(self):\n        # 如果没有数据了，则抛出异常\n        if self.__index > len(self.__target) - 1:\n            raise StopIteration\n\n        # 返回下一个数据\n        temp = self.__target[self.__index]\n        self.__index += 1\n        return temp\n\nmanager = SkillManager()\nmanager.add_skill(Skill())\nmanager.add_skill(Skill())\nmanager.add_skill(Skill())\n\nfor item in manager:\n    print(item)\n\niterator = manager.__iter__()\nwhile True:\n    try:\n        item = iterator.__next__()\n        print(item)\n    except StopIteration:\n        break\n```\n\n图形迭代器\n\n```Python\n# 练习：图形管理器记录多个图形\n#      迭代图形管理器对象\nclass Graphic:\n    pass\n\nclass GraphicManager:\n    \"\"\"\n        图形管理器，可迭代对象(参与for)\n    \"\"\"\n    def __init__(self):\n        self.__graphics = []\n\n    def add_graphic(self, graphic):\n        self.__graphics.append(graphic)\n\n    def __iter__(self):\n        return GraphicIterator(self.__graphics)\n\nclass GraphicIterator:\n    \"\"\"\n        图形迭代器（获取下一个数据）\n    \"\"\"\n    def __init__(self, target):\n        self.__target = target\n        self.__index = 0\n\n    def __next__(self):\n        if self.__index > len(self.__target) - 1:\n            raise StopIteration\n        temp = self.__target[self.__index]\n        self.__index += 1\n        return temp\nmanager = GraphicManager()\nmanager.add_graphic(Graphic())\nmanager.add_graphic(Graphic())\nmanager.add_graphic(Graphic())\n# for item in manager:\n#     print(item)\niterator = manager.__iter__()\nwhile True:\n    try:\n        item = iterator.__next__()\n        print(item)\n    except StopIteration:\n        break\n```\n\n35. 说明：\n\n> -- 聚合对象通常是容器对象。\n\n4. 作用：使用者只需通过一种方式，便可简洁明了的获取聚合对象中各个元素，而又无需了解其内部结构。\n\n# 生成器generator\n\n36. 定义：能够动态(循环一次计算一次返回一次)提供数据的可迭代对象。\n\n37. 作用：在循环过程中，按照某种算法推算数据，不必创建容器存储完整的结果，从而节省内存空间。数据量越大，优势越明显。\n\n38. 以上作用也称之为**延迟操作或惰性操作**，通俗的讲就是在需要的时候才计算结果，而不是一次构建出所有结果。\n\n## 生成器函数\n\n39. 定义：含有**yield**语句的函数，返回值为生成器对象。-- 生成器=可迭代对象+迭代器\n\n40. 语法\n\n```Python\n# 创建：\ndef 函数名():\n            ...\n            yield 数据\n            ...\n# 调用：\nfor 变量名 in 函数名():\n        语句\n```\n\n41. 说明：\n\n> -- 调用生成器函数将返回一个生成器对象，不执行函数体。\n\n-- yield翻译为\"产生\"或\"生成\"\n\n42. 执行过程：\n\n (1) 调用生成器函数会自动创建迭代器对象。\n\n(2) 调用迭代器对象的__next__()方法时才执行生成器函数。\n\n(3) 每次执行到yield语句时返回数据，暂时离开。\n\n(4) 待下次调用__next__()方法时继续从离开处继续执行。\n\n 原理：生成迭代器对象的大致规则如下\n\n> -- 将yield关键字以前的代码放在next方法中。\n\n  - 以后在需要拿到多个同类对象的时候，可以使用yield来处理\n\n-- 将yield关键字后面的数据作为next方法的返回值。\n\n```Python\n\"\"\"\n    yield --> 生成器\n    练习:exercise07.py\n\"\"\"\n\"\"\"\nclass MyRange:\n    def __init__(self, stop_value):\n        self.stop_value = stop_value\n\n    def __iter__(self):\n        number = 0\n        while number < self.stop_value:\n            yield number\n            number += 1\n\nmy01 = MyRange(10)\n\niterator = my01.__iter__()\nwhile True:\n    try:\n        item = iterator.__next__()\n        print(item)\n    except StopIteration:\n        break\n\"\"\"\n\n\"\"\"\n# 生成器原理\nclass MyGenerator:\n    # 生成器 = 可迭代对象 + 迭代器\n    def __init__(self,stop_value):\n        self.begin = 0\n        self.stop_value = stop_value\n        \n    def __iter__(self):\n        return self\n\n    def __next__(self):\n        if self.begin >= self.stop_value:\n            raise StopIteration\n            \n        temp = self.begin\n        self.begin+=1\n        return temp\n\"\"\"\ndef my_range(stop_value):\n    number = 0\n    while number < stop_value:\n        yield number\n        number += 1\n\nmy01 = my_range(10)\nprint(type(my01), dir(my01))# dir 获取对象所有成员\n\nprint(id(my01.__iter__()), id(my01))\n\nfor item in my01:\n    print(item)\n```\n\n## 内置生成器\n\n### 枚举函数enumerate\n\n44. 语法：\n\n> for 变量 in enumerate(可迭代对象):\n\n语句\n\nfor 索引, 元素in enumerate(可迭代对象):\n\n语句\n\n45. 作用：遍历可迭代对象时，可以将索引与元素组合为一个元组。\n\n### zip\n\n46. 语法：\n\n> for item in zip(可迭代对象1, 可迭代对象2....):\n\n语句\n\n47. 作用：将多个可迭代对象中对应的元素组合成一个个元组，生成的元组个数由最小的可迭代对象决定。\n\n## 生成器表达式\n\n48. 定义：用推导式形式创建生成器对象。\n\n49. 语法：变量 = ( 表达式 for 变量 in 可迭代对象 [if 真值表达式] )\n\n```Python\n# 练习:1. 获取列表中所有字符串\n#     2. 获取列表中所有小数\n# 要求:分别使用生成器函数/生成器表达式/列表推导式完成.\nlist01 = [3, \"54\", True, 6, \"76\", 1.6, False, 3.5]\n# 练习:1\ndef find01():\n    for itme in list01:\n        if type(itme) == str:\n            yield itme\n\nre = find01()\nfor item in re:\n    print(item)\n\nre = (itme for itme in list01 if type(itme) == str)\nfor item in re:\n    print(item)\n\nre = [itme for itme in list01 if type(itme) == str]\nfor item in re:\n    print(item)\n\n# 练习:2\ndef find02():\n    for itme in list01:\n        if type(itme) == float:\n            yield itme\n\nfor item in find02():\n    print(item)\n\nfor item in (item for item in list01 if type(item) == float):\n    print(item)\n\nfor item in [item for item in list01 if type(item) == float]:\n    print(item)\n```\n\n# 函数式编程\n\n1. 定义：用一系列函数解决问题。\n\n> -- 函数可以赋值给变量，赋值后变量绑定函数。\n\n-- 允许将函数作为参数传入另一个函数。\n\n-- 允许函数返回一个函数。\n\n2. 高阶函数：将函数作为参数或返回值的函数。\n\n## 函数作为参数\n\n> 将核心逻辑传入方法体，使该方法的适用性更广，体现了面向对象的开闭原则。\n\n```Python\n\"\"\"\n\n\"\"\"\n# 1. 使用生成器函数实现以上3个需求\n# 2. 体会函数式编程的\"封装\"\n#    将三个函数变化点提取到另外三个函数中.\n#    将共性提取到另外一个函数中\n# 3. 体会函数式编程的\"继承\"与\"多态\"\n#    使用变量隔离变化点,在共性函数中调用变量.\n# 4. 测试(执行上述功能)\n\nlist01 = [43, 4, 5, 5, 6, 7, 87]\n\n# 需求1:在列表中查找所有偶数\ndef find01():\n    for item in list01:\n        if item % 2 == 0:\n            yield item\n\n# 需求2:在列表中查找所有大于10的数\ndef find02():\n    for item in list01:\n        if item > 10:\n            yield item\n\n# 需求3:在列表中查找所有范围在10--50之间的数\ndef find03():\n    for item in list01:\n        if 10 < item < 50:\n            yield item\n\n# \"封装\"\ndef condition01(item):\n    return item % 2 == 0\n\ndef condition02(item):\n    return item > 10\n\ndef condition03(item):\n    return 10 < item < 50\n\n# \"继承\"\ndef find(func_condition):\n    for item in list01:\n        # \"多态\"\n        # 调用:具体条件的抽象\n        # 执行:具体条件的函数\n        if func_condition(item):\n            yield item\n\nfor item in find(condition02):\n    print(item)\n\n# 方法参数,如果传递10/\"张无忌\"/True,叫做传递数据\n# 方法参数,如果函数1/函数2/函数3,叫做传递逻辑\n# 15:35\n```\n\n### lambda 表达式\n\n50. 定义：是一种匿名方法。\n\n51. 作用：作为参数传递时语法简洁，优雅，代码可读性强。\n\n> 随时创建和销毁，减少程序耦合度。\n\n52. 语法\n\n> -- 定义：\n\n变量 = lambda 形参: 方法体\n\n-- 调用：\n\n变量(实参)\n\n53. 说明：\n\n> -- 形参没有可以不填\n\n-- 方法体只能有一条语句，且不支持赋值语句。\n\n### 内置高阶函数\n\n54. map（函数，可迭代对象）：使用可迭代对象中的每个元素调用函数，将返回值作为新可迭代对象元素；返回值为新可迭代对象。\n\n55. filter(函数，可迭代对象)：根据条件筛选可迭代对象中的元素，返回值为新可迭代对象。\n\n56. sorted(可迭代对象，key = 函数,reverse = bool值)：排序，返回值为排序结果。\n\n57. max(可迭代对象，key = 函数)：根据函数获取可迭代对象的最大值。\n\n58. min(可迭代对象，key = 函数)：根据函数获取可迭代对象的最小值。\n\n## 函数作为返回值\n\n> 逻辑连续，当内部函数被调用时，不脱离当前的逻辑。\n\n### 闭包\n\n59. 三要素：\n\n> -- 必须有一个内嵌函数。\n\n-- 内嵌函数必须引用外部函数中变量。\n\n-- 外部函数返回值必须是内嵌函数。\n\n60. 语法\n\n> -- 定义：\n\n![image.png](pictures/07python_basic/image.png)\n\n```Python\ndef 外部函数名(参数):\n\t外部变量\n    def 内部函数名(参数):\n    使用外部变量\n    return 内部函数名\n```\n\n-- 调用：\n\n变量 = 外部函数名(参数)\n\n变量(参数)\n\n61. 定义：在一个函数内部的函数,同时内部函数又引用了外部函数的变量。\n\n62. 本质：闭包是将内部函数和外部函数的执行环境绑定在一起的对象。\n\n63. 优点：内部函数可以使用外部变量。\n\n64. 缺点：外部变量一直存在于内存中，不会在调用结束后释放，占用内存。\n\n65. 作用：实现python装饰器。\n\n### 函数装饰器decorator\n\n> 闭包的应用就是装饰器\n\n66. 定义：在不改变原函数的调用以及内部代码情况下，为其添加新功能的函数。\n\n67. 语法\n\ndef 函数装饰器名称(func):\n\n​\t\tdef 内嵌函数(*args, **kwargs):\n\n​\t\t\t\t需要添加的新功能\n\n​\t\t\t\treturn func(*args, **kwargs)\n\n​\t\treturn内嵌函数\n\n原函数 = 内嵌函数\n\n> @ 函数装饰器名称\n\ndef 原函数名称(参数):\n\n函数体\n\n原函数(参数)\n\n68. 本质：使用\"@函数装饰器名称\"修饰原函数，等同于创建与原函数名称相同的变量，关联内嵌函数；故调用原函数时执行内嵌函数。\n\n原函数名称 = 函数装饰器名称（原函数名称）\n\n69. 装饰器链：\n\n> 一个函数可以被多个装饰器修饰，执行顺序为从近到远。\n\n```Python\n\"\"\"\n    闭包\n\"\"\"\ndef fun01():\n    a = 1\n    def fun02():\n        print(a)\n    return fun02\n# 调用外部函数，返回值是内嵌函数\nresult = fun01()\n# 调用内嵌函数\nresult()  # 可以访问外部变量a\n# 闭包应用:逻辑连续，当内部函数被调用时，不脱离当前的逻辑\n# 压岁钱\ndef give_gife_money(money):\n    \"\"\"\n        得到压岁钱\n    :return:\n    \"\"\"\n    print(\"得到了%d压岁钱\" % money)\n\n    def child_buy(target, price):\n        \"\"\"\n            孩子购买商品\n        :param target: 需要购买的商品\n        :param price: 商品单价\n        \"\"\"\n        nonlocal money\n        if money >= price:\n            money -= price\n            print(\"孩子花了%.1f钱，购买了%s\" % (price, target))\n        else:\n            print(\"钱不够啦\")\n\n    return child_buy\n\n# 下列代码是一个连续的逻辑\naction = give_gife_money(10000)\naction(\"唐僧肉\", 0.5)\naction(\"小汽车\", 2000)\naction(\"手机\", 8000)\n```\n\n","slug":"07python_basic","published":1,"updated":"2023-01-04T02:26:27.877Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clciheilc000mrdxh61y22tlf","content":"<h1 id=\"Python-简介\"><a href=\"#Python-简介\" class=\"headerlink\" title=\"Python 简介\"></a>Python 简介</h1><h2 id=\"Python-定义\"><a href=\"#Python-定义\" class=\"headerlink\" title=\"Python 定义\"></a>Python 定义</h2><p><img src=\"/pictures/07python_basic/image-20230103160116244.png\" alt=\"image-20230103160116244\"></p>\n<p>是一个免费、开源、跨平台、动态、面向对象的编程语言。</p>\n<h2 id=\"Python程序的执行方式\"><a href=\"#Python程序的执行方式\" class=\"headerlink\" title=\"Python程序的执行方式\"></a>Python程序的执行方式</h2><h3 id=\"交互式\"><a href=\"#交互式\" class=\"headerlink\" title=\"交互式\"></a>交互式</h3><blockquote>\n<p>在命令行输入指令，回车即可得到结果。</p>\n</blockquote>\n<p>打开终端》进入交互式：python3》编写代码：print(“hello world”)》离开交互式：exit()</p>\n<h3 id=\"文件式\"><a href=\"#文件式\" class=\"headerlink\" title=\"文件式\"></a>文件式</h3><p>将指令编写到.py文件，可以重复运行程序：编写文件》打开终端》进入程序所在目录：cd 目录》执行程序： python3 文件名</p>\n<h2 id=\"执行过程\"><a href=\"#执行过程\" class=\"headerlink\" title=\"执行过程\"></a>执行过程</h2><p><img src=\"/pictures/07python_basic/image-20230103160129679.png\" alt=\"image-20230103160129679\"></p>\n<p>计算机只能识别机器码(1010)，不能识别源代码(python)。</p>\n<ol start=\"14\">\n<li><p>由源代码转变成机器码的过程分成两类：编译和解释。</p>\n</li>\n<li><p>编译：在程序运行之前，通过编译器将源代码变成机器码，例如：C语言。</p>\n</li>\n</ol>\n<p>– 优点：运行速度快</p>\n<p>– 缺点：开发效率低，不能跨平台。</p>\n<ol start=\"16\">\n<li>解释：在程序运行之时，通过解释器对程序逐行翻译，然后执行。例如Javascript</li>\n</ol>\n<p>– 优点：开发效率高，可以跨平台；</p>\n<p>– 缺点：运行速度慢。</p>\n<ol start=\"17\">\n<li>python是解释型语言，但为了提高运行速度，使用了一种编译的方法。编译之后得到pyc文件，存储了字节码（特定于Python的表现形式，不是机器码）。</li>\n</ol>\n<blockquote>\n<p>源代码 – 编译 –&gt; 字节码 – 解释 –&gt; 机器码</p>\n</blockquote>\n<p>|————1次———|</p>\n<h2 id=\"解释器类型\"><a href=\"#解释器类型\" class=\"headerlink\" title=\"解释器类型\"></a>解释器类型</h2><ol start=\"18\">\n<li><p>CPython（C语言开发)</p>\n</li>\n<li><p>Jython (java开发)</p>\n</li>\n<li><p>IronPython (.net开发)</p>\n</li>\n</ol>\n<h1 id=\"数据基本运算\"><a href=\"#数据基本运算\" class=\"headerlink\" title=\"数据基本运算\"></a>数据基本运算</h1><h2 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h2><h3 id=\"pycharm常用快捷键\"><a href=\"#pycharm常用快捷键\" class=\"headerlink\" title=\"pycharm常用快捷键\"></a>pycharm常用快捷键</h3><ol start=\"21\">\n<li><p>移动到本行开头：home键</p>\n</li>\n<li><p>移动到本行末尾：end键盘</p>\n</li>\n<li><p>注释代码：ctrl + &#x2F;</p>\n</li>\n<li><p>复制行：ctrl +d</p>\n</li>\n<li><p>选择列：鼠标左键 + alt</p>\n</li>\n<li><p>移动行：shift + alt + 上下箭头</p>\n</li>\n<li><p>智能提示：ctrl + space</p>\n</li>\n<li><p>代码格式化：ctrl+alt+l</p>\n</li>\n</ol>\n<h3 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h3><blockquote>\n<p>给人看的，通常是对代码的描述信息。</p>\n</blockquote>\n<ol start=\"29\">\n<li><p>单行注释：以#号开头。</p>\n</li>\n<li><p>多行注释：三引号开头，三引号结尾。</p>\n</li>\n</ol>\n<h3 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h3><p>表示一个功能，函数定义者是提供功能的人，函数调用者是使用功能的人。</p>\n<p>例如：</p>\n<ol start=\"31\">\n<li><p>print(数据) 作用：将括号中的内容显示在控制台中</p>\n</li>\n<li><p>变量 &#x3D; input(“需要显示的内容”) 作用：将用户输入的内容赋值给变量</p>\n</li>\n</ol>\n<h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><ol start=\"33\">\n<li><p>定义：关联一个对象的标识符。</p>\n</li>\n<li><p>命名：必须是字母或下划线开头，后跟字母、数字、下划线。</p>\n</li>\n</ol>\n<p>不能使用关键字(蓝色)，否则发生语法错误：SyntaxError: invalid syntax。</p>\n<ol start=\"35\">\n<li>建议命名：字母小写，多个单词以下划线隔开。</li>\n</ol>\n<p>class_name</p>\n<ol start=\"36\">\n<li><p>赋值：创建一个变量或改变一个变量关联的数据。</p>\n</li>\n<li><p>语法：变量名 &#x3D; 数据</p>\n</li>\n</ol>\n<p>变量名1 &#x3D; 变量名2 &#x3D; 数据</p>\n<p>变量名1, 变量名2, &#x3D; 数据1, 数据2</p>\n<h2 id=\"del-语句\"><a href=\"#del-语句\" class=\"headerlink\" title=\"del 语句\"></a>del 语句</h2><ol start=\"38\">\n<li>语法:</li>\n</ol>\n<blockquote>\n<p>del 变量名1, 变量名2</p>\n</blockquote>\n<ol start=\"39\">\n<li>作用：</li>\n</ol>\n<blockquote>\n<p>用于删除变量,同时解除与对象的关联.如果可能则释放对象。</p>\n</blockquote>\n<ol start=\"40\">\n<li>自动化内存管理的引用计数：</li>\n</ol>\n<blockquote>\n<p>每个对象记录被变量绑定(引用)的数量,当为0时被销毁。</p>\n</blockquote>\n<h2 id=\"核心数据类型\"><a href=\"#核心数据类型\" class=\"headerlink\" title=\"核心数据类型\"></a>核心数据类型</h2><ol start=\"41\">\n<li><p>在python中变量没有类型，但关联的对象有类型。</p>\n</li>\n<li><p>通过type函数可查看。</p>\n</li>\n</ol>\n<h3 id=\"空值对象-None\"><a href=\"#空值对象-None\" class=\"headerlink\" title=\"空值对象 None\"></a>空值对象 None</h3><ol start=\"43\">\n<li><p>表示不存在的特殊对象。</p>\n</li>\n<li><p>作用：占位和解除与对象的关联。</p>\n</li>\n</ol>\n<h3 id=\"整形int\"><a href=\"#整形int\" class=\"headerlink\" title=\"整形int\"></a>整形int</h3><ol start=\"45\">\n<li>表示整数，包含正数、负数、0。</li>\n</ol>\n<blockquote>\n<p>如： -5, 100, 0</p>\n</blockquote>\n<ol start=\"46\">\n<li>字面值：</li>\n</ol>\n<blockquote>\n<p>十进制：5</p>\n</blockquote>\n<p>二进制：0b开头，后跟1或者1</p>\n<p>八进制：0o开头，后跟0~7</p>\n<p>十六进制：0x开头，后跟0<del>9,A</del>F,a~f</p>\n<h3 id=\"浮点型float\"><a href=\"#浮点型float\" class=\"headerlink\" title=\"浮点型float\"></a>浮点型float</h3><ol start=\"47\">\n<li><p>表示小数，包含正数、负数，0.0)。</p>\n</li>\n<li><p>字面值：</p>\n</li>\n</ol>\n<ul>\n<li><p>小数：1.0 2.5</p>\n</li>\n<li><p>科学计数法：e&#x2F;E (正负号) 指数</p>\n</li>\n<li><p>1.23e-2 (等同于0.0123)</p>\n</li>\n<li><p>1.23456e5(等同于123456.0)</p>\n</li>\n</ul>\n<h3 id=\"字符串str\"><a href=\"#字符串str\" class=\"headerlink\" title=\"字符串str\"></a>字符串str</h3><p>是用来记录文本信息(文字信息)。</p>\n<p>字面值：双引号</p>\n<h3 id=\"复数complex\"><a href=\"#复数complex\" class=\"headerlink\" title=\"复数complex\"></a>复数complex</h3><p>由实部和虚部组成的数字。</p>\n<p>虚部是以j或J结尾。</p>\n<p>字面值： 1j 1+1j 1-1j</p>\n<h3 id=\"布尔bool\"><a href=\"#布尔bool\" class=\"headerlink\" title=\"布尔bool\"></a>布尔bool</h3><p>用来表示真和假的类型</p>\n<p>True 表示真(条件满足或成立)，本质是1</p>\n<p>False 表示假(条件不满足或不成立)，本质是0</p>\n<h2 id=\"数据类型转换\"><a href=\"#数据类型转换\" class=\"headerlink\" title=\"数据类型转换\"></a>数据类型转换</h2><ol start=\"49\">\n<li><p>转换为整形: int(数据)</p>\n</li>\n<li><p>转换为浮点型:float(数据)</p>\n</li>\n<li><p>转换为字符串:str(数据)</p>\n</li>\n<li><p>转换为布尔:bool(数据)</p>\n</li>\n</ol>\n<p>结果为False：bool(0) bool(0.0) bool(None)</p>\n<ol start=\"53\">\n<li>混合类型自动升级：</li>\n</ol>\n<ul>\n<li><p>1 + 2.14 返回的结果是 3.14</p>\n</li>\n<li><p>1 + 3.0 返回结果是: 4.0</p>\n</li>\n</ul>\n<h2 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h2><h3 id=\"算术运算符\"><a href=\"#算术运算符\" class=\"headerlink\" title=\"算术运算符\"></a>算术运算符</h3><ul>\n<li>加法</li>\n</ul>\n<ul>\n<li>减法</li>\n</ul>\n<ul>\n<li>乘法</li>\n</ul>\n<ul>\n<li><p>&#x2F; 除法：结果为浮点数</p>\n</li>\n<li><p>&#x2F;&#x2F; 地板除：除的结果去掉小数部分</p>\n</li>\n<li><p>% 求余</p>\n</li>\n<li><p>** 幂运算</p>\n</li>\n</ul>\n<p>优先级从高到低：</p>\n<ul>\n<li><p>()</p>\n</li>\n<li><p>**</p>\n</li>\n</ul>\n<ul>\n<li>&#x2F; % &#x2F;&#x2F;</li>\n</ul>\n<ul>\n<li><ul>\n<li></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"增强运算符\"><a href=\"#增强运算符\" class=\"headerlink\" title=\"增强运算符\"></a>增强运算符</h3><p>y +&#x3D; x 等同于 y &#x3D; y + x</p>\n<p>y -&#x3D; x 等同于 y &#x3D; y - x</p>\n<p>y *&#x3D; x 等同于 y &#x3D; y * x</p>\n<p>y &#x2F;&#x3D; x 等同于 y &#x3D; y &#x2F; x</p>\n<p>y &#x2F;&#x2F;&#x3D; x 等同于 y &#x3D; y &#x2F;&#x2F; x</p>\n<p>y %&#x3D; x 等同于 y &#x3D; y % x</p>\n<p>y **&#x3D; x 等同于 y &#x3D; y ** x</p>\n<h3 id=\"比较运算符\"><a href=\"#比较运算符\" class=\"headerlink\" title=\"比较运算符\"></a>比较运算符</h3><ul>\n<li><p>&lt;\t\t小于</p>\n</li>\n<li><p>&lt;&#x3D;\t\t小于等于</p>\n</li>\n<li><p>&gt;\t\t大于</p>\n</li>\n<li><p>&gt;&#x3D;\t\t大于等于</p>\n</li>\n<li><p>&#x3D;&#x3D;\t\t等于</p>\n</li>\n<li><p>!&#x3D;\t\t不等于</p>\n</li>\n</ul>\n<p>返回布尔类型的值</p>\n<p>比较运算的数学表示方式:0 &lt;&#x3D; x &lt;&#x3D; 100</p>\n<h3 id=\"逻辑运算符\"><a href=\"#逻辑运算符\" class=\"headerlink\" title=\"逻辑运算符\"></a>逻辑运算符</h3><h4 id=\"与and\"><a href=\"#与and\" class=\"headerlink\" title=\"与and\"></a>与and</h4><p>表示并且的关系，一假俱假。</p>\n<p>示例:</p>\n<p>True and True # True</p>\n<p>True and False # False</p>\n<p>False and True # False</p>\n<p>False and False # False</p>\n<h4 id=\"或or\"><a href=\"#或or\" class=\"headerlink\" title=\"或or\"></a>或or</h4><p>表示或者的关系，一真俱真</p>\n<p>示例:</p>\n<p>True or True # True</p>\n<p>True or False # True</p>\n<p>False or True # True</p>\n<p>False or False # False</p>\n<h4 id=\"非-not\"><a href=\"#非-not\" class=\"headerlink\" title=\"非 not\"></a>非 not</h4><p>表示取反</p>\n<p>例如：</p>\n<p>not True # 返回False</p>\n<p>not False # 返回True</p>\n<h4 id=\"短路运算\"><a href=\"#短路运算\" class=\"headerlink\" title=\"短路运算\"></a>短路运算</h4><p>一但结果确定，后面的语句将不再执行。</p>\n<h3 id=\"身份运算符\"><a href=\"#身份运算符\" class=\"headerlink\" title=\"身份运算符\"></a>身份运算符</h3><p>语法:</p>\n<p>x is y</p>\n<p>x is not y</p>\n<p>作用：</p>\n<p>is 用于判断两个对象是否是同一个对象,是时返回True,否则返回False。</p>\n<p>is not 的作用与is相反</p>\n<h3 id=\"优先级\"><a href=\"#优先级\" class=\"headerlink\" title=\"优先级\"></a>优先级</h3><p>高到低：</p>\n<ul>\n<li><p>算数运算符</p>\n</li>\n<li><p>比较运算符</p>\n</li>\n<li><p>快捷运算符</p>\n</li>\n<li><p>身份运算符</p>\n</li>\n<li><p>逻辑运算符</p>\n</li>\n</ul>\n<h1 id=\"语句\"><a href=\"#语句\" class=\"headerlink\" title=\"语句\"></a>语句</h1><h2 id=\"行\"><a href=\"#行\" class=\"headerlink\" title=\"行\"></a>行</h2><ol start=\"54\">\n<li><p>物理行：程序员编写代码的行。</p>\n</li>\n<li><p>逻辑行：python解释器需要执行的指令。</p>\n</li>\n<li><p>建议一个逻辑行在一个物理行上。</p>\n</li>\n<li><p>如果一个物理行中使用多个逻辑行，需要使用分号；隔开。</p>\n</li>\n<li><p>如果逻辑行过长，可以使用隐式换行或显式换行。</p>\n</li>\n</ol>\n<p>隐式换行：所有括号的内容换行,称为隐式换行</p>\n<p>括号包括: () [] {} 三种</p>\n<p>显式换行：通过折行符 \\ (反斜杠)换行，必须放在一行的末尾，目的是告诉解释器,下一行也是本行的语句。</p>\n<h2 id=\"pass-语句\"><a href=\"#pass-语句\" class=\"headerlink\" title=\"pass 语句\"></a>pass 语句</h2><p>通常用来填充语法空白。</p>\n<h2 id=\"选择语句\"><a href=\"#选择语句\" class=\"headerlink\" title=\"选择语句\"></a>选择语句</h2><h3 id=\"If-elif-else-语句\"><a href=\"#If-elif-else-语句\" class=\"headerlink\" title=\"If elif else 语句\"></a>If elif else 语句</h3><ol start=\"58\">\n<li>作用:</li>\n</ol>\n<p>让程序根据条件选择性的执行语句。</p>\n<ol start=\"59\">\n<li>语法:</li>\n</ol>\n<p>if 条件1:</p>\n<p>​\t语句块1</p>\n<p>elif 条件2:</p>\n<p>​\t语句块2</p>\n<p>else:</p>\n<p>​\t语句块3</p>\n<ol start=\"60\">\n<li>说明:</li>\n</ol>\n<p>elif 子句可以有0个或多个。</p>\n<p>else 子句可以有0个或1个，且只能放在if语句的最后。</p>\n<h3 id=\"if-语句的真值表达式\"><a href=\"#if-语句的真值表达式\" class=\"headerlink\" title=\"if 语句的真值表达式\"></a>if 语句的真值表达式</h3><p>if 100:</p>\n<p>​\tprint(“真值”)</p>\n<p>等同于</p>\n<p>if bool(100):</p>\n<p>​\tprint(“真值”)</p>\n<h3 id=\"条件表达式\"><a href=\"#条件表达式\" class=\"headerlink\" title=\"条件表达式\"></a>条件表达式</h3><p>语法：变量 &#x3D; 结果1 if 条件 else 结果2</p>\n<p>作用：根据条件(True&#x2F;False) 来决定返回结果1还是结果2。</p>\n<h2 id=\"循环语句\"><a href=\"#循环语句\" class=\"headerlink\" title=\"循环语句\"></a>循环语句</h2><h3 id=\"while语句\"><a href=\"#while语句\" class=\"headerlink\" title=\"while语句\"></a>while语句</h3><ol start=\"61\">\n<li>作用:</li>\n</ol>\n<p>可以让一段代码满足条件，重复执行。</p>\n<ol start=\"62\">\n<li>语法:</li>\n</ol>\n<p>while 条件:</p>\n<p>​\t满足条件执行的语句</p>\n<p>else:</p>\n<p>​\t不满足条件执行的语句</p>\n<ol start=\"63\">\n<li>说明:</li>\n</ol>\n<p>else子句可以省略。</p>\n<p>在循环体内用break终止循环时,else子句不执行。</p>\n<h3 id=\"for-语句\"><a href=\"#for-语句\" class=\"headerlink\" title=\"for 语句\"></a>for 语句</h3><ol start=\"64\">\n<li>作用:</li>\n</ol>\n<p>用来遍历可迭代对象的数据元素。</p>\n<p>可迭代对象是指能依次获取数据元素的对象，例如：容器类型。</p>\n<ol start=\"65\">\n<li>语法:</li>\n</ol>\n<p>for 变量列表 in 可迭代对象:</p>\n<p>​\t语句块1</p>\n<p>else:</p>\n<p>​\t语句块2</p>\n<ol start=\"66\">\n<li>说明:</li>\n</ol>\n<p>else子句可以省略。</p>\n<p>在循环体内用break终止循环时,else子句不执行。</p>\n<h3 id=\"range-函数\"><a href=\"#range-函数\" class=\"headerlink\" title=\"range 函数\"></a>range 函数</h3><ol start=\"67\">\n<li>作用:</li>\n</ol>\n<p>用来创建一个生成一系列整数的可迭代对象(也叫整数序列生成器)。</p>\n<ol start=\"68\">\n<li>语法:</li>\n</ol>\n<p>range(开始点，结束点，间隔)</p>\n<ol start=\"69\">\n<li>说明:</li>\n</ol>\n<p>函数返回的可迭代对象可以用for取出其中的元素</p>\n<p>返回的数字不包含结束点</p>\n<p>开始点默认为0</p>\n<p>间隔默认值为1</p>\n<h2 id=\"跳转语句\"><a href=\"#跳转语句\" class=\"headerlink\" title=\"跳转语句\"></a>跳转语句</h2><h3 id=\"break-语句\"><a href=\"#break-语句\" class=\"headerlink\" title=\"break 语句\"></a>break 语句</h3><ol start=\"70\">\n<li><p>跳出循环体，后面的代码不再执行。</p>\n</li>\n<li><p>可以让while语句的else部分不执行。</p>\n</li>\n</ol>\n<h3 id=\"continue-语句\"><a href=\"#continue-语句\" class=\"headerlink\" title=\"continue 语句\"></a>continue 语句</h3><p>跳过本次，继续下次循环。</p>\n<h1 id=\"容器类型\"><a href=\"#容器类型\" class=\"headerlink\" title=\"容器类型\"></a>容器类型</h1><h2 id=\"通用操作\"><a href=\"#通用操作\" class=\"headerlink\" title=\"通用操作\"></a>通用操作</h2><h3 id=\"数学运算符\"><a href=\"#数学运算符\" class=\"headerlink\" title=\"数学运算符\"></a>数学运算符</h3><ol start=\"72\">\n<li><p>+：用于拼接两个容器</p>\n</li>\n<li><p>+&#x3D;：用原容器与右侧容器拼接,并重新绑定变量</p>\n</li>\n<li><p>*：重复生成容器元素</p>\n</li>\n<li><p>*&#x3D;：用原容器生成重复元素, 并重新绑定变量</p>\n</li>\n<li><p>&lt; &lt;&#x3D; &gt; &gt;&#x3D; &#x3D;&#x3D; !&#x3D;：依次比较两个容器中元素,一但不同则返回比较结果。</p>\n</li>\n</ol>\n<h3 id=\"成员运算符\"><a href=\"#成员运算符\" class=\"headerlink\" title=\"成员运算符\"></a>成员运算符</h3><ol start=\"77\">\n<li>语法：</li>\n</ol>\n<p>数据 in 序列</p>\n<p>数据 not in 序列</p>\n<ol start=\"78\">\n<li>作用：</li>\n</ol>\n<p>如果在指定的序列中找到值，返回bool类型。</p>\n<h3 id=\"索引index\"><a href=\"#索引index\" class=\"headerlink\" title=\"索引index\"></a>索引index</h3><ol start=\"79\">\n<li><p>作用：定位单个容器元素</p>\n</li>\n<li><p>语法：容器[整数]</p>\n</li>\n<li><p>说明：</p>\n</li>\n</ol>\n<p>正向索引从0开始，第二个索引为1，最后一个为len(s)-1。</p>\n<p>反向索引从-1开始,-1代表最后一个,-2代表倒数第二个,以此类推,第一个是-len(s)。</p>\n<h3 id=\"切片slice\"><a href=\"#切片slice\" class=\"headerlink\" title=\"切片slice\"></a>切片slice</h3><ol start=\"82\">\n<li>作用：</li>\n</ol>\n<p>定位多个容器元素。</p>\n<ol start=\"83\">\n<li>语法：</li>\n</ol>\n<p>容器[(开始索引):(结束索引)(:(步长))]</p>\n<ol start=\"84\">\n<li>说明：</li>\n</ol>\n<p>小括号()括起的部分代表可省略</p>\n<p>结束索引不包含该位置元素</p>\n<p>步长是切片每次获取完当前元素后移动的偏移量</p>\n<h3 id=\"内建函数\"><a href=\"#内建函数\" class=\"headerlink\" title=\"内建函数\"></a>内建函数</h3><ol start=\"85\">\n<li><p>len(x) 返回序列的长度</p>\n</li>\n<li><p>max(x) 返回序列的最大值元素</p>\n</li>\n<li><p>min(x) 返回序列的最小值元素</p>\n</li>\n<li><p>sum(x) 返回序列中所有元素的和(元素必须是数值类型)</p>\n</li>\n</ol>\n<h2 id=\"字符串-str\"><a href=\"#字符串-str\" class=\"headerlink\" title=\"字符串 str\"></a>字符串 str</h2><h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><blockquote>\n<p>由一系列字符组成的不可变序列容器，存储的是字符的编码值。</p>\n</blockquote>\n<h3 id=\"编码\"><a href=\"#编码\" class=\"headerlink\" title=\"编码\"></a>编码</h3><ol start=\"89\">\n<li><p>字节byte：计算机最小存储单位，等于8 位bit.</p>\n</li>\n<li><p>字符：单个的数字，文字与符号。</p>\n</li>\n<li><p>字符集(码表)：存储字符与二进制序列的对应关系。</p>\n</li>\n<li><p>编码：将字符转换为对应的二进制序列的过程。</p>\n</li>\n<li><p>解码：将二进制序列转换为对应的字符的过程。</p>\n</li>\n<li><p>编码方式：</p>\n</li>\n</ol>\n<p>–ASCII编码：包含英文、数字等字符，每个字符1个字节。</p>\n<p>–GBK编码：兼容ASCII编码，包含21003个中文；英文1个字节，汉字2个字节。</p>\n<p>–Unicode字符集：国际统一编码，旧字符集每个字符2字节，新字符集4字节。</p>\n<p>–UTF-8编码：Unicode的存储与传输方式，英文1字节，中文3字节。</p>\n<h4 id=\"相关函数\"><a href=\"#相关函数\" class=\"headerlink\" title=\"相关函数\"></a>相关函数</h4><ol start=\"95\">\n<li><p>ord(字符串):返回该字符串的Unicode码。</p>\n</li>\n<li><p>chr(整数):返回该整数对应的字符串。</p>\n</li>\n</ol>\n<h3 id=\"字面值\"><a href=\"#字面值\" class=\"headerlink\" title=\"字面值\"></a>字面值</h3><h4 id=\"单引和双引号的区别\"><a href=\"#单引和双引号的区别\" class=\"headerlink\" title=\"单引和双引号的区别\"></a>单引和双引号的区别</h4><ol start=\"97\">\n<li><p>单引号内的双引号不算结束符</p>\n</li>\n<li><p>双引号内的单引号不算结束符</p>\n</li>\n</ol>\n<h4 id=\"三引号作用\"><a href=\"#三引号作用\" class=\"headerlink\" title=\"三引号作用\"></a>三引号作用</h4><ol start=\"99\">\n<li><p>换行会自动转换为换行符\\n</p>\n</li>\n<li><p>三引号内可以包含单引号和双引号</p>\n</li>\n<li><p>作为文档字符串</p>\n</li>\n</ol>\n<h4 id=\"转义字符\"><a href=\"#转义字符\" class=\"headerlink\" title=\"转义字符\"></a>转义字符</h4><ol start=\"102\">\n<li>改变字符的原始含义。</li>\n</ol>\n<blockquote>\n<p>&#39; &quot; &quot;“” \\n \\ \\t \\0 空字符</p>\n</blockquote>\n<ol start=\"103\">\n<li>原始字符串：取消转义。</li>\n</ol>\n<p>a &#x3D; r”C:\\newfile\\test.py”</p>\n<h4 id=\"字符串格式化\"><a href=\"#字符串格式化\" class=\"headerlink\" title=\"字符串格式化\"></a>字符串格式化</h4><ol start=\"104\">\n<li>定义：</li>\n</ol>\n<blockquote>\n<p>生成一定格式的字符串。</p>\n</blockquote>\n<ol start=\"105\">\n<li>语法：</li>\n</ol>\n<blockquote>\n<p>字符串%(变量)</p>\n</blockquote>\n<p>“我的名字是%s,年龄是%s” % (name, age)</p>\n<ol start=\"106\">\n<li>类型码：</li>\n</ol>\n<blockquote>\n<p>%s 字符串 %d整数 %f 浮点数</p>\n</blockquote>\n<h2 id=\"列表-list\"><a href=\"#列表-list\" class=\"headerlink\" title=\"列表 list\"></a>列表 list</h2><h3 id=\"定义-1\"><a href=\"#定义-1\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>由一系列变量组成的可变序列容器。</p>\n<h3 id=\"基础操作\"><a href=\"#基础操作\" class=\"headerlink\" title=\"基础操作\"></a>基础操作</h3><ol start=\"107\">\n<li>创建列表：</li>\n</ol>\n<blockquote>\n<p>列表名 &#x3D; []</p>\n</blockquote>\n<p>列表名 &#x3D; list(可迭代对象)</p>\n<ol start=\"108\">\n<li>添加元素：</li>\n</ol>\n<blockquote>\n<p>列表名.append(元素)</p>\n</blockquote>\n<p>列表.insert(索引，元素)</p>\n<ol start=\"109\">\n<li>定位元素：</li>\n</ol>\n<blockquote>\n<p>列表名[索引] &#x3D; 元素</p>\n</blockquote>\n<p>变量 &#x3D; 列表名[索引]</p>\n<p>变量 &#x3D; 列表名[切片] # 赋值给变量的是切片所创建的新列表</p>\n<p>列表名[切片] &#x3D; 容器 # 右侧必须是可迭代对象，左侧切片没有创建新列表。遍历列表：</p>\n<p>正向：</p>\n<p>for 变量名 in 列表名:</p>\n<p>变量名就是元素</p>\n<p>反向：</p>\n<p>for 索引名 in range(len(列表名)-1,-1,-1):</p>\n<p>列表名[索引名]就是元素</p>\n<ol start=\"110\">\n<li>删除元素：</li>\n</ol>\n<blockquote>\n<p>列表名.remove(元素)</p>\n</blockquote>\n<p>del 列表名[索引或切片]</p>\n<h3 id=\"深拷贝和浅拷贝\"><a href=\"#深拷贝和浅拷贝\" class=\"headerlink\" title=\"深拷贝和浅拷贝\"></a>深拷贝和浅拷贝</h3><p>浅拷贝：复制过程中,只复制一层变量,不会复制深层变量绑定的对象的复制过程。</p>\n<p>深拷贝：复制整个依懒的变量。</p>\n<h3 id=\"列表VS字符串\"><a href=\"#列表VS字符串\" class=\"headerlink\" title=\"列表VS字符串\"></a>列表VS字符串</h3><ol start=\"111\">\n<li><p>列表和字符串都是序列,元素之间有先后顺序关系。</p>\n</li>\n<li><p>字符串是不可变的序列,列表是可变的序列。</p>\n</li>\n<li><p>字符串中每个元素只能存储字符,而列表可以存储任意类型。</p>\n</li>\n<li><p>列表和字符串都是可迭代对象。</p>\n</li>\n<li><p>函数：</p>\n</li>\n</ol>\n<blockquote>\n<p>将多个字符串拼接为一个。</p>\n</blockquote>\n<p>result &#x3D; “连接符”.join(列表)</p>\n<p>将一个字符串拆分为多个。</p>\n<p>列表 &#x3D; “a-b-c-d”.split(“分隔符”)</p>\n<h3 id=\"列表推导式\"><a href=\"#列表推导式\" class=\"headerlink\" title=\"列表推导式\"></a>列表推导式</h3><ol start=\"116\">\n<li>定义：</li>\n</ol>\n<blockquote>\n<p>使用简易方法，将可迭代对象转换为列表。</p>\n</blockquote>\n<ol start=\"117\">\n<li>语法：</li>\n</ol>\n<blockquote>\n<p>变量 &#x3D; [表达式 for 变量 in 可迭代对象]</p>\n</blockquote>\n<p>变量 &#x3D; [表达式 for 变量 in 可迭代对象 if 条件]</p>\n<ol start=\"118\">\n<li>说明:</li>\n</ol>\n<blockquote>\n<p>如果if真值表达式的布尔值为False,则可迭代对象生成的数据将被丢弃。</p>\n</blockquote>\n<h3 id=\"列表推导式嵌套\"><a href=\"#列表推导式嵌套\" class=\"headerlink\" title=\"列表推导式嵌套\"></a>列表推导式嵌套</h3><ol start=\"119\">\n<li>语法：</li>\n</ol>\n<blockquote>\n<p>变量 &#x3D; [表达式 for 变量1 in 可迭代对象1 for 变量2 in可迭代对象2]</p>\n</blockquote>\n<ol start=\"120\">\n<li>传统写法：</li>\n</ol>\n<p>result &#x3D; []</p>\n<p>for r in [“a”, “b”, “c”]:</p>\n<p>for c in [“A”, “B”, “C”]:</p>\n<p>result.append(r + c)</p>\n<ol start=\"121\">\n<li>推导式写法：</li>\n</ol>\n<p>result &#x3D; [r + c for r in list01 for c in list02]</p>\n<h2 id=\"元组-tuple\"><a href=\"#元组-tuple\" class=\"headerlink\" title=\"元组 tuple\"></a>元组 tuple</h2><h3 id=\"定义-2\"><a href=\"#定义-2\" class=\"headerlink\" title=\"定义\"></a>定义</h3><ol start=\"122\">\n<li><p>由一系列变量组成的不可变序列容器。</p>\n</li>\n<li><p>不可变是指一但创建，不可以再添加&#x2F;删除&#x2F;修改元素。</p>\n</li>\n</ol>\n<h3 id=\"基础操作-1\"><a href=\"#基础操作-1\" class=\"headerlink\" title=\"基础操作\"></a>基础操作</h3><ol start=\"124\">\n<li>创建空元组：</li>\n</ol>\n<p>元组名 &#x3D; ()</p>\n<p>元组名 &#x3D; tuple()</p>\n<ol start=\"125\">\n<li>创建非空元组：</li>\n</ol>\n<p>元组名 &#x3D; (20,)</p>\n<p>元组名 &#x3D; (1, 2, 3)</p>\n<p>元组名 &#x3D; 100,200,300</p>\n<p>元组名 &#x3D; tuple(可迭代对象)</p>\n<ol start=\"126\">\n<li>获取元素：</li>\n</ol>\n<p>变量 &#x3D; 元组名[索引]</p>\n<p>变量 &#x3D; 元组名[切片] # 赋值给变量的是切片所创建的新列表</p>\n<ol start=\"127\">\n<li>遍历元组：</li>\n</ol>\n<p>正向：</p>\n<p>for 变量名 in 列表名:</p>\n<p>变量名就是元素</p>\n<p>反向：</p>\n<p>for 索引名 in range(len(列表名)-1,-1,-1):</p>\n<p>元组名[索引名]就是元素</p>\n<h3 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h3><ol start=\"128\">\n<li><p>元组与列表都可以存储一系列变量，由于列表会预留内存空间，所以可以增加元素。</p>\n</li>\n<li><p>元组会按需分配内存，所以如果变量数量固定，建议使用元组，因为占用空间更小。</p>\n</li>\n<li><p>应用：</p>\n</li>\n</ol>\n<p>变量交换的本质就是创建元组：x, y &#x3D; （y, x ）</p>\n<p>格式化字符串的本质就是创建元祖：”姓名:%s, 年龄:%d” % (“tarena”, 15)</p>\n<h2 id=\"字典-dict\"><a href=\"#字典-dict\" class=\"headerlink\" title=\"字典 dict\"></a>字典 dict</h2><h3 id=\"定义-3\"><a href=\"#定义-3\" class=\"headerlink\" title=\"定义\"></a>定义</h3><ol start=\"131\">\n<li><p>由一系列键值对组成的可变散列容器。</p>\n</li>\n<li><p>散列：对键进行哈希运算，确定在内存中的存储位置，每条数据存储无先后顺序。</p>\n</li>\n<li><p>键必须惟一且不可变(字符串&#x2F;数字&#x2F;元组)，值没有限制。</p>\n</li>\n</ol>\n<h3 id=\"基础操作-2\"><a href=\"#基础操作-2\" class=\"headerlink\" title=\"基础操作\"></a>基础操作</h3><ol start=\"134\">\n<li>创建字典：</li>\n</ol>\n<p>字典名 &#x3D; {键1：值1，键2：值2}</p>\n<p>字典名 &#x3D; dict (可迭代对象)</p>\n<ol start=\"135\">\n<li>添加&#x2F;修改元素：</li>\n</ol>\n<p>语法:</p>\n<p>字典名[键] &#x3D; 数据</p>\n<p>说明:</p>\n<p>键不存在，创建记录。</p>\n<p>键存在，修改值。</p>\n<ol start=\"136\">\n<li>获取元素：</li>\n</ol>\n<p>变量 &#x3D; 字典名[键] # 没有键则错误</p>\n<ol start=\"137\">\n<li>遍历字典：</li>\n</ol>\n<p>for 键名 in 字典名:</p>\n<p>​\t字典名[键名]</p>\n<p>for 键名,值名 in 字典名.items():</p>\n<p>语句</p>\n<ol start=\"138\">\n<li>删除元素：</li>\n</ol>\n<blockquote>\n<p>del 字典名[键]</p>\n</blockquote>\n<h3 id=\"字典推导式\"><a href=\"#字典推导式\" class=\"headerlink\" title=\"字典推导式\"></a>字典推导式</h3><ol start=\"139\">\n<li>定义：</li>\n</ol>\n<p>使用简易方法，将可迭代对象转换为字典。</p>\n<ol start=\"140\">\n<li>语法:</li>\n</ol>\n<p>{键:值 for 变量 in 可迭代对象}</p>\n<p>{键:值 for 变量 in 可迭代对象 if 条件}</p>\n<h3 id=\"字典-VS-列表\"><a href=\"#字典-VS-列表\" class=\"headerlink\" title=\"字典 VS 列表\"></a>字典 VS 列表</h3><ol start=\"141\">\n<li><p>都是可变容器。</p>\n</li>\n<li><p>获取元素方式不同,列表用索引,字典用键。</p>\n</li>\n<li><p>字典的插入,删除,修改的速度快于列表。</p>\n</li>\n<li><p>列表的存储是有序的,字典的存储是无序的。</p>\n</li>\n</ol>\n<h2 id=\"集合-set\"><a href=\"#集合-set\" class=\"headerlink\" title=\"集合 set\"></a>集合 set</h2><h3 id=\"定义-4\"><a href=\"#定义-4\" class=\"headerlink\" title=\"定义\"></a>定义</h3><ol start=\"145\">\n<li><p>由一系列不重复的不可变类型变量(元组&#x2F;数&#x2F;字符串)组成的可变散列容器。</p>\n</li>\n<li><p>相当于只有键没有值的字典(键则是集合的数据)。</p>\n</li>\n</ol>\n<h3 id=\"基础操作-3\"><a href=\"#基础操作-3\" class=\"headerlink\" title=\"基础操作\"></a>基础操作</h3><ol start=\"147\">\n<li>创建空集合：</li>\n</ol>\n<p>集合名 &#x3D; set()</p>\n<p>集合名 &#x3D; set(可迭代对象)</p>\n<ol start=\"148\">\n<li>创建具有默认值集合：</li>\n</ol>\n<p>集合名 &#x3D; {1, 2, 3}</p>\n<p>集合名 &#x3D; set(可迭代对象)</p>\n<ol start=\"149\">\n<li>添加元素：</li>\n</ol>\n<p>集合名.add(元素)</p>\n<ol start=\"150\">\n<li>删除元素：</li>\n</ol>\n<p>集合名.discard(元素)</p>\n<h3 id=\"运算\"><a href=\"#运算\" class=\"headerlink\" title=\"运算\"></a>运算</h3><ol start=\"151\">\n<li>交集&amp;：返回共同元素。</li>\n</ol>\n<p>s1 &#x3D; {1, 2, 3}</p>\n<p>s2 &#x3D; {2, 3, 4}</p>\n<p>s3 &#x3D; s1 &amp; s2 # {2, 3}</p>\n<ol start=\"152\">\n<li>并集：返回不重复元素</li>\n</ol>\n<p>s1 &#x3D; {1, 2, 3}</p>\n<p>s2 &#x3D; {2, 3, 4}</p>\n<p>s3 &#x3D; s1 | s2 # {1, 2, 3, 4}</p>\n<ol start=\"153\">\n<li>补集-：返回只属于其中之一的元素</li>\n</ol>\n<p>s1 &#x3D; {1, 2, 3}</p>\n<p>s2 &#x3D; {2, 3, 4}</p>\n<p>s1 - s2 # {1} 属于s1但不属于s2</p>\n<p>补集^：返回不同的的元素</p>\n<p>s1 &#x3D; {1, 2, 3}</p>\n<p>s2 &#x3D; {2, 3, 4}</p>\n<p>s3 &#x3D; s1 ^ s2 # {1, 4} 等同于(s1-s2 | s2-s1)</p>\n<ol start=\"154\">\n<li><p>子集&lt;：判断一个集合的所有元素是否完全在另一个集合中</p>\n</li>\n<li><p>超集&gt;：判断一个集合是否具有另一个集合的所有元素</p>\n</li>\n</ol>\n<p>s1 &#x3D; {1, 2, 3}</p>\n<p>s2 &#x3D; {2, 3}</p>\n<p>s2 &lt; s1 # True</p>\n<p>s1 &gt; s2 # True</p>\n<ol start=\"156\">\n<li>相同或不同&#x3D;&#x3D; !&#x3D;：判断集合中的所有元素是否和另一个集合相同。</li>\n</ol>\n<p>s1 &#x3D; {1, 2, 3}</p>\n<p>s2 &#x3D; {3, 2, 1}</p>\n<p>s1 &#x3D;&#x3D; s2 # True</p>\n<p>s1 !&#x3D; s2 # False</p>\n<p>子集或相同,超集或相同 &lt;&#x3D; &gt;&#x3D;</p>\n<h3 id=\"集合推导式\"><a href=\"#集合推导式\" class=\"headerlink\" title=\"集合推导式\"></a>集合推导式</h3><ol start=\"157\">\n<li>定义：</li>\n</ol>\n<p>使用简易方法，将可迭代对象转换为集合。</p>\n<ol start=\"158\">\n<li>语法:</li>\n</ol>\n<p>{表达式 for 变量 in 可迭代对象}</p>\n<p>{表达式 for 变量 in 可迭代对象 if 条件}</p>\n<h1 id=\"函数-function\"><a href=\"#函数-function\" class=\"headerlink\" title=\"函数 function\"></a>函数 function</h1><h2 id=\"pycharm相关设置\"><a href=\"#pycharm相关设置\" class=\"headerlink\" title=\"pycharm相关设置\"></a>pycharm相关设置</h2><ol start=\"159\">\n<li>“代码自动完成”时间延时设置</li>\n</ol>\n<blockquote>\n<p>File -&gt; Settings -&gt; Editor -&gt; General -&gt; Code Completion -&gt; Autopopup in (ms):0</p>\n</blockquote>\n<ol start=\"160\">\n<li>快捷键：</li>\n</ol>\n<blockquote>\n<p>Ctrl + P 参数信息（在方法中调用参数）</p>\n</blockquote>\n<p>Ctrl + Q 快速查看文档</p>\n<p>Ctrl + Alt + M 提取方法</p>\n<h2 id=\"定义-5\"><a href=\"#定义-5\" class=\"headerlink\" title=\"定义\"></a>定义</h2><ol start=\"161\">\n<li><p>用于封装一个特定的功能，表示一个功能或者行为。</p>\n</li>\n<li><p>函数是可以重复执行的语句块, 可以重复调用。</p>\n</li>\n</ol>\n<h2 id=\"作用-1\"><a href=\"#作用-1\" class=\"headerlink\" title=\"作用\"></a>作用</h2><p>提高代码的可重用性和可维护性（代码层次结构更清晰）。</p>\n<h2 id=\"定义函数\"><a href=\"#定义函数\" class=\"headerlink\" title=\"定义函数\"></a>定义函数</h2><ol start=\"163\">\n<li>语法：</li>\n</ol>\n<blockquote>\n<p>def 函数名(形式参数):</p>\n</blockquote>\n<p>  函数体</p>\n<ol start=\"164\">\n<li>说明：</li>\n</ol>\n<blockquote>\n<p>def 关键字：全称是define，意为”定义”。</p>\n</blockquote>\n<p>函数名：对函数体中语句的描述，规则与变量名相同。</p>\n<p>形式参数：方法定义者要求调用者提供的信息。</p>\n<p>函数体：完成该功能的语句。</p>\n<ol start=\"165\">\n<li>函数的第一行语句建议使用文档字符串描述函数的功能与参数。</li>\n</ol>\n<h2 id=\"调用函数\"><a href=\"#调用函数\" class=\"headerlink\" title=\"调用函数\"></a>调用函数</h2><ol start=\"166\">\n<li><p>语法：函数名(实际参数)</p>\n</li>\n<li><p>说明：根据形参传递内容。</p>\n</li>\n</ol>\n<h2 id=\"返回值\"><a href=\"#返回值\" class=\"headerlink\" title=\"返回值\"></a>返回值</h2><ol start=\"168\">\n<li>定义：</li>\n</ol>\n<blockquote>\n<p>方法定义者告诉调用者的结果。</p>\n</blockquote>\n<ol start=\"169\">\n<li>语法：</li>\n</ol>\n<blockquote>\n<p>return 数据 </p>\n</blockquote>\n<ol start=\"170\">\n<li>说明：</li>\n</ol>\n<blockquote>\n<p>return后没有语句，相当于返回 None。</p>\n</blockquote>\n<p>函数体没有return，相当于返回None。</p>\n<h2 id=\"可变／不可变类型在传参时的区别\"><a href=\"#可变／不可变类型在传参时的区别\" class=\"headerlink\" title=\"可变／不可变类型在传参时的区别\"></a>可变／不可变类型在传参时的区别</h2><ol start=\"171\">\n<li>不可变类型参数有:</li>\n</ol>\n<blockquote>\n<p>数值型(整数，浮点数,复数)</p>\n</blockquote>\n<p>布尔值bool</p>\n<p>None 空值</p>\n<p>字符串str</p>\n<p>元组tuple</p>\n<p>固定集合frozenset</p>\n<ol start=\"172\">\n<li>可变类型参数有:</li>\n</ol>\n<blockquote>\n<p>列表 list</p>\n</blockquote>\n<p>字典 dict</p>\n<p>集合 set</p>\n<ol start=\"173\">\n<li>传参说明：</li>\n</ol>\n<blockquote>\n<p>不可变类型的数据传参时，函数内部不会改变原数据的值。</p>\n</blockquote>\n<p>可变类型的数据传参时，函数内部可以改变原数据。</p>\n<h2 id=\"函数参数\"><a href=\"#函数参数\" class=\"headerlink\" title=\"函数参数\"></a>函数参数</h2><h3 id=\"实参传递方式argument\"><a href=\"#实参传递方式argument\" class=\"headerlink\" title=\"实参传递方式argument\"></a>实参传递方式argument</h3><h4 id=\"位置传参\"><a href=\"#位置传参\" class=\"headerlink\" title=\"位置传参\"></a>位置传参</h4><p>定义：实参与形参的位置依次对应。</p>\n<h4 id=\"序列传参\"><a href=\"#序列传参\" class=\"headerlink\" title=\"序列传参\"></a>序列传参</h4><p>定义：实参用*将序列拆解后与形参的位置依次对应。</p>\n<h4 id=\"关键字传参\"><a href=\"#关键字传参\" class=\"headerlink\" title=\"关键字传参\"></a>关键字传参</h4><p>定义：实参根据形参的名字进行对应。</p>\n<h4 id=\"字典关键字传参\"><a href=\"#字典关键字传参\" class=\"headerlink\" title=\"字典关键字传参\"></a>字典关键字传参</h4><ol start=\"174\">\n<li><p>定义：实参用**将字典拆解后与形参的名字进行对应。</p>\n</li>\n<li><p>作用：配合形参的缺省参数，可以使调用者随意传参。</p>\n</li>\n</ol>\n<h3 id=\"形参定义方式parameter\"><a href=\"#形参定义方式parameter\" class=\"headerlink\" title=\"形参定义方式parameter\"></a>形参定义方式parameter</h3><h4 id=\"缺省参数\"><a href=\"#缺省参数\" class=\"headerlink\" title=\"缺省参数\"></a>缺省参数</h4><ol start=\"176\">\n<li>语法：</li>\n</ol>\n<blockquote>\n<p>def 函数名(形参名1&#x3D;默认实参1, 形参名2&#x3D;默认实参2, …):</p>\n</blockquote>\n<p>函数体</p>\n<ol start=\"177\">\n<li>说明：</li>\n</ol>\n<blockquote>\n<p>缺省参数必须自右至左依次存在，如果一个参数有缺省参数，则其右侧的所有参数都必须有缺省参数。</p>\n</blockquote>\n<p>缺省参数可以有0个或多个，甚至全部都有缺省参数。</p>\n<h4 id=\"位置形参\"><a href=\"#位置形参\" class=\"headerlink\" title=\"位置形参\"></a>位置形参</h4><p>语法：</p>\n<blockquote>\n<p>def 函数名(形参名1, 形参名2, …):</p>\n</blockquote>\n<p>函数体</p>\n<h4 id=\"星号元组形参\"><a href=\"#星号元组形参\" class=\"headerlink\" title=\"星号元组形参\"></a>星号元组形参</h4><ol start=\"178\">\n<li>语法：</li>\n</ol>\n<blockquote>\n<p>def 函数名(*元组形参名):</p>\n</blockquote>\n<p>  函数体</p>\n<ol start=\"179\">\n<li>作用：</li>\n</ol>\n<blockquote>\n<p>收集多余的位置传参。</p>\n</blockquote>\n<ol start=\"180\">\n<li>说明：</li>\n</ol>\n<blockquote>\n<p>一般命名为’args’</p>\n</blockquote>\n<p>形参列表中最多只能有一个</p>\n<h4 id=\"命名关键字形参\"><a href=\"#命名关键字形参\" class=\"headerlink\" title=\"命名关键字形参\"></a>命名关键字形参</h4><ol start=\"181\">\n<li>语法：</li>\n</ol>\n<blockquote>\n<p>def 函数名(*, 命名关键字形参1, 命名关键字形参2, …):</p>\n</blockquote>\n<p>函数体</p>\n<p>def 函数名(*args, 命名关键字形参1, 命名关键字形参2, …):<br>  函数体</p>\n<ol start=\"182\">\n<li>作用：</li>\n</ol>\n<blockquote>\n<p>强制实参使用关键字传参</p>\n</blockquote>\n<h4 id=\"双星号字典形参\"><a href=\"#双星号字典形参\" class=\"headerlink\" title=\"双星号字典形参\"></a>双星号字典形参</h4><ol start=\"183\">\n<li>语法：</li>\n</ol>\n<p>def 函数名(**字典形参名):</p>\n<p>​\t\t函数体</p>\n<ol start=\"184\">\n<li>作用：</li>\n</ol>\n<p>收集多余的关键字传参</p>\n<ol start=\"185\">\n<li>说明:</li>\n</ol>\n<p>一般命名为’kwargs’</p>\n<p>形参列表中最多只能有一个</p>\n<h4 id=\"参数自左至右的顺序\"><a href=\"#参数自左至右的顺序\" class=\"headerlink\" title=\"参数自左至右的顺序\"></a>参数自左至右的顺序</h4><p>位置形参 –&gt; 星号元组形参 –&gt; 命名关键字形参 –&gt; 双星号字典形参</p>\n<h1 id=\"作用域LEGB\"><a href=\"#作用域LEGB\" class=\"headerlink\" title=\"作用域LEGB\"></a>作用域LEGB</h1><ol start=\"186\">\n<li><p>作用域：变量起作用的范围。</p>\n</li>\n<li><p>Local局部作用域：函数内部。</p>\n</li>\n<li><p>Enclosing 外部嵌套作用域 ：函数嵌套。</p>\n</li>\n<li><p>Global全局作用域：模块(.py文件)内部。</p>\n</li>\n<li><p>Builtin内置模块作用域：builtins.py文件。</p>\n</li>\n</ol>\n<h2 id=\"变量名的查找规则\"><a href=\"#变量名的查找规则\" class=\"headerlink\" title=\"变量名的查找规则\"></a>变量名的查找规则</h2><ol start=\"191\">\n<li><p>由内到外：L -&gt; E -&gt; G -&gt; B</p>\n</li>\n<li><p>在访问变量时，先查找本地变量，然后是包裹此函数外部的函数内部的变量，之后是全局变量，最后是内置变量。</p>\n</li>\n</ol>\n<h2 id=\"局部变量\"><a href=\"#局部变量\" class=\"headerlink\" title=\"局部变量\"></a>局部变量</h2><ol start=\"193\">\n<li><p>定义在函数内部的变量(形参也是局部变量)</p>\n</li>\n<li><p>只能在函数内部使用</p>\n</li>\n<li><p>调用函数时才被创建，函数结束后自动销毁</p>\n</li>\n</ol>\n<h2 id=\"全局变量\"><a href=\"#全局变量\" class=\"headerlink\" title=\"全局变量\"></a>全局变量</h2><ol start=\"196\">\n<li><p>定义在函数外部,模块内部的变量。</p>\n</li>\n<li><p>在整个模块(py文件)范围内访问（但函数内不能将其直接赋值）。</p>\n</li>\n</ol>\n<h2 id=\"global-语句\"><a href=\"#global-语句\" class=\"headerlink\" title=\"global 语句\"></a>global 语句</h2><ol start=\"198\">\n<li>作用：</li>\n</ol>\n<blockquote>\n<p>在函数内部修改全局变量。</p>\n</blockquote>\n<p>在函数内部定义全局变量(全局声明)。</p>\n<ol start=\"199\">\n<li>语法：</li>\n</ol>\n<blockquote>\n<p>global 变量1, 变量2, …</p>\n</blockquote>\n<ol start=\"200\">\n<li>说明</li>\n</ol>\n<blockquote>\n<p>在函数内直接为全局变量赋值，视为创建新的局部变量。</p>\n</blockquote>\n<p>不能先声明局部的变量，再用global声明为全局变量。</p>\n<h2 id=\"nonlocal-语句\"><a href=\"#nonlocal-语句\" class=\"headerlink\" title=\"nonlocal 语句\"></a>nonlocal 语句</h2><ol start=\"201\">\n<li>作用：</li>\n</ol>\n<blockquote>\n<p>在内层函数修改外层嵌套函数内的变量</p>\n</blockquote>\n<ol start=\"202\">\n<li>语法</li>\n</ol>\n<blockquote>\n<p>nonlocal 变量名1,变量名2, …</p>\n</blockquote>\n<ol start=\"203\">\n<li>说明</li>\n</ol>\n<blockquote>\n<p>在被嵌套的内函数中进行使用</p>\n</blockquote>\n<h1 id=\"面向对象-Object-Oriented\"><a href=\"#面向对象-Object-Oriented\" class=\"headerlink\" title=\"面向对象 Object Oriented\"></a>面向对象 Object Oriented</h1><h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><h3 id=\"面向过程\"><a href=\"#面向过程\" class=\"headerlink\" title=\"面向过程\"></a>面向过程</h3><ol start=\"204\">\n<li>分析出解决问题的步骤，然后逐步实现。</li>\n</ol>\n<blockquote>\n<p>例如：婚礼筹办</p>\n</blockquote>\n<p>– 发请柬（选照片、措词、制作）</p>\n<p>– 宴席（场地、找厨师、准备桌椅餐具、计划菜品、购买食材）</p>\n<p>– 婚礼仪式（定婚礼仪式流程、请主持人）</p>\n<ol start=\"205\">\n<li><p>公式：程序 &#x3D; 算法 + 数据结构</p>\n</li>\n<li><p>优点：所有环节、细节自己掌控。</p>\n</li>\n<li><p>缺点：考虑所有细节，工作量大。</p>\n</li>\n</ol>\n<h3 id=\"面向对象\"><a href=\"#面向对象\" class=\"headerlink\" title=\"面向对象\"></a>面向对象</h3><ol start=\"208\">\n<li>找出解决问题的人，然后分配职责。</li>\n</ol>\n<blockquote>\n<p>例如：婚礼筹办</p>\n</blockquote>\n<p>– 发请柬：找摄影公司（拍照片、制作请柬）</p>\n<p>– 宴席：找酒店（告诉对方标准、数量、挑选菜品）</p>\n<p>– 婚礼仪式：找婚庆公司（对方提供司仪、制定流程、提供设备、帮助执行）</p>\n<ol start=\"209\">\n<li><p>公式：程序 &#x3D; 对象 + 交互</p>\n</li>\n<li><p>优点</p>\n</li>\n</ol>\n<p> (1) 思想层面：</p>\n<p>– 可模拟现实情景，更接近于人类思维。</p>\n<p>– 有利于梳理归纳、分析解决问题。</p>\n<p>(2) 技术层面：</p>\n<p>– 高复用：对重复的代码进行封装，提高开发效率。</p>\n<p>– 高扩展：增加新的功能，不修改以前的代码。</p>\n<p>– 高维护：代码可读性好，逻辑清晰，结构规整。</p>\n<ol start=\"211\">\n<li>缺点：学习曲线陡峭。</li>\n</ol>\n<h2 id=\"类和对象\"><a href=\"#类和对象\" class=\"headerlink\" title=\"类和对象\"></a>类和对象</h2><h3 id=\"基础概念\"><a href=\"#基础概念\" class=\"headerlink\" title=\"基础概念\"></a>基础概念</h3><p><img src=\"/pictures/07python_basic/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%A6%82%E8%BF%B0.jpg\" alt=\"面向对象概述\"></p>\n<ol start=\"212\">\n<li><p>抽象：从具体事物中抽离出共性、本质，舍弃个别、非本质过程。</p>\n</li>\n<li><p>类：一个抽象的概念，即生活中的”类别”。</p>\n</li>\n<li><p>对象：类的具体实例，即归属于某个类别的”个体”。</p>\n</li>\n<li><p>类是创建对象的”模板”。</p>\n</li>\n</ol>\n<p>– 数据成员：名词类型的状态。</p>\n<p>– 方法成员：动词类型的行为。</p>\n<h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h3><h4 id=\"定义类\"><a href=\"#定义类\" class=\"headerlink\" title=\"定义类\"></a>定义类</h4><ol start=\"216\">\n<li>代码</li>\n</ol>\n<blockquote>\n<p>class 类名:</p>\n</blockquote>\n<p>“””文档说明”””</p>\n<p>def <em>init</em>(self,参数列表):</p>\n<p>self.实例变量 &#x3D; 参数</p>\n<p>方法成员</p>\n<ol start=\"217\">\n<li>说明</li>\n</ol>\n<p>– 类名所有单词首字母大写.</p>\n<p>– <em>init</em> 也叫构造函数，创建对象时被调用，也可以省略。</p>\n<p>– self 变量绑定的是被创建的对象，名称可以随意。</p>\n<h4 id=\"创建对象-实例化\"><a href=\"#创建对象-实例化\" class=\"headerlink\" title=\"创建对象(实例化)\"></a>创建对象(实例化)</h4><p>变量 &#x3D; 构造函数 (参数列表)</p>\n<h3 id=\"实例成员\"><a href=\"#实例成员\" class=\"headerlink\" title=\"实例成员\"></a>实例成员</h3><h4 id=\"实例变量\"><a href=\"#实例变量\" class=\"headerlink\" title=\"实例变量\"></a>实例变量</h4><ol start=\"218\">\n<li>语法</li>\n</ol>\n<p> </p>\n<p>(1) 定义：对象.变量名</p>\n<p>(2) 调用：对象.变量名</p>\n<ol start=\"219\">\n<li>说明</li>\n</ol>\n<p>(1) 首次通过对象赋值为创建，再次赋值为修改.</p>\n<p>w01 &#x3D; Wife()</p>\n<p>w01.name &#x3D; “建宁”</p>\n<p>w01.name &#x3D; “建宁公主”</p>\n<p>(2) 通常在构造函数(<em>init</em>)中创建。</p>\n<p>w01 &#x3D; Wife(“建宁公主,24)</p>\n<p>print(w01.name)</p>\n<p>(3) 每个对象存储一份，通过对象地址访问。</p>\n<p> </p>\n<ol start=\"220\">\n<li><p>作用：描述某个对象自己的数据。</p>\n</li>\n<li><p>__dict__：对象的属性，用于存储自身实例变量的字典。</p>\n</li>\n</ol>\n<h4 id=\"实例方法\"><a href=\"#实例方法\" class=\"headerlink\" title=\"实例方法\"></a>实例方法</h4><ol start=\"222\">\n<li>语法</li>\n</ol>\n<p>(1) 定义： def 方法名称(self, 参数列表):</p>\n<p>方法体</p>\n<p>(2) 调用： 对象地址.实例方法名(参数列表)</p>\n<p>不建议通过类名访问实例方法</p>\n<ol start=\"223\">\n<li>说明</li>\n</ol>\n<p>(1) 至少有一个形参，第一个参数绑定调用这个方法的对象,一般命名为”self”。</p>\n<p>(2) 无论创建多少对象，方法只有一份，并且被所有对象共享。</p>\n<ol start=\"224\">\n<li>作用：表示对象行为。</li>\n</ol>\n<h3 id=\"类成员\"><a href=\"#类成员\" class=\"headerlink\" title=\"类成员\"></a>类成员</h3><h4 id=\"类变量\"><a href=\"#类变量\" class=\"headerlink\" title=\"类变量\"></a>类变量</h4><ol start=\"225\">\n<li>语法</li>\n</ol>\n<p> (1) 定义：在类中，方法外定义变量。</p>\n<blockquote>\n<p>class 类名:</p>\n</blockquote>\n<p>变量名 &#x3D; 表达式</p>\n<p>(2) 调用：类名.变量名</p>\n<p>不建议通过对象访问类变量</p>\n<ol start=\"226\">\n<li>说明</li>\n</ol>\n<p>(1) 存储在类中。</p>\n<p>(2) 只有一份，被所有对象共享。</p>\n<ol start=\"227\">\n<li>作用：描述所有对象的共有数据。</li>\n</ol>\n<h4 id=\"类方法\"><a href=\"#类方法\" class=\"headerlink\" title=\"类方法\"></a>类方法</h4><ol start=\"228\">\n<li>语法</li>\n</ol>\n<p> (1) 定义：</p>\n<blockquote>\n<p>@classmethod</p>\n</blockquote>\n<p>def 方法名称(cls,参数列表):</p>\n<p>方法体</p>\n<p>(2) 调用：类名.方法名(参数列表)</p>\n<blockquote>\n<p>不建议通过对象访问类方法</p>\n</blockquote>\n<ol start=\"229\">\n<li>说明</li>\n</ol>\n<p>(1) 至少有一个形参，第一个形参用于绑定类，一般命名为’cls’</p>\n<p>(2) 使用@classmethod修饰的目的是调用类方法时可以隐式传递类。</p>\n<p>(3) 类方法中不能访问实例成员，实例方法中可以访问类成员。</p>\n<ol start=\"230\">\n<li>作用：操作类变量。</li>\n</ol>\n<h3 id=\"静态方法\"><a href=\"#静态方法\" class=\"headerlink\" title=\"静态方法\"></a>静态方法</h3><ol start=\"231\">\n<li>语法</li>\n</ol>\n<p> (1) 定义：</p>\n<blockquote>\n<p>@staticmethod</p>\n</blockquote>\n<p>def 方法名称(参数列表):</p>\n<p>方法体</p>\n<p>(2) 调用：类名.方法名(参数列表)</p>\n<blockquote>\n<p>不建议通过对象访问静态方法</p>\n</blockquote>\n<ol start=\"232\">\n<li>说明</li>\n</ol>\n<blockquote>\n<p>(1) 使用@ staticmethod修饰的目的是该方法不需要隐式传参数。</p>\n</blockquote>\n<p>(2) 静态方法不能访问实例成员和类成员</p>\n<ol start=\"233\">\n<li>作用：定义常用的工具函数。</li>\n</ol>\n<h2 id=\"三大特征\"><a href=\"#三大特征\" class=\"headerlink\" title=\"三大特征\"></a>三大特征</h2><h3 id=\"封装\"><a href=\"#封装\" class=\"headerlink\" title=\"封装\"></a>封装</h3><p><img src=\"/pictures/07python_basic/%E5%B0%81%E8%A3%85%E6%80%9D%E6%83%B3.jpg\" alt=\"封装思想\"></p>\n<h4 id=\"数据角度讲\"><a href=\"#数据角度讲\" class=\"headerlink\" title=\"数据角度讲\"></a>数据角度讲</h4><ol start=\"234\">\n<li>定义：</li>\n</ol>\n<blockquote>\n<p>将一些基本数据类型复合成一个自定义类型。</p>\n</blockquote>\n<ol start=\"235\">\n<li>优势：</li>\n</ol>\n<p>将数据与对数据的操作相关联。</p>\n<p>代码可读性更高（类是对象的模板）。</p>\n<h4 id=\"行为角度讲\"><a href=\"#行为角度讲\" class=\"headerlink\" title=\"行为角度讲\"></a>行为角度讲</h4><ol start=\"236\">\n<li>定义：</li>\n</ol>\n<blockquote>\n<p>类外提供必要的功能，隐藏实现的细节。</p>\n</blockquote>\n<ol start=\"237\">\n<li>优势：</li>\n</ol>\n<blockquote>\n<p>简化编程，使用者不必了解具体的实现细节，只需要调用对外提供的功能。</p>\n</blockquote>\n<ol start=\"238\">\n<li>私有成员：</li>\n</ol>\n<p> </p>\n<p>(1) 作用：无需向类外提供的成员，可以通过私有化进行屏蔽。</p>\n<p>(2) 做法：命名使用双下划线开头。</p>\n<p>(3) 本质：障眼法，实际也可以访问。</p>\n<blockquote>\n<p>私有成员的名称被修改为：_类名__成员名，可以通过_dict_属性或dir函数查看。</p>\n</blockquote>\n<ol start=\"239\">\n<li>属性@property：</li>\n</ol>\n<blockquote>\n<p>公开的实例变量，缺少逻辑验证。私有的实例变量与两个公开的方法相结合，又使调用者的操作略显复杂。而属性可以将两个方法的使用方式像操作变量一样方便。</p>\n</blockquote>\n<p>(1) 定义：</p>\n<blockquote>\n<p>@property</p>\n</blockquote>\n<p>def 属性名(self):</p>\n<p>return self.__属性名</p>\n<p>@属性名.setter</p>\n<p>def 属性名(self, value):</p>\n<p>self.__属性名&#x3D; value</p>\n<p>(2) 调用：</p>\n<blockquote>\n<p>对象.属性名 &#x3D; 数据</p>\n</blockquote>\n<p>变量 &#x3D; 对象.属性名</p>\n<p>(3) 说明：</p>\n<blockquote>\n<p>通常两个公开的属性，保护一个私有的变量。</p>\n</blockquote>\n<p>@property 负责读取，@属性名.setter 负责写入</p>\n<p>只写：属性名&#x3D; property(None, 写入方法名)</p>\n<h4 id=\"设计角度讲\"><a href=\"#设计角度讲\" class=\"headerlink\" title=\"设计角度讲\"></a>设计角度讲</h4><ol start=\"240\">\n<li>定义：</li>\n</ol>\n<p>(1) 分而治之</p>\n<blockquote>\n<p>将一个大的需求分解为许多类，每个类处理一个独立的功能。</p>\n</blockquote>\n<p>(2) 变则疏之</p>\n<blockquote>\n<p>变化的地方独立封装，避免影响其他类。</p>\n</blockquote>\n<p>(3) 高 内 聚</p>\n<blockquote>\n<p>类中各个方法都在完成一项任务(单一职责的类)。</p>\n</blockquote>\n<p>(4) 低 耦 合</p>\n<blockquote>\n<p>类与类的关联性与依赖度要低(每个类独立)，让一个类的改变，尽少影响其他类。</p>\n</blockquote>\n<ol start=\"241\">\n<li>优势：</li>\n</ol>\n<p>便于分工，便于复用，可扩展性强。</p>\n<h4 id=\"案例-信息管理系统\"><a href=\"#案例-信息管理系统\" class=\"headerlink\" title=\"案例:信息管理系统\"></a>案例:信息管理系统</h4><p><img src=\"/pictures/07python_basic/image-20230103161103514.png\" alt=\"image-20230103161103514\"></p>\n<h4 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h4><p>实现对学生信息的增加、删除、修改和查询。</p>\n<h4 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h4><blockquote>\n<p>界面可能使用控制台，也可能使用Web等等。</p>\n</blockquote>\n<ol start=\"242\">\n<li><p>识别对象：界面视图类 逻辑控制类 数据模型类</p>\n</li>\n<li><p>分配职责：</p>\n</li>\n</ol>\n<blockquote>\n<p>界面视图类：负责处理界面逻辑，比如显示菜单，获取输入，显示结果等。</p>\n</blockquote>\n<p>逻辑控制类：负责存储学生信息，处理业务逻辑。比如添加、删除等</p>\n<p>数据模型类：定义需要处理的数据类型。比如学生信息。</p>\n<ol start=\"244\">\n<li>建立交互：</li>\n</ol>\n<blockquote>\n<p>界面视图对象 &lt;—-&gt; 数据模型对象 &lt;—-&gt; 逻辑控制对象</p>\n</blockquote>\n<h4 id=\"设计\"><a href=\"#设计\" class=\"headerlink\" title=\"设计\"></a>设计</h4><p>数据模型类：StudentModel</p>\n<p>数据：编号 id,姓名 name,年龄 age,成绩 score</p>\n<p>逻辑控制类：StudentManagerController</p>\n<p>数据：学生列表 __stu_list</p>\n<p>行为：获取列表 stu_list,添加学生 add_student，删除学生remove_student，修改学生update_student，根据成绩排序order_by_score。</p>\n<p>界面视图类：StudentManagerView</p>\n<p>数据：逻辑控制对象__manager</p>\n<p>行为：显示菜单__display_menu，选择菜单项__select_menu_item，入口逻辑main，</p>\n<p>输入学生__input_students，输出学生__output_students，删除学生__delete_student，修改学生信息__modify_student</p>\n<h3 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h3><p><img src=\"/pictures/07python_basic/%E7%BB%A7%E6%89%BF%E5%85%BC%E5%AE%B9%E6%80%A7.jpg\" alt=\"继承兼容性\"></p>\n<p><img src=\"/pictures/07python_basic/%E7%BB%A7%E6%89%BF%E5%86%85%E5%AD%98%E5%9B%BE.jpg\" alt=\"继承内存图\"></p>\n<h4 id=\"语法角度讲\"><a href=\"#语法角度讲\" class=\"headerlink\" title=\"语法角度讲\"></a>语法角度讲</h4><h4 id=\"继承方法\"><a href=\"#继承方法\" class=\"headerlink\" title=\"继承方法\"></a>继承方法</h4><ol start=\"245\">\n<li>代码:</li>\n</ol>\n<blockquote>\n<p>class 父类:</p>\n</blockquote>\n<p>def 父类方法(self):</p>\n<p>方法体</p>\n<p>class 子类(父类)：</p>\n<p>def 子类方法(self):</p>\n<p>方法体</p>\n<p>儿子 &#x3D; 子类()</p>\n<p>儿子.子类方法()</p>\n<p>儿子.父类方法()</p>\n<ol start=\"246\">\n<li>说明：</li>\n</ol>\n<blockquote>\n<p>子类直接拥有父类的方法.</p>\n</blockquote>\n<h4 id=\"内置函数\"><a href=\"#内置函数\" class=\"headerlink\" title=\"内置函数\"></a>内置函数</h4><blockquote>\n<p>isinstance(对象, 类型)</p>\n</blockquote>\n<p>返回指定对象是否是某个类的对象。</p>\n<p>issubclass(类型，类型)</p>\n<p>返回指定类型是否属于某个类型。</p>\n<h4 id=\"继承数据\"><a href=\"#继承数据\" class=\"headerlink\" title=\"继承数据\"></a>继承数据</h4><ol start=\"247\">\n<li><strong>代码</strong></li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">子类</span>(<span class=\"title class_ inherited__\">父类</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self,参数列表</span>):</span><br><span class=\"line\">    <span class=\"built_in\">super</span>().__init__(参数列表)</span><br><span class=\"line\">    self.自身实例变量 = 参数</span><br></pre></td></tr></table></figure>\n\n<ol start=\"248\">\n<li><strong>说明</strong></li>\n</ol>\n<blockquote>\n</blockquote>\n<ul>\n<li>子类如果没有构造函数，将自动执行父类的；</li>\n</ul>\n<figure class=\"highlight plaintext\"><figcaption><span>Text</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\">class Student(Person):</span><br><span class=\"line\">    # 子类若没有构造函数，使用父类的.</span><br><span class=\"line\">    pass</span><br><span class=\"line\"></span><br><span class=\"line\">s01 = Student()</span><br><span class=\"line\">print(s01.name)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n</blockquote>\n<ul>\n<li>但如果有构造函数将覆盖父类的,此时必须通过super()函数调用父类的构造函数，以确保父类实例变量被正常创建。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self,name</span>):</span><br><span class=\"line\">        self.name = name </span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Student</span>(<span class=\"title class_ inherited__\">Person</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 子类若具有构造函数，则必须先调用父类构造函数。</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self,name,score</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__(name)  <span class=\"comment\"># 这里调用父类的构造函数，同时需要传参的哦</span></span><br><span class=\"line\">        self.score = score</span><br><span class=\"line\"><span class=\"comment\"># 实例化测试</span></span><br><span class=\"line\">p01 = Person(<span class=\"string\">&quot;李四&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(p01.name)</span><br><span class=\"line\">s01 = Student(<span class=\"string\">&quot;张三&quot;</span>, <span class=\"number\">100</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(s01.score)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(s01.name)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"定义-6\"><a href=\"#定义-6\" class=\"headerlink\" title=\"定义\"></a>定义</h4><blockquote>\n<p>重用现有类的功能，并在此基础上进行扩展。</p>\n</blockquote>\n<p>说明：子类直接具有父类的成员（共性），还可以扩展新功能。</p>\n<h4 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h4><ul>\n<li>一种代码复用的方式。</li>\n</ul>\n<h4 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h4><ul>\n<li>耦合度高：父类的变化，直接影响子类。</li>\n</ul>\n<h4 id=\"设计角度讲-1\"><a href=\"#设计角度讲-1\" class=\"headerlink\" title=\"设计角度讲\"></a>设计角度讲</h4><h4 id=\"定义-7\"><a href=\"#定义-7\" class=\"headerlink\" title=\"定义\"></a>定义</h4><blockquote>\n<p>将相关类的共性进行抽象，统一概念，隔离变化。</p>\n</blockquote>\n<h4 id=\"适用性\"><a href=\"#适用性\" class=\"headerlink\" title=\"适用性\"></a>适用性</h4><ul>\n<li>多个类在概念上是一致的，且需要进行统一的处理。</li>\n</ul>\n<h4 id=\"相关概念\"><a href=\"#相关概念\" class=\"headerlink\" title=\"相关概念\"></a>相关概念</h4><ul>\n<li><p>父类（基类、超类）、子类（派生类）。</p>\n</li>\n<li><p>父类相对于子类更抽象，范围更宽泛；子类相对于父类更具体，范围更狭小。</p>\n</li>\n<li><p>单继承：父类只有一个（例如 Java，C#）。</p>\n</li>\n<li><p>多继承：父类有多个（例如C++，Python）。</p>\n</li>\n<li><p>Object类：任何类都直接或间接继承自 object 类。</p>\n</li>\n</ul>\n<h4 id=\"多继承\"><a href=\"#多继承\" class=\"headerlink\" title=\"多继承\"></a>多继承</h4><p>一个子类继承两个或两个以上的基类，父类中的属性和方法同时被子类继承下来。</p>\n<p>同名方法的解析顺序（MRO， Method Resolution Order）:</p>\n<p>类自身 –&gt; 父类继承列表（由左至右）–&gt; 再上层父类</p>\n<p>A</p>\n<p>&#x2F; \\</p>\n<p>&#x2F; \\</p>\n<p>B C</p>\n<p>\\ &#x2F;</p>\n<p>\\ &#x2F;</p>\n<p>D</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    多继承 -- 语法</span></span><br><span class=\"line\"><span class=\"string\">    同名方法解析顺序：MRO</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">m01</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;A - m01&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">B</span>(<span class=\"title class_ inherited__\">A</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">m01</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;B - m01&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">C</span>(<span class=\"title class_ inherited__\">A</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">m01</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;C - m01&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">D</span>(B,C):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">m02</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.m01()</span><br><span class=\"line\"></span><br><span class=\"line\">d01 = D()</span><br><span class=\"line\">d01.m02()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(D.mro())<span class=\"comment\"># [D, B,C, A,object]</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"继承练习01\"><a href=\"#继承练习01\" class=\"headerlink\" title=\"继承练习01\"></a>继承练习01</h4><p><strong>设计</strong></p>\n<ul>\n<li><p>存在变化点的内容，不能直接调，而是要抽象一个父类出来；</p>\n</li>\n<li><p>隔离不变和变化的内容；</p>\n</li>\n<li><p>父类就是来约束子类规范的，如果按照运行来说，不写父类也是可以的，子类都写一个相同的方法也都可以满足，但是还是要用继承来规范代码编写，所以在父类中可以加一句是否继承父类的校验： <code>if not isinstance(damage_target, Damageable):     raise ValueError(&quot;不是Damageable的子类&quot;)</code></p>\n</li>\n<li><p>父类如果有的方法，必须要子类也需要有，那就可以在父类中约定抛个异常来约定子类一定要实现重写这个父类方法：   <code>def damage(self, value):如果子类不重写，则异常。        raise NotImplementedError()</code>  这里的主要原理就是，如果子类没有写父类规定的类，那在实际调用这个子类的这个方法的时候，实际是会去找父类的方法，而此时一旦找到了父类的这个方法就知道这个子类肯定是没重写这个方法的，因为就可以报错了。</p>\n<p><img src=\"/pictures/07python_basic/%E6%89%8B%E9%9B%B7%E7%88%86%E7%82%B8.jpg\" alt=\"手雷爆炸\"></p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    手雷炸了，可能伤害敌人/玩家的生命.</span></span><br><span class=\"line\"><span class=\"string\">             还可能伤害未知事物(鸭子.房子....)</span></span><br><span class=\"line\"><span class=\"string\">    要求：增加了新事物，不影响手雷。</span></span><br><span class=\"line\"><span class=\"string\">    体会：继承的作用</span></span><br><span class=\"line\"><span class=\"string\">         多态的体现</span></span><br><span class=\"line\"><span class=\"string\">         设计原则</span></span><br><span class=\"line\"><span class=\"string\">            开闭原则</span></span><br><span class=\"line\"><span class=\"string\">            单一职责</span></span><br><span class=\"line\"><span class=\"string\">            依赖倒置</span></span><br><span class=\"line\"><span class=\"string\">    画出设计图</span></span><br><span class=\"line\"><span class=\"string\">    15:35</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Granade</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, atk</span>):</span><br><span class=\"line\">        self.atk = atk</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">explode</span>(<span class=\"params\">self, damage_target</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 如果传入的不是子类，则报错.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> <span class=\"built_in\">isinstance</span>(damage_target, Damageable):</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> ValueError(<span class=\"string\">&quot;不是Damageable的子类&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;爆炸&quot;</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 多态:</span></span><br><span class=\"line\">        <span class=\"comment\"># 调用父类代表(玩家/敌人.....)的可以受伤者.</span></span><br><span class=\"line\">        <span class=\"comment\"># 执类行子(具体玩家/敌人.....)</span></span><br><span class=\"line\">        damage_target.damage(self.atk)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Damageable</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        可以受伤</span></span><br><span class=\"line\"><span class=\"string\">        继承:统一多个子类的概念，隔离变化。</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">damage</span>(<span class=\"params\">self, value</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 如果子类不重写，则异常。</span></span><br><span class=\"line\">        <span class=\"keyword\">raise</span> NotImplementedError()</span><br><span class=\"line\"><span class=\"comment\"># ------------------------------</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Player</span>(<span class=\"title class_ inherited__\">Damageable</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, hp</span>):</span><br><span class=\"line\">        self.hp = hp</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">damage</span>(<span class=\"params\">self, value</span>):</span><br><span class=\"line\">        self.hp -= value</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;玩家受伤啦&quot;</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;碎屏&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Enemy</span>(<span class=\"title class_ inherited__\">Damageable</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, hp</span>):</span><br><span class=\"line\">        self.hp = hp</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">damage2</span>(<span class=\"params\">self, value</span>):</span><br><span class=\"line\">        self.hp -= value</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;敌人受伤喽&quot;</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;头顶爆字&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">g01 = Granade(<span class=\"number\">100</span>)</span><br><span class=\"line\">e01 = Enemy(<span class=\"number\">200</span>)</span><br><span class=\"line\">p01 = Player(<span class=\"number\">300</span>)</span><br><span class=\"line\">g01.explode(p01)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"继承练习02\"><a href=\"#继承练习02\" class=\"headerlink\" title=\"继承练习02\"></a>继承练习02</h4><ul>\n<li><p>子类的差异化问题子类自己解决，可以通过子类的构造方法来提供参数；</p>\n</li>\n<li><p>差异化的部分，不能找父类去要。</p>\n<p><img src=\"/pictures/07python_basic/%E5%9B%BE%E5%BD%A2%E7%AE%A1%E7%90%86%E5%99%A8.jpg\" alt=\"图形管理器\"></p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    定义图形管理器类</span></span><br><span class=\"line\"><span class=\"string\">        1. 管理所有图形</span></span><br><span class=\"line\"><span class=\"string\">        2. 提供计算所有图形总面积的方法</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    具体图形:</span></span><br><span class=\"line\"><span class=\"string\">        圆形(pi × r ** 2)</span></span><br><span class=\"line\"><span class=\"string\">        矩形(长*宽)</span></span><br><span class=\"line\"><span class=\"string\">        ...</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    测试：</span></span><br><span class=\"line\"><span class=\"string\">        创建1个圆形对象，1个矩形对象，添加到图形管理器中.</span></span><br><span class=\"line\"><span class=\"string\">        调用图形管理器的计算面积方法，输出结果。</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    要求：增加新图形，不修改图形管理器的代码.</span></span><br><span class=\"line\"><span class=\"string\">    体会：面向对象三大特征：</span></span><br><span class=\"line\"><span class=\"string\">            封装/继承/多态</span></span><br><span class=\"line\"><span class=\"string\">         面向对象设计原则：</span></span><br><span class=\"line\"><span class=\"string\">            开闭/单一/倒置</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">GraphicManager</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.__graphics = []</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">add_graphic</span>(<span class=\"params\">self, graphic</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">isinstance</span>(graphic, Graphic):</span><br><span class=\"line\">            self.__graphics.append(graphic)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> ValueError()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">get_total_area</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        total_area = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"comment\"># 遍历图形列表，累加每个图形的面积</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> self.__graphics:</span><br><span class=\"line\">            <span class=\"comment\"># 多态：</span></span><br><span class=\"line\">            <span class=\"comment\"># 调用的是图形</span></span><br><span class=\"line\">            <span class=\"comment\"># 执行的是圆形/矩形...</span></span><br><span class=\"line\">            total_area += item.calculate_area()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> total_area</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Graphic</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">calculate_area</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 如果子类不重写，则异常.</span></span><br><span class=\"line\">        <span class=\"keyword\">raise</span> NotImplementedError()</span><br><span class=\"line\"><span class=\"comment\">#-----------------------------------</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Circle</span>(<span class=\"title class_ inherited__\">Graphic</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self,radius</span>):</span><br><span class=\"line\">        self.radius = radius</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">calculate_area</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">3.14</span> * self.radius **<span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Rectanlge</span>(<span class=\"title class_ inherited__\">Graphic</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self,length,width</span>):</span><br><span class=\"line\">        self.lenght = length</span><br><span class=\"line\">        self.width = width</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">calculate_area</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.lenght *  self.width</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">c01 = Circle(<span class=\"number\">5</span>)</span><br><span class=\"line\">r01 = Rectanlge(<span class=\"number\">10</span>,<span class=\"number\">20</span>)</span><br><span class=\"line\">manager = GraphicManager()</span><br><span class=\"line\">manager.add_graphic(c01)</span><br><span class=\"line\">manager.add_graphic(r01)</span><br><span class=\"line\">re = manager.get_total_area()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(re)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"继承练习03\"><a href=\"#继承练习03\" class=\"headerlink\" title=\"继承练习03\"></a>继承练习03</h4><p><img src=\"/pictures/07python_basic/%E5%91%98%E5%B7%A5%E7%AE%A1%E7%90%86%E5%99%A8.jpg\" alt=\"员工管理器\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    定义员工管理器</span></span><br><span class=\"line\"><span class=\"string\">        1.管理所有员工</span></span><br><span class=\"line\"><span class=\"string\">        2. 计算所有员工工资</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    员工：</span></span><br><span class=\"line\"><span class=\"string\">        程序员：底薪 + 项目分红</span></span><br><span class=\"line\"><span class=\"string\">        销售：底薪 + 销售额 * 0.05</span></span><br><span class=\"line\"><span class=\"string\">        软件测试...</span></span><br><span class=\"line\"><span class=\"string\">        ...</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    要求：增加新岗位，员工管理器不变.</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">EmployeeManager</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.__employees = []</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">add_employee</span>(<span class=\"params\">self, emp</span>):</span><br><span class=\"line\">        self.__employees.append(emp)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">get_total_saraly</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        total_saraly = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> self.__employees:</span><br><span class=\"line\">            <span class=\"comment\"># 调用是抽象的员工类</span></span><br><span class=\"line\">            <span class=\"comment\"># 执行是具体的员工(程序员/销售..)</span></span><br><span class=\"line\">            total_saraly += item.calculate_salary()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> total_saraly</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Employee</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, base_salary</span>):</span><br><span class=\"line\">        self.base_salary = base_salary</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">calculate_salary</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.base_salary</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---------------------------------------</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Programmer</span>(<span class=\"title class_ inherited__\">Employee</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, base_salary, bonus</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__(base_salary)</span><br><span class=\"line\">        self.bonus = bonus</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">calculate_salary</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"comment\"># return self.base_salary + self.bonus</span></span><br><span class=\"line\">        <span class=\"comment\"># 扩展重写</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">super</span>().calculate_salary()+ self.bonus</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Salesmen</span>(<span class=\"title class_ inherited__\">Employee</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, base_salary, sale_value</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__(base_salary)</span><br><span class=\"line\">        self.sale_value = sale_value</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">calculate_salary</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.base_salary + self.sale_value * <span class=\"number\">0.05</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 测试</span></span><br><span class=\"line\">manager = EmployeeManager()</span><br><span class=\"line\">manager.add_employee(Programmer(<span class=\"number\">200000</span>,<span class=\"number\">500</span>))</span><br><span class=\"line\">manager.add_employee(Salesmen(<span class=\"number\">2000</span>,<span class=\"number\">1000</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(manager.get_total_saraly())</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"多态\"><a href=\"#多态\" class=\"headerlink\" title=\"多态\"></a>多态</h3><h4 id=\"设计角度讲-2\"><a href=\"#设计角度讲-2\" class=\"headerlink\" title=\"设计角度讲\"></a>设计角度讲</h4><h4 id=\"定义-8\"><a href=\"#定义-8\" class=\"headerlink\" title=\"定义\"></a>定义</h4><blockquote>\n<p>父类的同一种动作或者行为，在不同的子类上有不同的实现。</p>\n</blockquote>\n<h4 id=\"作用-2\"><a href=\"#作用-2\" class=\"headerlink\" title=\"作用\"></a>作用</h4><ol start=\"249\">\n<li><p>在继承的基础上，体现类型的个性化（一个行为有不同的实现）。</p>\n</li>\n<li><p>增强程序扩展性，体现开闭原则。</p>\n</li>\n</ol>\n<h4 id=\"语法角度讲-1\"><a href=\"#语法角度讲-1\" class=\"headerlink\" title=\"语法角度讲\"></a>语法角度讲</h4><h4 id=\"重写\"><a href=\"#重写\" class=\"headerlink\" title=\"重写\"></a>重写</h4><ul>\n<li><p>子类实现了父类中相同的方法（方法名、参数）。</p>\n</li>\n<li><p>在调用该方法时，实际执行的是子类的方法。调用父，执行子。</p>\n</li>\n</ul>\n<h4 id=\"快捷键\"><a href=\"#快捷键\" class=\"headerlink\" title=\"快捷键\"></a>快捷键</h4><p>Ctrl + O</p>\n<h4 id=\"内置可重写函数\"><a href=\"#内置可重写函数\" class=\"headerlink\" title=\"内置可重写函数\"></a>内置可重写函数</h4><p>Python中，以双下划线开头、双下划线结尾的是系统定义的成员。我们可以在自定义类中进行重写，从而改变其行为。</p>\n<h4 id=\"转换字符串\"><a href=\"#转换字符串\" class=\"headerlink\" title=\"转换字符串\"></a>转换字符串</h4><p>__str__函数：将对象转换为字符串(对人友好的)</p>\n<p>__repr__函数：将对象转换为字符串(解释器可识别的)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    内置可重写函数</span></span><br><span class=\"line\"><span class=\"string\">    练习:exercise01.py</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">StudentModel</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, name=<span class=\"string\">&quot;&quot;</span>, age=<span class=\"number\">0</span>, score=<span class=\"number\">0</span>, <span class=\"built_in\">id</span>=<span class=\"number\">0</span></span>):</span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\">        self.age = age</span><br><span class=\"line\">        self.score = score</span><br><span class=\"line\">        self.<span class=\"built_in\">id</span> = <span class=\"built_in\">id</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 对象 --&gt; 字符串 (随意格式)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__str__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;我叫%s,编号是%d,年龄是%d,成绩是:%d&quot;</span>%(self.name,self.<span class=\"built_in\">id</span>,self.age,self.score)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 对象 --&gt; 字符串(解释器可识别,有格式)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__repr__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;StudentModel(&#x27;%s&#x27;,%d,%d,%d)&quot;</span>%(self.name,self.age,self.score,self.<span class=\"built_in\">id</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">s01 = StudentModel(<span class=\"string\">&quot;无忌&quot;</span>,<span class=\"number\">27</span>,<span class=\"number\">100</span>,<span class=\"number\">101</span>)</span><br><span class=\"line\">str01 = <span class=\"built_in\">str</span>(s01)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(str01)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(s01)</span><br><span class=\"line\"></span><br><span class=\"line\">str02 =<span class=\"built_in\">repr</span>(s01)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(str02)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 根据字符串执行python代码</span></span><br><span class=\"line\">re = <span class=\"built_in\">eval</span>(<span class=\"string\">&quot;1+2*5&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\"># exec</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(re)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 克隆对象</span></span><br><span class=\"line\"><span class=\"comment\"># repr 返回python格式的字符串</span></span><br><span class=\"line\"><span class=\"comment\"># eval根据字符串执行代码</span></span><br><span class=\"line\">s02 = <span class=\"built_in\">eval</span>(<span class=\"built_in\">repr</span>(s01))   <span class=\"comment\">#  通过eval 配合repr（对象）来克隆一个对象</span></span><br><span class=\"line\">s02.name = <span class=\"string\">&quot;老张&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(s01.name)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"运算符重载\"><a href=\"#运算符重载\" class=\"headerlink\" title=\"运算符重载\"></a>运算符重载</h4><p>定义：让自定义的类生成的对象(实例)能够使用运算符进行操作。</p>\n<h4 id=\"算数运算符\"><a href=\"#算数运算符\" class=\"headerlink\" title=\"算数运算符\"></a>算数运算符</h4><p><img src=\"/pictures/07python_basic/image-20230103161655636.png\" alt=\"image-20230103161655636\"></p>\n<h4 id=\"反向算数运算符重载\"><a href=\"#反向算数运算符重载\" class=\"headerlink\" title=\"反向算数运算符重载\"></a>反向算数运算符重载</h4><p><img src=\"/pictures/07python_basic/image-20230103161740574.png\" alt=\"image-20230103161740574\"></p>\n<h4 id=\"复合运算符重载\"><a href=\"#复合运算符重载\" class=\"headerlink\" title=\"复合运算符重载\"></a>复合运算符重载</h4><p><img src=\"/pictures/07python_basic/image-20230103161614116.png\" alt=\"image-20230103161614116\"></p>\n<blockquote>\n<p>运算符重载的内容实际使用的很少，平常可能不会用，但是要知道有这个东西。</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    运算符重载</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Vector1</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, x</span>):</span><br><span class=\"line\">        self.x = x</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__str__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;一维向量的分量是：&quot;</span> + <span class=\"built_in\">str</span>(self.x)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__add__</span>(<span class=\"params\">self, other</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Vector1(self.x + other)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__radd__</span>(<span class=\"params\">self, other</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Vector1(self.x + other)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__iadd__</span>(<span class=\"params\">self, other</span>):</span><br><span class=\"line\">        self.x += other</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self</span><br><span class=\"line\"></span><br><span class=\"line\">v01 = Vector1(<span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(v01 + <span class=\"number\">2</span>)  <span class=\"comment\"># v01.__add__(2)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 练习:实现自定义类的对象与数值的减法，乘法运算。</span></span><br><span class=\"line\"><span class=\"comment\"># 略...</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">2</span> + v01)</span><br><span class=\"line\"><span class=\"comment\"># 练习:实现数值与自定义类的对象的减法，乘法运算。</span></span><br><span class=\"line\"><span class=\"comment\"># 略...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">id</span>(v01))</span><br><span class=\"line\"><span class=\"comment\"># 重写__iadd__，实现在原对象基础上的变化。</span></span><br><span class=\"line\"><span class=\"comment\"># 如果重写__iadd__,默认使用__add__，一般会产生新对象.</span></span><br><span class=\"line\">v01 += <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(v01,<span class=\"built_in\">id</span>(v01))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># list01 = [1]</span></span><br><span class=\"line\"><span class=\"comment\"># print(id(list01))</span></span><br><span class=\"line\"><span class=\"comment\"># # 生成新对象</span></span><br><span class=\"line\"><span class=\"comment\"># re = list01 + [2]</span></span><br><span class=\"line\"><span class=\"comment\"># print(re,id(re))</span></span><br><span class=\"line\"><span class=\"comment\"># # 在原有对象基础上，累加.</span></span><br><span class=\"line\"><span class=\"comment\"># list01 += [2]</span></span><br><span class=\"line\"><span class=\"comment\"># print(list01,id(list01))</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"比较运算重载\"><a href=\"#比较运算重载\" class=\"headerlink\" title=\"比较运算重载\"></a>比较运算重载</h4><p><img src=\"/pictures/07python_basic/image-20230103161555646.png\" alt=\"image-20230103161555646\"></p>\n<h2 id=\"设计原则\"><a href=\"#设计原则\" class=\"headerlink\" title=\"设计原则\"></a>设计原则</h2><h3 id=\"开-闭原则（目标、总的指导思想）\"><a href=\"#开-闭原则（目标、总的指导思想）\" class=\"headerlink\" title=\"开-闭原则（目标、总的指导思想）\"></a>开-闭原则（目标、总的指导思想）</h3><p><strong>O</strong>pen <strong>C</strong>losed <strong>P</strong>rinciple</p>\n<ul>\n<li><p>对扩展开放，对修改关闭。</p>\n</li>\n<li><p><strong>增加新功能，不改变原有代码</strong>。允许增加新功能，但是不能改变原来代码这就是开闭原则</p>\n</li>\n</ul>\n<h3 id=\"类的单一职责（一个类的定义）\"><a href=\"#类的单一职责（一个类的定义）\" class=\"headerlink\" title=\"类的单一职责（一个类的定义）\"></a>类的单一职责（一个类的定义）</h3><p><strong>S</strong>ingle <strong>R</strong>esponsibility <strong>P</strong>rinciple</p>\n<ul>\n<li><p>一个类有且只有一个改变它的原因；发生变化的原因只能是一个那就是遵循了这个原则。</p>\n</li>\n<li><p>一个类只做一件事情；</p>\n</li>\n</ul>\n<h3 id=\"依赖倒置（依赖抽象）\"><a href=\"#依赖倒置（依赖抽象）\" class=\"headerlink\" title=\"依赖倒置（依赖抽象）\"></a>依赖倒置（依赖抽象）</h3><p><strong>D</strong>ependency <strong>I</strong>nversion <strong>P</strong>rinciple</p>\n<ul>\n<li><p>客户端代码(调用的类)尽量依赖(使用)抽象。就是使用者，调用的这个类就是客户端代码，抽象就是不具体的，就是父类，子类更具体，父类更抽象，父类就是把各个子类抽象一下。是先有子类，然后再抽象出父类，调类的时候，是调用父类，调用抽象类这样就能够实现更加稳定的逻辑。</p>\n</li>\n<li><p>抽象不应该依赖细节，细节应该依赖抽象。</p>\n</li>\n<li><p>父类约束子类在行为上保持一致</p>\n<p><img src=\"/pictures/07python_basic/%E8%80%81%E5%BC%A0%E5%8E%BB%E4%B8%9C%E5%8C%97%E8%AE%BE%E8%AE%A101.jpg\" alt=\"老张去东北设计01\"></p>\n<p><img src=\"/pictures/07python_basic/%E8%80%81%E5%BC%A0%E5%8E%BB%E4%B8%9C%E5%8C%97%E8%AE%BE%E8%AE%A102.jpg\" alt=\"老张去东北设计02\"></p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    继承 -- 设计(2)</span></span><br><span class=\"line\"><span class=\"string\">    练习:exercise03.py</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 需求：老张开车去东北</span></span><br><span class=\"line\"><span class=\"comment\"># 变化：    坐飞机</span></span><br><span class=\"line\"><span class=\"comment\">#          坐火车</span></span><br><span class=\"line\"><span class=\"comment\">#          骑车</span></span><br><span class=\"line\"><span class=\"comment\">#          ...</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Vehicle</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        交通工具,代表所有具体的交通工具(火车/飞机..)</span></span><br><span class=\"line\"><span class=\"string\">        继承：隔离子类变化,将子类的共性(坐/飞..)提取到父类(运输)中.</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">transport</span>(<span class=\"params\">self, str_position</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 因为父类太过于抽象，所以写不出方法体,那就直接采用pass,这个价值就是约束子类要有这个行为。</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 客户端代码，用交通工具。</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, name</span>):</span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">go_to</span>(<span class=\"params\">self, vehicle, str_position</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 多态：调用父，执行子.</span></span><br><span class=\"line\">        <span class=\"comment\"># 调用的是交通工具的运输方法</span></span><br><span class=\"line\">        <span class=\"comment\"># 执行的是飞机的运输方法或者汽车的运输方法</span></span><br><span class=\"line\">        vehicle.transport(str_position)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># -------以上是架构师完成的--以下是程序员完成的-----</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Car</span>(<span class=\"title class_ inherited__\">Vehicle</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">transport</span>(<span class=\"params\">self, str_position</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;汽车开到&quot;</span>, str_position)</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Airplane</span>(<span class=\"title class_ inherited__\">Vehicle</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">transport</span>(<span class=\"params\">self, str_position</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;飞机飞到&quot;</span>, str_position)</span><br><span class=\"line\"></span><br><span class=\"line\">p01 = Person(<span class=\"string\">&quot;老张&quot;</span>)</span><br><span class=\"line\">c01 = Car()</span><br><span class=\"line\">a01 = Airplane()</span><br><span class=\"line\">p01.go_to(c01, <span class=\"string\">&quot;东北&quot;</span>)</span><br><span class=\"line\">p01.go_to(a01, <span class=\"string\">&quot;东北&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"组合复用原则（复用的最佳实践）\"><a href=\"#组合复用原则（复用的最佳实践）\" class=\"headerlink\" title=\"组合复用原则（复用的最佳实践）\"></a>组合复用原则（复用的最佳实践）</h3><p>Composite Reuse Principle</p>\n<ul>\n<li><p>如果仅仅为了代码复用优先选择组合复用，而非继承复用。</p>\n</li>\n<li><p>组合的耦合性相对继承低。</p>\n</li>\n<li><p>组合更加灵活，下面第一个图中，如果使用继承，那就成了人是手机，实际上是一种组合关系，人有一个手机；</p>\n</li>\n</ul>\n<p><img src=\"/pictures/07python_basic/%E7%BB%84%E5%90%88%E5%A4%8D%E7%94%A8.jpg\" alt=\"组合复用\"></p>\n<h3 id=\"里氏替换（继承后的重写，指导继承的设计）\"><a href=\"#里氏替换（继承后的重写，指导继承的设计）\" class=\"headerlink\" title=\"里氏替换（继承后的重写，指导继承的设计）\"></a>里氏替换（继承后的重写，指导继承的设计）</h3><p><strong>L</strong>iskov <strong>S</strong>ubstitution <strong>P</strong>rinciple</p>\n<p>父类出现的地方可以被子类替换，在替换后依然保持原功能。</p>\n<p>子类要拥有父类的所有功能。</p>\n<p>子类在重写父类方法时，尽量选择扩展重写，防止改变了功能。– 下面第46行就是扩展重写，使用父类中已经有的类容再做扩展即可，而不是子类自己又重新写一个。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    10:50 上课</span></span><br><span class=\"line\"><span class=\"string\">    定义员工管理器</span></span><br><span class=\"line\"><span class=\"string\">        1.管理所有员工</span></span><br><span class=\"line\"><span class=\"string\">        2. 计算所有员工工资</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    员工：</span></span><br><span class=\"line\"><span class=\"string\">        程序员：底薪 + 项目分红</span></span><br><span class=\"line\"><span class=\"string\">        销售：底薪 + 销售额 * 0.05</span></span><br><span class=\"line\"><span class=\"string\">        软件测试...</span></span><br><span class=\"line\"><span class=\"string\">        ...</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    要求：增加新岗位，员工管理器不变.</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">EmployeeManager</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.__employees = []</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">add_employee</span>(<span class=\"params\">self, emp</span>):</span><br><span class=\"line\">        self.__employees.append(emp)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">get_total_saraly</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        total_saraly = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> self.__employees:</span><br><span class=\"line\">            <span class=\"comment\"># 调用是抽象的员工类</span></span><br><span class=\"line\">            <span class=\"comment\"># 执行是具体的员工(程序员/销售..)</span></span><br><span class=\"line\">            total_saraly += item.calculate_salary()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> total_saraly</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Employee</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, base_salary</span>):</span><br><span class=\"line\">        self.base_salary = base_salary</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">calculate_salary</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.base_salary</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---------------------------------------</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Programmer</span>(<span class=\"title class_ inherited__\">Employee</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, base_salary, bonus</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__(base_salary)</span><br><span class=\"line\">        self.bonus = bonus</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">calculate_salary</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"comment\"># return self.base_salary + self.bonus</span></span><br><span class=\"line\">        <span class=\"comment\"># 扩展重写</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">super</span>().calculate_salary()+ self.bonus</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Salesmen</span>(<span class=\"title class_ inherited__\">Employee</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, base_salary, sale_value</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__(base_salary)</span><br><span class=\"line\">        self.sale_value = sale_value</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">calculate_salary</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.base_salary + self.sale_value * <span class=\"number\">0.05</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 测试</span></span><br><span class=\"line\">manager = EmployeeManager()</span><br><span class=\"line\">manager.add_employee(Programmer(<span class=\"number\">200000</span>,<span class=\"number\">500</span>))</span><br><span class=\"line\">manager.add_employee(Salesmen(<span class=\"number\">2000</span>,<span class=\"number\">1000</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(manager.get_total_saraly())</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"迪米特法则（类与类交互的原则）\"><a href=\"#迪米特法则（类与类交互的原则）\" class=\"headerlink\" title=\"迪米特法则（类与类交互的原则）\"></a>迪米特法则（类与类交互的原则）</h3><p>Law of Demeter</p>\n<p>不要和陌生人说话。</p>\n<p>类与类交互时，在满足功能要求的基础上，传递的数据量越少越好。因为这样可能降低耦合度。–要调用其他类的时候，如果只使用几个方法，那就只调用其中的这几个方法即可，这样就可以先抽象一下，抽象一个父类出来，当然，这种情况也可能出现过度设计。</p>\n<h3 id=\"综合练习\"><a href=\"#综合练习\" class=\"headerlink\" title=\"综合练习\"></a>综合练习</h3><h4 id=\"需求信息\"><a href=\"#需求信息\" class=\"headerlink\" title=\"需求信息\"></a>需求信息</h4><table>\n<thead>\n<tr>\n<th>职业</th>\n<th>名称</th>\n<th>分类</th>\n<th>法力消耗</th>\n<th>冷却</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>少林</td>\n<td>少林普攻</td>\n<td>瞬发技能</td>\n<td>无</td>\n<td>无</td>\n<td>攻击单个近身敌人，对目标每秒造成100%外功攻击伤害。自动连续攻击</td>\n</tr>\n<tr>\n<td>少林</td>\n<td>罗汉棍</td>\n<td>瞬发技能</td>\n<td>10法力</td>\n<td>2秒</td>\n<td>达摩祖师所创棍法，刚猛无敌。攻击单个近身敌人，对目标造成200%外功攻击伤害</td>\n</tr>\n<tr>\n<td>少林</td>\n<td>摩诃无量</td>\n<td>瞬发技能</td>\n<td>50法力</td>\n<td>8秒</td>\n<td>少林七十二绝技之一，瞬间缩短和敌手的距离。像旋风一样挥舞武器，攻击以自身为中心半径4码范围内 的所有敌人，对每个目标造成每秒217%的外功攻击伤害。攻击持续3.9秒。</td>\n</tr>\n<tr>\n<td>少林</td>\n<td>迦叶功</td>\n<td>瞬发技能</td>\n<td>20法力</td>\n<td>5秒</td>\n<td>少林七十二绝技之一，以一条齐眉棍幻出千万棍影。向单个敌人冲锋并进行凶猛攻击，对目标造成150%外功攻击伤害</td>\n</tr>\n<tr>\n<td>少林</td>\n<td>韦陀杵</td>\n<td>瞬发技能</td>\n<td>20法力</td>\n<td>10秒</td>\n<td>少林七十二绝技之一，与大力金刚掌齐名，以浑厚内力重创敌人。重击地面，使4码内所有敌人防御降低10%，并眩晕，持续2.5秒。</td>\n</tr>\n<tr>\n<td>少林</td>\n<td>金钟罩</td>\n<td>瞬发技能</td>\n<td>20法力</td>\n<td>15秒</td>\n<td>少林七十二绝技之一，以丹田之气发出狮吼震慑敌人胆魄。开启盾墙，所有敌人对自身造成的伤害减免20%，持续10秒。</td>\n</tr>\n<tr>\n<td>少林</td>\n<td>狮吼功</td>\n<td>瞬发技能</td>\n<td>40法力</td>\n<td>20秒</td>\n<td>少林七十二绝技之一，刀枪不入。吼叫，嘲讽你附近8码范围内所有敌人，持续5秒。使你和附近8码内所有队友攻击提升15%，持续10秒。并使附近8码内所有敌人伤害降低10%，持续5秒。</td>\n</tr>\n<tr>\n<td>少林</td>\n<td>金刚伏魔</td>\n<td>瞬发技能</td>\n<td>100%战意</td>\n<td>20秒</td>\n<td>以易筋经催动少林绝技的终极奥义嘲讽全屏范围内所有敌人，挥舞武器攻击地，对全屏范围内所有敌人造成100%血上限伤害。对BOSS和PVP战斗无效。</td>\n</tr>\n<tr>\n<td>逍遥</td>\n<td>逍遥普攻</td>\n<td>瞬发技能</td>\n<td></td>\n<td></td>\n<td>攻击6码范围内的单个敌人，对目标每秒造成100%内功攻击伤害。自动连续攻击</td>\n</tr>\n<tr>\n<td>逍遥</td>\n<td>小无相功</td>\n<td>瞬发技能</td>\n<td>10法力</td>\n<td>2秒</td>\n<td>逍遥派无上内功，鸠摩智曾以此内功催发出少林绝技拈花指来骗取六脉神剑释放电弧，击中敌人造 成200%的内功攻击伤害。</td>\n</tr>\n<tr>\n<td>逍遥</td>\n<td>祝融掌</td>\n<td>瞬发技能</td>\n<td></td>\n<td></td>\n<td>祝融掌：出自庄子“逍遥游”，将敌方的内力化掉，并转化吸收内力汇聚于气海。喷射一条火焰攻击敌人， 每击造成每秒300%的内功攻击伤害，持续3.9秒。并使命中目标减速30%，持续3秒。</td>\n</tr>\n<tr>\n<td>逍遥</td>\n<td>北冥神功</td>\n<td>瞬发技能</td>\n<td></td>\n<td></td>\n<td>北冥神功：李秋水除白虹掌力的另一绝学，将内力汇聚一点急剧升温后劈出。对单个目标造成120%的内功攻击 伤害，并使敌人冻结3秒</td>\n</tr>\n<tr>\n<td>逍遥</td>\n<td>寒霜怒雪</td>\n<td>瞬发技能</td>\n<td></td>\n<td></td>\n<td>：以易经八八六十四卦为基础。按特定顺序方位进行，步法飘忽灵动。天降寒冰轰击目标区域范围内 所有敌人，造成每秒125%的内功攻击伤害，持续5秒。并使命中目标减速80%，持续5秒</td>\n</tr>\n<tr>\n<td>逍遥</td>\n<td>凌波微步</td>\n<td>瞬发技能</td>\n<td></td>\n<td></td>\n<td>：内力凝出的冰甲，聪哑老人苏星河曾靠此招躲过丁春秋的化功大法。将你瞬间传送到前方7码的目标位置</td>\n</tr>\n<tr>\n<td>逍遥</td>\n<td>毁天灭地</td>\n<td>瞬发技能</td>\n<td></td>\n<td></td>\n<td>：凝聚北冥真气释放的终极招式嘲讽全屏范围内所有敌人，召唤一颗巨大的陨石从天而降，引起全屏 范围内地面灼烧，对全屏范围内所有敌人造成100%血上限伤害。对BOSS和PVP战斗无效</td>\n</tr>\n<tr>\n<td>丐帮</td>\n<td>丐帮普攻</td>\n<td>瞬发技能</td>\n<td>无</td>\n<td>0秒</td>\n<td>攻击单个近身敌人，每秒造成100%内功攻击伤害，自动连续攻击</td>\n</tr>\n<tr>\n<td>丐帮</td>\n<td>飞龙在天</td>\n<td>瞬发技能</td>\n<td>100战意</td>\n<td>20秒</td>\n<td>降龙十八掌第二式，跃起半空，居高下击，威力奇大，嘲讽全屏范围内所有敌人，造成等同于其生命上限的伤 害，对BOSS和玩家无效</td>\n</tr>\n<tr>\n<td>丐帮</td>\n<td>神龙摆尾</td>\n<td>瞬发技能</td>\n<td>10法力</td>\n<td>2秒</td>\n<td>降龙十八掌第十八式，劲道奇猛，无所不辞，攻击单个近身敌人，立即造成200%内功攻击伤害，触发“御龙” 效果，使自身暴击率提升5%，持续6秒，“御龙”效果最多可叠加3次</td>\n</tr>\n<tr>\n<td>丐帮</td>\n<td>天下无狗</td>\n<td>瞬发技能</td>\n<td>50法力</td>\n<td>8秒</td>\n<td>打狗棒法的最精妙招式，八方皆棒，劲力甚广，挥动武器攻击4次，每击都会对前方5步半圆内所有敌人施加 “打狗”效果，“打狗”会在3秒内持续造成总共270%内功攻击伤害，并减速50%持续3秒</td>\n</tr>\n<tr>\n<td>丐帮</td>\n<td>醉饮江湖</td>\n<td>瞬发技能</td>\n<td>20法力</td>\n<td>5秒</td>\n<td>气运丹田，以雄厚内力将烈酒逼出，控人心窍，眩晕7步范围内单个敌人1秒，将其迅速拉至面前</td>\n</tr>\n<tr>\n<td>丐帮</td>\n<td>擒龙控鹤</td>\n<td>瞬发技能</td>\n<td>20法力</td>\n<td>10秒</td>\n<td>丐帮秘传擒拿功夫，使人失去反击之力，迷惑4步范围内所有敌人，使其无法使用技能，持续2.5秒</td>\n</tr>\n<tr>\n<td>丐帮</td>\n<td>密云不雨</td>\n<td>瞬发技能</td>\n<td>20法力</td>\n<td>15秒</td>\n<td>降龙十八掌第十三式，韬光养晦，弃攻击而全力守御，将自身50%攻击转化为防御，持续3秒</td>\n</tr>\n<tr>\n<td>丐帮</td>\n<td>亢龙有悔</td>\n<td>瞬发技能</td>\n<td>40法力</td>\n<td>20秒</td>\n<td>降龙十八掌第十一式，从至刚之中生出至柔，有余不尽，震击5步范围内所有敌人，持续造成每秒200%内功功击伤害，持续5秒</td>\n</tr>\n</tbody></table>\n<h4 id=\"设计图\"><a href=\"#设计图\" class=\"headerlink\" title=\"设计图\"></a>设计图</h4><p>可能首先想到的是下面这种方式：（不妥当）</p>\n<p>换一种思路：</p>\n<ul>\n<li><p>文件的变化不影响功能；</p>\n</li>\n<li><p>新增新技能不修改代码；</p>\n</li>\n<li><p>某个算法改变，只修改某个类，其他类不受影响；</p>\n</li>\n</ul>\n<p><img src=\"/pictures/07python_basic/%E6%8A%80%E8%83%BD%E7%B3%BB%E7%BB%9F.jpg\" alt=\"技能系统\"></p>\n<h4 id=\"编码-1\"><a href=\"#编码-1\" class=\"headerlink\" title=\"编码\"></a>编码</h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    技能系统</span></span><br><span class=\"line\"><span class=\"string\">    练习:指出下列代码哪里体现了三大特征/六大原则。</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    三大特征：</span></span><br><span class=\"line\"><span class=\"string\">        封装：将每种影响效果单独做成类.</span></span><br><span class=\"line\"><span class=\"string\">        继承：将各种影响效果抽象为SkillImpactEffect</span></span><br><span class=\"line\"><span class=\"string\">              隔离技能释放器与各种影响效果的变化。</span></span><br><span class=\"line\"><span class=\"string\">        多态：各种影响效果在重写SkillImpactEffect类中impact方法.</span></span><br><span class=\"line\"><span class=\"string\">             释放器调用SkillImpactEffect执行各种效果。</span></span><br><span class=\"line\"><span class=\"string\">    六大原则：</span></span><br><span class=\"line\"><span class=\"string\">        开闭原则：增加新(技能/影响效果)，不修改释放器代码.</span></span><br><span class=\"line\"><span class=\"string\">        单一职责：SkillImpactEffect 负责 隔离变化</span></span><br><span class=\"line\"><span class=\"string\">                 DamageEffect.. 负责定义具体的效果</span></span><br><span class=\"line\"><span class=\"string\">                 SkillDeployer 负责释放技能</span></span><br><span class=\"line\"><span class=\"string\">        依赖倒置：(1)释放器没有调用具体影响效果，而是调用SkillImpactEffect。</span></span><br><span class=\"line\"><span class=\"string\">                (2)抽象的不依赖于具体的。</span></span><br><span class=\"line\"><span class=\"string\">                  具体做法：释放器通过&quot;依赖注入&quot;(读取配置文件，创建影响效果对象),</span></span><br><span class=\"line\"><span class=\"string\">                          使释放器不依赖具体影响效果.</span></span><br><span class=\"line\"><span class=\"string\">        组合复用：释放器与影响效果是组合关系.</span></span><br><span class=\"line\"><span class=\"string\">                可以灵活的选择各种影响效果。</span></span><br><span class=\"line\"><span class=\"string\">        里氏替换：(1)父类出现的地方可以被子类替换</span></span><br><span class=\"line\"><span class=\"string\">                 释放器存储影响效果列表,实际可以将各种子类存入进来.</span></span><br><span class=\"line\"><span class=\"string\">        迪米特法则：所有类之间的耦合度都很低.</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SkillImpactEffect</span>:  <span class=\"comment\"># 负责 隔离变化</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        技能影响效果</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">impact</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">raise</span> NotImplementedError()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DamageEffect</span>(<span class=\"title class_ inherited__\">SkillImpactEffect</span>): <span class=\"comment\">#负责定义具体的效果</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        伤害生命效果</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, value</span>):</span><br><span class=\"line\">        self.value = value</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">impact</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;扣你%d血&quot;</span> % self.value)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">LowerDeffenseEffect</span>(<span class=\"title class_ inherited__\">SkillImpactEffect</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        降低防御力</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, value, time</span>):</span><br><span class=\"line\">        self.value = value</span><br><span class=\"line\">        self.time = time</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">impact</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;降低%d防御力,持续%d秒&quot;</span> % (self.value, self.time))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DizzinessEffect</span>(<span class=\"title class_ inherited__\">SkillImpactEffect</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        眩晕</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, time</span>):</span><br><span class=\"line\">        self.time = time</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">impact</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;眩晕%d秒&quot;</span> % self.time)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SkillDeployer</span>: <span class=\"comment\">#负责释放技能</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        技能释放器</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, name</span>):</span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\">        <span class=\"comment\"># 加载配置文件 &#123;技能名称:[效果1,效果2...],...&#125;</span></span><br><span class=\"line\">        self.__dict_skill_config = self.__load_config_file()</span><br><span class=\"line\">        <span class=\"comment\"># 创建效果对象</span></span><br><span class=\"line\">        self.__effect_objects = self.__create_effect_objects()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__load_config_file</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 加载文件.....</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;降龙十八掌&quot;</span>: [<span class=\"string\">&quot;DamageEffect(200)&quot;</span>, <span class=\"string\">&quot;LowerDeffenseEffect(-10,5)&quot;</span>, <span class=\"string\">&quot;DizzinessEffect(6)&quot;</span>],</span><br><span class=\"line\">            <span class=\"string\">&quot;六脉神剑&quot;</span>: [<span class=\"string\">&quot;DamageEffect(100)&quot;</span>, <span class=\"string\">&quot;DizzinessEffect(6)&quot;</span>]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__create_effect_objects</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 根据name创建相应的技能对象</span></span><br><span class=\"line\">        <span class=\"comment\">#    降龙十八掌 -&gt; [&quot;技能1&quot;，&quot;技能2&quot;]</span></span><br><span class=\"line\">        list_effect_name = self.__dict_skill_config[self.name]</span><br><span class=\"line\">        list_effect_object = []</span><br><span class=\"line\">        <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> list_effect_name:</span><br><span class=\"line\">            <span class=\"comment\"># &quot;技能1&quot; --&gt; 技能1的对象</span></span><br><span class=\"line\">            <span class=\"comment\"># 对象 = eval(&quot;DamageEffect(200)&quot;)</span></span><br><span class=\"line\">            effect_object = <span class=\"built_in\">eval</span>(item)</span><br><span class=\"line\">            list_effect_object.append(effect_object)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> list_effect_object</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 生成技能(执行效果)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">generate_skill</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(self.name, <span class=\"string\">&quot;技能释放啦&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> self.__effect_objects:</span><br><span class=\"line\">            <span class=\"comment\"># 调用父类，执行子类.</span></span><br><span class=\"line\">            item.impact()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">xlsbz = SkillDeployer(<span class=\"string\">&quot;降龙十八掌&quot;</span>)</span><br><span class=\"line\">xlsbz.generate_skill()</span><br><span class=\"line\"></span><br><span class=\"line\">lmsj = SkillDeployer(<span class=\"string\">&quot;六脉神剑&quot;</span>)</span><br><span class=\"line\">lmsj.generate_skill()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"程序结构\"><a href=\"#程序结构\" class=\"headerlink\" title=\"程序结构\"></a>程序结构</h1><h2 id=\"模块-Module\"><a href=\"#模块-Module\" class=\"headerlink\" title=\"模块 Module\"></a>模块 Module</h2><h3 id=\"定义-9\"><a href=\"#定义-9\" class=\"headerlink\" title=\"定义\"></a>定义</h3><blockquote>\n<p>包含一系列数据、函数、类的文件，通常以.py结尾。</p>\n</blockquote>\n<h3 id=\"作用-3\"><a href=\"#作用-3\" class=\"headerlink\" title=\"作用\"></a>作用</h3><blockquote>\n<p>让一些相关的数据，函数，类有逻辑的组织在一起，使逻辑结构更加清晰。</p>\n</blockquote>\n<p>有利于多人合作开发。</p>\n<h3 id=\"导入\"><a href=\"#导入\" class=\"headerlink\" title=\"导入\"></a>导入</h3><h4 id=\"import\"><a href=\"#import\" class=\"headerlink\" title=\"import\"></a><code>import</code></h4><ol>\n<li>语法：</li>\n</ol>\n<blockquote>\n<p>import 模块名</p>\n</blockquote>\n<p>import 模块名 as 别名</p>\n<ol start=\"2\">\n<li><p>作用：将某模块整体导入到当前模块中</p>\n</li>\n<li><p>使用：模块名.成员</p>\n</li>\n</ol>\n<h4 id=\"from-import\"><a href=\"#from-import\" class=\"headerlink\" title=\"from import\"></a><code>from import</code></h4><ol start=\"4\">\n<li>语法：</li>\n</ol>\n<blockquote>\n<p>from 模块名 import 成员名[ as 别名1]</p>\n</blockquote>\n<ol start=\"5\">\n<li><p>作用：将模块内的一个或多个成员导入到当前模块的作用域中。</p>\n</li>\n<li><p>使用：直接使用成员名</p>\n</li>\n</ol>\n<h4 id=\"from-import-1\"><a href=\"#from-import-1\" class=\"headerlink\" title=\"from import \\*\"></a><code>from import \\*</code></h4><ol start=\"7\">\n<li><p>语法：from 模块名 import *</p>\n</li>\n<li><p>作用：将某模块的所有成员导入到当前模块。</p>\n</li>\n<li><p><strong>模块中以下划线(_)开头的属性，不会被导入，通常称这些成员为隐藏成员。</strong>–直接通过import  * 的时候就不会导入隐藏成员，但是通过from  XX import _func   这种是可以的，毕竟你指名道姓就要用这个，也是可以的。</p>\n</li>\n<li><p><strong>需要注意，导入进来的成员不要和当前模块中的成员冲突</strong>，也要防止与其他模块之间冲突，如果有冲突的也可以用as来定义别名</p>\n</li>\n</ol>\n<h3 id=\"模块变量\"><a href=\"#模块变量\" class=\"headerlink\" title=\"模块变量\"></a>模块变量</h3><p>**__all__变量：定义可导出成员，仅对from xx import <em>语句有效。</em>*</p>\n<p>__doc__变量：文档字符串。</p>\n<p>__file__变量：模块对应的文件路径名。</p>\n<p><strong>__name__变量：模块自身名字，可以判断是否为主模块。</strong></p>\n<p>当此模块作为主模块(第一个运行的模块)运行时，__name__绑定’<strong>main</strong>‘，不是主模块，而是被其它模块导入时,存储模块名。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    模块相关概念</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># from module01 import *</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># fun01()</span></span><br><span class=\"line\"><span class=\"comment\"># # 1. 隐藏成员，不能通过from 模块 import × 形式导入</span></span><br><span class=\"line\"><span class=\"comment\"># _fun02()</span></span><br><span class=\"line\"><span class=\"comment\"># from module01 import _fun02</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># # 隐藏成员，可以通过其他形式调用</span></span><br><span class=\"line\"><span class=\"comment\"># _fun02()</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2. 通过__all__指定可导出成员</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> module01 <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">MyClass.fun03()</span><br><span class=\"line\">_fun02()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3.可以通过该属性，查看文档注释</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(__doc__)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 4.返回当前模块的绝对路径（从系统根目录开始计算的）</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(__file__)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 5.</span></span><br><span class=\"line\"><span class=\"comment\"># 现象：</span></span><br><span class=\"line\"><span class=\"comment\"># 主模块叫做：__main__</span></span><br><span class=\"line\"><span class=\"comment\"># 非主模块叫做：真名</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(__name__)</span><br><span class=\"line\"><span class=\"comment\"># 作用1： 不是主模块不执行。(测试代码)</span></span><br><span class=\"line\"><span class=\"comment\"># 作用2： 只有是主模块才执行。(主模块代码)</span></span><br><span class=\"line\"><span class=\"comment\"># 使用：</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"加载过程\"><a href=\"#加载过程\" class=\"headerlink\" title=\"加载过程\"></a>加载过程</h3><blockquote>\n<p>在模块导入时，模块的所有语句会执行。</p>\n</blockquote>\n<p>如果一个模块已经导入，则再次导入时不会重新执行模块内的语句。</p>\n<h3 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h3><ol start=\"11\">\n<li><p>内置模块(builtins)，在解析器的内部可以直接使用。</p>\n</li>\n<li><p>标准库模块，安装Python时已安装且可直接使用。</p>\n</li>\n<li><p>第三方模块（通常为开源），需要自己安装。</p>\n</li>\n<li><p>用户自己编写的模块（可以作为其他人的第三方模块）</p>\n</li>\n</ol>\n<h2 id=\"包package\"><a href=\"#包package\" class=\"headerlink\" title=\"包package\"></a>包package</h2><h3 id=\"定义-10\"><a href=\"#定义-10\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>将模块以文件夹的形式进行分组管理。</p>\n<h3 id=\"作用-4\"><a href=\"#作用-4\" class=\"headerlink\" title=\"作用\"></a>作用</h3><blockquote>\n<p>让一些相关的模块组织在一起，使逻辑结构更加清晰。</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    包</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">python程序结构</span></span><br><span class=\"line\"><span class=\"string\">    文件夹  ---- 项目根目录</span></span><br><span class=\"line\"><span class=\"string\">        包</span></span><br><span class=\"line\"><span class=\"string\">            模块</span></span><br><span class=\"line\"><span class=\"string\">                类</span></span><br><span class=\"line\"><span class=\"string\">                    函数</span></span><br><span class=\"line\"><span class=\"string\">                        语句</span></span><br><span class=\"line\"><span class=\"string\">    练习：my_project</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># # form 包.模块 import 成员</span></span><br><span class=\"line\"><span class=\"comment\"># from package01.module_a import fun01</span></span><br><span class=\"line\"><span class=\"comment\"># fun01()</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># form 包.包.模块 import 成员</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> package01.package02.module_b <span class=\"keyword\">import</span> fun02</span><br><span class=\"line\">fun02()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># import package01.module_a as pm</span></span><br><span class=\"line\"><span class=\"comment\"># pm.fun01()</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"导入-1\"><a href=\"#导入-1\" class=\"headerlink\" title=\"导入\"></a>导入</h3><blockquote>\n<p>import 包名.模块名 [as 模块新名]</p>\n</blockquote>\n<p>import 包名.子包名.模块名 [as 模块新名]</p>\n<p>from 包名 import 模块名 [as 模块新名]</p>\n<p>from 包名.子包名 import 模块名 [as 模块新名]</p>\n<p>from 包名.子包名.模块名 import 成员名 [as 属性新名]</p>\n<h1 id=\"导入包内的所有子包和模块\"><a href=\"#导入包内的所有子包和模块\" class=\"headerlink\" title=\"导入包内的所有子包和模块\"></a>导入包内的所有子包和模块</h1><p>from 包名 import *</p>\n<p>from 包名.模块名 import *</p>\n<h3 id=\"init-py-文件\"><a href=\"#init-py-文件\" class=\"headerlink\" title=\"init.py 文件\"></a><strong>init</strong>.py 文件</h3><blockquote>\n<p>是包内必须存在的文件</p>\n</blockquote>\n<p>会在包加载时被自动调用</p>\n<h4 id=\"all\"><a href=\"#all\" class=\"headerlink\" title=\"all\"></a><strong>all</strong></h4><p>记录from 包 import * 语句需要导入的模块</p>\n<p>案例：</p>\n<ol start=\"15\">\n<li>根据下列结构，创建包与模块。</li>\n</ol>\n<blockquote>\n<p>my_ project &#x2F;</p>\n</blockquote>\n<p>main.py</p>\n<p>common&#x2F;</p>\n<p><strong>init</strong>.py</p>\n<p>list_helper.py</p>\n<p>skill_system&#x2F;</p>\n<p><strong>init</strong>.py</p>\n<p>skill_deployer.py</p>\n<p>skill_manager.py</p>\n<ol start=\"16\">\n<li><p>在main.py中调用skill_manager.py中实例方法。</p>\n</li>\n<li><p>在skill_manager.py中调用skill_deployer.py中实例方法。</p>\n</li>\n<li><p>在skill_deployer.py中调用list_helper.py中类方法。</p>\n</li>\n</ol>\n<h3 id=\"搜索顺序\"><a href=\"#搜索顺序\" class=\"headerlink\" title=\"搜索顺序\"></a>搜索顺序</h3><blockquote>\n<p>内置模块</p>\n</blockquote>\n<p>sys.path 提供的路径</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;common -- list_helper&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"comment\"># 如果不再pycharm中运行当前模块，则导包失败.</span></span><br><span class=\"line\"><span class=\"comment\"># 将项目根目录加入path中，导包才会成功.</span></span><br><span class=\"line\">sys.path.append(<span class=\"string\">&quot;/home/tarena/1905/month01/code/day15/my_project&quot;</span>)  <span class=\"comment\"># 在导包失败的时候，可以手动添加项目根目录添加到路径列表中</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(sys.path)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> main <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">main_fun01()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"异常处理Error\"><a href=\"#异常处理Error\" class=\"headerlink\" title=\"异常处理Error\"></a>异常处理Error</h1><h2 id=\"异常\"><a href=\"#异常\" class=\"headerlink\" title=\"异常\"></a>异常</h2><ol start=\"19\">\n<li><p>定义：运行时检测到的错误。</p>\n</li>\n<li><p>现象：当异常发生时，程序不会再向下执行，而转到函数的调用语句。</p>\n</li>\n<li><p>常见异常类型：</p>\n</li>\n</ol>\n<blockquote>\n<p>– 名称异常(NameError)：变量未定义。</p>\n</blockquote>\n<p>– 类型异常(TypeError)：不同类型数据进行运算。</p>\n<p>– 索引异常(IndexError)：超出索引范围。</p>\n<p>– 属性异常(AttributeError)：对象没有对应名称的属性。</p>\n<p>– 键异常(KeyError)：没有对应名称的键。</p>\n<p>– 为实现异常(NotImplementedError)：尚未实现的方法。</p>\n<p>– 异常基类Exception。</p>\n<h2 id=\"处理\"><a href=\"#处理\" class=\"headerlink\" title=\"处理\"></a>处理</h2><ol start=\"22\">\n<li>语法：</li>\n</ol>\n<blockquote>\n<p>try:</p>\n</blockquote>\n<p>可能触发异常的语句</p>\n<p>except 错误类型1 [as 变量1]：</p>\n<p>处理语句1</p>\n<p>except 错误类型2 [as 变量2]：</p>\n<p>处理语句2</p>\n<p>except Exception [as 变量3]：</p>\n<p>不是以上错误类型的处理语句</p>\n<p>else:</p>\n<p>未发生异常的语句</p>\n<p>finally:</p>\n<p>无论是否发生异常的语句</p>\n<ol start=\"23\">\n<li><p>作用：将程序由异常状态转为正常流程。</p>\n</li>\n<li><p>说明：</p>\n</li>\n</ol>\n<blockquote>\n<p>as 子句是用于绑定错误对象的变量，可以省略</p>\n</blockquote>\n<p>except子句可以有一个或多个，用来捕获某种类型的错误。</p>\n<p>else子句最多只能有一个。</p>\n<p>finally子句最多只能有一个，如果没有except子句，必须存在。</p>\n<p>如果异常没有被捕获到，会向上层(调用处)继续传递，直到程序终止运行。</p>\n<h2 id=\"raise-语句\"><a href=\"#raise-语句\" class=\"headerlink\" title=\"raise 语句\"></a>raise 语句</h2><ol start=\"25\">\n<li><p>作用：抛出一个错误，让程序进入异常状态。</p>\n</li>\n<li><p>目的：在程序调用层数较深时，向主调函数传递错误信息要层层return 比较麻烦，所以人为抛出异常，可以直接传递错误信息。。</p>\n</li>\n</ol>\n<h2 id=\"自定义异常\"><a href=\"#自定义异常\" class=\"headerlink\" title=\"自定义异常\"></a>自定义异常</h2><ol start=\"27\">\n<li>定义：</li>\n</ol>\n<blockquote>\n<p>class 类名Error(Exception):</p>\n</blockquote>\n<p>def <strong>init</strong>(self,参数):</p>\n<p>super().<strong>init</strong>(参数)</p>\n<p>self.数据 &#x3D; 参数</p>\n<ol start=\"28\">\n<li>调用：</li>\n</ol>\n<blockquote>\n<p>try:</p>\n</blockquote>\n<p>….</p>\n<p>raise 自定义异常类名(参数)</p>\n<p>….</p>\n<p>except 定义异常类 as 变量名:</p>\n<p>变量名.数据</p>\n<ol start=\"29\">\n<li>作用：封装错误信息</li>\n</ol>\n<h4 id=\"综合使用异常处理练习：\"><a href=\"#综合使用异常处理练习：\" class=\"headerlink\" title=\"综合使用异常处理练习：\"></a>综合使用异常处理练习：</h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    界面代码</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> bll <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> model <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">StudentManagerView</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    学生管理器视图</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.__manager = StudentManagerController()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__display_menu</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;1)添加学生&quot;</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;2)显示学生&quot;</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;3)删除学生&quot;</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;4)修改学生&quot;</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;5)按照成绩升序显示学生&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__select_menu</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        item = <span class=\"built_in\">input</span>(<span class=\"string\">&quot;请输入：&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> item == <span class=\"string\">&quot;1&quot;</span>:</span><br><span class=\"line\">            self.__input_student()</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> item == <span class=\"string\">&quot;2&quot;</span>:</span><br><span class=\"line\">            self.__output_students(self.__manager.stu_list)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> item == <span class=\"string\">&quot;3&quot;</span>:</span><br><span class=\"line\">            self.__delete_student()</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> item == <span class=\"string\">&quot;4&quot;</span>:</span><br><span class=\"line\">            self.__modify_student()</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> item == <span class=\"string\">&quot;5&quot;</span>:</span><br><span class=\"line\">            self.__output_student_by_score()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">main</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">            界面视图入口</span></span><br><span class=\"line\"><span class=\"string\">        :return:</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">            self.__display_menu()</span><br><span class=\"line\">            self.__select_menu()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__input_number</span>(<span class=\"params\">self,message</span>):</span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">            <span class=\"keyword\">try</span>:</span><br><span class=\"line\">                number = <span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>(message))</span><br><span class=\"line\">                <span class=\"keyword\">return</span> number</span><br><span class=\"line\">            <span class=\"keyword\">except</span>:</span><br><span class=\"line\">                <span class=\"built_in\">print</span>(<span class=\"string\">&quot;输入有误&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__input_student</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        name = <span class=\"built_in\">input</span>(<span class=\"string\">&quot;请输入姓名：&quot;</span>)</span><br><span class=\"line\">        <span class=\"comment\"># age = int(input(&quot;请输入年龄：&quot;))</span></span><br><span class=\"line\">        <span class=\"comment\"># score = int(input(&quot;请输入成绩：&quot;))</span></span><br><span class=\"line\">        age = self.__input_number(<span class=\"string\">&quot;请输入年龄：&quot;</span>)</span><br><span class=\"line\">        score = self.__input_number(<span class=\"string\">&quot;请输入成绩：&quot;</span>)</span><br><span class=\"line\">        stu = StudentModel(name, age, score)</span><br><span class=\"line\">        self.__manager.add_student(stu)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__output_students</span>(<span class=\"params\">self, list_output</span>):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> list_output:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(item.<span class=\"built_in\">id</span>, item.name, item.atk, item.score)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__delete_student</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"comment\"># id = int(input(&quot;请输入编号：&quot;))</span></span><br><span class=\"line\">        <span class=\"built_in\">id</span> = self.__input_number(<span class=\"string\">&quot;请输入编号：&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.__manager.remove_student(<span class=\"built_in\">id</span>):</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;删除成功&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;删除失败&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__modify_student</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        stu = StudentModel()</span><br><span class=\"line\">        <span class=\"comment\"># stu.id = int(input(&quot;请输入需要修改的学生编号:&quot;))</span></span><br><span class=\"line\">        stu.<span class=\"built_in\">id</span> = self.__input_number(<span class=\"string\">&quot;请输入需要修改的学生编号:&quot;</span>)</span><br><span class=\"line\">        stu.name = <span class=\"built_in\">input</span>(<span class=\"string\">&quot;请输入新的学生名称：&quot;</span>)</span><br><span class=\"line\">        <span class=\"comment\"># stu.atk = int(input(&quot;请输入新的学生年龄：&quot;))</span></span><br><span class=\"line\">        <span class=\"comment\"># stu.score = int(input(&quot;请输入新的学生成绩：&quot;))</span></span><br><span class=\"line\">        stu.atk = self.__input_number(<span class=\"string\">&quot;请输入新的学生年龄:&quot;</span>)</span><br><span class=\"line\">        stu.score = self.__input_number(<span class=\"string\">&quot;请输入新的学生成绩：&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.__manager.update_student(stu):</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;修改成功&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;修改失败&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__output_student_by_score</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.__manager.order_by_score()</span><br><span class=\"line\">        self.__output_students(self.__manager.stu_list)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"迭代\"><a href=\"#迭代\" class=\"headerlink\" title=\"迭代\"></a>迭代</h1><p>每一次对过程的重复称为一次”迭代”，而每一次迭代得到的结果会作为下一次迭代的初始值。例如：循环获取容器中的元素。</p>\n<h2 id=\"可迭代对象iterable\"><a href=\"#可迭代对象iterable\" class=\"headerlink\" title=\"可迭代对象iterable\"></a>可迭代对象iterable</h2><ol start=\"30\">\n<li><p>定义：具有__iter__函数的对象，可以返回迭代器对象。</p>\n</li>\n<li><p>语法</p>\n</li>\n</ol>\n<blockquote>\n<p>– 创建：</p>\n</blockquote>\n<p>class 可迭代对象名称:</p>\n<p>  def <strong>iter</strong>(self):</p>\n<p>      return 迭代器</p>\n<p>– 使用：</p>\n<p>for 变量名 in 可迭代对象:</p>\n<p>语句</p>\n<ol start=\"32\">\n<li>原理：</li>\n</ol>\n<blockquote>\n<p>迭代器 &#x3D; 可迭代对象.<strong>iter</strong>()</p>\n</blockquote>\n<p>while True:</p>\n<p>try:</p>\n<p>print(迭代器.<strong>next</strong>())</p>\n<p>except StopIteration:</p>\n<p>break</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 练习2:不使用for，获取字典所有数据。</span></span><br><span class=\"line\"><span class=\"comment\">#  &#123;&quot;铁扇公主&quot;:101,&quot;铁锤公主&quot;:102,“扳手王子”:103&#125;</span></span><br><span class=\"line\"><span class=\"comment\"># 10:40</span></span><br><span class=\"line\"></span><br><span class=\"line\">dict01 = &#123;<span class=\"string\">&quot;铁扇公主&quot;</span>: <span class=\"number\">101</span>, <span class=\"string\">&quot;铁锤公主&quot;</span>: <span class=\"number\">102</span>, <span class=\"string\">&quot;扳手王子&quot;</span>: <span class=\"number\">103</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">iterator = dict01.__iter__()  <span class=\"comment\"># 存的就是迭代器，迭代器就有__next__ 方法</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        key = iterator.__next__()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(key, dict01[key])</span><br><span class=\"line\">    <span class=\"keyword\">except</span> StopIteration:  <span class=\"comment\"># 取不到为止，就会抛出StopIteration异常，所以捕获后退出循环即可</span></span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"迭代器对象iterator\"><a href=\"#迭代器对象iterator\" class=\"headerlink\" title=\"迭代器对象iterator\"></a>迭代器对象iterator</h2><ol start=\"33\">\n<li><p>定义：可以被next()函数调用并返回下一个值的对象。</p>\n</li>\n<li><p>语法</p>\n</li>\n</ol>\n<blockquote>\n<p>class 迭代器类名:</p>\n</blockquote>\n<p>def <strong>init</strong>(self, 聚合对象):</p>\n<p>self.<strong>聚合对象</strong>&#x3D; 聚合对象</p>\n<p>def <strong>next</strong>(self):</p>\n<p>if 没有元素:</p>\n<p>raise StopIteration</p>\n<p>return 聚合对象元素</p>\n<p><img src=\"/pictures/07python_basic/%E8%BF%AD%E4%BB%A3%E5%99%A8%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3.jpg\" alt=\"迭代器设计思想\"></p>\n<p>手写迭代器对象：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    迭代器</span></span><br><span class=\"line\"><span class=\"string\">    练习:exercise03.py</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Skill</span>:</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SkillManager</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        技能管理器  可迭代对象</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.__skills = []</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">add_skill</span>(<span class=\"params\">self, skill</span>):</span><br><span class=\"line\">        self.__skills.append(skill)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__iter__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 创建一个迭代器对象,并传递需要迭代的数据。</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> SkillIterator(self.__skills)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SkillIterator</span>:  <span class=\"comment\"># 创建一个迭代器，其需要有一个__next__方法和一个取值到最后抛出异常的一个方法</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        技能迭代器</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, target</span>):</span><br><span class=\"line\">        self.__target = target</span><br><span class=\"line\">        self.__index = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__next__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 如果没有数据了，则抛出异常</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.__index &gt; <span class=\"built_in\">len</span>(self.__target) - <span class=\"number\">1</span>:</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> StopIteration</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 返回下一个数据</span></span><br><span class=\"line\">        temp = self.__target[self.__index]</span><br><span class=\"line\">        self.__index += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> temp</span><br><span class=\"line\"></span><br><span class=\"line\">manager = SkillManager()</span><br><span class=\"line\">manager.add_skill(Skill())</span><br><span class=\"line\">manager.add_skill(Skill())</span><br><span class=\"line\">manager.add_skill(Skill())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> manager:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(item)</span><br><span class=\"line\"></span><br><span class=\"line\">iterator = manager.__iter__()</span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        item = iterator.__next__()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(item)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> StopIteration:</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br></pre></td></tr></table></figure>\n\n<p>图形迭代器</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 练习：图形管理器记录多个图形</span></span><br><span class=\"line\"><span class=\"comment\">#      迭代图形管理器对象</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Graphic</span>:</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">GraphicManager</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        图形管理器，可迭代对象(参与for)</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.__graphics = []</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">add_graphic</span>(<span class=\"params\">self, graphic</span>):</span><br><span class=\"line\">        self.__graphics.append(graphic)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__iter__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> GraphicIterator(self.__graphics)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">GraphicIterator</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        图形迭代器（获取下一个数据）</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, target</span>):</span><br><span class=\"line\">        self.__target = target</span><br><span class=\"line\">        self.__index = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__next__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.__index &gt; <span class=\"built_in\">len</span>(self.__target) - <span class=\"number\">1</span>:</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> StopIteration</span><br><span class=\"line\">        temp = self.__target[self.__index]</span><br><span class=\"line\">        self.__index += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> temp</span><br><span class=\"line\">manager = GraphicManager()</span><br><span class=\"line\">manager.add_graphic(Graphic())</span><br><span class=\"line\">manager.add_graphic(Graphic())</span><br><span class=\"line\">manager.add_graphic(Graphic())</span><br><span class=\"line\"><span class=\"comment\"># for item in manager:</span></span><br><span class=\"line\"><span class=\"comment\">#     print(item)</span></span><br><span class=\"line\">iterator = manager.__iter__()</span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        item = iterator.__next__()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(item)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> StopIteration:</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"35\">\n<li>说明：</li>\n</ol>\n<blockquote>\n<p>– 聚合对象通常是容器对象。</p>\n</blockquote>\n<ol start=\"4\">\n<li>作用：使用者只需通过一种方式，便可简洁明了的获取聚合对象中各个元素，而又无需了解其内部结构。</li>\n</ol>\n<h1 id=\"生成器generator\"><a href=\"#生成器generator\" class=\"headerlink\" title=\"生成器generator\"></a>生成器generator</h1><ol start=\"36\">\n<li><p>定义：能够动态(循环一次计算一次返回一次)提供数据的可迭代对象。</p>\n</li>\n<li><p>作用：在循环过程中，按照某种算法推算数据，不必创建容器存储完整的结果，从而节省内存空间。数据量越大，优势越明显。</p>\n</li>\n<li><p>以上作用也称之为<strong>延迟操作或惰性操作</strong>，通俗的讲就是在需要的时候才计算结果，而不是一次构建出所有结果。</p>\n</li>\n</ol>\n<h2 id=\"生成器函数\"><a href=\"#生成器函数\" class=\"headerlink\" title=\"生成器函数\"></a>生成器函数</h2><ol start=\"39\">\n<li><p>定义：含有<strong>yield</strong>语句的函数，返回值为生成器对象。– 生成器&#x3D;可迭代对象+迭代器</p>\n</li>\n<li><p>语法</p>\n</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建：</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">函数名</span>():</span><br><span class=\"line\">            ...</span><br><span class=\"line\">            <span class=\"keyword\">yield</span> 数据</span><br><span class=\"line\">            ...</span><br><span class=\"line\"><span class=\"comment\"># 调用：</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> 变量名 <span class=\"keyword\">in</span> 函数名():</span><br><span class=\"line\">        语句</span><br></pre></td></tr></table></figure>\n\n<ol start=\"41\">\n<li>说明：</li>\n</ol>\n<blockquote>\n<p>– 调用生成器函数将返回一个生成器对象，不执行函数体。</p>\n</blockquote>\n<p>– yield翻译为”产生”或”生成”</p>\n<ol start=\"42\">\n<li>执行过程：</li>\n</ol>\n<p> (1) 调用生成器函数会自动创建迭代器对象。</p>\n<p>(2) 调用迭代器对象的__next__()方法时才执行生成器函数。</p>\n<p>(3) 每次执行到yield语句时返回数据，暂时离开。</p>\n<p>(4) 待下次调用__next__()方法时继续从离开处继续执行。</p>\n<p> 原理：生成迭代器对象的大致规则如下</p>\n<blockquote>\n<p>– 将yield关键字以前的代码放在next方法中。</p>\n</blockquote>\n<ul>\n<li>以后在需要拿到多个同类对象的时候，可以使用yield来处理</li>\n</ul>\n<p>– 将yield关键字后面的数据作为next方法的返回值。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    yield --&gt; 生成器</span></span><br><span class=\"line\"><span class=\"string\">    练习:exercise07.py</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">class MyRange:</span></span><br><span class=\"line\"><span class=\"string\">    def __init__(self, stop_value):</span></span><br><span class=\"line\"><span class=\"string\">        self.stop_value = stop_value</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    def __iter__(self):</span></span><br><span class=\"line\"><span class=\"string\">        number = 0</span></span><br><span class=\"line\"><span class=\"string\">        while number &lt; self.stop_value:</span></span><br><span class=\"line\"><span class=\"string\">            yield number</span></span><br><span class=\"line\"><span class=\"string\">            number += 1</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">my01 = MyRange(10)</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">iterator = my01.__iter__()</span></span><br><span class=\"line\"><span class=\"string\">while True:</span></span><br><span class=\"line\"><span class=\"string\">    try:</span></span><br><span class=\"line\"><span class=\"string\">        item = iterator.__next__()</span></span><br><span class=\"line\"><span class=\"string\">        print(item)</span></span><br><span class=\"line\"><span class=\"string\">    except StopIteration:</span></span><br><span class=\"line\"><span class=\"string\">        break</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\"># 生成器原理</span></span><br><span class=\"line\"><span class=\"string\">class MyGenerator:</span></span><br><span class=\"line\"><span class=\"string\">    # 生成器 = 可迭代对象 + 迭代器</span></span><br><span class=\"line\"><span class=\"string\">    def __init__(self,stop_value):</span></span><br><span class=\"line\"><span class=\"string\">        self.begin = 0</span></span><br><span class=\"line\"><span class=\"string\">        self.stop_value = stop_value</span></span><br><span class=\"line\"><span class=\"string\">        </span></span><br><span class=\"line\"><span class=\"string\">    def __iter__(self):</span></span><br><span class=\"line\"><span class=\"string\">        return self</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    def __next__(self):</span></span><br><span class=\"line\"><span class=\"string\">        if self.begin &gt;= self.stop_value:</span></span><br><span class=\"line\"><span class=\"string\">            raise StopIteration</span></span><br><span class=\"line\"><span class=\"string\">            </span></span><br><span class=\"line\"><span class=\"string\">        temp = self.begin</span></span><br><span class=\"line\"><span class=\"string\">        self.begin+=1</span></span><br><span class=\"line\"><span class=\"string\">        return temp</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">my_range</span>(<span class=\"params\">stop_value</span>):</span><br><span class=\"line\">    number = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> number &lt; stop_value:</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> number</span><br><span class=\"line\">        number += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">my01 = my_range(<span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(my01), <span class=\"built_in\">dir</span>(my01))<span class=\"comment\"># dir 获取对象所有成员</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">id</span>(my01.__iter__()), <span class=\"built_in\">id</span>(my01))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> my01:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(item)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"内置生成器\"><a href=\"#内置生成器\" class=\"headerlink\" title=\"内置生成器\"></a>内置生成器</h2><h3 id=\"枚举函数enumerate\"><a href=\"#枚举函数enumerate\" class=\"headerlink\" title=\"枚举函数enumerate\"></a>枚举函数enumerate</h3><ol start=\"44\">\n<li>语法：</li>\n</ol>\n<blockquote>\n<p>for 变量 in enumerate(可迭代对象):</p>\n</blockquote>\n<p>语句</p>\n<p>for 索引, 元素in enumerate(可迭代对象):</p>\n<p>语句</p>\n<ol start=\"45\">\n<li>作用：遍历可迭代对象时，可以将索引与元素组合为一个元组。</li>\n</ol>\n<h3 id=\"zip\"><a href=\"#zip\" class=\"headerlink\" title=\"zip\"></a>zip</h3><ol start=\"46\">\n<li>语法：</li>\n</ol>\n<blockquote>\n<p>for item in zip(可迭代对象1, 可迭代对象2….):</p>\n</blockquote>\n<p>语句</p>\n<ol start=\"47\">\n<li>作用：将多个可迭代对象中对应的元素组合成一个个元组，生成的元组个数由最小的可迭代对象决定。</li>\n</ol>\n<h2 id=\"生成器表达式\"><a href=\"#生成器表达式\" class=\"headerlink\" title=\"生成器表达式\"></a>生成器表达式</h2><ol start=\"48\">\n<li><p>定义：用推导式形式创建生成器对象。</p>\n</li>\n<li><p>语法：变量 &#x3D; ( 表达式 for 变量 in 可迭代对象 [if 真值表达式] )</p>\n</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 练习:1. 获取列表中所有字符串</span></span><br><span class=\"line\"><span class=\"comment\">#     2. 获取列表中所有小数</span></span><br><span class=\"line\"><span class=\"comment\"># 要求:分别使用生成器函数/生成器表达式/列表推导式完成.</span></span><br><span class=\"line\">list01 = [<span class=\"number\">3</span>, <span class=\"string\">&quot;54&quot;</span>, <span class=\"literal\">True</span>, <span class=\"number\">6</span>, <span class=\"string\">&quot;76&quot;</span>, <span class=\"number\">1.6</span>, <span class=\"literal\">False</span>, <span class=\"number\">3.5</span>]</span><br><span class=\"line\"><span class=\"comment\"># 练习:1</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">find01</span>():</span><br><span class=\"line\">    <span class=\"keyword\">for</span> itme <span class=\"keyword\">in</span> list01:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">type</span>(itme) == <span class=\"built_in\">str</span>:</span><br><span class=\"line\">            <span class=\"keyword\">yield</span> itme</span><br><span class=\"line\"></span><br><span class=\"line\">re = find01()</span><br><span class=\"line\"><span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> re:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(item)</span><br><span class=\"line\"></span><br><span class=\"line\">re = (itme <span class=\"keyword\">for</span> itme <span class=\"keyword\">in</span> list01 <span class=\"keyword\">if</span> <span class=\"built_in\">type</span>(itme) == <span class=\"built_in\">str</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> re:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(item)</span><br><span class=\"line\"></span><br><span class=\"line\">re = [itme <span class=\"keyword\">for</span> itme <span class=\"keyword\">in</span> list01 <span class=\"keyword\">if</span> <span class=\"built_in\">type</span>(itme) == <span class=\"built_in\">str</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> re:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(item)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 练习:2</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">find02</span>():</span><br><span class=\"line\">    <span class=\"keyword\">for</span> itme <span class=\"keyword\">in</span> list01:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">type</span>(itme) == <span class=\"built_in\">float</span>:</span><br><span class=\"line\">            <span class=\"keyword\">yield</span> itme</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> find02():</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(item)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> (item <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> list01 <span class=\"keyword\">if</span> <span class=\"built_in\">type</span>(item) == <span class=\"built_in\">float</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(item)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> [item <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> list01 <span class=\"keyword\">if</span> <span class=\"built_in\">type</span>(item) == <span class=\"built_in\">float</span>]:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(item)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"函数式编程\"><a href=\"#函数式编程\" class=\"headerlink\" title=\"函数式编程\"></a>函数式编程</h1><ol>\n<li>定义：用一系列函数解决问题。</li>\n</ol>\n<blockquote>\n<p>– 函数可以赋值给变量，赋值后变量绑定函数。</p>\n</blockquote>\n<p>– 允许将函数作为参数传入另一个函数。</p>\n<p>– 允许函数返回一个函数。</p>\n<ol start=\"2\">\n<li>高阶函数：将函数作为参数或返回值的函数。</li>\n</ol>\n<h2 id=\"函数作为参数\"><a href=\"#函数作为参数\" class=\"headerlink\" title=\"函数作为参数\"></a>函数作为参数</h2><blockquote>\n<p>将核心逻辑传入方法体，使该方法的适用性更广，体现了面向对象的开闭原则。</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 1. 使用生成器函数实现以上3个需求</span></span><br><span class=\"line\"><span class=\"comment\"># 2. 体会函数式编程的&quot;封装&quot;</span></span><br><span class=\"line\"><span class=\"comment\">#    将三个函数变化点提取到另外三个函数中.</span></span><br><span class=\"line\"><span class=\"comment\">#    将共性提取到另外一个函数中</span></span><br><span class=\"line\"><span class=\"comment\"># 3. 体会函数式编程的&quot;继承&quot;与&quot;多态&quot;</span></span><br><span class=\"line\"><span class=\"comment\">#    使用变量隔离变化点,在共性函数中调用变量.</span></span><br><span class=\"line\"><span class=\"comment\"># 4. 测试(执行上述功能)</span></span><br><span class=\"line\"></span><br><span class=\"line\">list01 = [<span class=\"number\">43</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">87</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 需求1:在列表中查找所有偶数</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">find01</span>():</span><br><span class=\"line\">    <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> list01:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> item % <span class=\"number\">2</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"keyword\">yield</span> item</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 需求2:在列表中查找所有大于10的数</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">find02</span>():</span><br><span class=\"line\">    <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> list01:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> item &gt; <span class=\"number\">10</span>:</span><br><span class=\"line\">            <span class=\"keyword\">yield</span> item</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 需求3:在列表中查找所有范围在10--50之间的数</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">find03</span>():</span><br><span class=\"line\">    <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> list01:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"number\">10</span> &lt; item &lt; <span class=\"number\">50</span>:</span><br><span class=\"line\">            <span class=\"keyword\">yield</span> item</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># &quot;封装&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">condition01</span>(<span class=\"params\">item</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> item % <span class=\"number\">2</span> == <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">condition02</span>(<span class=\"params\">item</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> item &gt; <span class=\"number\">10</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">condition03</span>(<span class=\"params\">item</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">10</span> &lt; item &lt; <span class=\"number\">50</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># &quot;继承&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">find</span>(<span class=\"params\">func_condition</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> list01:</span><br><span class=\"line\">        <span class=\"comment\"># &quot;多态&quot;</span></span><br><span class=\"line\">        <span class=\"comment\"># 调用:具体条件的抽象</span></span><br><span class=\"line\">        <span class=\"comment\"># 执行:具体条件的函数</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> func_condition(item):</span><br><span class=\"line\">            <span class=\"keyword\">yield</span> item</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> find(condition02):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(item)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 方法参数,如果传递10/&quot;张无忌&quot;/True,叫做传递数据</span></span><br><span class=\"line\"><span class=\"comment\"># 方法参数,如果函数1/函数2/函数3,叫做传递逻辑</span></span><br><span class=\"line\"><span class=\"comment\"># 15:35</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"lambda-表达式\"><a href=\"#lambda-表达式\" class=\"headerlink\" title=\"lambda 表达式\"></a>lambda 表达式</h3><ol start=\"50\">\n<li><p>定义：是一种匿名方法。</p>\n</li>\n<li><p>作用：作为参数传递时语法简洁，优雅，代码可读性强。</p>\n</li>\n</ol>\n<blockquote>\n<p>随时创建和销毁，减少程序耦合度。</p>\n</blockquote>\n<ol start=\"52\">\n<li>语法</li>\n</ol>\n<blockquote>\n<p>– 定义：</p>\n</blockquote>\n<p>变量 &#x3D; lambda 形参: 方法体</p>\n<p>– 调用：</p>\n<p>变量(实参)</p>\n<ol start=\"53\">\n<li>说明：</li>\n</ol>\n<blockquote>\n<p>– 形参没有可以不填</p>\n</blockquote>\n<p>– 方法体只能有一条语句，且不支持赋值语句。</p>\n<h3 id=\"内置高阶函数\"><a href=\"#内置高阶函数\" class=\"headerlink\" title=\"内置高阶函数\"></a>内置高阶函数</h3><ol start=\"54\">\n<li><p>map（函数，可迭代对象）：使用可迭代对象中的每个元素调用函数，将返回值作为新可迭代对象元素；返回值为新可迭代对象。</p>\n</li>\n<li><p>filter(函数，可迭代对象)：根据条件筛选可迭代对象中的元素，返回值为新可迭代对象。</p>\n</li>\n<li><p>sorted(可迭代对象，key &#x3D; 函数,reverse &#x3D; bool值)：排序，返回值为排序结果。</p>\n</li>\n<li><p>max(可迭代对象，key &#x3D; 函数)：根据函数获取可迭代对象的最大值。</p>\n</li>\n<li><p>min(可迭代对象，key &#x3D; 函数)：根据函数获取可迭代对象的最小值。</p>\n</li>\n</ol>\n<h2 id=\"函数作为返回值\"><a href=\"#函数作为返回值\" class=\"headerlink\" title=\"函数作为返回值\"></a>函数作为返回值</h2><blockquote>\n<p>逻辑连续，当内部函数被调用时，不脱离当前的逻辑。</p>\n</blockquote>\n<h3 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h3><ol start=\"59\">\n<li>三要素：</li>\n</ol>\n<blockquote>\n<p>– 必须有一个内嵌函数。</p>\n</blockquote>\n<p>– 内嵌函数必须引用外部函数中变量。</p>\n<p>– 外部函数返回值必须是内嵌函数。</p>\n<ol start=\"60\">\n<li>语法</li>\n</ol>\n<blockquote>\n<p>– 定义：</p>\n</blockquote>\n<p><img src=\"/pictures/07python_basic/image.png\" alt=\"image.png\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">外部函数名</span>(<span class=\"params\">参数</span>):</span><br><span class=\"line\">\t外部变量</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">内部函数名</span>(<span class=\"params\">参数</span>):</span><br><span class=\"line\">    使用外部变量</span><br><span class=\"line\">    <span class=\"keyword\">return</span> 内部函数名</span><br></pre></td></tr></table></figure>\n\n<p>– 调用：</p>\n<p>变量 &#x3D; 外部函数名(参数)</p>\n<p>变量(参数)</p>\n<ol start=\"61\">\n<li><p>定义：在一个函数内部的函数,同时内部函数又引用了外部函数的变量。</p>\n</li>\n<li><p>本质：闭包是将内部函数和外部函数的执行环境绑定在一起的对象。</p>\n</li>\n<li><p>优点：内部函数可以使用外部变量。</p>\n</li>\n<li><p>缺点：外部变量一直存在于内存中，不会在调用结束后释放，占用内存。</p>\n</li>\n<li><p>作用：实现python装饰器。</p>\n</li>\n</ol>\n<h3 id=\"函数装饰器decorator\"><a href=\"#函数装饰器decorator\" class=\"headerlink\" title=\"函数装饰器decorator\"></a>函数装饰器decorator</h3><blockquote>\n<p>闭包的应用就是装饰器</p>\n</blockquote>\n<ol start=\"66\">\n<li><p>定义：在不改变原函数的调用以及内部代码情况下，为其添加新功能的函数。</p>\n</li>\n<li><p>语法</p>\n</li>\n</ol>\n<p>def 函数装饰器名称(func):</p>\n<p>​\t\tdef 内嵌函数(*args, **kwargs):</p>\n<p>​\t\t\t\t需要添加的新功能</p>\n<p>​\t\t\t\treturn func(*args, **kwargs)</p>\n<p>​\t\treturn内嵌函数</p>\n<p>原函数 &#x3D; 内嵌函数</p>\n<blockquote>\n<p>@ 函数装饰器名称</p>\n</blockquote>\n<p>def 原函数名称(参数):</p>\n<p>函数体</p>\n<p>原函数(参数)</p>\n<ol start=\"68\">\n<li>本质：使用”@函数装饰器名称”修饰原函数，等同于创建与原函数名称相同的变量，关联内嵌函数；故调用原函数时执行内嵌函数。</li>\n</ol>\n<p>原函数名称 &#x3D; 函数装饰器名称（原函数名称）</p>\n<ol start=\"69\">\n<li>装饰器链：</li>\n</ol>\n<blockquote>\n<p>一个函数可以被多个装饰器修饰，执行顺序为从近到远。</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    闭包</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">fun01</span>():</span><br><span class=\"line\">    a = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">fun02</span>():</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(a)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fun02</span><br><span class=\"line\"><span class=\"comment\"># 调用外部函数，返回值是内嵌函数</span></span><br><span class=\"line\">result = fun01()</span><br><span class=\"line\"><span class=\"comment\"># 调用内嵌函数</span></span><br><span class=\"line\">result()  <span class=\"comment\"># 可以访问外部变量a</span></span><br><span class=\"line\"><span class=\"comment\"># 闭包应用:逻辑连续，当内部函数被调用时，不脱离当前的逻辑</span></span><br><span class=\"line\"><span class=\"comment\"># 压岁钱</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">give_gife_money</span>(<span class=\"params\">money</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        得到压岁钱</span></span><br><span class=\"line\"><span class=\"string\">    :return:</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;得到了%d压岁钱&quot;</span> % money)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">child_buy</span>(<span class=\"params\">target, price</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">            孩子购买商品</span></span><br><span class=\"line\"><span class=\"string\">        :param target: 需要购买的商品</span></span><br><span class=\"line\"><span class=\"string\">        :param price: 商品单价</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">nonlocal</span> money</span><br><span class=\"line\">        <span class=\"keyword\">if</span> money &gt;= price:</span><br><span class=\"line\">            money -= price</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;孩子花了%.1f钱，购买了%s&quot;</span> % (price, target))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;钱不够啦&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> child_buy</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 下列代码是一个连续的逻辑</span></span><br><span class=\"line\">action = give_gife_money(<span class=\"number\">10000</span>)</span><br><span class=\"line\">action(<span class=\"string\">&quot;唐僧肉&quot;</span>, <span class=\"number\">0.5</span>)</span><br><span class=\"line\">action(<span class=\"string\">&quot;小汽车&quot;</span>, <span class=\"number\">2000</span>)</span><br><span class=\"line\">action(<span class=\"string\">&quot;手机&quot;</span>, <span class=\"number\">8000</span>)</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Python-简介\"><a href=\"#Python-简介\" class=\"headerlink\" title=\"Python 简介\"></a>Python 简介</h1><h2 id=\"Python-定义\"><a href=\"#Python-定义\" class=\"headerlink\" title=\"Python 定义\"></a>Python 定义</h2><p><img src=\"/pictures/07python_basic/image-20230103160116244.png\" alt=\"image-20230103160116244\"></p>\n<p>是一个免费、开源、跨平台、动态、面向对象的编程语言。</p>\n<h2 id=\"Python程序的执行方式\"><a href=\"#Python程序的执行方式\" class=\"headerlink\" title=\"Python程序的执行方式\"></a>Python程序的执行方式</h2><h3 id=\"交互式\"><a href=\"#交互式\" class=\"headerlink\" title=\"交互式\"></a>交互式</h3><blockquote>\n<p>在命令行输入指令，回车即可得到结果。</p>\n</blockquote>\n<p>打开终端》进入交互式：python3》编写代码：print(“hello world”)》离开交互式：exit()</p>\n<h3 id=\"文件式\"><a href=\"#文件式\" class=\"headerlink\" title=\"文件式\"></a>文件式</h3><p>将指令编写到.py文件，可以重复运行程序：编写文件》打开终端》进入程序所在目录：cd 目录》执行程序： python3 文件名</p>\n<h2 id=\"执行过程\"><a href=\"#执行过程\" class=\"headerlink\" title=\"执行过程\"></a>执行过程</h2><p><img src=\"/pictures/07python_basic/image-20230103160129679.png\" alt=\"image-20230103160129679\"></p>\n<p>计算机只能识别机器码(1010)，不能识别源代码(python)。</p>\n<ol start=\"14\">\n<li><p>由源代码转变成机器码的过程分成两类：编译和解释。</p>\n</li>\n<li><p>编译：在程序运行之前，通过编译器将源代码变成机器码，例如：C语言。</p>\n</li>\n</ol>\n<p>– 优点：运行速度快</p>\n<p>– 缺点：开发效率低，不能跨平台。</p>\n<ol start=\"16\">\n<li>解释：在程序运行之时，通过解释器对程序逐行翻译，然后执行。例如Javascript</li>\n</ol>\n<p>– 优点：开发效率高，可以跨平台；</p>\n<p>– 缺点：运行速度慢。</p>\n<ol start=\"17\">\n<li>python是解释型语言，但为了提高运行速度，使用了一种编译的方法。编译之后得到pyc文件，存储了字节码（特定于Python的表现形式，不是机器码）。</li>\n</ol>\n<blockquote>\n<p>源代码 – 编译 –&gt; 字节码 – 解释 –&gt; 机器码</p>\n</blockquote>\n<p>|————1次———|</p>\n<h2 id=\"解释器类型\"><a href=\"#解释器类型\" class=\"headerlink\" title=\"解释器类型\"></a>解释器类型</h2><ol start=\"18\">\n<li><p>CPython（C语言开发)</p>\n</li>\n<li><p>Jython (java开发)</p>\n</li>\n<li><p>IronPython (.net开发)</p>\n</li>\n</ol>\n<h1 id=\"数据基本运算\"><a href=\"#数据基本运算\" class=\"headerlink\" title=\"数据基本运算\"></a>数据基本运算</h1><h2 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h2><h3 id=\"pycharm常用快捷键\"><a href=\"#pycharm常用快捷键\" class=\"headerlink\" title=\"pycharm常用快捷键\"></a>pycharm常用快捷键</h3><ol start=\"21\">\n<li><p>移动到本行开头：home键</p>\n</li>\n<li><p>移动到本行末尾：end键盘</p>\n</li>\n<li><p>注释代码：ctrl + &#x2F;</p>\n</li>\n<li><p>复制行：ctrl +d</p>\n</li>\n<li><p>选择列：鼠标左键 + alt</p>\n</li>\n<li><p>移动行：shift + alt + 上下箭头</p>\n</li>\n<li><p>智能提示：ctrl + space</p>\n</li>\n<li><p>代码格式化：ctrl+alt+l</p>\n</li>\n</ol>\n<h3 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h3><blockquote>\n<p>给人看的，通常是对代码的描述信息。</p>\n</blockquote>\n<ol start=\"29\">\n<li><p>单行注释：以#号开头。</p>\n</li>\n<li><p>多行注释：三引号开头，三引号结尾。</p>\n</li>\n</ol>\n<h3 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h3><p>表示一个功能，函数定义者是提供功能的人，函数调用者是使用功能的人。</p>\n<p>例如：</p>\n<ol start=\"31\">\n<li><p>print(数据) 作用：将括号中的内容显示在控制台中</p>\n</li>\n<li><p>变量 &#x3D; input(“需要显示的内容”) 作用：将用户输入的内容赋值给变量</p>\n</li>\n</ol>\n<h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><ol start=\"33\">\n<li><p>定义：关联一个对象的标识符。</p>\n</li>\n<li><p>命名：必须是字母或下划线开头，后跟字母、数字、下划线。</p>\n</li>\n</ol>\n<p>不能使用关键字(蓝色)，否则发生语法错误：SyntaxError: invalid syntax。</p>\n<ol start=\"35\">\n<li>建议命名：字母小写，多个单词以下划线隔开。</li>\n</ol>\n<p>class_name</p>\n<ol start=\"36\">\n<li><p>赋值：创建一个变量或改变一个变量关联的数据。</p>\n</li>\n<li><p>语法：变量名 &#x3D; 数据</p>\n</li>\n</ol>\n<p>变量名1 &#x3D; 变量名2 &#x3D; 数据</p>\n<p>变量名1, 变量名2, &#x3D; 数据1, 数据2</p>\n<h2 id=\"del-语句\"><a href=\"#del-语句\" class=\"headerlink\" title=\"del 语句\"></a>del 语句</h2><ol start=\"38\">\n<li>语法:</li>\n</ol>\n<blockquote>\n<p>del 变量名1, 变量名2</p>\n</blockquote>\n<ol start=\"39\">\n<li>作用：</li>\n</ol>\n<blockquote>\n<p>用于删除变量,同时解除与对象的关联.如果可能则释放对象。</p>\n</blockquote>\n<ol start=\"40\">\n<li>自动化内存管理的引用计数：</li>\n</ol>\n<blockquote>\n<p>每个对象记录被变量绑定(引用)的数量,当为0时被销毁。</p>\n</blockquote>\n<h2 id=\"核心数据类型\"><a href=\"#核心数据类型\" class=\"headerlink\" title=\"核心数据类型\"></a>核心数据类型</h2><ol start=\"41\">\n<li><p>在python中变量没有类型，但关联的对象有类型。</p>\n</li>\n<li><p>通过type函数可查看。</p>\n</li>\n</ol>\n<h3 id=\"空值对象-None\"><a href=\"#空值对象-None\" class=\"headerlink\" title=\"空值对象 None\"></a>空值对象 None</h3><ol start=\"43\">\n<li><p>表示不存在的特殊对象。</p>\n</li>\n<li><p>作用：占位和解除与对象的关联。</p>\n</li>\n</ol>\n<h3 id=\"整形int\"><a href=\"#整形int\" class=\"headerlink\" title=\"整形int\"></a>整形int</h3><ol start=\"45\">\n<li>表示整数，包含正数、负数、0。</li>\n</ol>\n<blockquote>\n<p>如： -5, 100, 0</p>\n</blockquote>\n<ol start=\"46\">\n<li>字面值：</li>\n</ol>\n<blockquote>\n<p>十进制：5</p>\n</blockquote>\n<p>二进制：0b开头，后跟1或者1</p>\n<p>八进制：0o开头，后跟0~7</p>\n<p>十六进制：0x开头，后跟0<del>9,A</del>F,a~f</p>\n<h3 id=\"浮点型float\"><a href=\"#浮点型float\" class=\"headerlink\" title=\"浮点型float\"></a>浮点型float</h3><ol start=\"47\">\n<li><p>表示小数，包含正数、负数，0.0)。</p>\n</li>\n<li><p>字面值：</p>\n</li>\n</ol>\n<ul>\n<li><p>小数：1.0 2.5</p>\n</li>\n<li><p>科学计数法：e&#x2F;E (正负号) 指数</p>\n</li>\n<li><p>1.23e-2 (等同于0.0123)</p>\n</li>\n<li><p>1.23456e5(等同于123456.0)</p>\n</li>\n</ul>\n<h3 id=\"字符串str\"><a href=\"#字符串str\" class=\"headerlink\" title=\"字符串str\"></a>字符串str</h3><p>是用来记录文本信息(文字信息)。</p>\n<p>字面值：双引号</p>\n<h3 id=\"复数complex\"><a href=\"#复数complex\" class=\"headerlink\" title=\"复数complex\"></a>复数complex</h3><p>由实部和虚部组成的数字。</p>\n<p>虚部是以j或J结尾。</p>\n<p>字面值： 1j 1+1j 1-1j</p>\n<h3 id=\"布尔bool\"><a href=\"#布尔bool\" class=\"headerlink\" title=\"布尔bool\"></a>布尔bool</h3><p>用来表示真和假的类型</p>\n<p>True 表示真(条件满足或成立)，本质是1</p>\n<p>False 表示假(条件不满足或不成立)，本质是0</p>\n<h2 id=\"数据类型转换\"><a href=\"#数据类型转换\" class=\"headerlink\" title=\"数据类型转换\"></a>数据类型转换</h2><ol start=\"49\">\n<li><p>转换为整形: int(数据)</p>\n</li>\n<li><p>转换为浮点型:float(数据)</p>\n</li>\n<li><p>转换为字符串:str(数据)</p>\n</li>\n<li><p>转换为布尔:bool(数据)</p>\n</li>\n</ol>\n<p>结果为False：bool(0) bool(0.0) bool(None)</p>\n<ol start=\"53\">\n<li>混合类型自动升级：</li>\n</ol>\n<ul>\n<li><p>1 + 2.14 返回的结果是 3.14</p>\n</li>\n<li><p>1 + 3.0 返回结果是: 4.0</p>\n</li>\n</ul>\n<h2 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h2><h3 id=\"算术运算符\"><a href=\"#算术运算符\" class=\"headerlink\" title=\"算术运算符\"></a>算术运算符</h3><ul>\n<li>加法</li>\n</ul>\n<ul>\n<li>减法</li>\n</ul>\n<ul>\n<li>乘法</li>\n</ul>\n<ul>\n<li><p>&#x2F; 除法：结果为浮点数</p>\n</li>\n<li><p>&#x2F;&#x2F; 地板除：除的结果去掉小数部分</p>\n</li>\n<li><p>% 求余</p>\n</li>\n<li><p>** 幂运算</p>\n</li>\n</ul>\n<p>优先级从高到低：</p>\n<ul>\n<li><p>()</p>\n</li>\n<li><p>**</p>\n</li>\n</ul>\n<ul>\n<li>&#x2F; % &#x2F;&#x2F;</li>\n</ul>\n<ul>\n<li><ul>\n<li></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"增强运算符\"><a href=\"#增强运算符\" class=\"headerlink\" title=\"增强运算符\"></a>增强运算符</h3><p>y +&#x3D; x 等同于 y &#x3D; y + x</p>\n<p>y -&#x3D; x 等同于 y &#x3D; y - x</p>\n<p>y *&#x3D; x 等同于 y &#x3D; y * x</p>\n<p>y &#x2F;&#x3D; x 等同于 y &#x3D; y &#x2F; x</p>\n<p>y &#x2F;&#x2F;&#x3D; x 等同于 y &#x3D; y &#x2F;&#x2F; x</p>\n<p>y %&#x3D; x 等同于 y &#x3D; y % x</p>\n<p>y **&#x3D; x 等同于 y &#x3D; y ** x</p>\n<h3 id=\"比较运算符\"><a href=\"#比较运算符\" class=\"headerlink\" title=\"比较运算符\"></a>比较运算符</h3><ul>\n<li><p>&lt;\t\t小于</p>\n</li>\n<li><p>&lt;&#x3D;\t\t小于等于</p>\n</li>\n<li><p>&gt;\t\t大于</p>\n</li>\n<li><p>&gt;&#x3D;\t\t大于等于</p>\n</li>\n<li><p>&#x3D;&#x3D;\t\t等于</p>\n</li>\n<li><p>!&#x3D;\t\t不等于</p>\n</li>\n</ul>\n<p>返回布尔类型的值</p>\n<p>比较运算的数学表示方式:0 &lt;&#x3D; x &lt;&#x3D; 100</p>\n<h3 id=\"逻辑运算符\"><a href=\"#逻辑运算符\" class=\"headerlink\" title=\"逻辑运算符\"></a>逻辑运算符</h3><h4 id=\"与and\"><a href=\"#与and\" class=\"headerlink\" title=\"与and\"></a>与and</h4><p>表示并且的关系，一假俱假。</p>\n<p>示例:</p>\n<p>True and True # True</p>\n<p>True and False # False</p>\n<p>False and True # False</p>\n<p>False and False # False</p>\n<h4 id=\"或or\"><a href=\"#或or\" class=\"headerlink\" title=\"或or\"></a>或or</h4><p>表示或者的关系，一真俱真</p>\n<p>示例:</p>\n<p>True or True # True</p>\n<p>True or False # True</p>\n<p>False or True # True</p>\n<p>False or False # False</p>\n<h4 id=\"非-not\"><a href=\"#非-not\" class=\"headerlink\" title=\"非 not\"></a>非 not</h4><p>表示取反</p>\n<p>例如：</p>\n<p>not True # 返回False</p>\n<p>not False # 返回True</p>\n<h4 id=\"短路运算\"><a href=\"#短路运算\" class=\"headerlink\" title=\"短路运算\"></a>短路运算</h4><p>一但结果确定，后面的语句将不再执行。</p>\n<h3 id=\"身份运算符\"><a href=\"#身份运算符\" class=\"headerlink\" title=\"身份运算符\"></a>身份运算符</h3><p>语法:</p>\n<p>x is y</p>\n<p>x is not y</p>\n<p>作用：</p>\n<p>is 用于判断两个对象是否是同一个对象,是时返回True,否则返回False。</p>\n<p>is not 的作用与is相反</p>\n<h3 id=\"优先级\"><a href=\"#优先级\" class=\"headerlink\" title=\"优先级\"></a>优先级</h3><p>高到低：</p>\n<ul>\n<li><p>算数运算符</p>\n</li>\n<li><p>比较运算符</p>\n</li>\n<li><p>快捷运算符</p>\n</li>\n<li><p>身份运算符</p>\n</li>\n<li><p>逻辑运算符</p>\n</li>\n</ul>\n<h1 id=\"语句\"><a href=\"#语句\" class=\"headerlink\" title=\"语句\"></a>语句</h1><h2 id=\"行\"><a href=\"#行\" class=\"headerlink\" title=\"行\"></a>行</h2><ol start=\"54\">\n<li><p>物理行：程序员编写代码的行。</p>\n</li>\n<li><p>逻辑行：python解释器需要执行的指令。</p>\n</li>\n<li><p>建议一个逻辑行在一个物理行上。</p>\n</li>\n<li><p>如果一个物理行中使用多个逻辑行，需要使用分号；隔开。</p>\n</li>\n<li><p>如果逻辑行过长，可以使用隐式换行或显式换行。</p>\n</li>\n</ol>\n<p>隐式换行：所有括号的内容换行,称为隐式换行</p>\n<p>括号包括: () [] {} 三种</p>\n<p>显式换行：通过折行符 \\ (反斜杠)换行，必须放在一行的末尾，目的是告诉解释器,下一行也是本行的语句。</p>\n<h2 id=\"pass-语句\"><a href=\"#pass-语句\" class=\"headerlink\" title=\"pass 语句\"></a>pass 语句</h2><p>通常用来填充语法空白。</p>\n<h2 id=\"选择语句\"><a href=\"#选择语句\" class=\"headerlink\" title=\"选择语句\"></a>选择语句</h2><h3 id=\"If-elif-else-语句\"><a href=\"#If-elif-else-语句\" class=\"headerlink\" title=\"If elif else 语句\"></a>If elif else 语句</h3><ol start=\"58\">\n<li>作用:</li>\n</ol>\n<p>让程序根据条件选择性的执行语句。</p>\n<ol start=\"59\">\n<li>语法:</li>\n</ol>\n<p>if 条件1:</p>\n<p>​\t语句块1</p>\n<p>elif 条件2:</p>\n<p>​\t语句块2</p>\n<p>else:</p>\n<p>​\t语句块3</p>\n<ol start=\"60\">\n<li>说明:</li>\n</ol>\n<p>elif 子句可以有0个或多个。</p>\n<p>else 子句可以有0个或1个，且只能放在if语句的最后。</p>\n<h3 id=\"if-语句的真值表达式\"><a href=\"#if-语句的真值表达式\" class=\"headerlink\" title=\"if 语句的真值表达式\"></a>if 语句的真值表达式</h3><p>if 100:</p>\n<p>​\tprint(“真值”)</p>\n<p>等同于</p>\n<p>if bool(100):</p>\n<p>​\tprint(“真值”)</p>\n<h3 id=\"条件表达式\"><a href=\"#条件表达式\" class=\"headerlink\" title=\"条件表达式\"></a>条件表达式</h3><p>语法：变量 &#x3D; 结果1 if 条件 else 结果2</p>\n<p>作用：根据条件(True&#x2F;False) 来决定返回结果1还是结果2。</p>\n<h2 id=\"循环语句\"><a href=\"#循环语句\" class=\"headerlink\" title=\"循环语句\"></a>循环语句</h2><h3 id=\"while语句\"><a href=\"#while语句\" class=\"headerlink\" title=\"while语句\"></a>while语句</h3><ol start=\"61\">\n<li>作用:</li>\n</ol>\n<p>可以让一段代码满足条件，重复执行。</p>\n<ol start=\"62\">\n<li>语法:</li>\n</ol>\n<p>while 条件:</p>\n<p>​\t满足条件执行的语句</p>\n<p>else:</p>\n<p>​\t不满足条件执行的语句</p>\n<ol start=\"63\">\n<li>说明:</li>\n</ol>\n<p>else子句可以省略。</p>\n<p>在循环体内用break终止循环时,else子句不执行。</p>\n<h3 id=\"for-语句\"><a href=\"#for-语句\" class=\"headerlink\" title=\"for 语句\"></a>for 语句</h3><ol start=\"64\">\n<li>作用:</li>\n</ol>\n<p>用来遍历可迭代对象的数据元素。</p>\n<p>可迭代对象是指能依次获取数据元素的对象，例如：容器类型。</p>\n<ol start=\"65\">\n<li>语法:</li>\n</ol>\n<p>for 变量列表 in 可迭代对象:</p>\n<p>​\t语句块1</p>\n<p>else:</p>\n<p>​\t语句块2</p>\n<ol start=\"66\">\n<li>说明:</li>\n</ol>\n<p>else子句可以省略。</p>\n<p>在循环体内用break终止循环时,else子句不执行。</p>\n<h3 id=\"range-函数\"><a href=\"#range-函数\" class=\"headerlink\" title=\"range 函数\"></a>range 函数</h3><ol start=\"67\">\n<li>作用:</li>\n</ol>\n<p>用来创建一个生成一系列整数的可迭代对象(也叫整数序列生成器)。</p>\n<ol start=\"68\">\n<li>语法:</li>\n</ol>\n<p>range(开始点，结束点，间隔)</p>\n<ol start=\"69\">\n<li>说明:</li>\n</ol>\n<p>函数返回的可迭代对象可以用for取出其中的元素</p>\n<p>返回的数字不包含结束点</p>\n<p>开始点默认为0</p>\n<p>间隔默认值为1</p>\n<h2 id=\"跳转语句\"><a href=\"#跳转语句\" class=\"headerlink\" title=\"跳转语句\"></a>跳转语句</h2><h3 id=\"break-语句\"><a href=\"#break-语句\" class=\"headerlink\" title=\"break 语句\"></a>break 语句</h3><ol start=\"70\">\n<li><p>跳出循环体，后面的代码不再执行。</p>\n</li>\n<li><p>可以让while语句的else部分不执行。</p>\n</li>\n</ol>\n<h3 id=\"continue-语句\"><a href=\"#continue-语句\" class=\"headerlink\" title=\"continue 语句\"></a>continue 语句</h3><p>跳过本次，继续下次循环。</p>\n<h1 id=\"容器类型\"><a href=\"#容器类型\" class=\"headerlink\" title=\"容器类型\"></a>容器类型</h1><h2 id=\"通用操作\"><a href=\"#通用操作\" class=\"headerlink\" title=\"通用操作\"></a>通用操作</h2><h3 id=\"数学运算符\"><a href=\"#数学运算符\" class=\"headerlink\" title=\"数学运算符\"></a>数学运算符</h3><ol start=\"72\">\n<li><p>+：用于拼接两个容器</p>\n</li>\n<li><p>+&#x3D;：用原容器与右侧容器拼接,并重新绑定变量</p>\n</li>\n<li><p>*：重复生成容器元素</p>\n</li>\n<li><p>*&#x3D;：用原容器生成重复元素, 并重新绑定变量</p>\n</li>\n<li><p>&lt; &lt;&#x3D; &gt; &gt;&#x3D; &#x3D;&#x3D; !&#x3D;：依次比较两个容器中元素,一但不同则返回比较结果。</p>\n</li>\n</ol>\n<h3 id=\"成员运算符\"><a href=\"#成员运算符\" class=\"headerlink\" title=\"成员运算符\"></a>成员运算符</h3><ol start=\"77\">\n<li>语法：</li>\n</ol>\n<p>数据 in 序列</p>\n<p>数据 not in 序列</p>\n<ol start=\"78\">\n<li>作用：</li>\n</ol>\n<p>如果在指定的序列中找到值，返回bool类型。</p>\n<h3 id=\"索引index\"><a href=\"#索引index\" class=\"headerlink\" title=\"索引index\"></a>索引index</h3><ol start=\"79\">\n<li><p>作用：定位单个容器元素</p>\n</li>\n<li><p>语法：容器[整数]</p>\n</li>\n<li><p>说明：</p>\n</li>\n</ol>\n<p>正向索引从0开始，第二个索引为1，最后一个为len(s)-1。</p>\n<p>反向索引从-1开始,-1代表最后一个,-2代表倒数第二个,以此类推,第一个是-len(s)。</p>\n<h3 id=\"切片slice\"><a href=\"#切片slice\" class=\"headerlink\" title=\"切片slice\"></a>切片slice</h3><ol start=\"82\">\n<li>作用：</li>\n</ol>\n<p>定位多个容器元素。</p>\n<ol start=\"83\">\n<li>语法：</li>\n</ol>\n<p>容器[(开始索引):(结束索引)(:(步长))]</p>\n<ol start=\"84\">\n<li>说明：</li>\n</ol>\n<p>小括号()括起的部分代表可省略</p>\n<p>结束索引不包含该位置元素</p>\n<p>步长是切片每次获取完当前元素后移动的偏移量</p>\n<h3 id=\"内建函数\"><a href=\"#内建函数\" class=\"headerlink\" title=\"内建函数\"></a>内建函数</h3><ol start=\"85\">\n<li><p>len(x) 返回序列的长度</p>\n</li>\n<li><p>max(x) 返回序列的最大值元素</p>\n</li>\n<li><p>min(x) 返回序列的最小值元素</p>\n</li>\n<li><p>sum(x) 返回序列中所有元素的和(元素必须是数值类型)</p>\n</li>\n</ol>\n<h2 id=\"字符串-str\"><a href=\"#字符串-str\" class=\"headerlink\" title=\"字符串 str\"></a>字符串 str</h2><h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><blockquote>\n<p>由一系列字符组成的不可变序列容器，存储的是字符的编码值。</p>\n</blockquote>\n<h3 id=\"编码\"><a href=\"#编码\" class=\"headerlink\" title=\"编码\"></a>编码</h3><ol start=\"89\">\n<li><p>字节byte：计算机最小存储单位，等于8 位bit.</p>\n</li>\n<li><p>字符：单个的数字，文字与符号。</p>\n</li>\n<li><p>字符集(码表)：存储字符与二进制序列的对应关系。</p>\n</li>\n<li><p>编码：将字符转换为对应的二进制序列的过程。</p>\n</li>\n<li><p>解码：将二进制序列转换为对应的字符的过程。</p>\n</li>\n<li><p>编码方式：</p>\n</li>\n</ol>\n<p>–ASCII编码：包含英文、数字等字符，每个字符1个字节。</p>\n<p>–GBK编码：兼容ASCII编码，包含21003个中文；英文1个字节，汉字2个字节。</p>\n<p>–Unicode字符集：国际统一编码，旧字符集每个字符2字节，新字符集4字节。</p>\n<p>–UTF-8编码：Unicode的存储与传输方式，英文1字节，中文3字节。</p>\n<h4 id=\"相关函数\"><a href=\"#相关函数\" class=\"headerlink\" title=\"相关函数\"></a>相关函数</h4><ol start=\"95\">\n<li><p>ord(字符串):返回该字符串的Unicode码。</p>\n</li>\n<li><p>chr(整数):返回该整数对应的字符串。</p>\n</li>\n</ol>\n<h3 id=\"字面值\"><a href=\"#字面值\" class=\"headerlink\" title=\"字面值\"></a>字面值</h3><h4 id=\"单引和双引号的区别\"><a href=\"#单引和双引号的区别\" class=\"headerlink\" title=\"单引和双引号的区别\"></a>单引和双引号的区别</h4><ol start=\"97\">\n<li><p>单引号内的双引号不算结束符</p>\n</li>\n<li><p>双引号内的单引号不算结束符</p>\n</li>\n</ol>\n<h4 id=\"三引号作用\"><a href=\"#三引号作用\" class=\"headerlink\" title=\"三引号作用\"></a>三引号作用</h4><ol start=\"99\">\n<li><p>换行会自动转换为换行符\\n</p>\n</li>\n<li><p>三引号内可以包含单引号和双引号</p>\n</li>\n<li><p>作为文档字符串</p>\n</li>\n</ol>\n<h4 id=\"转义字符\"><a href=\"#转义字符\" class=\"headerlink\" title=\"转义字符\"></a>转义字符</h4><ol start=\"102\">\n<li>改变字符的原始含义。</li>\n</ol>\n<blockquote>\n<p>&#39; &quot; &quot;“” \\n \\ \\t \\0 空字符</p>\n</blockquote>\n<ol start=\"103\">\n<li>原始字符串：取消转义。</li>\n</ol>\n<p>a &#x3D; r”C:\\newfile\\test.py”</p>\n<h4 id=\"字符串格式化\"><a href=\"#字符串格式化\" class=\"headerlink\" title=\"字符串格式化\"></a>字符串格式化</h4><ol start=\"104\">\n<li>定义：</li>\n</ol>\n<blockquote>\n<p>生成一定格式的字符串。</p>\n</blockquote>\n<ol start=\"105\">\n<li>语法：</li>\n</ol>\n<blockquote>\n<p>字符串%(变量)</p>\n</blockquote>\n<p>“我的名字是%s,年龄是%s” % (name, age)</p>\n<ol start=\"106\">\n<li>类型码：</li>\n</ol>\n<blockquote>\n<p>%s 字符串 %d整数 %f 浮点数</p>\n</blockquote>\n<h2 id=\"列表-list\"><a href=\"#列表-list\" class=\"headerlink\" title=\"列表 list\"></a>列表 list</h2><h3 id=\"定义-1\"><a href=\"#定义-1\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>由一系列变量组成的可变序列容器。</p>\n<h3 id=\"基础操作\"><a href=\"#基础操作\" class=\"headerlink\" title=\"基础操作\"></a>基础操作</h3><ol start=\"107\">\n<li>创建列表：</li>\n</ol>\n<blockquote>\n<p>列表名 &#x3D; []</p>\n</blockquote>\n<p>列表名 &#x3D; list(可迭代对象)</p>\n<ol start=\"108\">\n<li>添加元素：</li>\n</ol>\n<blockquote>\n<p>列表名.append(元素)</p>\n</blockquote>\n<p>列表.insert(索引，元素)</p>\n<ol start=\"109\">\n<li>定位元素：</li>\n</ol>\n<blockquote>\n<p>列表名[索引] &#x3D; 元素</p>\n</blockquote>\n<p>变量 &#x3D; 列表名[索引]</p>\n<p>变量 &#x3D; 列表名[切片] # 赋值给变量的是切片所创建的新列表</p>\n<p>列表名[切片] &#x3D; 容器 # 右侧必须是可迭代对象，左侧切片没有创建新列表。遍历列表：</p>\n<p>正向：</p>\n<p>for 变量名 in 列表名:</p>\n<p>变量名就是元素</p>\n<p>反向：</p>\n<p>for 索引名 in range(len(列表名)-1,-1,-1):</p>\n<p>列表名[索引名]就是元素</p>\n<ol start=\"110\">\n<li>删除元素：</li>\n</ol>\n<blockquote>\n<p>列表名.remove(元素)</p>\n</blockquote>\n<p>del 列表名[索引或切片]</p>\n<h3 id=\"深拷贝和浅拷贝\"><a href=\"#深拷贝和浅拷贝\" class=\"headerlink\" title=\"深拷贝和浅拷贝\"></a>深拷贝和浅拷贝</h3><p>浅拷贝：复制过程中,只复制一层变量,不会复制深层变量绑定的对象的复制过程。</p>\n<p>深拷贝：复制整个依懒的变量。</p>\n<h3 id=\"列表VS字符串\"><a href=\"#列表VS字符串\" class=\"headerlink\" title=\"列表VS字符串\"></a>列表VS字符串</h3><ol start=\"111\">\n<li><p>列表和字符串都是序列,元素之间有先后顺序关系。</p>\n</li>\n<li><p>字符串是不可变的序列,列表是可变的序列。</p>\n</li>\n<li><p>字符串中每个元素只能存储字符,而列表可以存储任意类型。</p>\n</li>\n<li><p>列表和字符串都是可迭代对象。</p>\n</li>\n<li><p>函数：</p>\n</li>\n</ol>\n<blockquote>\n<p>将多个字符串拼接为一个。</p>\n</blockquote>\n<p>result &#x3D; “连接符”.join(列表)</p>\n<p>将一个字符串拆分为多个。</p>\n<p>列表 &#x3D; “a-b-c-d”.split(“分隔符”)</p>\n<h3 id=\"列表推导式\"><a href=\"#列表推导式\" class=\"headerlink\" title=\"列表推导式\"></a>列表推导式</h3><ol start=\"116\">\n<li>定义：</li>\n</ol>\n<blockquote>\n<p>使用简易方法，将可迭代对象转换为列表。</p>\n</blockquote>\n<ol start=\"117\">\n<li>语法：</li>\n</ol>\n<blockquote>\n<p>变量 &#x3D; [表达式 for 变量 in 可迭代对象]</p>\n</blockquote>\n<p>变量 &#x3D; [表达式 for 变量 in 可迭代对象 if 条件]</p>\n<ol start=\"118\">\n<li>说明:</li>\n</ol>\n<blockquote>\n<p>如果if真值表达式的布尔值为False,则可迭代对象生成的数据将被丢弃。</p>\n</blockquote>\n<h3 id=\"列表推导式嵌套\"><a href=\"#列表推导式嵌套\" class=\"headerlink\" title=\"列表推导式嵌套\"></a>列表推导式嵌套</h3><ol start=\"119\">\n<li>语法：</li>\n</ol>\n<blockquote>\n<p>变量 &#x3D; [表达式 for 变量1 in 可迭代对象1 for 变量2 in可迭代对象2]</p>\n</blockquote>\n<ol start=\"120\">\n<li>传统写法：</li>\n</ol>\n<p>result &#x3D; []</p>\n<p>for r in [“a”, “b”, “c”]:</p>\n<p>for c in [“A”, “B”, “C”]:</p>\n<p>result.append(r + c)</p>\n<ol start=\"121\">\n<li>推导式写法：</li>\n</ol>\n<p>result &#x3D; [r + c for r in list01 for c in list02]</p>\n<h2 id=\"元组-tuple\"><a href=\"#元组-tuple\" class=\"headerlink\" title=\"元组 tuple\"></a>元组 tuple</h2><h3 id=\"定义-2\"><a href=\"#定义-2\" class=\"headerlink\" title=\"定义\"></a>定义</h3><ol start=\"122\">\n<li><p>由一系列变量组成的不可变序列容器。</p>\n</li>\n<li><p>不可变是指一但创建，不可以再添加&#x2F;删除&#x2F;修改元素。</p>\n</li>\n</ol>\n<h3 id=\"基础操作-1\"><a href=\"#基础操作-1\" class=\"headerlink\" title=\"基础操作\"></a>基础操作</h3><ol start=\"124\">\n<li>创建空元组：</li>\n</ol>\n<p>元组名 &#x3D; ()</p>\n<p>元组名 &#x3D; tuple()</p>\n<ol start=\"125\">\n<li>创建非空元组：</li>\n</ol>\n<p>元组名 &#x3D; (20,)</p>\n<p>元组名 &#x3D; (1, 2, 3)</p>\n<p>元组名 &#x3D; 100,200,300</p>\n<p>元组名 &#x3D; tuple(可迭代对象)</p>\n<ol start=\"126\">\n<li>获取元素：</li>\n</ol>\n<p>变量 &#x3D; 元组名[索引]</p>\n<p>变量 &#x3D; 元组名[切片] # 赋值给变量的是切片所创建的新列表</p>\n<ol start=\"127\">\n<li>遍历元组：</li>\n</ol>\n<p>正向：</p>\n<p>for 变量名 in 列表名:</p>\n<p>变量名就是元素</p>\n<p>反向：</p>\n<p>for 索引名 in range(len(列表名)-1,-1,-1):</p>\n<p>元组名[索引名]就是元素</p>\n<h3 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h3><ol start=\"128\">\n<li><p>元组与列表都可以存储一系列变量，由于列表会预留内存空间，所以可以增加元素。</p>\n</li>\n<li><p>元组会按需分配内存，所以如果变量数量固定，建议使用元组，因为占用空间更小。</p>\n</li>\n<li><p>应用：</p>\n</li>\n</ol>\n<p>变量交换的本质就是创建元组：x, y &#x3D; （y, x ）</p>\n<p>格式化字符串的本质就是创建元祖：”姓名:%s, 年龄:%d” % (“tarena”, 15)</p>\n<h2 id=\"字典-dict\"><a href=\"#字典-dict\" class=\"headerlink\" title=\"字典 dict\"></a>字典 dict</h2><h3 id=\"定义-3\"><a href=\"#定义-3\" class=\"headerlink\" title=\"定义\"></a>定义</h3><ol start=\"131\">\n<li><p>由一系列键值对组成的可变散列容器。</p>\n</li>\n<li><p>散列：对键进行哈希运算，确定在内存中的存储位置，每条数据存储无先后顺序。</p>\n</li>\n<li><p>键必须惟一且不可变(字符串&#x2F;数字&#x2F;元组)，值没有限制。</p>\n</li>\n</ol>\n<h3 id=\"基础操作-2\"><a href=\"#基础操作-2\" class=\"headerlink\" title=\"基础操作\"></a>基础操作</h3><ol start=\"134\">\n<li>创建字典：</li>\n</ol>\n<p>字典名 &#x3D; {键1：值1，键2：值2}</p>\n<p>字典名 &#x3D; dict (可迭代对象)</p>\n<ol start=\"135\">\n<li>添加&#x2F;修改元素：</li>\n</ol>\n<p>语法:</p>\n<p>字典名[键] &#x3D; 数据</p>\n<p>说明:</p>\n<p>键不存在，创建记录。</p>\n<p>键存在，修改值。</p>\n<ol start=\"136\">\n<li>获取元素：</li>\n</ol>\n<p>变量 &#x3D; 字典名[键] # 没有键则错误</p>\n<ol start=\"137\">\n<li>遍历字典：</li>\n</ol>\n<p>for 键名 in 字典名:</p>\n<p>​\t字典名[键名]</p>\n<p>for 键名,值名 in 字典名.items():</p>\n<p>语句</p>\n<ol start=\"138\">\n<li>删除元素：</li>\n</ol>\n<blockquote>\n<p>del 字典名[键]</p>\n</blockquote>\n<h3 id=\"字典推导式\"><a href=\"#字典推导式\" class=\"headerlink\" title=\"字典推导式\"></a>字典推导式</h3><ol start=\"139\">\n<li>定义：</li>\n</ol>\n<p>使用简易方法，将可迭代对象转换为字典。</p>\n<ol start=\"140\">\n<li>语法:</li>\n</ol>\n<p>{键:值 for 变量 in 可迭代对象}</p>\n<p>{键:值 for 变量 in 可迭代对象 if 条件}</p>\n<h3 id=\"字典-VS-列表\"><a href=\"#字典-VS-列表\" class=\"headerlink\" title=\"字典 VS 列表\"></a>字典 VS 列表</h3><ol start=\"141\">\n<li><p>都是可变容器。</p>\n</li>\n<li><p>获取元素方式不同,列表用索引,字典用键。</p>\n</li>\n<li><p>字典的插入,删除,修改的速度快于列表。</p>\n</li>\n<li><p>列表的存储是有序的,字典的存储是无序的。</p>\n</li>\n</ol>\n<h2 id=\"集合-set\"><a href=\"#集合-set\" class=\"headerlink\" title=\"集合 set\"></a>集合 set</h2><h3 id=\"定义-4\"><a href=\"#定义-4\" class=\"headerlink\" title=\"定义\"></a>定义</h3><ol start=\"145\">\n<li><p>由一系列不重复的不可变类型变量(元组&#x2F;数&#x2F;字符串)组成的可变散列容器。</p>\n</li>\n<li><p>相当于只有键没有值的字典(键则是集合的数据)。</p>\n</li>\n</ol>\n<h3 id=\"基础操作-3\"><a href=\"#基础操作-3\" class=\"headerlink\" title=\"基础操作\"></a>基础操作</h3><ol start=\"147\">\n<li>创建空集合：</li>\n</ol>\n<p>集合名 &#x3D; set()</p>\n<p>集合名 &#x3D; set(可迭代对象)</p>\n<ol start=\"148\">\n<li>创建具有默认值集合：</li>\n</ol>\n<p>集合名 &#x3D; {1, 2, 3}</p>\n<p>集合名 &#x3D; set(可迭代对象)</p>\n<ol start=\"149\">\n<li>添加元素：</li>\n</ol>\n<p>集合名.add(元素)</p>\n<ol start=\"150\">\n<li>删除元素：</li>\n</ol>\n<p>集合名.discard(元素)</p>\n<h3 id=\"运算\"><a href=\"#运算\" class=\"headerlink\" title=\"运算\"></a>运算</h3><ol start=\"151\">\n<li>交集&amp;：返回共同元素。</li>\n</ol>\n<p>s1 &#x3D; {1, 2, 3}</p>\n<p>s2 &#x3D; {2, 3, 4}</p>\n<p>s3 &#x3D; s1 &amp; s2 # {2, 3}</p>\n<ol start=\"152\">\n<li>并集：返回不重复元素</li>\n</ol>\n<p>s1 &#x3D; {1, 2, 3}</p>\n<p>s2 &#x3D; {2, 3, 4}</p>\n<p>s3 &#x3D; s1 | s2 # {1, 2, 3, 4}</p>\n<ol start=\"153\">\n<li>补集-：返回只属于其中之一的元素</li>\n</ol>\n<p>s1 &#x3D; {1, 2, 3}</p>\n<p>s2 &#x3D; {2, 3, 4}</p>\n<p>s1 - s2 # {1} 属于s1但不属于s2</p>\n<p>补集^：返回不同的的元素</p>\n<p>s1 &#x3D; {1, 2, 3}</p>\n<p>s2 &#x3D; {2, 3, 4}</p>\n<p>s3 &#x3D; s1 ^ s2 # {1, 4} 等同于(s1-s2 | s2-s1)</p>\n<ol start=\"154\">\n<li><p>子集&lt;：判断一个集合的所有元素是否完全在另一个集合中</p>\n</li>\n<li><p>超集&gt;：判断一个集合是否具有另一个集合的所有元素</p>\n</li>\n</ol>\n<p>s1 &#x3D; {1, 2, 3}</p>\n<p>s2 &#x3D; {2, 3}</p>\n<p>s2 &lt; s1 # True</p>\n<p>s1 &gt; s2 # True</p>\n<ol start=\"156\">\n<li>相同或不同&#x3D;&#x3D; !&#x3D;：判断集合中的所有元素是否和另一个集合相同。</li>\n</ol>\n<p>s1 &#x3D; {1, 2, 3}</p>\n<p>s2 &#x3D; {3, 2, 1}</p>\n<p>s1 &#x3D;&#x3D; s2 # True</p>\n<p>s1 !&#x3D; s2 # False</p>\n<p>子集或相同,超集或相同 &lt;&#x3D; &gt;&#x3D;</p>\n<h3 id=\"集合推导式\"><a href=\"#集合推导式\" class=\"headerlink\" title=\"集合推导式\"></a>集合推导式</h3><ol start=\"157\">\n<li>定义：</li>\n</ol>\n<p>使用简易方法，将可迭代对象转换为集合。</p>\n<ol start=\"158\">\n<li>语法:</li>\n</ol>\n<p>{表达式 for 变量 in 可迭代对象}</p>\n<p>{表达式 for 变量 in 可迭代对象 if 条件}</p>\n<h1 id=\"函数-function\"><a href=\"#函数-function\" class=\"headerlink\" title=\"函数 function\"></a>函数 function</h1><h2 id=\"pycharm相关设置\"><a href=\"#pycharm相关设置\" class=\"headerlink\" title=\"pycharm相关设置\"></a>pycharm相关设置</h2><ol start=\"159\">\n<li>“代码自动完成”时间延时设置</li>\n</ol>\n<blockquote>\n<p>File -&gt; Settings -&gt; Editor -&gt; General -&gt; Code Completion -&gt; Autopopup in (ms):0</p>\n</blockquote>\n<ol start=\"160\">\n<li>快捷键：</li>\n</ol>\n<blockquote>\n<p>Ctrl + P 参数信息（在方法中调用参数）</p>\n</blockquote>\n<p>Ctrl + Q 快速查看文档</p>\n<p>Ctrl + Alt + M 提取方法</p>\n<h2 id=\"定义-5\"><a href=\"#定义-5\" class=\"headerlink\" title=\"定义\"></a>定义</h2><ol start=\"161\">\n<li><p>用于封装一个特定的功能，表示一个功能或者行为。</p>\n</li>\n<li><p>函数是可以重复执行的语句块, 可以重复调用。</p>\n</li>\n</ol>\n<h2 id=\"作用-1\"><a href=\"#作用-1\" class=\"headerlink\" title=\"作用\"></a>作用</h2><p>提高代码的可重用性和可维护性（代码层次结构更清晰）。</p>\n<h2 id=\"定义函数\"><a href=\"#定义函数\" class=\"headerlink\" title=\"定义函数\"></a>定义函数</h2><ol start=\"163\">\n<li>语法：</li>\n</ol>\n<blockquote>\n<p>def 函数名(形式参数):</p>\n</blockquote>\n<p>  函数体</p>\n<ol start=\"164\">\n<li>说明：</li>\n</ol>\n<blockquote>\n<p>def 关键字：全称是define，意为”定义”。</p>\n</blockquote>\n<p>函数名：对函数体中语句的描述，规则与变量名相同。</p>\n<p>形式参数：方法定义者要求调用者提供的信息。</p>\n<p>函数体：完成该功能的语句。</p>\n<ol start=\"165\">\n<li>函数的第一行语句建议使用文档字符串描述函数的功能与参数。</li>\n</ol>\n<h2 id=\"调用函数\"><a href=\"#调用函数\" class=\"headerlink\" title=\"调用函数\"></a>调用函数</h2><ol start=\"166\">\n<li><p>语法：函数名(实际参数)</p>\n</li>\n<li><p>说明：根据形参传递内容。</p>\n</li>\n</ol>\n<h2 id=\"返回值\"><a href=\"#返回值\" class=\"headerlink\" title=\"返回值\"></a>返回值</h2><ol start=\"168\">\n<li>定义：</li>\n</ol>\n<blockquote>\n<p>方法定义者告诉调用者的结果。</p>\n</blockquote>\n<ol start=\"169\">\n<li>语法：</li>\n</ol>\n<blockquote>\n<p>return 数据 </p>\n</blockquote>\n<ol start=\"170\">\n<li>说明：</li>\n</ol>\n<blockquote>\n<p>return后没有语句，相当于返回 None。</p>\n</blockquote>\n<p>函数体没有return，相当于返回None。</p>\n<h2 id=\"可变／不可变类型在传参时的区别\"><a href=\"#可变／不可变类型在传参时的区别\" class=\"headerlink\" title=\"可变／不可变类型在传参时的区别\"></a>可变／不可变类型在传参时的区别</h2><ol start=\"171\">\n<li>不可变类型参数有:</li>\n</ol>\n<blockquote>\n<p>数值型(整数，浮点数,复数)</p>\n</blockquote>\n<p>布尔值bool</p>\n<p>None 空值</p>\n<p>字符串str</p>\n<p>元组tuple</p>\n<p>固定集合frozenset</p>\n<ol start=\"172\">\n<li>可变类型参数有:</li>\n</ol>\n<blockquote>\n<p>列表 list</p>\n</blockquote>\n<p>字典 dict</p>\n<p>集合 set</p>\n<ol start=\"173\">\n<li>传参说明：</li>\n</ol>\n<blockquote>\n<p>不可变类型的数据传参时，函数内部不会改变原数据的值。</p>\n</blockquote>\n<p>可变类型的数据传参时，函数内部可以改变原数据。</p>\n<h2 id=\"函数参数\"><a href=\"#函数参数\" class=\"headerlink\" title=\"函数参数\"></a>函数参数</h2><h3 id=\"实参传递方式argument\"><a href=\"#实参传递方式argument\" class=\"headerlink\" title=\"实参传递方式argument\"></a>实参传递方式argument</h3><h4 id=\"位置传参\"><a href=\"#位置传参\" class=\"headerlink\" title=\"位置传参\"></a>位置传参</h4><p>定义：实参与形参的位置依次对应。</p>\n<h4 id=\"序列传参\"><a href=\"#序列传参\" class=\"headerlink\" title=\"序列传参\"></a>序列传参</h4><p>定义：实参用*将序列拆解后与形参的位置依次对应。</p>\n<h4 id=\"关键字传参\"><a href=\"#关键字传参\" class=\"headerlink\" title=\"关键字传参\"></a>关键字传参</h4><p>定义：实参根据形参的名字进行对应。</p>\n<h4 id=\"字典关键字传参\"><a href=\"#字典关键字传参\" class=\"headerlink\" title=\"字典关键字传参\"></a>字典关键字传参</h4><ol start=\"174\">\n<li><p>定义：实参用**将字典拆解后与形参的名字进行对应。</p>\n</li>\n<li><p>作用：配合形参的缺省参数，可以使调用者随意传参。</p>\n</li>\n</ol>\n<h3 id=\"形参定义方式parameter\"><a href=\"#形参定义方式parameter\" class=\"headerlink\" title=\"形参定义方式parameter\"></a>形参定义方式parameter</h3><h4 id=\"缺省参数\"><a href=\"#缺省参数\" class=\"headerlink\" title=\"缺省参数\"></a>缺省参数</h4><ol start=\"176\">\n<li>语法：</li>\n</ol>\n<blockquote>\n<p>def 函数名(形参名1&#x3D;默认实参1, 形参名2&#x3D;默认实参2, …):</p>\n</blockquote>\n<p>函数体</p>\n<ol start=\"177\">\n<li>说明：</li>\n</ol>\n<blockquote>\n<p>缺省参数必须自右至左依次存在，如果一个参数有缺省参数，则其右侧的所有参数都必须有缺省参数。</p>\n</blockquote>\n<p>缺省参数可以有0个或多个，甚至全部都有缺省参数。</p>\n<h4 id=\"位置形参\"><a href=\"#位置形参\" class=\"headerlink\" title=\"位置形参\"></a>位置形参</h4><p>语法：</p>\n<blockquote>\n<p>def 函数名(形参名1, 形参名2, …):</p>\n</blockquote>\n<p>函数体</p>\n<h4 id=\"星号元组形参\"><a href=\"#星号元组形参\" class=\"headerlink\" title=\"星号元组形参\"></a>星号元组形参</h4><ol start=\"178\">\n<li>语法：</li>\n</ol>\n<blockquote>\n<p>def 函数名(*元组形参名):</p>\n</blockquote>\n<p>  函数体</p>\n<ol start=\"179\">\n<li>作用：</li>\n</ol>\n<blockquote>\n<p>收集多余的位置传参。</p>\n</blockquote>\n<ol start=\"180\">\n<li>说明：</li>\n</ol>\n<blockquote>\n<p>一般命名为’args’</p>\n</blockquote>\n<p>形参列表中最多只能有一个</p>\n<h4 id=\"命名关键字形参\"><a href=\"#命名关键字形参\" class=\"headerlink\" title=\"命名关键字形参\"></a>命名关键字形参</h4><ol start=\"181\">\n<li>语法：</li>\n</ol>\n<blockquote>\n<p>def 函数名(*, 命名关键字形参1, 命名关键字形参2, …):</p>\n</blockquote>\n<p>函数体</p>\n<p>def 函数名(*args, 命名关键字形参1, 命名关键字形参2, …):<br>  函数体</p>\n<ol start=\"182\">\n<li>作用：</li>\n</ol>\n<blockquote>\n<p>强制实参使用关键字传参</p>\n</blockquote>\n<h4 id=\"双星号字典形参\"><a href=\"#双星号字典形参\" class=\"headerlink\" title=\"双星号字典形参\"></a>双星号字典形参</h4><ol start=\"183\">\n<li>语法：</li>\n</ol>\n<p>def 函数名(**字典形参名):</p>\n<p>​\t\t函数体</p>\n<ol start=\"184\">\n<li>作用：</li>\n</ol>\n<p>收集多余的关键字传参</p>\n<ol start=\"185\">\n<li>说明:</li>\n</ol>\n<p>一般命名为’kwargs’</p>\n<p>形参列表中最多只能有一个</p>\n<h4 id=\"参数自左至右的顺序\"><a href=\"#参数自左至右的顺序\" class=\"headerlink\" title=\"参数自左至右的顺序\"></a>参数自左至右的顺序</h4><p>位置形参 –&gt; 星号元组形参 –&gt; 命名关键字形参 –&gt; 双星号字典形参</p>\n<h1 id=\"作用域LEGB\"><a href=\"#作用域LEGB\" class=\"headerlink\" title=\"作用域LEGB\"></a>作用域LEGB</h1><ol start=\"186\">\n<li><p>作用域：变量起作用的范围。</p>\n</li>\n<li><p>Local局部作用域：函数内部。</p>\n</li>\n<li><p>Enclosing 外部嵌套作用域 ：函数嵌套。</p>\n</li>\n<li><p>Global全局作用域：模块(.py文件)内部。</p>\n</li>\n<li><p>Builtin内置模块作用域：builtins.py文件。</p>\n</li>\n</ol>\n<h2 id=\"变量名的查找规则\"><a href=\"#变量名的查找规则\" class=\"headerlink\" title=\"变量名的查找规则\"></a>变量名的查找规则</h2><ol start=\"191\">\n<li><p>由内到外：L -&gt; E -&gt; G -&gt; B</p>\n</li>\n<li><p>在访问变量时，先查找本地变量，然后是包裹此函数外部的函数内部的变量，之后是全局变量，最后是内置变量。</p>\n</li>\n</ol>\n<h2 id=\"局部变量\"><a href=\"#局部变量\" class=\"headerlink\" title=\"局部变量\"></a>局部变量</h2><ol start=\"193\">\n<li><p>定义在函数内部的变量(形参也是局部变量)</p>\n</li>\n<li><p>只能在函数内部使用</p>\n</li>\n<li><p>调用函数时才被创建，函数结束后自动销毁</p>\n</li>\n</ol>\n<h2 id=\"全局变量\"><a href=\"#全局变量\" class=\"headerlink\" title=\"全局变量\"></a>全局变量</h2><ol start=\"196\">\n<li><p>定义在函数外部,模块内部的变量。</p>\n</li>\n<li><p>在整个模块(py文件)范围内访问（但函数内不能将其直接赋值）。</p>\n</li>\n</ol>\n<h2 id=\"global-语句\"><a href=\"#global-语句\" class=\"headerlink\" title=\"global 语句\"></a>global 语句</h2><ol start=\"198\">\n<li>作用：</li>\n</ol>\n<blockquote>\n<p>在函数内部修改全局变量。</p>\n</blockquote>\n<p>在函数内部定义全局变量(全局声明)。</p>\n<ol start=\"199\">\n<li>语法：</li>\n</ol>\n<blockquote>\n<p>global 变量1, 变量2, …</p>\n</blockquote>\n<ol start=\"200\">\n<li>说明</li>\n</ol>\n<blockquote>\n<p>在函数内直接为全局变量赋值，视为创建新的局部变量。</p>\n</blockquote>\n<p>不能先声明局部的变量，再用global声明为全局变量。</p>\n<h2 id=\"nonlocal-语句\"><a href=\"#nonlocal-语句\" class=\"headerlink\" title=\"nonlocal 语句\"></a>nonlocal 语句</h2><ol start=\"201\">\n<li>作用：</li>\n</ol>\n<blockquote>\n<p>在内层函数修改外层嵌套函数内的变量</p>\n</blockquote>\n<ol start=\"202\">\n<li>语法</li>\n</ol>\n<blockquote>\n<p>nonlocal 变量名1,变量名2, …</p>\n</blockquote>\n<ol start=\"203\">\n<li>说明</li>\n</ol>\n<blockquote>\n<p>在被嵌套的内函数中进行使用</p>\n</blockquote>\n<h1 id=\"面向对象-Object-Oriented\"><a href=\"#面向对象-Object-Oriented\" class=\"headerlink\" title=\"面向对象 Object Oriented\"></a>面向对象 Object Oriented</h1><h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><h3 id=\"面向过程\"><a href=\"#面向过程\" class=\"headerlink\" title=\"面向过程\"></a>面向过程</h3><ol start=\"204\">\n<li>分析出解决问题的步骤，然后逐步实现。</li>\n</ol>\n<blockquote>\n<p>例如：婚礼筹办</p>\n</blockquote>\n<p>– 发请柬（选照片、措词、制作）</p>\n<p>– 宴席（场地、找厨师、准备桌椅餐具、计划菜品、购买食材）</p>\n<p>– 婚礼仪式（定婚礼仪式流程、请主持人）</p>\n<ol start=\"205\">\n<li><p>公式：程序 &#x3D; 算法 + 数据结构</p>\n</li>\n<li><p>优点：所有环节、细节自己掌控。</p>\n</li>\n<li><p>缺点：考虑所有细节，工作量大。</p>\n</li>\n</ol>\n<h3 id=\"面向对象\"><a href=\"#面向对象\" class=\"headerlink\" title=\"面向对象\"></a>面向对象</h3><ol start=\"208\">\n<li>找出解决问题的人，然后分配职责。</li>\n</ol>\n<blockquote>\n<p>例如：婚礼筹办</p>\n</blockquote>\n<p>– 发请柬：找摄影公司（拍照片、制作请柬）</p>\n<p>– 宴席：找酒店（告诉对方标准、数量、挑选菜品）</p>\n<p>– 婚礼仪式：找婚庆公司（对方提供司仪、制定流程、提供设备、帮助执行）</p>\n<ol start=\"209\">\n<li><p>公式：程序 &#x3D; 对象 + 交互</p>\n</li>\n<li><p>优点</p>\n</li>\n</ol>\n<p> (1) 思想层面：</p>\n<p>– 可模拟现实情景，更接近于人类思维。</p>\n<p>– 有利于梳理归纳、分析解决问题。</p>\n<p>(2) 技术层面：</p>\n<p>– 高复用：对重复的代码进行封装，提高开发效率。</p>\n<p>– 高扩展：增加新的功能，不修改以前的代码。</p>\n<p>– 高维护：代码可读性好，逻辑清晰，结构规整。</p>\n<ol start=\"211\">\n<li>缺点：学习曲线陡峭。</li>\n</ol>\n<h2 id=\"类和对象\"><a href=\"#类和对象\" class=\"headerlink\" title=\"类和对象\"></a>类和对象</h2><h3 id=\"基础概念\"><a href=\"#基础概念\" class=\"headerlink\" title=\"基础概念\"></a>基础概念</h3><p><img src=\"/pictures/07python_basic/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%A6%82%E8%BF%B0.jpg\" alt=\"面向对象概述\"></p>\n<ol start=\"212\">\n<li><p>抽象：从具体事物中抽离出共性、本质，舍弃个别、非本质过程。</p>\n</li>\n<li><p>类：一个抽象的概念，即生活中的”类别”。</p>\n</li>\n<li><p>对象：类的具体实例，即归属于某个类别的”个体”。</p>\n</li>\n<li><p>类是创建对象的”模板”。</p>\n</li>\n</ol>\n<p>– 数据成员：名词类型的状态。</p>\n<p>– 方法成员：动词类型的行为。</p>\n<h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h3><h4 id=\"定义类\"><a href=\"#定义类\" class=\"headerlink\" title=\"定义类\"></a>定义类</h4><ol start=\"216\">\n<li>代码</li>\n</ol>\n<blockquote>\n<p>class 类名:</p>\n</blockquote>\n<p>“””文档说明”””</p>\n<p>def <em>init</em>(self,参数列表):</p>\n<p>self.实例变量 &#x3D; 参数</p>\n<p>方法成员</p>\n<ol start=\"217\">\n<li>说明</li>\n</ol>\n<p>– 类名所有单词首字母大写.</p>\n<p>– <em>init</em> 也叫构造函数，创建对象时被调用，也可以省略。</p>\n<p>– self 变量绑定的是被创建的对象，名称可以随意。</p>\n<h4 id=\"创建对象-实例化\"><a href=\"#创建对象-实例化\" class=\"headerlink\" title=\"创建对象(实例化)\"></a>创建对象(实例化)</h4><p>变量 &#x3D; 构造函数 (参数列表)</p>\n<h3 id=\"实例成员\"><a href=\"#实例成员\" class=\"headerlink\" title=\"实例成员\"></a>实例成员</h3><h4 id=\"实例变量\"><a href=\"#实例变量\" class=\"headerlink\" title=\"实例变量\"></a>实例变量</h4><ol start=\"218\">\n<li>语法</li>\n</ol>\n<p> </p>\n<p>(1) 定义：对象.变量名</p>\n<p>(2) 调用：对象.变量名</p>\n<ol start=\"219\">\n<li>说明</li>\n</ol>\n<p>(1) 首次通过对象赋值为创建，再次赋值为修改.</p>\n<p>w01 &#x3D; Wife()</p>\n<p>w01.name &#x3D; “建宁”</p>\n<p>w01.name &#x3D; “建宁公主”</p>\n<p>(2) 通常在构造函数(<em>init</em>)中创建。</p>\n<p>w01 &#x3D; Wife(“建宁公主,24)</p>\n<p>print(w01.name)</p>\n<p>(3) 每个对象存储一份，通过对象地址访问。</p>\n<p> </p>\n<ol start=\"220\">\n<li><p>作用：描述某个对象自己的数据。</p>\n</li>\n<li><p>__dict__：对象的属性，用于存储自身实例变量的字典。</p>\n</li>\n</ol>\n<h4 id=\"实例方法\"><a href=\"#实例方法\" class=\"headerlink\" title=\"实例方法\"></a>实例方法</h4><ol start=\"222\">\n<li>语法</li>\n</ol>\n<p>(1) 定义： def 方法名称(self, 参数列表):</p>\n<p>方法体</p>\n<p>(2) 调用： 对象地址.实例方法名(参数列表)</p>\n<p>不建议通过类名访问实例方法</p>\n<ol start=\"223\">\n<li>说明</li>\n</ol>\n<p>(1) 至少有一个形参，第一个参数绑定调用这个方法的对象,一般命名为”self”。</p>\n<p>(2) 无论创建多少对象，方法只有一份，并且被所有对象共享。</p>\n<ol start=\"224\">\n<li>作用：表示对象行为。</li>\n</ol>\n<h3 id=\"类成员\"><a href=\"#类成员\" class=\"headerlink\" title=\"类成员\"></a>类成员</h3><h4 id=\"类变量\"><a href=\"#类变量\" class=\"headerlink\" title=\"类变量\"></a>类变量</h4><ol start=\"225\">\n<li>语法</li>\n</ol>\n<p> (1) 定义：在类中，方法外定义变量。</p>\n<blockquote>\n<p>class 类名:</p>\n</blockquote>\n<p>变量名 &#x3D; 表达式</p>\n<p>(2) 调用：类名.变量名</p>\n<p>不建议通过对象访问类变量</p>\n<ol start=\"226\">\n<li>说明</li>\n</ol>\n<p>(1) 存储在类中。</p>\n<p>(2) 只有一份，被所有对象共享。</p>\n<ol start=\"227\">\n<li>作用：描述所有对象的共有数据。</li>\n</ol>\n<h4 id=\"类方法\"><a href=\"#类方法\" class=\"headerlink\" title=\"类方法\"></a>类方法</h4><ol start=\"228\">\n<li>语法</li>\n</ol>\n<p> (1) 定义：</p>\n<blockquote>\n<p>@classmethod</p>\n</blockquote>\n<p>def 方法名称(cls,参数列表):</p>\n<p>方法体</p>\n<p>(2) 调用：类名.方法名(参数列表)</p>\n<blockquote>\n<p>不建议通过对象访问类方法</p>\n</blockquote>\n<ol start=\"229\">\n<li>说明</li>\n</ol>\n<p>(1) 至少有一个形参，第一个形参用于绑定类，一般命名为’cls’</p>\n<p>(2) 使用@classmethod修饰的目的是调用类方法时可以隐式传递类。</p>\n<p>(3) 类方法中不能访问实例成员，实例方法中可以访问类成员。</p>\n<ol start=\"230\">\n<li>作用：操作类变量。</li>\n</ol>\n<h3 id=\"静态方法\"><a href=\"#静态方法\" class=\"headerlink\" title=\"静态方法\"></a>静态方法</h3><ol start=\"231\">\n<li>语法</li>\n</ol>\n<p> (1) 定义：</p>\n<blockquote>\n<p>@staticmethod</p>\n</blockquote>\n<p>def 方法名称(参数列表):</p>\n<p>方法体</p>\n<p>(2) 调用：类名.方法名(参数列表)</p>\n<blockquote>\n<p>不建议通过对象访问静态方法</p>\n</blockquote>\n<ol start=\"232\">\n<li>说明</li>\n</ol>\n<blockquote>\n<p>(1) 使用@ staticmethod修饰的目的是该方法不需要隐式传参数。</p>\n</blockquote>\n<p>(2) 静态方法不能访问实例成员和类成员</p>\n<ol start=\"233\">\n<li>作用：定义常用的工具函数。</li>\n</ol>\n<h2 id=\"三大特征\"><a href=\"#三大特征\" class=\"headerlink\" title=\"三大特征\"></a>三大特征</h2><h3 id=\"封装\"><a href=\"#封装\" class=\"headerlink\" title=\"封装\"></a>封装</h3><p><img src=\"/pictures/07python_basic/%E5%B0%81%E8%A3%85%E6%80%9D%E6%83%B3.jpg\" alt=\"封装思想\"></p>\n<h4 id=\"数据角度讲\"><a href=\"#数据角度讲\" class=\"headerlink\" title=\"数据角度讲\"></a>数据角度讲</h4><ol start=\"234\">\n<li>定义：</li>\n</ol>\n<blockquote>\n<p>将一些基本数据类型复合成一个自定义类型。</p>\n</blockquote>\n<ol start=\"235\">\n<li>优势：</li>\n</ol>\n<p>将数据与对数据的操作相关联。</p>\n<p>代码可读性更高（类是对象的模板）。</p>\n<h4 id=\"行为角度讲\"><a href=\"#行为角度讲\" class=\"headerlink\" title=\"行为角度讲\"></a>行为角度讲</h4><ol start=\"236\">\n<li>定义：</li>\n</ol>\n<blockquote>\n<p>类外提供必要的功能，隐藏实现的细节。</p>\n</blockquote>\n<ol start=\"237\">\n<li>优势：</li>\n</ol>\n<blockquote>\n<p>简化编程，使用者不必了解具体的实现细节，只需要调用对外提供的功能。</p>\n</blockquote>\n<ol start=\"238\">\n<li>私有成员：</li>\n</ol>\n<p> </p>\n<p>(1) 作用：无需向类外提供的成员，可以通过私有化进行屏蔽。</p>\n<p>(2) 做法：命名使用双下划线开头。</p>\n<p>(3) 本质：障眼法，实际也可以访问。</p>\n<blockquote>\n<p>私有成员的名称被修改为：_类名__成员名，可以通过_dict_属性或dir函数查看。</p>\n</blockquote>\n<ol start=\"239\">\n<li>属性@property：</li>\n</ol>\n<blockquote>\n<p>公开的实例变量，缺少逻辑验证。私有的实例变量与两个公开的方法相结合，又使调用者的操作略显复杂。而属性可以将两个方法的使用方式像操作变量一样方便。</p>\n</blockquote>\n<p>(1) 定义：</p>\n<blockquote>\n<p>@property</p>\n</blockquote>\n<p>def 属性名(self):</p>\n<p>return self.__属性名</p>\n<p>@属性名.setter</p>\n<p>def 属性名(self, value):</p>\n<p>self.__属性名&#x3D; value</p>\n<p>(2) 调用：</p>\n<blockquote>\n<p>对象.属性名 &#x3D; 数据</p>\n</blockquote>\n<p>变量 &#x3D; 对象.属性名</p>\n<p>(3) 说明：</p>\n<blockquote>\n<p>通常两个公开的属性，保护一个私有的变量。</p>\n</blockquote>\n<p>@property 负责读取，@属性名.setter 负责写入</p>\n<p>只写：属性名&#x3D; property(None, 写入方法名)</p>\n<h4 id=\"设计角度讲\"><a href=\"#设计角度讲\" class=\"headerlink\" title=\"设计角度讲\"></a>设计角度讲</h4><ol start=\"240\">\n<li>定义：</li>\n</ol>\n<p>(1) 分而治之</p>\n<blockquote>\n<p>将一个大的需求分解为许多类，每个类处理一个独立的功能。</p>\n</blockquote>\n<p>(2) 变则疏之</p>\n<blockquote>\n<p>变化的地方独立封装，避免影响其他类。</p>\n</blockquote>\n<p>(3) 高 内 聚</p>\n<blockquote>\n<p>类中各个方法都在完成一项任务(单一职责的类)。</p>\n</blockquote>\n<p>(4) 低 耦 合</p>\n<blockquote>\n<p>类与类的关联性与依赖度要低(每个类独立)，让一个类的改变，尽少影响其他类。</p>\n</blockquote>\n<ol start=\"241\">\n<li>优势：</li>\n</ol>\n<p>便于分工，便于复用，可扩展性强。</p>\n<h4 id=\"案例-信息管理系统\"><a href=\"#案例-信息管理系统\" class=\"headerlink\" title=\"案例:信息管理系统\"></a>案例:信息管理系统</h4><p><img src=\"/pictures/07python_basic/image-20230103161103514.png\" alt=\"image-20230103161103514\"></p>\n<h4 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h4><p>实现对学生信息的增加、删除、修改和查询。</p>\n<h4 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h4><blockquote>\n<p>界面可能使用控制台，也可能使用Web等等。</p>\n</blockquote>\n<ol start=\"242\">\n<li><p>识别对象：界面视图类 逻辑控制类 数据模型类</p>\n</li>\n<li><p>分配职责：</p>\n</li>\n</ol>\n<blockquote>\n<p>界面视图类：负责处理界面逻辑，比如显示菜单，获取输入，显示结果等。</p>\n</blockquote>\n<p>逻辑控制类：负责存储学生信息，处理业务逻辑。比如添加、删除等</p>\n<p>数据模型类：定义需要处理的数据类型。比如学生信息。</p>\n<ol start=\"244\">\n<li>建立交互：</li>\n</ol>\n<blockquote>\n<p>界面视图对象 &lt;—-&gt; 数据模型对象 &lt;—-&gt; 逻辑控制对象</p>\n</blockquote>\n<h4 id=\"设计\"><a href=\"#设计\" class=\"headerlink\" title=\"设计\"></a>设计</h4><p>数据模型类：StudentModel</p>\n<p>数据：编号 id,姓名 name,年龄 age,成绩 score</p>\n<p>逻辑控制类：StudentManagerController</p>\n<p>数据：学生列表 __stu_list</p>\n<p>行为：获取列表 stu_list,添加学生 add_student，删除学生remove_student，修改学生update_student，根据成绩排序order_by_score。</p>\n<p>界面视图类：StudentManagerView</p>\n<p>数据：逻辑控制对象__manager</p>\n<p>行为：显示菜单__display_menu，选择菜单项__select_menu_item，入口逻辑main，</p>\n<p>输入学生__input_students，输出学生__output_students，删除学生__delete_student，修改学生信息__modify_student</p>\n<h3 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h3><p><img src=\"/pictures/07python_basic/%E7%BB%A7%E6%89%BF%E5%85%BC%E5%AE%B9%E6%80%A7.jpg\" alt=\"继承兼容性\"></p>\n<p><img src=\"/pictures/07python_basic/%E7%BB%A7%E6%89%BF%E5%86%85%E5%AD%98%E5%9B%BE.jpg\" alt=\"继承内存图\"></p>\n<h4 id=\"语法角度讲\"><a href=\"#语法角度讲\" class=\"headerlink\" title=\"语法角度讲\"></a>语法角度讲</h4><h4 id=\"继承方法\"><a href=\"#继承方法\" class=\"headerlink\" title=\"继承方法\"></a>继承方法</h4><ol start=\"245\">\n<li>代码:</li>\n</ol>\n<blockquote>\n<p>class 父类:</p>\n</blockquote>\n<p>def 父类方法(self):</p>\n<p>方法体</p>\n<p>class 子类(父类)：</p>\n<p>def 子类方法(self):</p>\n<p>方法体</p>\n<p>儿子 &#x3D; 子类()</p>\n<p>儿子.子类方法()</p>\n<p>儿子.父类方法()</p>\n<ol start=\"246\">\n<li>说明：</li>\n</ol>\n<blockquote>\n<p>子类直接拥有父类的方法.</p>\n</blockquote>\n<h4 id=\"内置函数\"><a href=\"#内置函数\" class=\"headerlink\" title=\"内置函数\"></a>内置函数</h4><blockquote>\n<p>isinstance(对象, 类型)</p>\n</blockquote>\n<p>返回指定对象是否是某个类的对象。</p>\n<p>issubclass(类型，类型)</p>\n<p>返回指定类型是否属于某个类型。</p>\n<h4 id=\"继承数据\"><a href=\"#继承数据\" class=\"headerlink\" title=\"继承数据\"></a>继承数据</h4><ol start=\"247\">\n<li><strong>代码</strong></li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">子类</span>(<span class=\"title class_ inherited__\">父类</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self,参数列表</span>):</span><br><span class=\"line\">    <span class=\"built_in\">super</span>().__init__(参数列表)</span><br><span class=\"line\">    self.自身实例变量 = 参数</span><br></pre></td></tr></table></figure>\n\n<ol start=\"248\">\n<li><strong>说明</strong></li>\n</ol>\n<blockquote>\n</blockquote>\n<ul>\n<li>子类如果没有构造函数，将自动执行父类的；</li>\n</ul>\n<figure class=\"highlight plaintext\"><figcaption><span>Text</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\">class Student(Person):</span><br><span class=\"line\">    # 子类若没有构造函数，使用父类的.</span><br><span class=\"line\">    pass</span><br><span class=\"line\"></span><br><span class=\"line\">s01 = Student()</span><br><span class=\"line\">print(s01.name)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n</blockquote>\n<ul>\n<li>但如果有构造函数将覆盖父类的,此时必须通过super()函数调用父类的构造函数，以确保父类实例变量被正常创建。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self,name</span>):</span><br><span class=\"line\">        self.name = name </span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Student</span>(<span class=\"title class_ inherited__\">Person</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 子类若具有构造函数，则必须先调用父类构造函数。</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self,name,score</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__(name)  <span class=\"comment\"># 这里调用父类的构造函数，同时需要传参的哦</span></span><br><span class=\"line\">        self.score = score</span><br><span class=\"line\"><span class=\"comment\"># 实例化测试</span></span><br><span class=\"line\">p01 = Person(<span class=\"string\">&quot;李四&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(p01.name)</span><br><span class=\"line\">s01 = Student(<span class=\"string\">&quot;张三&quot;</span>, <span class=\"number\">100</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(s01.score)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(s01.name)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"定义-6\"><a href=\"#定义-6\" class=\"headerlink\" title=\"定义\"></a>定义</h4><blockquote>\n<p>重用现有类的功能，并在此基础上进行扩展。</p>\n</blockquote>\n<p>说明：子类直接具有父类的成员（共性），还可以扩展新功能。</p>\n<h4 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h4><ul>\n<li>一种代码复用的方式。</li>\n</ul>\n<h4 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h4><ul>\n<li>耦合度高：父类的变化，直接影响子类。</li>\n</ul>\n<h4 id=\"设计角度讲-1\"><a href=\"#设计角度讲-1\" class=\"headerlink\" title=\"设计角度讲\"></a>设计角度讲</h4><h4 id=\"定义-7\"><a href=\"#定义-7\" class=\"headerlink\" title=\"定义\"></a>定义</h4><blockquote>\n<p>将相关类的共性进行抽象，统一概念，隔离变化。</p>\n</blockquote>\n<h4 id=\"适用性\"><a href=\"#适用性\" class=\"headerlink\" title=\"适用性\"></a>适用性</h4><ul>\n<li>多个类在概念上是一致的，且需要进行统一的处理。</li>\n</ul>\n<h4 id=\"相关概念\"><a href=\"#相关概念\" class=\"headerlink\" title=\"相关概念\"></a>相关概念</h4><ul>\n<li><p>父类（基类、超类）、子类（派生类）。</p>\n</li>\n<li><p>父类相对于子类更抽象，范围更宽泛；子类相对于父类更具体，范围更狭小。</p>\n</li>\n<li><p>单继承：父类只有一个（例如 Java，C#）。</p>\n</li>\n<li><p>多继承：父类有多个（例如C++，Python）。</p>\n</li>\n<li><p>Object类：任何类都直接或间接继承自 object 类。</p>\n</li>\n</ul>\n<h4 id=\"多继承\"><a href=\"#多继承\" class=\"headerlink\" title=\"多继承\"></a>多继承</h4><p>一个子类继承两个或两个以上的基类，父类中的属性和方法同时被子类继承下来。</p>\n<p>同名方法的解析顺序（MRO， Method Resolution Order）:</p>\n<p>类自身 –&gt; 父类继承列表（由左至右）–&gt; 再上层父类</p>\n<p>A</p>\n<p>&#x2F; \\</p>\n<p>&#x2F; \\</p>\n<p>B C</p>\n<p>\\ &#x2F;</p>\n<p>\\ &#x2F;</p>\n<p>D</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    多继承 -- 语法</span></span><br><span class=\"line\"><span class=\"string\">    同名方法解析顺序：MRO</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">m01</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;A - m01&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">B</span>(<span class=\"title class_ inherited__\">A</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">m01</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;B - m01&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">C</span>(<span class=\"title class_ inherited__\">A</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">m01</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;C - m01&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">D</span>(B,C):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">m02</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.m01()</span><br><span class=\"line\"></span><br><span class=\"line\">d01 = D()</span><br><span class=\"line\">d01.m02()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(D.mro())<span class=\"comment\"># [D, B,C, A,object]</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"继承练习01\"><a href=\"#继承练习01\" class=\"headerlink\" title=\"继承练习01\"></a>继承练习01</h4><p><strong>设计</strong></p>\n<ul>\n<li><p>存在变化点的内容，不能直接调，而是要抽象一个父类出来；</p>\n</li>\n<li><p>隔离不变和变化的内容；</p>\n</li>\n<li><p>父类就是来约束子类规范的，如果按照运行来说，不写父类也是可以的，子类都写一个相同的方法也都可以满足，但是还是要用继承来规范代码编写，所以在父类中可以加一句是否继承父类的校验： <code>if not isinstance(damage_target, Damageable):     raise ValueError(&quot;不是Damageable的子类&quot;)</code></p>\n</li>\n<li><p>父类如果有的方法，必须要子类也需要有，那就可以在父类中约定抛个异常来约定子类一定要实现重写这个父类方法：   <code>def damage(self, value):如果子类不重写，则异常。        raise NotImplementedError()</code>  这里的主要原理就是，如果子类没有写父类规定的类，那在实际调用这个子类的这个方法的时候，实际是会去找父类的方法，而此时一旦找到了父类的这个方法就知道这个子类肯定是没重写这个方法的，因为就可以报错了。</p>\n<p><img src=\"/pictures/07python_basic/%E6%89%8B%E9%9B%B7%E7%88%86%E7%82%B8.jpg\" alt=\"手雷爆炸\"></p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    手雷炸了，可能伤害敌人/玩家的生命.</span></span><br><span class=\"line\"><span class=\"string\">             还可能伤害未知事物(鸭子.房子....)</span></span><br><span class=\"line\"><span class=\"string\">    要求：增加了新事物，不影响手雷。</span></span><br><span class=\"line\"><span class=\"string\">    体会：继承的作用</span></span><br><span class=\"line\"><span class=\"string\">         多态的体现</span></span><br><span class=\"line\"><span class=\"string\">         设计原则</span></span><br><span class=\"line\"><span class=\"string\">            开闭原则</span></span><br><span class=\"line\"><span class=\"string\">            单一职责</span></span><br><span class=\"line\"><span class=\"string\">            依赖倒置</span></span><br><span class=\"line\"><span class=\"string\">    画出设计图</span></span><br><span class=\"line\"><span class=\"string\">    15:35</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Granade</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, atk</span>):</span><br><span class=\"line\">        self.atk = atk</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">explode</span>(<span class=\"params\">self, damage_target</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 如果传入的不是子类，则报错.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> <span class=\"built_in\">isinstance</span>(damage_target, Damageable):</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> ValueError(<span class=\"string\">&quot;不是Damageable的子类&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;爆炸&quot;</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 多态:</span></span><br><span class=\"line\">        <span class=\"comment\"># 调用父类代表(玩家/敌人.....)的可以受伤者.</span></span><br><span class=\"line\">        <span class=\"comment\"># 执类行子(具体玩家/敌人.....)</span></span><br><span class=\"line\">        damage_target.damage(self.atk)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Damageable</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        可以受伤</span></span><br><span class=\"line\"><span class=\"string\">        继承:统一多个子类的概念，隔离变化。</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">damage</span>(<span class=\"params\">self, value</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 如果子类不重写，则异常。</span></span><br><span class=\"line\">        <span class=\"keyword\">raise</span> NotImplementedError()</span><br><span class=\"line\"><span class=\"comment\"># ------------------------------</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Player</span>(<span class=\"title class_ inherited__\">Damageable</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, hp</span>):</span><br><span class=\"line\">        self.hp = hp</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">damage</span>(<span class=\"params\">self, value</span>):</span><br><span class=\"line\">        self.hp -= value</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;玩家受伤啦&quot;</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;碎屏&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Enemy</span>(<span class=\"title class_ inherited__\">Damageable</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, hp</span>):</span><br><span class=\"line\">        self.hp = hp</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">damage2</span>(<span class=\"params\">self, value</span>):</span><br><span class=\"line\">        self.hp -= value</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;敌人受伤喽&quot;</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;头顶爆字&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">g01 = Granade(<span class=\"number\">100</span>)</span><br><span class=\"line\">e01 = Enemy(<span class=\"number\">200</span>)</span><br><span class=\"line\">p01 = Player(<span class=\"number\">300</span>)</span><br><span class=\"line\">g01.explode(p01)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"继承练习02\"><a href=\"#继承练习02\" class=\"headerlink\" title=\"继承练习02\"></a>继承练习02</h4><ul>\n<li><p>子类的差异化问题子类自己解决，可以通过子类的构造方法来提供参数；</p>\n</li>\n<li><p>差异化的部分，不能找父类去要。</p>\n<p><img src=\"/pictures/07python_basic/%E5%9B%BE%E5%BD%A2%E7%AE%A1%E7%90%86%E5%99%A8.jpg\" alt=\"图形管理器\"></p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    定义图形管理器类</span></span><br><span class=\"line\"><span class=\"string\">        1. 管理所有图形</span></span><br><span class=\"line\"><span class=\"string\">        2. 提供计算所有图形总面积的方法</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    具体图形:</span></span><br><span class=\"line\"><span class=\"string\">        圆形(pi × r ** 2)</span></span><br><span class=\"line\"><span class=\"string\">        矩形(长*宽)</span></span><br><span class=\"line\"><span class=\"string\">        ...</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    测试：</span></span><br><span class=\"line\"><span class=\"string\">        创建1个圆形对象，1个矩形对象，添加到图形管理器中.</span></span><br><span class=\"line\"><span class=\"string\">        调用图形管理器的计算面积方法，输出结果。</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    要求：增加新图形，不修改图形管理器的代码.</span></span><br><span class=\"line\"><span class=\"string\">    体会：面向对象三大特征：</span></span><br><span class=\"line\"><span class=\"string\">            封装/继承/多态</span></span><br><span class=\"line\"><span class=\"string\">         面向对象设计原则：</span></span><br><span class=\"line\"><span class=\"string\">            开闭/单一/倒置</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">GraphicManager</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.__graphics = []</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">add_graphic</span>(<span class=\"params\">self, graphic</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">isinstance</span>(graphic, Graphic):</span><br><span class=\"line\">            self.__graphics.append(graphic)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> ValueError()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">get_total_area</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        total_area = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"comment\"># 遍历图形列表，累加每个图形的面积</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> self.__graphics:</span><br><span class=\"line\">            <span class=\"comment\"># 多态：</span></span><br><span class=\"line\">            <span class=\"comment\"># 调用的是图形</span></span><br><span class=\"line\">            <span class=\"comment\"># 执行的是圆形/矩形...</span></span><br><span class=\"line\">            total_area += item.calculate_area()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> total_area</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Graphic</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">calculate_area</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 如果子类不重写，则异常.</span></span><br><span class=\"line\">        <span class=\"keyword\">raise</span> NotImplementedError()</span><br><span class=\"line\"><span class=\"comment\">#-----------------------------------</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Circle</span>(<span class=\"title class_ inherited__\">Graphic</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self,radius</span>):</span><br><span class=\"line\">        self.radius = radius</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">calculate_area</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">3.14</span> * self.radius **<span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Rectanlge</span>(<span class=\"title class_ inherited__\">Graphic</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self,length,width</span>):</span><br><span class=\"line\">        self.lenght = length</span><br><span class=\"line\">        self.width = width</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">calculate_area</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.lenght *  self.width</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">c01 = Circle(<span class=\"number\">5</span>)</span><br><span class=\"line\">r01 = Rectanlge(<span class=\"number\">10</span>,<span class=\"number\">20</span>)</span><br><span class=\"line\">manager = GraphicManager()</span><br><span class=\"line\">manager.add_graphic(c01)</span><br><span class=\"line\">manager.add_graphic(r01)</span><br><span class=\"line\">re = manager.get_total_area()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(re)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"继承练习03\"><a href=\"#继承练习03\" class=\"headerlink\" title=\"继承练习03\"></a>继承练习03</h4><p><img src=\"/pictures/07python_basic/%E5%91%98%E5%B7%A5%E7%AE%A1%E7%90%86%E5%99%A8.jpg\" alt=\"员工管理器\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    定义员工管理器</span></span><br><span class=\"line\"><span class=\"string\">        1.管理所有员工</span></span><br><span class=\"line\"><span class=\"string\">        2. 计算所有员工工资</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    员工：</span></span><br><span class=\"line\"><span class=\"string\">        程序员：底薪 + 项目分红</span></span><br><span class=\"line\"><span class=\"string\">        销售：底薪 + 销售额 * 0.05</span></span><br><span class=\"line\"><span class=\"string\">        软件测试...</span></span><br><span class=\"line\"><span class=\"string\">        ...</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    要求：增加新岗位，员工管理器不变.</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">EmployeeManager</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.__employees = []</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">add_employee</span>(<span class=\"params\">self, emp</span>):</span><br><span class=\"line\">        self.__employees.append(emp)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">get_total_saraly</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        total_saraly = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> self.__employees:</span><br><span class=\"line\">            <span class=\"comment\"># 调用是抽象的员工类</span></span><br><span class=\"line\">            <span class=\"comment\"># 执行是具体的员工(程序员/销售..)</span></span><br><span class=\"line\">            total_saraly += item.calculate_salary()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> total_saraly</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Employee</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, base_salary</span>):</span><br><span class=\"line\">        self.base_salary = base_salary</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">calculate_salary</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.base_salary</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---------------------------------------</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Programmer</span>(<span class=\"title class_ inherited__\">Employee</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, base_salary, bonus</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__(base_salary)</span><br><span class=\"line\">        self.bonus = bonus</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">calculate_salary</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"comment\"># return self.base_salary + self.bonus</span></span><br><span class=\"line\">        <span class=\"comment\"># 扩展重写</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">super</span>().calculate_salary()+ self.bonus</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Salesmen</span>(<span class=\"title class_ inherited__\">Employee</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, base_salary, sale_value</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__(base_salary)</span><br><span class=\"line\">        self.sale_value = sale_value</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">calculate_salary</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.base_salary + self.sale_value * <span class=\"number\">0.05</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 测试</span></span><br><span class=\"line\">manager = EmployeeManager()</span><br><span class=\"line\">manager.add_employee(Programmer(<span class=\"number\">200000</span>,<span class=\"number\">500</span>))</span><br><span class=\"line\">manager.add_employee(Salesmen(<span class=\"number\">2000</span>,<span class=\"number\">1000</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(manager.get_total_saraly())</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"多态\"><a href=\"#多态\" class=\"headerlink\" title=\"多态\"></a>多态</h3><h4 id=\"设计角度讲-2\"><a href=\"#设计角度讲-2\" class=\"headerlink\" title=\"设计角度讲\"></a>设计角度讲</h4><h4 id=\"定义-8\"><a href=\"#定义-8\" class=\"headerlink\" title=\"定义\"></a>定义</h4><blockquote>\n<p>父类的同一种动作或者行为，在不同的子类上有不同的实现。</p>\n</blockquote>\n<h4 id=\"作用-2\"><a href=\"#作用-2\" class=\"headerlink\" title=\"作用\"></a>作用</h4><ol start=\"249\">\n<li><p>在继承的基础上，体现类型的个性化（一个行为有不同的实现）。</p>\n</li>\n<li><p>增强程序扩展性，体现开闭原则。</p>\n</li>\n</ol>\n<h4 id=\"语法角度讲-1\"><a href=\"#语法角度讲-1\" class=\"headerlink\" title=\"语法角度讲\"></a>语法角度讲</h4><h4 id=\"重写\"><a href=\"#重写\" class=\"headerlink\" title=\"重写\"></a>重写</h4><ul>\n<li><p>子类实现了父类中相同的方法（方法名、参数）。</p>\n</li>\n<li><p>在调用该方法时，实际执行的是子类的方法。调用父，执行子。</p>\n</li>\n</ul>\n<h4 id=\"快捷键\"><a href=\"#快捷键\" class=\"headerlink\" title=\"快捷键\"></a>快捷键</h4><p>Ctrl + O</p>\n<h4 id=\"内置可重写函数\"><a href=\"#内置可重写函数\" class=\"headerlink\" title=\"内置可重写函数\"></a>内置可重写函数</h4><p>Python中，以双下划线开头、双下划线结尾的是系统定义的成员。我们可以在自定义类中进行重写，从而改变其行为。</p>\n<h4 id=\"转换字符串\"><a href=\"#转换字符串\" class=\"headerlink\" title=\"转换字符串\"></a>转换字符串</h4><p>__str__函数：将对象转换为字符串(对人友好的)</p>\n<p>__repr__函数：将对象转换为字符串(解释器可识别的)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    内置可重写函数</span></span><br><span class=\"line\"><span class=\"string\">    练习:exercise01.py</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">StudentModel</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, name=<span class=\"string\">&quot;&quot;</span>, age=<span class=\"number\">0</span>, score=<span class=\"number\">0</span>, <span class=\"built_in\">id</span>=<span class=\"number\">0</span></span>):</span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\">        self.age = age</span><br><span class=\"line\">        self.score = score</span><br><span class=\"line\">        self.<span class=\"built_in\">id</span> = <span class=\"built_in\">id</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 对象 --&gt; 字符串 (随意格式)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__str__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;我叫%s,编号是%d,年龄是%d,成绩是:%d&quot;</span>%(self.name,self.<span class=\"built_in\">id</span>,self.age,self.score)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 对象 --&gt; 字符串(解释器可识别,有格式)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__repr__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;StudentModel(&#x27;%s&#x27;,%d,%d,%d)&quot;</span>%(self.name,self.age,self.score,self.<span class=\"built_in\">id</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">s01 = StudentModel(<span class=\"string\">&quot;无忌&quot;</span>,<span class=\"number\">27</span>,<span class=\"number\">100</span>,<span class=\"number\">101</span>)</span><br><span class=\"line\">str01 = <span class=\"built_in\">str</span>(s01)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(str01)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(s01)</span><br><span class=\"line\"></span><br><span class=\"line\">str02 =<span class=\"built_in\">repr</span>(s01)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(str02)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 根据字符串执行python代码</span></span><br><span class=\"line\">re = <span class=\"built_in\">eval</span>(<span class=\"string\">&quot;1+2*5&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\"># exec</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(re)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 克隆对象</span></span><br><span class=\"line\"><span class=\"comment\"># repr 返回python格式的字符串</span></span><br><span class=\"line\"><span class=\"comment\"># eval根据字符串执行代码</span></span><br><span class=\"line\">s02 = <span class=\"built_in\">eval</span>(<span class=\"built_in\">repr</span>(s01))   <span class=\"comment\">#  通过eval 配合repr（对象）来克隆一个对象</span></span><br><span class=\"line\">s02.name = <span class=\"string\">&quot;老张&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(s01.name)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"运算符重载\"><a href=\"#运算符重载\" class=\"headerlink\" title=\"运算符重载\"></a>运算符重载</h4><p>定义：让自定义的类生成的对象(实例)能够使用运算符进行操作。</p>\n<h4 id=\"算数运算符\"><a href=\"#算数运算符\" class=\"headerlink\" title=\"算数运算符\"></a>算数运算符</h4><p><img src=\"/pictures/07python_basic/image-20230103161655636.png\" alt=\"image-20230103161655636\"></p>\n<h4 id=\"反向算数运算符重载\"><a href=\"#反向算数运算符重载\" class=\"headerlink\" title=\"反向算数运算符重载\"></a>反向算数运算符重载</h4><p><img src=\"/pictures/07python_basic/image-20230103161740574.png\" alt=\"image-20230103161740574\"></p>\n<h4 id=\"复合运算符重载\"><a href=\"#复合运算符重载\" class=\"headerlink\" title=\"复合运算符重载\"></a>复合运算符重载</h4><p><img src=\"/pictures/07python_basic/image-20230103161614116.png\" alt=\"image-20230103161614116\"></p>\n<blockquote>\n<p>运算符重载的内容实际使用的很少，平常可能不会用，但是要知道有这个东西。</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    运算符重载</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Vector1</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, x</span>):</span><br><span class=\"line\">        self.x = x</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__str__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;一维向量的分量是：&quot;</span> + <span class=\"built_in\">str</span>(self.x)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__add__</span>(<span class=\"params\">self, other</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Vector1(self.x + other)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__radd__</span>(<span class=\"params\">self, other</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Vector1(self.x + other)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__iadd__</span>(<span class=\"params\">self, other</span>):</span><br><span class=\"line\">        self.x += other</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self</span><br><span class=\"line\"></span><br><span class=\"line\">v01 = Vector1(<span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(v01 + <span class=\"number\">2</span>)  <span class=\"comment\"># v01.__add__(2)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 练习:实现自定义类的对象与数值的减法，乘法运算。</span></span><br><span class=\"line\"><span class=\"comment\"># 略...</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">2</span> + v01)</span><br><span class=\"line\"><span class=\"comment\"># 练习:实现数值与自定义类的对象的减法，乘法运算。</span></span><br><span class=\"line\"><span class=\"comment\"># 略...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">id</span>(v01))</span><br><span class=\"line\"><span class=\"comment\"># 重写__iadd__，实现在原对象基础上的变化。</span></span><br><span class=\"line\"><span class=\"comment\"># 如果重写__iadd__,默认使用__add__，一般会产生新对象.</span></span><br><span class=\"line\">v01 += <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(v01,<span class=\"built_in\">id</span>(v01))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># list01 = [1]</span></span><br><span class=\"line\"><span class=\"comment\"># print(id(list01))</span></span><br><span class=\"line\"><span class=\"comment\"># # 生成新对象</span></span><br><span class=\"line\"><span class=\"comment\"># re = list01 + [2]</span></span><br><span class=\"line\"><span class=\"comment\"># print(re,id(re))</span></span><br><span class=\"line\"><span class=\"comment\"># # 在原有对象基础上，累加.</span></span><br><span class=\"line\"><span class=\"comment\"># list01 += [2]</span></span><br><span class=\"line\"><span class=\"comment\"># print(list01,id(list01))</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"比较运算重载\"><a href=\"#比较运算重载\" class=\"headerlink\" title=\"比较运算重载\"></a>比较运算重载</h4><p><img src=\"/pictures/07python_basic/image-20230103161555646.png\" alt=\"image-20230103161555646\"></p>\n<h2 id=\"设计原则\"><a href=\"#设计原则\" class=\"headerlink\" title=\"设计原则\"></a>设计原则</h2><h3 id=\"开-闭原则（目标、总的指导思想）\"><a href=\"#开-闭原则（目标、总的指导思想）\" class=\"headerlink\" title=\"开-闭原则（目标、总的指导思想）\"></a>开-闭原则（目标、总的指导思想）</h3><p><strong>O</strong>pen <strong>C</strong>losed <strong>P</strong>rinciple</p>\n<ul>\n<li><p>对扩展开放，对修改关闭。</p>\n</li>\n<li><p><strong>增加新功能，不改变原有代码</strong>。允许增加新功能，但是不能改变原来代码这就是开闭原则</p>\n</li>\n</ul>\n<h3 id=\"类的单一职责（一个类的定义）\"><a href=\"#类的单一职责（一个类的定义）\" class=\"headerlink\" title=\"类的单一职责（一个类的定义）\"></a>类的单一职责（一个类的定义）</h3><p><strong>S</strong>ingle <strong>R</strong>esponsibility <strong>P</strong>rinciple</p>\n<ul>\n<li><p>一个类有且只有一个改变它的原因；发生变化的原因只能是一个那就是遵循了这个原则。</p>\n</li>\n<li><p>一个类只做一件事情；</p>\n</li>\n</ul>\n<h3 id=\"依赖倒置（依赖抽象）\"><a href=\"#依赖倒置（依赖抽象）\" class=\"headerlink\" title=\"依赖倒置（依赖抽象）\"></a>依赖倒置（依赖抽象）</h3><p><strong>D</strong>ependency <strong>I</strong>nversion <strong>P</strong>rinciple</p>\n<ul>\n<li><p>客户端代码(调用的类)尽量依赖(使用)抽象。就是使用者，调用的这个类就是客户端代码，抽象就是不具体的，就是父类，子类更具体，父类更抽象，父类就是把各个子类抽象一下。是先有子类，然后再抽象出父类，调类的时候，是调用父类，调用抽象类这样就能够实现更加稳定的逻辑。</p>\n</li>\n<li><p>抽象不应该依赖细节，细节应该依赖抽象。</p>\n</li>\n<li><p>父类约束子类在行为上保持一致</p>\n<p><img src=\"/pictures/07python_basic/%E8%80%81%E5%BC%A0%E5%8E%BB%E4%B8%9C%E5%8C%97%E8%AE%BE%E8%AE%A101.jpg\" alt=\"老张去东北设计01\"></p>\n<p><img src=\"/pictures/07python_basic/%E8%80%81%E5%BC%A0%E5%8E%BB%E4%B8%9C%E5%8C%97%E8%AE%BE%E8%AE%A102.jpg\" alt=\"老张去东北设计02\"></p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    继承 -- 设计(2)</span></span><br><span class=\"line\"><span class=\"string\">    练习:exercise03.py</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 需求：老张开车去东北</span></span><br><span class=\"line\"><span class=\"comment\"># 变化：    坐飞机</span></span><br><span class=\"line\"><span class=\"comment\">#          坐火车</span></span><br><span class=\"line\"><span class=\"comment\">#          骑车</span></span><br><span class=\"line\"><span class=\"comment\">#          ...</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Vehicle</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        交通工具,代表所有具体的交通工具(火车/飞机..)</span></span><br><span class=\"line\"><span class=\"string\">        继承：隔离子类变化,将子类的共性(坐/飞..)提取到父类(运输)中.</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">transport</span>(<span class=\"params\">self, str_position</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 因为父类太过于抽象，所以写不出方法体,那就直接采用pass,这个价值就是约束子类要有这个行为。</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 客户端代码，用交通工具。</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, name</span>):</span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">go_to</span>(<span class=\"params\">self, vehicle, str_position</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 多态：调用父，执行子.</span></span><br><span class=\"line\">        <span class=\"comment\"># 调用的是交通工具的运输方法</span></span><br><span class=\"line\">        <span class=\"comment\"># 执行的是飞机的运输方法或者汽车的运输方法</span></span><br><span class=\"line\">        vehicle.transport(str_position)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># -------以上是架构师完成的--以下是程序员完成的-----</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Car</span>(<span class=\"title class_ inherited__\">Vehicle</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">transport</span>(<span class=\"params\">self, str_position</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;汽车开到&quot;</span>, str_position)</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Airplane</span>(<span class=\"title class_ inherited__\">Vehicle</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">transport</span>(<span class=\"params\">self, str_position</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;飞机飞到&quot;</span>, str_position)</span><br><span class=\"line\"></span><br><span class=\"line\">p01 = Person(<span class=\"string\">&quot;老张&quot;</span>)</span><br><span class=\"line\">c01 = Car()</span><br><span class=\"line\">a01 = Airplane()</span><br><span class=\"line\">p01.go_to(c01, <span class=\"string\">&quot;东北&quot;</span>)</span><br><span class=\"line\">p01.go_to(a01, <span class=\"string\">&quot;东北&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"组合复用原则（复用的最佳实践）\"><a href=\"#组合复用原则（复用的最佳实践）\" class=\"headerlink\" title=\"组合复用原则（复用的最佳实践）\"></a>组合复用原则（复用的最佳实践）</h3><p>Composite Reuse Principle</p>\n<ul>\n<li><p>如果仅仅为了代码复用优先选择组合复用，而非继承复用。</p>\n</li>\n<li><p>组合的耦合性相对继承低。</p>\n</li>\n<li><p>组合更加灵活，下面第一个图中，如果使用继承，那就成了人是手机，实际上是一种组合关系，人有一个手机；</p>\n</li>\n</ul>\n<p><img src=\"/pictures/07python_basic/%E7%BB%84%E5%90%88%E5%A4%8D%E7%94%A8.jpg\" alt=\"组合复用\"></p>\n<h3 id=\"里氏替换（继承后的重写，指导继承的设计）\"><a href=\"#里氏替换（继承后的重写，指导继承的设计）\" class=\"headerlink\" title=\"里氏替换（继承后的重写，指导继承的设计）\"></a>里氏替换（继承后的重写，指导继承的设计）</h3><p><strong>L</strong>iskov <strong>S</strong>ubstitution <strong>P</strong>rinciple</p>\n<p>父类出现的地方可以被子类替换，在替换后依然保持原功能。</p>\n<p>子类要拥有父类的所有功能。</p>\n<p>子类在重写父类方法时，尽量选择扩展重写，防止改变了功能。– 下面第46行就是扩展重写，使用父类中已经有的类容再做扩展即可，而不是子类自己又重新写一个。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    10:50 上课</span></span><br><span class=\"line\"><span class=\"string\">    定义员工管理器</span></span><br><span class=\"line\"><span class=\"string\">        1.管理所有员工</span></span><br><span class=\"line\"><span class=\"string\">        2. 计算所有员工工资</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    员工：</span></span><br><span class=\"line\"><span class=\"string\">        程序员：底薪 + 项目分红</span></span><br><span class=\"line\"><span class=\"string\">        销售：底薪 + 销售额 * 0.05</span></span><br><span class=\"line\"><span class=\"string\">        软件测试...</span></span><br><span class=\"line\"><span class=\"string\">        ...</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    要求：增加新岗位，员工管理器不变.</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">EmployeeManager</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.__employees = []</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">add_employee</span>(<span class=\"params\">self, emp</span>):</span><br><span class=\"line\">        self.__employees.append(emp)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">get_total_saraly</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        total_saraly = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> self.__employees:</span><br><span class=\"line\">            <span class=\"comment\"># 调用是抽象的员工类</span></span><br><span class=\"line\">            <span class=\"comment\"># 执行是具体的员工(程序员/销售..)</span></span><br><span class=\"line\">            total_saraly += item.calculate_salary()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> total_saraly</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Employee</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, base_salary</span>):</span><br><span class=\"line\">        self.base_salary = base_salary</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">calculate_salary</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.base_salary</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---------------------------------------</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Programmer</span>(<span class=\"title class_ inherited__\">Employee</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, base_salary, bonus</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__(base_salary)</span><br><span class=\"line\">        self.bonus = bonus</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">calculate_salary</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"comment\"># return self.base_salary + self.bonus</span></span><br><span class=\"line\">        <span class=\"comment\"># 扩展重写</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">super</span>().calculate_salary()+ self.bonus</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Salesmen</span>(<span class=\"title class_ inherited__\">Employee</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, base_salary, sale_value</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__(base_salary)</span><br><span class=\"line\">        self.sale_value = sale_value</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">calculate_salary</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.base_salary + self.sale_value * <span class=\"number\">0.05</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 测试</span></span><br><span class=\"line\">manager = EmployeeManager()</span><br><span class=\"line\">manager.add_employee(Programmer(<span class=\"number\">200000</span>,<span class=\"number\">500</span>))</span><br><span class=\"line\">manager.add_employee(Salesmen(<span class=\"number\">2000</span>,<span class=\"number\">1000</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(manager.get_total_saraly())</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"迪米特法则（类与类交互的原则）\"><a href=\"#迪米特法则（类与类交互的原则）\" class=\"headerlink\" title=\"迪米特法则（类与类交互的原则）\"></a>迪米特法则（类与类交互的原则）</h3><p>Law of Demeter</p>\n<p>不要和陌生人说话。</p>\n<p>类与类交互时，在满足功能要求的基础上，传递的数据量越少越好。因为这样可能降低耦合度。–要调用其他类的时候，如果只使用几个方法，那就只调用其中的这几个方法即可，这样就可以先抽象一下，抽象一个父类出来，当然，这种情况也可能出现过度设计。</p>\n<h3 id=\"综合练习\"><a href=\"#综合练习\" class=\"headerlink\" title=\"综合练习\"></a>综合练习</h3><h4 id=\"需求信息\"><a href=\"#需求信息\" class=\"headerlink\" title=\"需求信息\"></a>需求信息</h4><table>\n<thead>\n<tr>\n<th>职业</th>\n<th>名称</th>\n<th>分类</th>\n<th>法力消耗</th>\n<th>冷却</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>少林</td>\n<td>少林普攻</td>\n<td>瞬发技能</td>\n<td>无</td>\n<td>无</td>\n<td>攻击单个近身敌人，对目标每秒造成100%外功攻击伤害。自动连续攻击</td>\n</tr>\n<tr>\n<td>少林</td>\n<td>罗汉棍</td>\n<td>瞬发技能</td>\n<td>10法力</td>\n<td>2秒</td>\n<td>达摩祖师所创棍法，刚猛无敌。攻击单个近身敌人，对目标造成200%外功攻击伤害</td>\n</tr>\n<tr>\n<td>少林</td>\n<td>摩诃无量</td>\n<td>瞬发技能</td>\n<td>50法力</td>\n<td>8秒</td>\n<td>少林七十二绝技之一，瞬间缩短和敌手的距离。像旋风一样挥舞武器，攻击以自身为中心半径4码范围内 的所有敌人，对每个目标造成每秒217%的外功攻击伤害。攻击持续3.9秒。</td>\n</tr>\n<tr>\n<td>少林</td>\n<td>迦叶功</td>\n<td>瞬发技能</td>\n<td>20法力</td>\n<td>5秒</td>\n<td>少林七十二绝技之一，以一条齐眉棍幻出千万棍影。向单个敌人冲锋并进行凶猛攻击，对目标造成150%外功攻击伤害</td>\n</tr>\n<tr>\n<td>少林</td>\n<td>韦陀杵</td>\n<td>瞬发技能</td>\n<td>20法力</td>\n<td>10秒</td>\n<td>少林七十二绝技之一，与大力金刚掌齐名，以浑厚内力重创敌人。重击地面，使4码内所有敌人防御降低10%，并眩晕，持续2.5秒。</td>\n</tr>\n<tr>\n<td>少林</td>\n<td>金钟罩</td>\n<td>瞬发技能</td>\n<td>20法力</td>\n<td>15秒</td>\n<td>少林七十二绝技之一，以丹田之气发出狮吼震慑敌人胆魄。开启盾墙，所有敌人对自身造成的伤害减免20%，持续10秒。</td>\n</tr>\n<tr>\n<td>少林</td>\n<td>狮吼功</td>\n<td>瞬发技能</td>\n<td>40法力</td>\n<td>20秒</td>\n<td>少林七十二绝技之一，刀枪不入。吼叫，嘲讽你附近8码范围内所有敌人，持续5秒。使你和附近8码内所有队友攻击提升15%，持续10秒。并使附近8码内所有敌人伤害降低10%，持续5秒。</td>\n</tr>\n<tr>\n<td>少林</td>\n<td>金刚伏魔</td>\n<td>瞬发技能</td>\n<td>100%战意</td>\n<td>20秒</td>\n<td>以易筋经催动少林绝技的终极奥义嘲讽全屏范围内所有敌人，挥舞武器攻击地，对全屏范围内所有敌人造成100%血上限伤害。对BOSS和PVP战斗无效。</td>\n</tr>\n<tr>\n<td>逍遥</td>\n<td>逍遥普攻</td>\n<td>瞬发技能</td>\n<td></td>\n<td></td>\n<td>攻击6码范围内的单个敌人，对目标每秒造成100%内功攻击伤害。自动连续攻击</td>\n</tr>\n<tr>\n<td>逍遥</td>\n<td>小无相功</td>\n<td>瞬发技能</td>\n<td>10法力</td>\n<td>2秒</td>\n<td>逍遥派无上内功，鸠摩智曾以此内功催发出少林绝技拈花指来骗取六脉神剑释放电弧，击中敌人造 成200%的内功攻击伤害。</td>\n</tr>\n<tr>\n<td>逍遥</td>\n<td>祝融掌</td>\n<td>瞬发技能</td>\n<td></td>\n<td></td>\n<td>祝融掌：出自庄子“逍遥游”，将敌方的内力化掉，并转化吸收内力汇聚于气海。喷射一条火焰攻击敌人， 每击造成每秒300%的内功攻击伤害，持续3.9秒。并使命中目标减速30%，持续3秒。</td>\n</tr>\n<tr>\n<td>逍遥</td>\n<td>北冥神功</td>\n<td>瞬发技能</td>\n<td></td>\n<td></td>\n<td>北冥神功：李秋水除白虹掌力的另一绝学，将内力汇聚一点急剧升温后劈出。对单个目标造成120%的内功攻击 伤害，并使敌人冻结3秒</td>\n</tr>\n<tr>\n<td>逍遥</td>\n<td>寒霜怒雪</td>\n<td>瞬发技能</td>\n<td></td>\n<td></td>\n<td>：以易经八八六十四卦为基础。按特定顺序方位进行，步法飘忽灵动。天降寒冰轰击目标区域范围内 所有敌人，造成每秒125%的内功攻击伤害，持续5秒。并使命中目标减速80%，持续5秒</td>\n</tr>\n<tr>\n<td>逍遥</td>\n<td>凌波微步</td>\n<td>瞬发技能</td>\n<td></td>\n<td></td>\n<td>：内力凝出的冰甲，聪哑老人苏星河曾靠此招躲过丁春秋的化功大法。将你瞬间传送到前方7码的目标位置</td>\n</tr>\n<tr>\n<td>逍遥</td>\n<td>毁天灭地</td>\n<td>瞬发技能</td>\n<td></td>\n<td></td>\n<td>：凝聚北冥真气释放的终极招式嘲讽全屏范围内所有敌人，召唤一颗巨大的陨石从天而降，引起全屏 范围内地面灼烧，对全屏范围内所有敌人造成100%血上限伤害。对BOSS和PVP战斗无效</td>\n</tr>\n<tr>\n<td>丐帮</td>\n<td>丐帮普攻</td>\n<td>瞬发技能</td>\n<td>无</td>\n<td>0秒</td>\n<td>攻击单个近身敌人，每秒造成100%内功攻击伤害，自动连续攻击</td>\n</tr>\n<tr>\n<td>丐帮</td>\n<td>飞龙在天</td>\n<td>瞬发技能</td>\n<td>100战意</td>\n<td>20秒</td>\n<td>降龙十八掌第二式，跃起半空，居高下击，威力奇大，嘲讽全屏范围内所有敌人，造成等同于其生命上限的伤 害，对BOSS和玩家无效</td>\n</tr>\n<tr>\n<td>丐帮</td>\n<td>神龙摆尾</td>\n<td>瞬发技能</td>\n<td>10法力</td>\n<td>2秒</td>\n<td>降龙十八掌第十八式，劲道奇猛，无所不辞，攻击单个近身敌人，立即造成200%内功攻击伤害，触发“御龙” 效果，使自身暴击率提升5%，持续6秒，“御龙”效果最多可叠加3次</td>\n</tr>\n<tr>\n<td>丐帮</td>\n<td>天下无狗</td>\n<td>瞬发技能</td>\n<td>50法力</td>\n<td>8秒</td>\n<td>打狗棒法的最精妙招式，八方皆棒，劲力甚广，挥动武器攻击4次，每击都会对前方5步半圆内所有敌人施加 “打狗”效果，“打狗”会在3秒内持续造成总共270%内功攻击伤害，并减速50%持续3秒</td>\n</tr>\n<tr>\n<td>丐帮</td>\n<td>醉饮江湖</td>\n<td>瞬发技能</td>\n<td>20法力</td>\n<td>5秒</td>\n<td>气运丹田，以雄厚内力将烈酒逼出，控人心窍，眩晕7步范围内单个敌人1秒，将其迅速拉至面前</td>\n</tr>\n<tr>\n<td>丐帮</td>\n<td>擒龙控鹤</td>\n<td>瞬发技能</td>\n<td>20法力</td>\n<td>10秒</td>\n<td>丐帮秘传擒拿功夫，使人失去反击之力，迷惑4步范围内所有敌人，使其无法使用技能，持续2.5秒</td>\n</tr>\n<tr>\n<td>丐帮</td>\n<td>密云不雨</td>\n<td>瞬发技能</td>\n<td>20法力</td>\n<td>15秒</td>\n<td>降龙十八掌第十三式，韬光养晦，弃攻击而全力守御，将自身50%攻击转化为防御，持续3秒</td>\n</tr>\n<tr>\n<td>丐帮</td>\n<td>亢龙有悔</td>\n<td>瞬发技能</td>\n<td>40法力</td>\n<td>20秒</td>\n<td>降龙十八掌第十一式，从至刚之中生出至柔，有余不尽，震击5步范围内所有敌人，持续造成每秒200%内功功击伤害，持续5秒</td>\n</tr>\n</tbody></table>\n<h4 id=\"设计图\"><a href=\"#设计图\" class=\"headerlink\" title=\"设计图\"></a>设计图</h4><p>可能首先想到的是下面这种方式：（不妥当）</p>\n<p>换一种思路：</p>\n<ul>\n<li><p>文件的变化不影响功能；</p>\n</li>\n<li><p>新增新技能不修改代码；</p>\n</li>\n<li><p>某个算法改变，只修改某个类，其他类不受影响；</p>\n</li>\n</ul>\n<p><img src=\"/pictures/07python_basic/%E6%8A%80%E8%83%BD%E7%B3%BB%E7%BB%9F.jpg\" alt=\"技能系统\"></p>\n<h4 id=\"编码-1\"><a href=\"#编码-1\" class=\"headerlink\" title=\"编码\"></a>编码</h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    技能系统</span></span><br><span class=\"line\"><span class=\"string\">    练习:指出下列代码哪里体现了三大特征/六大原则。</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    三大特征：</span></span><br><span class=\"line\"><span class=\"string\">        封装：将每种影响效果单独做成类.</span></span><br><span class=\"line\"><span class=\"string\">        继承：将各种影响效果抽象为SkillImpactEffect</span></span><br><span class=\"line\"><span class=\"string\">              隔离技能释放器与各种影响效果的变化。</span></span><br><span class=\"line\"><span class=\"string\">        多态：各种影响效果在重写SkillImpactEffect类中impact方法.</span></span><br><span class=\"line\"><span class=\"string\">             释放器调用SkillImpactEffect执行各种效果。</span></span><br><span class=\"line\"><span class=\"string\">    六大原则：</span></span><br><span class=\"line\"><span class=\"string\">        开闭原则：增加新(技能/影响效果)，不修改释放器代码.</span></span><br><span class=\"line\"><span class=\"string\">        单一职责：SkillImpactEffect 负责 隔离变化</span></span><br><span class=\"line\"><span class=\"string\">                 DamageEffect.. 负责定义具体的效果</span></span><br><span class=\"line\"><span class=\"string\">                 SkillDeployer 负责释放技能</span></span><br><span class=\"line\"><span class=\"string\">        依赖倒置：(1)释放器没有调用具体影响效果，而是调用SkillImpactEffect。</span></span><br><span class=\"line\"><span class=\"string\">                (2)抽象的不依赖于具体的。</span></span><br><span class=\"line\"><span class=\"string\">                  具体做法：释放器通过&quot;依赖注入&quot;(读取配置文件，创建影响效果对象),</span></span><br><span class=\"line\"><span class=\"string\">                          使释放器不依赖具体影响效果.</span></span><br><span class=\"line\"><span class=\"string\">        组合复用：释放器与影响效果是组合关系.</span></span><br><span class=\"line\"><span class=\"string\">                可以灵活的选择各种影响效果。</span></span><br><span class=\"line\"><span class=\"string\">        里氏替换：(1)父类出现的地方可以被子类替换</span></span><br><span class=\"line\"><span class=\"string\">                 释放器存储影响效果列表,实际可以将各种子类存入进来.</span></span><br><span class=\"line\"><span class=\"string\">        迪米特法则：所有类之间的耦合度都很低.</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SkillImpactEffect</span>:  <span class=\"comment\"># 负责 隔离变化</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        技能影响效果</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">impact</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">raise</span> NotImplementedError()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DamageEffect</span>(<span class=\"title class_ inherited__\">SkillImpactEffect</span>): <span class=\"comment\">#负责定义具体的效果</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        伤害生命效果</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, value</span>):</span><br><span class=\"line\">        self.value = value</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">impact</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;扣你%d血&quot;</span> % self.value)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">LowerDeffenseEffect</span>(<span class=\"title class_ inherited__\">SkillImpactEffect</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        降低防御力</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, value, time</span>):</span><br><span class=\"line\">        self.value = value</span><br><span class=\"line\">        self.time = time</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">impact</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;降低%d防御力,持续%d秒&quot;</span> % (self.value, self.time))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DizzinessEffect</span>(<span class=\"title class_ inherited__\">SkillImpactEffect</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        眩晕</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, time</span>):</span><br><span class=\"line\">        self.time = time</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">impact</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;眩晕%d秒&quot;</span> % self.time)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SkillDeployer</span>: <span class=\"comment\">#负责释放技能</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        技能释放器</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, name</span>):</span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\">        <span class=\"comment\"># 加载配置文件 &#123;技能名称:[效果1,效果2...],...&#125;</span></span><br><span class=\"line\">        self.__dict_skill_config = self.__load_config_file()</span><br><span class=\"line\">        <span class=\"comment\"># 创建效果对象</span></span><br><span class=\"line\">        self.__effect_objects = self.__create_effect_objects()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__load_config_file</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 加载文件.....</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;降龙十八掌&quot;</span>: [<span class=\"string\">&quot;DamageEffect(200)&quot;</span>, <span class=\"string\">&quot;LowerDeffenseEffect(-10,5)&quot;</span>, <span class=\"string\">&quot;DizzinessEffect(6)&quot;</span>],</span><br><span class=\"line\">            <span class=\"string\">&quot;六脉神剑&quot;</span>: [<span class=\"string\">&quot;DamageEffect(100)&quot;</span>, <span class=\"string\">&quot;DizzinessEffect(6)&quot;</span>]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__create_effect_objects</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 根据name创建相应的技能对象</span></span><br><span class=\"line\">        <span class=\"comment\">#    降龙十八掌 -&gt; [&quot;技能1&quot;，&quot;技能2&quot;]</span></span><br><span class=\"line\">        list_effect_name = self.__dict_skill_config[self.name]</span><br><span class=\"line\">        list_effect_object = []</span><br><span class=\"line\">        <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> list_effect_name:</span><br><span class=\"line\">            <span class=\"comment\"># &quot;技能1&quot; --&gt; 技能1的对象</span></span><br><span class=\"line\">            <span class=\"comment\"># 对象 = eval(&quot;DamageEffect(200)&quot;)</span></span><br><span class=\"line\">            effect_object = <span class=\"built_in\">eval</span>(item)</span><br><span class=\"line\">            list_effect_object.append(effect_object)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> list_effect_object</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 生成技能(执行效果)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">generate_skill</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(self.name, <span class=\"string\">&quot;技能释放啦&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> self.__effect_objects:</span><br><span class=\"line\">            <span class=\"comment\"># 调用父类，执行子类.</span></span><br><span class=\"line\">            item.impact()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">xlsbz = SkillDeployer(<span class=\"string\">&quot;降龙十八掌&quot;</span>)</span><br><span class=\"line\">xlsbz.generate_skill()</span><br><span class=\"line\"></span><br><span class=\"line\">lmsj = SkillDeployer(<span class=\"string\">&quot;六脉神剑&quot;</span>)</span><br><span class=\"line\">lmsj.generate_skill()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"程序结构\"><a href=\"#程序结构\" class=\"headerlink\" title=\"程序结构\"></a>程序结构</h1><h2 id=\"模块-Module\"><a href=\"#模块-Module\" class=\"headerlink\" title=\"模块 Module\"></a>模块 Module</h2><h3 id=\"定义-9\"><a href=\"#定义-9\" class=\"headerlink\" title=\"定义\"></a>定义</h3><blockquote>\n<p>包含一系列数据、函数、类的文件，通常以.py结尾。</p>\n</blockquote>\n<h3 id=\"作用-3\"><a href=\"#作用-3\" class=\"headerlink\" title=\"作用\"></a>作用</h3><blockquote>\n<p>让一些相关的数据，函数，类有逻辑的组织在一起，使逻辑结构更加清晰。</p>\n</blockquote>\n<p>有利于多人合作开发。</p>\n<h3 id=\"导入\"><a href=\"#导入\" class=\"headerlink\" title=\"导入\"></a>导入</h3><h4 id=\"import\"><a href=\"#import\" class=\"headerlink\" title=\"import\"></a><code>import</code></h4><ol>\n<li>语法：</li>\n</ol>\n<blockquote>\n<p>import 模块名</p>\n</blockquote>\n<p>import 模块名 as 别名</p>\n<ol start=\"2\">\n<li><p>作用：将某模块整体导入到当前模块中</p>\n</li>\n<li><p>使用：模块名.成员</p>\n</li>\n</ol>\n<h4 id=\"from-import\"><a href=\"#from-import\" class=\"headerlink\" title=\"from import\"></a><code>from import</code></h4><ol start=\"4\">\n<li>语法：</li>\n</ol>\n<blockquote>\n<p>from 模块名 import 成员名[ as 别名1]</p>\n</blockquote>\n<ol start=\"5\">\n<li><p>作用：将模块内的一个或多个成员导入到当前模块的作用域中。</p>\n</li>\n<li><p>使用：直接使用成员名</p>\n</li>\n</ol>\n<h4 id=\"from-import-1\"><a href=\"#from-import-1\" class=\"headerlink\" title=\"from import \\*\"></a><code>from import \\*</code></h4><ol start=\"7\">\n<li><p>语法：from 模块名 import *</p>\n</li>\n<li><p>作用：将某模块的所有成员导入到当前模块。</p>\n</li>\n<li><p><strong>模块中以下划线(_)开头的属性，不会被导入，通常称这些成员为隐藏成员。</strong>–直接通过import  * 的时候就不会导入隐藏成员，但是通过from  XX import _func   这种是可以的，毕竟你指名道姓就要用这个，也是可以的。</p>\n</li>\n<li><p><strong>需要注意，导入进来的成员不要和当前模块中的成员冲突</strong>，也要防止与其他模块之间冲突，如果有冲突的也可以用as来定义别名</p>\n</li>\n</ol>\n<h3 id=\"模块变量\"><a href=\"#模块变量\" class=\"headerlink\" title=\"模块变量\"></a>模块变量</h3><p>**__all__变量：定义可导出成员，仅对from xx import <em>语句有效。</em>*</p>\n<p>__doc__变量：文档字符串。</p>\n<p>__file__变量：模块对应的文件路径名。</p>\n<p><strong>__name__变量：模块自身名字，可以判断是否为主模块。</strong></p>\n<p>当此模块作为主模块(第一个运行的模块)运行时，__name__绑定’<strong>main</strong>‘，不是主模块，而是被其它模块导入时,存储模块名。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    模块相关概念</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># from module01 import *</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># fun01()</span></span><br><span class=\"line\"><span class=\"comment\"># # 1. 隐藏成员，不能通过from 模块 import × 形式导入</span></span><br><span class=\"line\"><span class=\"comment\"># _fun02()</span></span><br><span class=\"line\"><span class=\"comment\"># from module01 import _fun02</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># # 隐藏成员，可以通过其他形式调用</span></span><br><span class=\"line\"><span class=\"comment\"># _fun02()</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2. 通过__all__指定可导出成员</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> module01 <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">MyClass.fun03()</span><br><span class=\"line\">_fun02()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3.可以通过该属性，查看文档注释</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(__doc__)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 4.返回当前模块的绝对路径（从系统根目录开始计算的）</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(__file__)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 5.</span></span><br><span class=\"line\"><span class=\"comment\"># 现象：</span></span><br><span class=\"line\"><span class=\"comment\"># 主模块叫做：__main__</span></span><br><span class=\"line\"><span class=\"comment\"># 非主模块叫做：真名</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(__name__)</span><br><span class=\"line\"><span class=\"comment\"># 作用1： 不是主模块不执行。(测试代码)</span></span><br><span class=\"line\"><span class=\"comment\"># 作用2： 只有是主模块才执行。(主模块代码)</span></span><br><span class=\"line\"><span class=\"comment\"># 使用：</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"加载过程\"><a href=\"#加载过程\" class=\"headerlink\" title=\"加载过程\"></a>加载过程</h3><blockquote>\n<p>在模块导入时，模块的所有语句会执行。</p>\n</blockquote>\n<p>如果一个模块已经导入，则再次导入时不会重新执行模块内的语句。</p>\n<h3 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h3><ol start=\"11\">\n<li><p>内置模块(builtins)，在解析器的内部可以直接使用。</p>\n</li>\n<li><p>标准库模块，安装Python时已安装且可直接使用。</p>\n</li>\n<li><p>第三方模块（通常为开源），需要自己安装。</p>\n</li>\n<li><p>用户自己编写的模块（可以作为其他人的第三方模块）</p>\n</li>\n</ol>\n<h2 id=\"包package\"><a href=\"#包package\" class=\"headerlink\" title=\"包package\"></a>包package</h2><h3 id=\"定义-10\"><a href=\"#定义-10\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>将模块以文件夹的形式进行分组管理。</p>\n<h3 id=\"作用-4\"><a href=\"#作用-4\" class=\"headerlink\" title=\"作用\"></a>作用</h3><blockquote>\n<p>让一些相关的模块组织在一起，使逻辑结构更加清晰。</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    包</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">python程序结构</span></span><br><span class=\"line\"><span class=\"string\">    文件夹  ---- 项目根目录</span></span><br><span class=\"line\"><span class=\"string\">        包</span></span><br><span class=\"line\"><span class=\"string\">            模块</span></span><br><span class=\"line\"><span class=\"string\">                类</span></span><br><span class=\"line\"><span class=\"string\">                    函数</span></span><br><span class=\"line\"><span class=\"string\">                        语句</span></span><br><span class=\"line\"><span class=\"string\">    练习：my_project</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># # form 包.模块 import 成员</span></span><br><span class=\"line\"><span class=\"comment\"># from package01.module_a import fun01</span></span><br><span class=\"line\"><span class=\"comment\"># fun01()</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># form 包.包.模块 import 成员</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> package01.package02.module_b <span class=\"keyword\">import</span> fun02</span><br><span class=\"line\">fun02()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># import package01.module_a as pm</span></span><br><span class=\"line\"><span class=\"comment\"># pm.fun01()</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"导入-1\"><a href=\"#导入-1\" class=\"headerlink\" title=\"导入\"></a>导入</h3><blockquote>\n<p>import 包名.模块名 [as 模块新名]</p>\n</blockquote>\n<p>import 包名.子包名.模块名 [as 模块新名]</p>\n<p>from 包名 import 模块名 [as 模块新名]</p>\n<p>from 包名.子包名 import 模块名 [as 模块新名]</p>\n<p>from 包名.子包名.模块名 import 成员名 [as 属性新名]</p>\n<h1 id=\"导入包内的所有子包和模块\"><a href=\"#导入包内的所有子包和模块\" class=\"headerlink\" title=\"导入包内的所有子包和模块\"></a>导入包内的所有子包和模块</h1><p>from 包名 import *</p>\n<p>from 包名.模块名 import *</p>\n<h3 id=\"init-py-文件\"><a href=\"#init-py-文件\" class=\"headerlink\" title=\"init.py 文件\"></a><strong>init</strong>.py 文件</h3><blockquote>\n<p>是包内必须存在的文件</p>\n</blockquote>\n<p>会在包加载时被自动调用</p>\n<h4 id=\"all\"><a href=\"#all\" class=\"headerlink\" title=\"all\"></a><strong>all</strong></h4><p>记录from 包 import * 语句需要导入的模块</p>\n<p>案例：</p>\n<ol start=\"15\">\n<li>根据下列结构，创建包与模块。</li>\n</ol>\n<blockquote>\n<p>my_ project &#x2F;</p>\n</blockquote>\n<p>main.py</p>\n<p>common&#x2F;</p>\n<p><strong>init</strong>.py</p>\n<p>list_helper.py</p>\n<p>skill_system&#x2F;</p>\n<p><strong>init</strong>.py</p>\n<p>skill_deployer.py</p>\n<p>skill_manager.py</p>\n<ol start=\"16\">\n<li><p>在main.py中调用skill_manager.py中实例方法。</p>\n</li>\n<li><p>在skill_manager.py中调用skill_deployer.py中实例方法。</p>\n</li>\n<li><p>在skill_deployer.py中调用list_helper.py中类方法。</p>\n</li>\n</ol>\n<h3 id=\"搜索顺序\"><a href=\"#搜索顺序\" class=\"headerlink\" title=\"搜索顺序\"></a>搜索顺序</h3><blockquote>\n<p>内置模块</p>\n</blockquote>\n<p>sys.path 提供的路径</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;common -- list_helper&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"comment\"># 如果不再pycharm中运行当前模块，则导包失败.</span></span><br><span class=\"line\"><span class=\"comment\"># 将项目根目录加入path中，导包才会成功.</span></span><br><span class=\"line\">sys.path.append(<span class=\"string\">&quot;/home/tarena/1905/month01/code/day15/my_project&quot;</span>)  <span class=\"comment\"># 在导包失败的时候，可以手动添加项目根目录添加到路径列表中</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(sys.path)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> main <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">main_fun01()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"异常处理Error\"><a href=\"#异常处理Error\" class=\"headerlink\" title=\"异常处理Error\"></a>异常处理Error</h1><h2 id=\"异常\"><a href=\"#异常\" class=\"headerlink\" title=\"异常\"></a>异常</h2><ol start=\"19\">\n<li><p>定义：运行时检测到的错误。</p>\n</li>\n<li><p>现象：当异常发生时，程序不会再向下执行，而转到函数的调用语句。</p>\n</li>\n<li><p>常见异常类型：</p>\n</li>\n</ol>\n<blockquote>\n<p>– 名称异常(NameError)：变量未定义。</p>\n</blockquote>\n<p>– 类型异常(TypeError)：不同类型数据进行运算。</p>\n<p>– 索引异常(IndexError)：超出索引范围。</p>\n<p>– 属性异常(AttributeError)：对象没有对应名称的属性。</p>\n<p>– 键异常(KeyError)：没有对应名称的键。</p>\n<p>– 为实现异常(NotImplementedError)：尚未实现的方法。</p>\n<p>– 异常基类Exception。</p>\n<h2 id=\"处理\"><a href=\"#处理\" class=\"headerlink\" title=\"处理\"></a>处理</h2><ol start=\"22\">\n<li>语法：</li>\n</ol>\n<blockquote>\n<p>try:</p>\n</blockquote>\n<p>可能触发异常的语句</p>\n<p>except 错误类型1 [as 变量1]：</p>\n<p>处理语句1</p>\n<p>except 错误类型2 [as 变量2]：</p>\n<p>处理语句2</p>\n<p>except Exception [as 变量3]：</p>\n<p>不是以上错误类型的处理语句</p>\n<p>else:</p>\n<p>未发生异常的语句</p>\n<p>finally:</p>\n<p>无论是否发生异常的语句</p>\n<ol start=\"23\">\n<li><p>作用：将程序由异常状态转为正常流程。</p>\n</li>\n<li><p>说明：</p>\n</li>\n</ol>\n<blockquote>\n<p>as 子句是用于绑定错误对象的变量，可以省略</p>\n</blockquote>\n<p>except子句可以有一个或多个，用来捕获某种类型的错误。</p>\n<p>else子句最多只能有一个。</p>\n<p>finally子句最多只能有一个，如果没有except子句，必须存在。</p>\n<p>如果异常没有被捕获到，会向上层(调用处)继续传递，直到程序终止运行。</p>\n<h2 id=\"raise-语句\"><a href=\"#raise-语句\" class=\"headerlink\" title=\"raise 语句\"></a>raise 语句</h2><ol start=\"25\">\n<li><p>作用：抛出一个错误，让程序进入异常状态。</p>\n</li>\n<li><p>目的：在程序调用层数较深时，向主调函数传递错误信息要层层return 比较麻烦，所以人为抛出异常，可以直接传递错误信息。。</p>\n</li>\n</ol>\n<h2 id=\"自定义异常\"><a href=\"#自定义异常\" class=\"headerlink\" title=\"自定义异常\"></a>自定义异常</h2><ol start=\"27\">\n<li>定义：</li>\n</ol>\n<blockquote>\n<p>class 类名Error(Exception):</p>\n</blockquote>\n<p>def <strong>init</strong>(self,参数):</p>\n<p>super().<strong>init</strong>(参数)</p>\n<p>self.数据 &#x3D; 参数</p>\n<ol start=\"28\">\n<li>调用：</li>\n</ol>\n<blockquote>\n<p>try:</p>\n</blockquote>\n<p>….</p>\n<p>raise 自定义异常类名(参数)</p>\n<p>….</p>\n<p>except 定义异常类 as 变量名:</p>\n<p>变量名.数据</p>\n<ol start=\"29\">\n<li>作用：封装错误信息</li>\n</ol>\n<h4 id=\"综合使用异常处理练习：\"><a href=\"#综合使用异常处理练习：\" class=\"headerlink\" title=\"综合使用异常处理练习：\"></a>综合使用异常处理练习：</h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    界面代码</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> bll <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> model <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">StudentManagerView</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    学生管理器视图</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.__manager = StudentManagerController()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__display_menu</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;1)添加学生&quot;</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;2)显示学生&quot;</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;3)删除学生&quot;</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;4)修改学生&quot;</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;5)按照成绩升序显示学生&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__select_menu</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        item = <span class=\"built_in\">input</span>(<span class=\"string\">&quot;请输入：&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> item == <span class=\"string\">&quot;1&quot;</span>:</span><br><span class=\"line\">            self.__input_student()</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> item == <span class=\"string\">&quot;2&quot;</span>:</span><br><span class=\"line\">            self.__output_students(self.__manager.stu_list)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> item == <span class=\"string\">&quot;3&quot;</span>:</span><br><span class=\"line\">            self.__delete_student()</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> item == <span class=\"string\">&quot;4&quot;</span>:</span><br><span class=\"line\">            self.__modify_student()</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> item == <span class=\"string\">&quot;5&quot;</span>:</span><br><span class=\"line\">            self.__output_student_by_score()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">main</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">            界面视图入口</span></span><br><span class=\"line\"><span class=\"string\">        :return:</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">            self.__display_menu()</span><br><span class=\"line\">            self.__select_menu()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__input_number</span>(<span class=\"params\">self,message</span>):</span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">            <span class=\"keyword\">try</span>:</span><br><span class=\"line\">                number = <span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>(message))</span><br><span class=\"line\">                <span class=\"keyword\">return</span> number</span><br><span class=\"line\">            <span class=\"keyword\">except</span>:</span><br><span class=\"line\">                <span class=\"built_in\">print</span>(<span class=\"string\">&quot;输入有误&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__input_student</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        name = <span class=\"built_in\">input</span>(<span class=\"string\">&quot;请输入姓名：&quot;</span>)</span><br><span class=\"line\">        <span class=\"comment\"># age = int(input(&quot;请输入年龄：&quot;))</span></span><br><span class=\"line\">        <span class=\"comment\"># score = int(input(&quot;请输入成绩：&quot;))</span></span><br><span class=\"line\">        age = self.__input_number(<span class=\"string\">&quot;请输入年龄：&quot;</span>)</span><br><span class=\"line\">        score = self.__input_number(<span class=\"string\">&quot;请输入成绩：&quot;</span>)</span><br><span class=\"line\">        stu = StudentModel(name, age, score)</span><br><span class=\"line\">        self.__manager.add_student(stu)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__output_students</span>(<span class=\"params\">self, list_output</span>):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> list_output:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(item.<span class=\"built_in\">id</span>, item.name, item.atk, item.score)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__delete_student</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"comment\"># id = int(input(&quot;请输入编号：&quot;))</span></span><br><span class=\"line\">        <span class=\"built_in\">id</span> = self.__input_number(<span class=\"string\">&quot;请输入编号：&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.__manager.remove_student(<span class=\"built_in\">id</span>):</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;删除成功&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;删除失败&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__modify_student</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        stu = StudentModel()</span><br><span class=\"line\">        <span class=\"comment\"># stu.id = int(input(&quot;请输入需要修改的学生编号:&quot;))</span></span><br><span class=\"line\">        stu.<span class=\"built_in\">id</span> = self.__input_number(<span class=\"string\">&quot;请输入需要修改的学生编号:&quot;</span>)</span><br><span class=\"line\">        stu.name = <span class=\"built_in\">input</span>(<span class=\"string\">&quot;请输入新的学生名称：&quot;</span>)</span><br><span class=\"line\">        <span class=\"comment\"># stu.atk = int(input(&quot;请输入新的学生年龄：&quot;))</span></span><br><span class=\"line\">        <span class=\"comment\"># stu.score = int(input(&quot;请输入新的学生成绩：&quot;))</span></span><br><span class=\"line\">        stu.atk = self.__input_number(<span class=\"string\">&quot;请输入新的学生年龄:&quot;</span>)</span><br><span class=\"line\">        stu.score = self.__input_number(<span class=\"string\">&quot;请输入新的学生成绩：&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.__manager.update_student(stu):</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;修改成功&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;修改失败&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__output_student_by_score</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.__manager.order_by_score()</span><br><span class=\"line\">        self.__output_students(self.__manager.stu_list)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"迭代\"><a href=\"#迭代\" class=\"headerlink\" title=\"迭代\"></a>迭代</h1><p>每一次对过程的重复称为一次”迭代”，而每一次迭代得到的结果会作为下一次迭代的初始值。例如：循环获取容器中的元素。</p>\n<h2 id=\"可迭代对象iterable\"><a href=\"#可迭代对象iterable\" class=\"headerlink\" title=\"可迭代对象iterable\"></a>可迭代对象iterable</h2><ol start=\"30\">\n<li><p>定义：具有__iter__函数的对象，可以返回迭代器对象。</p>\n</li>\n<li><p>语法</p>\n</li>\n</ol>\n<blockquote>\n<p>– 创建：</p>\n</blockquote>\n<p>class 可迭代对象名称:</p>\n<p>  def <strong>iter</strong>(self):</p>\n<p>      return 迭代器</p>\n<p>– 使用：</p>\n<p>for 变量名 in 可迭代对象:</p>\n<p>语句</p>\n<ol start=\"32\">\n<li>原理：</li>\n</ol>\n<blockquote>\n<p>迭代器 &#x3D; 可迭代对象.<strong>iter</strong>()</p>\n</blockquote>\n<p>while True:</p>\n<p>try:</p>\n<p>print(迭代器.<strong>next</strong>())</p>\n<p>except StopIteration:</p>\n<p>break</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 练习2:不使用for，获取字典所有数据。</span></span><br><span class=\"line\"><span class=\"comment\">#  &#123;&quot;铁扇公主&quot;:101,&quot;铁锤公主&quot;:102,“扳手王子”:103&#125;</span></span><br><span class=\"line\"><span class=\"comment\"># 10:40</span></span><br><span class=\"line\"></span><br><span class=\"line\">dict01 = &#123;<span class=\"string\">&quot;铁扇公主&quot;</span>: <span class=\"number\">101</span>, <span class=\"string\">&quot;铁锤公主&quot;</span>: <span class=\"number\">102</span>, <span class=\"string\">&quot;扳手王子&quot;</span>: <span class=\"number\">103</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">iterator = dict01.__iter__()  <span class=\"comment\"># 存的就是迭代器，迭代器就有__next__ 方法</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        key = iterator.__next__()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(key, dict01[key])</span><br><span class=\"line\">    <span class=\"keyword\">except</span> StopIteration:  <span class=\"comment\"># 取不到为止，就会抛出StopIteration异常，所以捕获后退出循环即可</span></span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"迭代器对象iterator\"><a href=\"#迭代器对象iterator\" class=\"headerlink\" title=\"迭代器对象iterator\"></a>迭代器对象iterator</h2><ol start=\"33\">\n<li><p>定义：可以被next()函数调用并返回下一个值的对象。</p>\n</li>\n<li><p>语法</p>\n</li>\n</ol>\n<blockquote>\n<p>class 迭代器类名:</p>\n</blockquote>\n<p>def <strong>init</strong>(self, 聚合对象):</p>\n<p>self.<strong>聚合对象</strong>&#x3D; 聚合对象</p>\n<p>def <strong>next</strong>(self):</p>\n<p>if 没有元素:</p>\n<p>raise StopIteration</p>\n<p>return 聚合对象元素</p>\n<p><img src=\"/pictures/07python_basic/%E8%BF%AD%E4%BB%A3%E5%99%A8%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3.jpg\" alt=\"迭代器设计思想\"></p>\n<p>手写迭代器对象：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    迭代器</span></span><br><span class=\"line\"><span class=\"string\">    练习:exercise03.py</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Skill</span>:</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SkillManager</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        技能管理器  可迭代对象</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.__skills = []</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">add_skill</span>(<span class=\"params\">self, skill</span>):</span><br><span class=\"line\">        self.__skills.append(skill)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__iter__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 创建一个迭代器对象,并传递需要迭代的数据。</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> SkillIterator(self.__skills)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SkillIterator</span>:  <span class=\"comment\"># 创建一个迭代器，其需要有一个__next__方法和一个取值到最后抛出异常的一个方法</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        技能迭代器</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, target</span>):</span><br><span class=\"line\">        self.__target = target</span><br><span class=\"line\">        self.__index = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__next__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 如果没有数据了，则抛出异常</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.__index &gt; <span class=\"built_in\">len</span>(self.__target) - <span class=\"number\">1</span>:</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> StopIteration</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 返回下一个数据</span></span><br><span class=\"line\">        temp = self.__target[self.__index]</span><br><span class=\"line\">        self.__index += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> temp</span><br><span class=\"line\"></span><br><span class=\"line\">manager = SkillManager()</span><br><span class=\"line\">manager.add_skill(Skill())</span><br><span class=\"line\">manager.add_skill(Skill())</span><br><span class=\"line\">manager.add_skill(Skill())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> manager:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(item)</span><br><span class=\"line\"></span><br><span class=\"line\">iterator = manager.__iter__()</span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        item = iterator.__next__()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(item)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> StopIteration:</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br></pre></td></tr></table></figure>\n\n<p>图形迭代器</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 练习：图形管理器记录多个图形</span></span><br><span class=\"line\"><span class=\"comment\">#      迭代图形管理器对象</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Graphic</span>:</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">GraphicManager</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        图形管理器，可迭代对象(参与for)</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.__graphics = []</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">add_graphic</span>(<span class=\"params\">self, graphic</span>):</span><br><span class=\"line\">        self.__graphics.append(graphic)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__iter__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> GraphicIterator(self.__graphics)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">GraphicIterator</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        图形迭代器（获取下一个数据）</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, target</span>):</span><br><span class=\"line\">        self.__target = target</span><br><span class=\"line\">        self.__index = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__next__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.__index &gt; <span class=\"built_in\">len</span>(self.__target) - <span class=\"number\">1</span>:</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> StopIteration</span><br><span class=\"line\">        temp = self.__target[self.__index]</span><br><span class=\"line\">        self.__index += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> temp</span><br><span class=\"line\">manager = GraphicManager()</span><br><span class=\"line\">manager.add_graphic(Graphic())</span><br><span class=\"line\">manager.add_graphic(Graphic())</span><br><span class=\"line\">manager.add_graphic(Graphic())</span><br><span class=\"line\"><span class=\"comment\"># for item in manager:</span></span><br><span class=\"line\"><span class=\"comment\">#     print(item)</span></span><br><span class=\"line\">iterator = manager.__iter__()</span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        item = iterator.__next__()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(item)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> StopIteration:</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"35\">\n<li>说明：</li>\n</ol>\n<blockquote>\n<p>– 聚合对象通常是容器对象。</p>\n</blockquote>\n<ol start=\"4\">\n<li>作用：使用者只需通过一种方式，便可简洁明了的获取聚合对象中各个元素，而又无需了解其内部结构。</li>\n</ol>\n<h1 id=\"生成器generator\"><a href=\"#生成器generator\" class=\"headerlink\" title=\"生成器generator\"></a>生成器generator</h1><ol start=\"36\">\n<li><p>定义：能够动态(循环一次计算一次返回一次)提供数据的可迭代对象。</p>\n</li>\n<li><p>作用：在循环过程中，按照某种算法推算数据，不必创建容器存储完整的结果，从而节省内存空间。数据量越大，优势越明显。</p>\n</li>\n<li><p>以上作用也称之为<strong>延迟操作或惰性操作</strong>，通俗的讲就是在需要的时候才计算结果，而不是一次构建出所有结果。</p>\n</li>\n</ol>\n<h2 id=\"生成器函数\"><a href=\"#生成器函数\" class=\"headerlink\" title=\"生成器函数\"></a>生成器函数</h2><ol start=\"39\">\n<li><p>定义：含有<strong>yield</strong>语句的函数，返回值为生成器对象。– 生成器&#x3D;可迭代对象+迭代器</p>\n</li>\n<li><p>语法</p>\n</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建：</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">函数名</span>():</span><br><span class=\"line\">            ...</span><br><span class=\"line\">            <span class=\"keyword\">yield</span> 数据</span><br><span class=\"line\">            ...</span><br><span class=\"line\"><span class=\"comment\"># 调用：</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> 变量名 <span class=\"keyword\">in</span> 函数名():</span><br><span class=\"line\">        语句</span><br></pre></td></tr></table></figure>\n\n<ol start=\"41\">\n<li>说明：</li>\n</ol>\n<blockquote>\n<p>– 调用生成器函数将返回一个生成器对象，不执行函数体。</p>\n</blockquote>\n<p>– yield翻译为”产生”或”生成”</p>\n<ol start=\"42\">\n<li>执行过程：</li>\n</ol>\n<p> (1) 调用生成器函数会自动创建迭代器对象。</p>\n<p>(2) 调用迭代器对象的__next__()方法时才执行生成器函数。</p>\n<p>(3) 每次执行到yield语句时返回数据，暂时离开。</p>\n<p>(4) 待下次调用__next__()方法时继续从离开处继续执行。</p>\n<p> 原理：生成迭代器对象的大致规则如下</p>\n<blockquote>\n<p>– 将yield关键字以前的代码放在next方法中。</p>\n</blockquote>\n<ul>\n<li>以后在需要拿到多个同类对象的时候，可以使用yield来处理</li>\n</ul>\n<p>– 将yield关键字后面的数据作为next方法的返回值。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    yield --&gt; 生成器</span></span><br><span class=\"line\"><span class=\"string\">    练习:exercise07.py</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">class MyRange:</span></span><br><span class=\"line\"><span class=\"string\">    def __init__(self, stop_value):</span></span><br><span class=\"line\"><span class=\"string\">        self.stop_value = stop_value</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    def __iter__(self):</span></span><br><span class=\"line\"><span class=\"string\">        number = 0</span></span><br><span class=\"line\"><span class=\"string\">        while number &lt; self.stop_value:</span></span><br><span class=\"line\"><span class=\"string\">            yield number</span></span><br><span class=\"line\"><span class=\"string\">            number += 1</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">my01 = MyRange(10)</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">iterator = my01.__iter__()</span></span><br><span class=\"line\"><span class=\"string\">while True:</span></span><br><span class=\"line\"><span class=\"string\">    try:</span></span><br><span class=\"line\"><span class=\"string\">        item = iterator.__next__()</span></span><br><span class=\"line\"><span class=\"string\">        print(item)</span></span><br><span class=\"line\"><span class=\"string\">    except StopIteration:</span></span><br><span class=\"line\"><span class=\"string\">        break</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\"># 生成器原理</span></span><br><span class=\"line\"><span class=\"string\">class MyGenerator:</span></span><br><span class=\"line\"><span class=\"string\">    # 生成器 = 可迭代对象 + 迭代器</span></span><br><span class=\"line\"><span class=\"string\">    def __init__(self,stop_value):</span></span><br><span class=\"line\"><span class=\"string\">        self.begin = 0</span></span><br><span class=\"line\"><span class=\"string\">        self.stop_value = stop_value</span></span><br><span class=\"line\"><span class=\"string\">        </span></span><br><span class=\"line\"><span class=\"string\">    def __iter__(self):</span></span><br><span class=\"line\"><span class=\"string\">        return self</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    def __next__(self):</span></span><br><span class=\"line\"><span class=\"string\">        if self.begin &gt;= self.stop_value:</span></span><br><span class=\"line\"><span class=\"string\">            raise StopIteration</span></span><br><span class=\"line\"><span class=\"string\">            </span></span><br><span class=\"line\"><span class=\"string\">        temp = self.begin</span></span><br><span class=\"line\"><span class=\"string\">        self.begin+=1</span></span><br><span class=\"line\"><span class=\"string\">        return temp</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">my_range</span>(<span class=\"params\">stop_value</span>):</span><br><span class=\"line\">    number = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> number &lt; stop_value:</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> number</span><br><span class=\"line\">        number += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">my01 = my_range(<span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(my01), <span class=\"built_in\">dir</span>(my01))<span class=\"comment\"># dir 获取对象所有成员</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">id</span>(my01.__iter__()), <span class=\"built_in\">id</span>(my01))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> my01:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(item)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"内置生成器\"><a href=\"#内置生成器\" class=\"headerlink\" title=\"内置生成器\"></a>内置生成器</h2><h3 id=\"枚举函数enumerate\"><a href=\"#枚举函数enumerate\" class=\"headerlink\" title=\"枚举函数enumerate\"></a>枚举函数enumerate</h3><ol start=\"44\">\n<li>语法：</li>\n</ol>\n<blockquote>\n<p>for 变量 in enumerate(可迭代对象):</p>\n</blockquote>\n<p>语句</p>\n<p>for 索引, 元素in enumerate(可迭代对象):</p>\n<p>语句</p>\n<ol start=\"45\">\n<li>作用：遍历可迭代对象时，可以将索引与元素组合为一个元组。</li>\n</ol>\n<h3 id=\"zip\"><a href=\"#zip\" class=\"headerlink\" title=\"zip\"></a>zip</h3><ol start=\"46\">\n<li>语法：</li>\n</ol>\n<blockquote>\n<p>for item in zip(可迭代对象1, 可迭代对象2….):</p>\n</blockquote>\n<p>语句</p>\n<ol start=\"47\">\n<li>作用：将多个可迭代对象中对应的元素组合成一个个元组，生成的元组个数由最小的可迭代对象决定。</li>\n</ol>\n<h2 id=\"生成器表达式\"><a href=\"#生成器表达式\" class=\"headerlink\" title=\"生成器表达式\"></a>生成器表达式</h2><ol start=\"48\">\n<li><p>定义：用推导式形式创建生成器对象。</p>\n</li>\n<li><p>语法：变量 &#x3D; ( 表达式 for 变量 in 可迭代对象 [if 真值表达式] )</p>\n</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 练习:1. 获取列表中所有字符串</span></span><br><span class=\"line\"><span class=\"comment\">#     2. 获取列表中所有小数</span></span><br><span class=\"line\"><span class=\"comment\"># 要求:分别使用生成器函数/生成器表达式/列表推导式完成.</span></span><br><span class=\"line\">list01 = [<span class=\"number\">3</span>, <span class=\"string\">&quot;54&quot;</span>, <span class=\"literal\">True</span>, <span class=\"number\">6</span>, <span class=\"string\">&quot;76&quot;</span>, <span class=\"number\">1.6</span>, <span class=\"literal\">False</span>, <span class=\"number\">3.5</span>]</span><br><span class=\"line\"><span class=\"comment\"># 练习:1</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">find01</span>():</span><br><span class=\"line\">    <span class=\"keyword\">for</span> itme <span class=\"keyword\">in</span> list01:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">type</span>(itme) == <span class=\"built_in\">str</span>:</span><br><span class=\"line\">            <span class=\"keyword\">yield</span> itme</span><br><span class=\"line\"></span><br><span class=\"line\">re = find01()</span><br><span class=\"line\"><span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> re:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(item)</span><br><span class=\"line\"></span><br><span class=\"line\">re = (itme <span class=\"keyword\">for</span> itme <span class=\"keyword\">in</span> list01 <span class=\"keyword\">if</span> <span class=\"built_in\">type</span>(itme) == <span class=\"built_in\">str</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> re:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(item)</span><br><span class=\"line\"></span><br><span class=\"line\">re = [itme <span class=\"keyword\">for</span> itme <span class=\"keyword\">in</span> list01 <span class=\"keyword\">if</span> <span class=\"built_in\">type</span>(itme) == <span class=\"built_in\">str</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> re:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(item)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 练习:2</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">find02</span>():</span><br><span class=\"line\">    <span class=\"keyword\">for</span> itme <span class=\"keyword\">in</span> list01:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">type</span>(itme) == <span class=\"built_in\">float</span>:</span><br><span class=\"line\">            <span class=\"keyword\">yield</span> itme</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> find02():</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(item)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> (item <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> list01 <span class=\"keyword\">if</span> <span class=\"built_in\">type</span>(item) == <span class=\"built_in\">float</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(item)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> [item <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> list01 <span class=\"keyword\">if</span> <span class=\"built_in\">type</span>(item) == <span class=\"built_in\">float</span>]:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(item)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"函数式编程\"><a href=\"#函数式编程\" class=\"headerlink\" title=\"函数式编程\"></a>函数式编程</h1><ol>\n<li>定义：用一系列函数解决问题。</li>\n</ol>\n<blockquote>\n<p>– 函数可以赋值给变量，赋值后变量绑定函数。</p>\n</blockquote>\n<p>– 允许将函数作为参数传入另一个函数。</p>\n<p>– 允许函数返回一个函数。</p>\n<ol start=\"2\">\n<li>高阶函数：将函数作为参数或返回值的函数。</li>\n</ol>\n<h2 id=\"函数作为参数\"><a href=\"#函数作为参数\" class=\"headerlink\" title=\"函数作为参数\"></a>函数作为参数</h2><blockquote>\n<p>将核心逻辑传入方法体，使该方法的适用性更广，体现了面向对象的开闭原则。</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 1. 使用生成器函数实现以上3个需求</span></span><br><span class=\"line\"><span class=\"comment\"># 2. 体会函数式编程的&quot;封装&quot;</span></span><br><span class=\"line\"><span class=\"comment\">#    将三个函数变化点提取到另外三个函数中.</span></span><br><span class=\"line\"><span class=\"comment\">#    将共性提取到另外一个函数中</span></span><br><span class=\"line\"><span class=\"comment\"># 3. 体会函数式编程的&quot;继承&quot;与&quot;多态&quot;</span></span><br><span class=\"line\"><span class=\"comment\">#    使用变量隔离变化点,在共性函数中调用变量.</span></span><br><span class=\"line\"><span class=\"comment\"># 4. 测试(执行上述功能)</span></span><br><span class=\"line\"></span><br><span class=\"line\">list01 = [<span class=\"number\">43</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">87</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 需求1:在列表中查找所有偶数</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">find01</span>():</span><br><span class=\"line\">    <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> list01:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> item % <span class=\"number\">2</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"keyword\">yield</span> item</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 需求2:在列表中查找所有大于10的数</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">find02</span>():</span><br><span class=\"line\">    <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> list01:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> item &gt; <span class=\"number\">10</span>:</span><br><span class=\"line\">            <span class=\"keyword\">yield</span> item</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 需求3:在列表中查找所有范围在10--50之间的数</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">find03</span>():</span><br><span class=\"line\">    <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> list01:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"number\">10</span> &lt; item &lt; <span class=\"number\">50</span>:</span><br><span class=\"line\">            <span class=\"keyword\">yield</span> item</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># &quot;封装&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">condition01</span>(<span class=\"params\">item</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> item % <span class=\"number\">2</span> == <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">condition02</span>(<span class=\"params\">item</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> item &gt; <span class=\"number\">10</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">condition03</span>(<span class=\"params\">item</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">10</span> &lt; item &lt; <span class=\"number\">50</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># &quot;继承&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">find</span>(<span class=\"params\">func_condition</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> list01:</span><br><span class=\"line\">        <span class=\"comment\"># &quot;多态&quot;</span></span><br><span class=\"line\">        <span class=\"comment\"># 调用:具体条件的抽象</span></span><br><span class=\"line\">        <span class=\"comment\"># 执行:具体条件的函数</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> func_condition(item):</span><br><span class=\"line\">            <span class=\"keyword\">yield</span> item</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> find(condition02):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(item)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 方法参数,如果传递10/&quot;张无忌&quot;/True,叫做传递数据</span></span><br><span class=\"line\"><span class=\"comment\"># 方法参数,如果函数1/函数2/函数3,叫做传递逻辑</span></span><br><span class=\"line\"><span class=\"comment\"># 15:35</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"lambda-表达式\"><a href=\"#lambda-表达式\" class=\"headerlink\" title=\"lambda 表达式\"></a>lambda 表达式</h3><ol start=\"50\">\n<li><p>定义：是一种匿名方法。</p>\n</li>\n<li><p>作用：作为参数传递时语法简洁，优雅，代码可读性强。</p>\n</li>\n</ol>\n<blockquote>\n<p>随时创建和销毁，减少程序耦合度。</p>\n</blockquote>\n<ol start=\"52\">\n<li>语法</li>\n</ol>\n<blockquote>\n<p>– 定义：</p>\n</blockquote>\n<p>变量 &#x3D; lambda 形参: 方法体</p>\n<p>– 调用：</p>\n<p>变量(实参)</p>\n<ol start=\"53\">\n<li>说明：</li>\n</ol>\n<blockquote>\n<p>– 形参没有可以不填</p>\n</blockquote>\n<p>– 方法体只能有一条语句，且不支持赋值语句。</p>\n<h3 id=\"内置高阶函数\"><a href=\"#内置高阶函数\" class=\"headerlink\" title=\"内置高阶函数\"></a>内置高阶函数</h3><ol start=\"54\">\n<li><p>map（函数，可迭代对象）：使用可迭代对象中的每个元素调用函数，将返回值作为新可迭代对象元素；返回值为新可迭代对象。</p>\n</li>\n<li><p>filter(函数，可迭代对象)：根据条件筛选可迭代对象中的元素，返回值为新可迭代对象。</p>\n</li>\n<li><p>sorted(可迭代对象，key &#x3D; 函数,reverse &#x3D; bool值)：排序，返回值为排序结果。</p>\n</li>\n<li><p>max(可迭代对象，key &#x3D; 函数)：根据函数获取可迭代对象的最大值。</p>\n</li>\n<li><p>min(可迭代对象，key &#x3D; 函数)：根据函数获取可迭代对象的最小值。</p>\n</li>\n</ol>\n<h2 id=\"函数作为返回值\"><a href=\"#函数作为返回值\" class=\"headerlink\" title=\"函数作为返回值\"></a>函数作为返回值</h2><blockquote>\n<p>逻辑连续，当内部函数被调用时，不脱离当前的逻辑。</p>\n</blockquote>\n<h3 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h3><ol start=\"59\">\n<li>三要素：</li>\n</ol>\n<blockquote>\n<p>– 必须有一个内嵌函数。</p>\n</blockquote>\n<p>– 内嵌函数必须引用外部函数中变量。</p>\n<p>– 外部函数返回值必须是内嵌函数。</p>\n<ol start=\"60\">\n<li>语法</li>\n</ol>\n<blockquote>\n<p>– 定义：</p>\n</blockquote>\n<p><img src=\"/pictures/07python_basic/image.png\" alt=\"image.png\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">外部函数名</span>(<span class=\"params\">参数</span>):</span><br><span class=\"line\">\t外部变量</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">内部函数名</span>(<span class=\"params\">参数</span>):</span><br><span class=\"line\">    使用外部变量</span><br><span class=\"line\">    <span class=\"keyword\">return</span> 内部函数名</span><br></pre></td></tr></table></figure>\n\n<p>– 调用：</p>\n<p>变量 &#x3D; 外部函数名(参数)</p>\n<p>变量(参数)</p>\n<ol start=\"61\">\n<li><p>定义：在一个函数内部的函数,同时内部函数又引用了外部函数的变量。</p>\n</li>\n<li><p>本质：闭包是将内部函数和外部函数的执行环境绑定在一起的对象。</p>\n</li>\n<li><p>优点：内部函数可以使用外部变量。</p>\n</li>\n<li><p>缺点：外部变量一直存在于内存中，不会在调用结束后释放，占用内存。</p>\n</li>\n<li><p>作用：实现python装饰器。</p>\n</li>\n</ol>\n<h3 id=\"函数装饰器decorator\"><a href=\"#函数装饰器decorator\" class=\"headerlink\" title=\"函数装饰器decorator\"></a>函数装饰器decorator</h3><blockquote>\n<p>闭包的应用就是装饰器</p>\n</blockquote>\n<ol start=\"66\">\n<li><p>定义：在不改变原函数的调用以及内部代码情况下，为其添加新功能的函数。</p>\n</li>\n<li><p>语法</p>\n</li>\n</ol>\n<p>def 函数装饰器名称(func):</p>\n<p>​\t\tdef 内嵌函数(*args, **kwargs):</p>\n<p>​\t\t\t\t需要添加的新功能</p>\n<p>​\t\t\t\treturn func(*args, **kwargs)</p>\n<p>​\t\treturn内嵌函数</p>\n<p>原函数 &#x3D; 内嵌函数</p>\n<blockquote>\n<p>@ 函数装饰器名称</p>\n</blockquote>\n<p>def 原函数名称(参数):</p>\n<p>函数体</p>\n<p>原函数(参数)</p>\n<ol start=\"68\">\n<li>本质：使用”@函数装饰器名称”修饰原函数，等同于创建与原函数名称相同的变量，关联内嵌函数；故调用原函数时执行内嵌函数。</li>\n</ol>\n<p>原函数名称 &#x3D; 函数装饰器名称（原函数名称）</p>\n<ol start=\"69\">\n<li>装饰器链：</li>\n</ol>\n<blockquote>\n<p>一个函数可以被多个装饰器修饰，执行顺序为从近到远。</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    闭包</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">fun01</span>():</span><br><span class=\"line\">    a = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">fun02</span>():</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(a)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fun02</span><br><span class=\"line\"><span class=\"comment\"># 调用外部函数，返回值是内嵌函数</span></span><br><span class=\"line\">result = fun01()</span><br><span class=\"line\"><span class=\"comment\"># 调用内嵌函数</span></span><br><span class=\"line\">result()  <span class=\"comment\"># 可以访问外部变量a</span></span><br><span class=\"line\"><span class=\"comment\"># 闭包应用:逻辑连续，当内部函数被调用时，不脱离当前的逻辑</span></span><br><span class=\"line\"><span class=\"comment\"># 压岁钱</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">give_gife_money</span>(<span class=\"params\">money</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        得到压岁钱</span></span><br><span class=\"line\"><span class=\"string\">    :return:</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;得到了%d压岁钱&quot;</span> % money)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">child_buy</span>(<span class=\"params\">target, price</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">            孩子购买商品</span></span><br><span class=\"line\"><span class=\"string\">        :param target: 需要购买的商品</span></span><br><span class=\"line\"><span class=\"string\">        :param price: 商品单价</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">nonlocal</span> money</span><br><span class=\"line\">        <span class=\"keyword\">if</span> money &gt;= price:</span><br><span class=\"line\">            money -= price</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;孩子花了%.1f钱，购买了%s&quot;</span> % (price, target))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;钱不够啦&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> child_buy</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 下列代码是一个连续的逻辑</span></span><br><span class=\"line\">action = give_gife_money(<span class=\"number\">10000</span>)</span><br><span class=\"line\">action(<span class=\"string\">&quot;唐僧肉&quot;</span>, <span class=\"number\">0.5</span>)</span><br><span class=\"line\">action(<span class=\"string\">&quot;小汽车&quot;</span>, <span class=\"number\">2000</span>)</span><br><span class=\"line\">action(<span class=\"string\">&quot;手机&quot;</span>, <span class=\"number\">8000</span>)</span><br></pre></td></tr></table></figure>\n\n"},{"title":"验收测试E2E分析方法","date":"2021-08-20T03:11:34.000Z","_content":"\n\n## 前言\n\n对于验收测试工程师来说，编写验收测试分析和测试用例是一项必须且重要的工作内容，但大多数同学在做验收测试分析及用例编写时，仍旧陷入到传统的分析及用例编写思维中，与内部测试团队所输出的内容并无差异，虽然大家在讲述验收工程师职责或者测试分析思路时，都知道说要编写用户场景用例，可实战过程中仍旧是任性的走老套路，犟的很！ \n\n究其原因，还是没有摆脱传统的测试思维，更多的关注点仍旧在文档中罗列的基本需求点，除了字面上描述出来的东西，很难将自己放在用户角色上去想象体验手头的产品，在验收时，又本着任务的压力，只能优先去完成流程上的一些基本任务：验收测试分析、验收测试用例编写、各种会议评审、输出各类报告…… \n\n上述每一个具体事项实际都只是我们工作实施的一个产物体现，并不是最终的目的，也就是说不仅仅为了去完成一篇分析或者用例的编写，就匆匆忙忙开干，在没有深入理解需求，了解用户痛点，及项目意义的情况下，所有的忙碌都不会产生太高价值，看起来长篇大论的文字表格一堆，但其中蕴含的思维和测试覆盖点却很难达到我们的预期，往往后期需要花费大量的精力去查漏补缺，进行各种优化，算算总投入成本那是极不划算的，而且还觉得自己特忙。\n\n对于团队中每一个同学来讲，每个人都有自己的特长和优势，但也会存在部分同学的确存在以上描述的若干问题，所以也就有了此篇文档，作为个人理解的内容，想要起到抛砖引玉的效果，希望在某些方面能够对大家有所帮助，也许能够通过思维的碰撞产生更加适合当前团队的执行方法和流程。\n\n本文会以通俗易懂偏口语化的风格进行阐述，尽量结合当前项目的实际内容来阐述具体思想，文中所有举例只是为了阐述某种思维方式，请读者不要钻牛角尖，而应该深入扩展理解思维背后的原理，内化成自己的经验和做事方法。\n\n## 导读\n\n本文总体文字比较多，且讲述的内容非常基础，可能都是在各位平常工作中已经在实施的部分，只是做了一个系统的呈现，如果看的过程确有共鸣，则可以快速跳过熟知内容，直接查看“精加工生产E2E验收用例”部分内容； \n\n如果前文中部分内容平常未涉及到，则可以细致去想一下描述中的各问题及思维过程，最好是能转化成自己独特的思维逻辑；\n\n如果文章通篇读起来觉得索然无味，也可以私下进行一些深入的交流（排除语文功底因素），这是我极其希望遇到的场景。\n## 我可以怎么做\n\n- 如果你是一位新同学，或者是从传统测试转做验收测试的，下面的几点内容或许对你有所帮助；\n- 当然如果你是老司机，那也可以看看是否有其他更好的点子可以帮到大家。\n\n\n1. 作为验收工程师，首要任务是先把自己以前的思维做一个冻结，把杯子倒空，忘掉过往的所有荣耀与成就，重新出发；**--调整心态**\n2. 清晰认识自己的职责和责任，做的所有事情都不仅仅只是为了完成上级下达的任务，而是为了某一个目标; **--清晰自己工作的价值**\n>  比如XX项目经过你的验收后，可以拍着胸脯对他人说，已经验收通过没有问题，大胆发布，让用户拿去用吧!\n  或者是经过验收后，发现XX模块有风险，具体风险是XX，可能造成XX影响，建议提前采取XX行动，规避方案是XX，提前告知关注者项目的实际情况，即便是发布后真出现了问题，也做到了未雨绸缪。\n\n3. 接触任何一个项目时，首先是要弄清楚该项目的需求背景，直接接口人就是产品经理，从产品经理这里可以获取到项目的最原始信息，包括项目使用者，使用者的一些特点，此项目能够解决他们什么问题，核心价值具体体现在哪里，产品最差做到什么程度用户也能够接受（逐步剥离可以提炼到核心需求）？所有的这些只为弄清楚背景与用户痛点；\n4. 在了解项目的背景与用户痛点后，接下来的工作就需要始终将这些信息放到制高点，任何的思考行为都为这两点服务，你的模块分析是为了更好的保证用户能够流畅满意的使用，你的用例是为了能更全面的覆盖用户的操作行为，你的执行动作就是将自己当做用户来操作使用这个产品；\n5. 通过上述的信息输入后，就可以开展实际的验收测试分析，这里还是推荐使用思维导图的方式来开展此项工作；\n6. 在思维导图分析完成后，接下来就是用例的转化写作了，转化过程只需要抓住一个核心：思维导图中辛苦分析出来的验证点不要漏掉；\n7. 验收执行阶段工作主要是执行用例，在执行每条用例时，同样需要思考用例编写的本意是要验证什么点，切记无脑执行，往往能够发现用例可优化的地方，或者可扩展验证场景。\n\n## 正题\n\n前面的内容主要是一些铺垫，也就是大家说的鸡汤软文，下文主要从上面列出的几个步骤来描述一下个人理解的验收测试用例的生产过程，用例输出绝对不是直接上来就干的事儿，拿到项目一上来就直接干用例的行为那都是莽夫行为，测试最高价值体现就是你的思维，而对思维的加工最终输出的产物才是思维导图、测试用例这些实际的文档，下面会针对每个步骤进行详细的阐述，希望对大家有所帮助。\n### 下文整体思路会以下图思路开展\n\n![](pictures/e2e_analysis/01FJX.png)\n\n## 用例生产过程\n\n### 所需要的原料\n\n - 此部分内容，主要是列出我们在做一个项目的时候，最好弄清楚我们所需要的输入；\n - 包括我们需要具备的一些能力或者了解的知识点；\n - 当然不是所有列出的东西都一定需要具备或者精通，当前不具备的就可以针对性的去提升学习，以便能在工作中能够轻松应对。\n\n**实物原料：**- 项目需求文档；--必选（哪怕是一句话需求）\n\n- 需求原型；--可选\n\n- 研发概要设计文档；--可选\n- 研发详细设计文档；--可选\n- 项目demo；--可选\n- ……\n\n**思想原料：**- 熟悉软件研发流程；\n> 熟悉软件测试基本理论知识:\n1. 黑盒测试基本方法（等价类、边界值、正交、状态迁移、判定表、错误猜测、……）； \n2. 接口测试、安全测试、性能测试、网络基本知识的了解； \n3. 测试思维导图分析方法； \n4. 用例编写的基本原则，测试用例的八大要素；\n\n### 加工流程\n\n> 通过对上述或者更多的原料进行有序加工，我们的思维产物最终会以具体的思维导图、测试用例体现出来。\n\n#### Step1 深入理解项目背景、用户痛点\n\n**实操步骤**\n\n首先我们在接触到一个新项目时,首要的就是拿到该项目的需求文档,如果没有需求文档就直接找产品经理或者一线人员,甚至是直接用户进行沟通,主要目的就是弄清楚如下几个问题: \n\n1. 这个项目产生的原因是什么?--为什么要做这个项目,有钱任性?做着玩? 主要是为了解决用户什么问题,用户在当前碰到了什么难题需要我们来解围?\n2. 不做这个项目行不行?--市面上有没有现成的解决方案?为什么要我们做这个?我们这个项目的优势在哪里?我们能为用户提供什么核心价值?\n3. 我们的核心用户都是哪些人?都是一些什么样的人?这些人有些什么习惯或者特点?在产品使用上会不会有些特殊癖好或者要求?\n4. 我们是怎么解决用户遇到的这个难题的,当前的需求内容是否能够达到解决用户痛点的目的?\n\n经过上述几个问题的自问或者问他人,你一定会获得一些有用的信息,经过对这些信息的消化和理解,你基本上就具备了与产品经理或者用户等位思考的状态,在此状态下,再结合产品经理编写的现成的背景和痛点问题描述,基本上就真正理解了项目的背景了；\n\n如何确定自己已经理解了当前项目背景呢？\n\n**Check点**\n把这个项目介绍给其他人，能够流畅的按照上述几个问题维度来讲解清楚的话，就说明已经达到要求了。\n\n#### Step2 梳理、挖掘基本需求点\n\n> 这一部分内容大家最熟悉，也是一般人上来就开搞的一步，每个人都能整出一篇“丰满”的思维导图出来，全部展开的时候看起来内容丰富，但很多同学的思维导图内容细看后发现缺乏逻辑，有时候会很全，有时候会遗漏一些内容，实际上就是缺乏一些系统的思维。\n\n实际上我们在做项目或者模块分析时还是有套路可以耍的： 1\n\n首先就是把我们软件质量模型这张牌掏出来，如果能熟练的掌握质量模型的6大特性（功能性、可靠性、易用性、效率、可维护性、可移植性），27个子特性，那你做测试分析可能遗漏的几率是很小的。\n实际上很少人能全部掌握，但你需要做到的是6大特性一定要掌握，每个特性大概对应的是哪些维度要非常清楚，质量模型中的维度需要逐项去做分析覆盖，功能性这块基本是个测试都能做到，但如何把功能性做全做深就又是一个挑战；\n\n**功能特性分析：**\n\n1. 功能特性分析基本占据了80%以上的内容，也是我们需要花费80%精力去做好的部分，看起来最简单的部分，也是最难的部分;\n2. 你需要深入理解项目背景和用户痛点，需要了解需求文档中提及的每一个模块功能，以及模块与模块之间的联系；\n3. 需要在没有原型的基础上在脑海里自己勾勒出产品界面的雏形，想象各个功能模块之间的跳转逻辑以及依赖关系；\n4. 通过对SE/开发编写的概要设计、详细设计的仔细研读，了解每个模块的具体后台实现，来挖掘隐藏的测试点和逻辑联系；--这一步至少50%的测试人员做不到，很多人无法理解开发的后台实现逻辑，也就不可能知道该实现可能存在的问题，自然就不可能挖掘出这种隐藏的测试点，往往代码的缺陷就来自于这里，因为开发编码实际上就是把他的思维以代码的方式去呈现出来，那开发自己的想法都可能有问题，我们做测试的不去识别他的想法缺陷，再到后面去弥补，你肯定已经想到这个地方的成本有多高。所以能够落地去做的事情就是仔细研读开发编写的详细设计文档，技术这块不懂的就去查资料去问开发，直到理解他的实现逻辑是什么，在这个过程中你就会找到很多隐藏的测试点，从而能够丰富你的功能分析点。\n5. 对于解决方案类产品（B/S架构），B/S类架构项目都是分前后台的，往往测试分析的时候大家只会去关注前台的显示，文案，按钮这些基本肉眼可见的东西，对于后台数据库的内容往往“视而不见”，在理解开发详细设计时，就要同时清楚他们的数据表设计内容，了解表与表之间的关联关系，字段的具体含义，前端数据获取的地方，以此就非常容易识别前台代码是否写死，是否是按照约定的逻辑来处理加工数据的，也就能提早发现一些设计、实现上不合理的地方。\n\n**思维导图的输出**\n\n>  通过上面的思路分析后，我们就能输出80%的思维导图分析内容，也就抓住了这个项目的80%的测试点。\n\n此时你完成的思维导图大概应该是这个样子：\n![](pictures/e2e_analysis/022FJX.png)\n\n 完成80%内容后，剩下的把其他五大特性的内容进行完善即可，具体每个特性所体现的内容请大家自行学习，并转化成项目中可实施的测试点 此部分完成后思维导图大致会是下面的结构，能够确保质量模型维度的全覆盖，那测试点的梳理基本就完成95%了。\n\n![](pictures/e2e_analysis/03FJX.png)\n\n完成上述测试分析后，实际上我们还有一个很重要的维度容易忽略，那就是异常场景，当然很多同学也容易特立独行，在上面的分析过程中就投入大量精力去搞异常场景，显得自己考虑问题的角度比较深入或者独特。\n\n想法是好的，但这个不是我们主要发力的点，你基本业务流都没整明白，直接到这种容易“钻牛角尖”的胡同里，很容易走火入魔。 \n\n建议上来说，在完成上面的所有分析后，再把自己脱离出来，去思考一些异常场景的补充，此时你的角色就变换成一个“破坏”者，以你能想到的，在日常使用过程中可能发生的一些“可怕”场景都用上来，如果符合当前项目的操作入口，那么就是你异常场景的突破口。\n\n**打比方（也不知道比方会不会怪我老打他）**： \n\n  1. 使用过程中，直接关闭程序（数据都没保存呢……）--程序是否能再次正常启动，数据是否可以恢复到之前打开的状态；\n  2. 直接暴力切断电源，系统重启后，程序是否正常运行，数据是否恢复之前状态；\n  3. 直接关闭浏览器，提交的数据是否能下次恢复，程序是否能拦截并给出提示还有数据未保存；\n  4. 服务器直接断电，被手动关闭，重启服务器后，服务是否能正常拉起，恢复后台服务能力，数据是否均正常；\n  5. 对于存在输入的地方，我们可做的骚操作很多，这里边界值的上点和外点、非等价类的输入就是我们做异常测试的发力点，会不会因为我们的一些上点、内点、非等价类输入，或者特殊字符输入，或者SQL注入的内容输入造成程序崩溃，或者安全漏洞等等；\n  6. 对于图谋不轨的人，我们还需要考虑安全问题，是否存在明文传输（密码全程是否加密），通过浏览器F12调试模式查看接口的传参过程，通过后台数据库查看具体的密码存储形式，通过后台日志查看敏感信息是否脱敏处理……\n  7. 数据传输过程中，直接断开网络，程序下次是否能正常重新处理数据；\n  8. 上传非法格式，非法超大文件前台是否能正常校验拦截，通过接口直接上传，后台是否能正常拦截；\n  9. 程序提供的配置，逻辑上是否有做依赖控制，是否存在前后冲突的配置可以设置，导致部分配置不生效；\n  10. 数据的多次重复提交是否会存在异常；\n  11. 数据的新建=》删除=》再建，是否能正常处理；\n  12. 数据的提交更改后，下次进入展示，回显是否正确；\n  13. 存在数据记忆的场景，是否能够正常记忆；\n  14. 存在回退的场景，数据是否能够正常回滚无残留；\n  15. 存在数据迁移的场景，数据是否能够正常迁移，且兼容新版本的展示结构；\n  16. 存在数据结构升级的场景，是否能向下兼容老旧数据，或者正常转换旧数据结构，从而正常展示在前端；\n  17. 存在可以向后台提交数据的按钮时，是否可以快速频繁的点击提交，可能导致数据异常；\n  18. 存在单选、复选、全选、全不选的场景时，频繁的选择状态切换，选择逻辑是否处理正确，选择数据对象是否准确；\n  19. 存在批量新建、上传、删除等场景时，对于单条数据的批量操作，多条数据的批量操作，是否能正确处理；\n  20. 存在大数据量场景时，需要重点关注接口数据的处理准确性，在实现规格内，提交的大数据请求处理，是否能准确且高效的完成。\n\n此时你的思维导图大概是这个样子：\n\n![](pictures/e2e_analysis/04FJX.png)\n\n#### Step3 精加工生产E2E验收用例\n\n> - 通过上面的生产加工后，想必大家觉得分析工作已经完成了，可以说作为内部测试在完成上面工作后，测试分析工作的确可以告一段落，我也可以打包票说只要你能按照上面提到的维度，每个维度都做出了深入的思考与分析，那你的测试分析是比较完善的；\n> - 但作为验收工程师，最核心的部分还没开始，那就是E2E场景，也就是说，到现在为止，验收工程师的核心工作才刚刚开始……\n\n实际上前面的工作都已经做的比较全了，剩下的部分只需要结合部分思维来串联一下就可以完成，此刻你就变身为一个串珠的人儿了，把你精心准备好的“珍珠”按照某种方式串起来，做成一条条“项链”，这些“项链”就是我们验收的E2E场景用例，其主要会涉及到如下方面内容：\n\n1. 理解何为用户场景？\n> 用户日常使用时，使用产品的操作路径，可能进行的操作流。\n\n2. 写这些E2E场景的意义是什么？ \n尽可能全的模拟覆盖用户日常会操作的路径，提前发现可能存在的问题，确认产品是否能够满足用户日常使用，弥补在模块测试中对模块之间的关联性测试覆盖不足的问题。\n\n3. 用户场景的来源有哪些？ \n- 通过功能点分析，站在用户角度采用状态机思路编写E2E场景用例--你就是用户； \n- 通过分析一线人员提供的问题信息，获得用户使用的场景信息--真实使用者的反馈； \n- 通过一线人员提供的用户群体特征，使用产品的场景等信息，通过关联分析构建用户场景信息--对真实使用者的模拟分析，有时候用户自己都不知道自己需要的是什么，那我们就需要替用户去思考这个问题，如同乔布斯说的：在我发布苹果手机的时候，用户才知道这就是他们想要的。\n\n4. 什么叫做端到端（E2E）场景用例？ \n不同于传统测试过程中仅针对某一个功能点进行深入验证的用例，而是尽可能将多个功能点通过某种思路（如状态机）有目的设计成一连串的操作流，形成的一种用例形式。\n\n5. 场景用例的编写粒度该如何把控？ \n\t在编写这类用例时，很多同学会陷入两难境地，在测试步骤中，不知道编写粒度该控制到哪个层次，写太细了跟传统用例没区别，写太粗了又担心不具备可执行性； \n\t- 实际上这个问题很难按照某种要求去规定，主要把握几个原则： \n\t1.  场景用例编写的前提，一定是内部测试已经有非常详尽的功能用例，覆盖每个功能点，确保了基本功能是没有问题的；--如果担心这个地方有遗漏，说明我们内部测试需要改进，并且在测试执行阶段，验收工程师也需要有能力进行适当发散，做事不能眉毛胡子一把抓，每个阶段的重点核心不同，该放的时候要放，该收的地方得收。 \n\t2. 基于上述前提，就知道我们的场景用例不会写的太细，更多的是一种操作行为流的描述，可以做的是，在每一个操作行为后，预期结果我们尽可能的描述全面； \n\t3. 每一条用例都需要有一个核心目的，要想清楚该用例的核心是为了验证或者保证什么功能，那么用例的步骤描述都需要围绕这个核心去开展，避免一条用例中混杂不同的场景和行为路径，会导致用例缺乏目标，也容易产生冗余用例内容； \n\t4. 用例粒度确保能够清晰引导执行者完成步骤描述内容，在存在依赖的部分交代清楚依赖获取的方式，预期结果明确无歧义； \n\t5. 在编写过程中发现用例步骤太多（超过十几步）,那就需要针对该路径做分离处理，可以分成多条用例来覆盖，避免单条用例步骤过于复杂，可能对后续的执行带来不必要的麻烦；\n\t\n6. 我该如何知道E2E用例步骤该从哪里开始又从哪里结束？ \n\t- 此行为实际上也没有固定的公式可以参考，仍旧是结合部分经验来完成： \n\t1. 把握一个核心目的，场景用例内容必须包含我们前面分析的所有功能点；--如果没有包含在内，则问自己前面的分析是否有必要，如果觉得没必要就裁剪前面的分析； \n\t2. 用例开始起点一般可以采取某个功能模块的入口； \n\t3. 用例的结束就不一定会有唯一的结束点，因为从起点开始后，可能有多个分支均会走向结束，此时则可以分成多条用例来覆盖（对于前面覆盖的步骤则可以作为前置条件，以此精简其他分支的用例内容）； \n\t4. 有些分支走下去发现是一个死循环，无法有效闭环，那此时我们至少需要覆盖以此完整的循环，保证各个状态之间的转换路径均需要覆盖（下文会采用状态机的方式做阐述）\n\n我们先来了解一个概念：\"状态机\"，这个将对我们编写E2E用例有较大帮助，场景用例编写的总体思路我们将采用状态机的套路来进行，所以我们需要先了解这个概念： \n\n#### 状态机含义\n\n> 状态机就是有限状态自动机的简称，是现实事物运行规则抽象而成的一个数学模型 状态机有4 个要素: 现态、条件、动作、次态。 这样的归纳，主要是出于对状态机的内在因果关系的考虑: \n- “现态”和 “条件” 是因，\n> - “动作”和 “次态” 是果。\n\n1. 现态：是指当前所处的状态。\n2. 条件：又称为 “事件”，当一个条件被满足，将会触发一个动作，或者执行一次状态的迁移。\n3. 动作：条件满足后执行的动作。动作执行完毕后，可以迁移到新的状态，也可以仍旧保持原状态。动作不是必需的，当条件满足后，也可以不执任何动作，直接迁移到新状态。\n4. 次态：条件满足后要迁往的新状态。“次态”是相对于 “现态” 而言的，“次态”一旦被激活，就转变成新的 “现态” 了。\n\n**转换状态示意图：**\n下面就是对水在不同状态之间的转换示意图 - 假如水蒸气是现态，在施加降温这个条件后，会发生凝结动作，从而变成次态的液态水；\n> - 当前液态水是现态，在施加降温这个条件后，会发生凝固动作，从而变成次态的冰；\n> - 相反在施加加温这个条件后，冰又能变成液态水，在继续加温后，又能变成水蒸气。\n\n![image-20210903095132477](pictures/e2e_analysis/05FJX.png)\n\n- 说人话呢这个东西就是某物体、某程序功能，会被不同的条件动作触发产生变化，从而形成一种新的状态或者结果（也可能保持不变）；\n- 一般来说程序中的这些变化的状态，肯定是有限的，所以我们也叫有限状态机，正因为是有限的我们才有分析的可能性；\n- 既然是有限的状态，那我们就可以将任何程序采用此思想，将其抽象出一个个的状态；\n- 然后提炼出触发的各种条件，通过在不同状态之间施加不同的触发条件，就能让这些状态不断变化，从而完成我们对程序的不同路径的覆盖；\n- 通过上面的示意图我们也是能很容易去理解这个点的，之所以E2E用例的编写需要去采用这种思维呢，主要就是模拟用户日常可能会触发的各种点，只要我们能触碰到他们会触发的各种操作行为，了解到他们企图达到的最终状态，那我们的验收用例就是有意义的。\n\n> 将上面水的状态变化类比到我们软件产品中来，就是这么个意思：\n- 拿到某个功能模块时，可以选择一个最基础的入口作为起点（现态）；\n> - 确定起点后，可以分析有哪些条件可以来施加，也就是从这个起点开始，有哪些后续的功能按钮可以操作？\n> - 分别操作这些功能按钮后，会跳转到哪个模块或者页面（次态）？\n> - 依照上述思路，针对这些次态继续分析可以施加的条件（可点击的功能按钮），继续往下发觉后续的状态；\n> - 当分析到最后发现已经没有新的状态可以产生了，那就说明这条路径已经走到头，此时就可以结束了；\n> - 如果发现不同状态之间会存在循环，那么我们可以保证完成一次循环即可（比如：固态=》液态=》气态=》液态=》固态）；\n> - 如果发现在某一个次态时，会产生多分支时，那么就需要单独分析每个分支，直到每个分支都走到头才结束；\n> - 针对不同的分支我们就可以梳理出不同的场景用例来。\n\n#### 从一线人员获取灵感\n\n> 大多数同学可能觉得到这里任务就该结束了，实际上上面的所有行为都是我们自己通过功能分析构造的一些场景，仍旧会存在遗漏点，每个人的思维都是存在局限性的，如果条件允许的话，我们可以进一步与一线人员甚至直接用户进行交流，来获取其真实日常是如何开展的，从而获取到最为真实客观的使用场景信息。\n\n- 获取一线用户的真实场景信息并不是所有项目都具备的条件，但条件具备时就一定要充分利用起来；\n- 如果没有此条件，我们也可以主动创造，可以主动申请出差客户现场，进行有效信息的获取；\n- 与一线人员、产品经理进行日常有效交流，从交谈中挖掘有效信息，都是可以帮助到我们丰富场景的；\n- 通过上述各种途径获取到的信息，则可以转化成用例，作为有效的覆盖条件。\n\n#### 过程验收&amp;抽验的遗漏补充\n\n> 怎么还没完没了了？\n到此还没结束？\n当然，因为前期我们的所有行为都是纸上谈兵（做的策略分析），老话说的好，纸上得来终觉浅，绝知此事要躬行，事情还得自己“弯着腰”去做啊…… \n\n在验收的整个生命周期中，我们的时间跨度是非常大的，在前期用例全部编写完成后，还有很长一段时间，此期间伴随着迭代版本的提测，内部测试的测试，验收的抽验，等等过程，\n\n此阶段我们是有机会接触真实的产品形态，也能够去实践之前的策略性动作，在这个过程中，是能够发现一些遗漏点，或者过程性不完善的地方。\n\n- 在过程验收或者抽验阶段，发现的一些遗漏点，需要及时的补充到场景用例中；\n- 发现的一些不合理的地方，需要及时优化调整用例的执行步骤等内容；\n- 对于内部测试发现的BUG分布较多，已经识别风险较大的模块，则需要针对性的增加用例密度，提高用例覆盖粒度，做出针对性预防；--BUG都是集中产生的，容易长虫子的地方，他就会成批成批的长，不用去怀疑这个规律；\n- 过程中发现内部测试狙击不足的模块或者方向，也需要我们针对性的提高预防措施，增加用例密度，明知道前面的兄弟没守住，已经有鬼子进村了，还不做好彻底的预防，那是我们的失职；\n- 上述的策略都是在实战中逐步调整完善，进一步巩固我们的武器装备，布好天罗地网，从而在验收阶段真正做到胸有成竹。\n\n此时思维导图框架大概是这么个样子：\n\n![](pictures/e2e_analysis/06FJX.png)\n#### 转换成用例\n\n实际上在上面过程中就有可能已经完成了用例的转换，所以此阶段并不一定是在最后，我们对于用例的补充和思维导图的维护应该是同步的，避免用例有更新，思维导图有缺失，真正在后续去评审和讲解时都是拿思维导图来展示，用例很难逐条去评审，拿用例评审是无法有效知道是否有遗漏，只能评审用例的规范与否，但思维导图则可以方便点 的查看是否针对某个模块有遗漏的场景。\n\n如何编写转换成最终的用例则不在此文中做讲解，针对用例的编写可以单独进行分享，此文默认大家都能够有效的转换编写用例。\n## 质检\n\n> 在实际生产过程中，都有一个质检环节，我们的工作也不例外，此环节与各位的职位级别、能力无关，再牛皮的人都有出错的时候，那么质检的这个动作我们一定要实施。\n\n- 实际上就是我们的评审过程，当局者迷，有时候就会迷在自己的思维中，而其他评审角色就能够从一些意想不到的角度提出遗漏和不足的地方，以便帮助我们进一步完善分析和用例内容；\n- 永远不要迷恋自己的想法，不要相信自己的分析是完善的，在分析过程中，永远多敲一个回车，预留待填写的空间……\n- 有效的评审能够避免后期的不足，重视此过程是对我们对项目的负责。\n\n## 收工\n此次故事就讲到这里~ \n如果你已经睡着了，我会感到很抱歉，没有吸引到你~ \n如果你感觉有收获，我会感到很欣慰，我真的可以帮助到你~ \n如果你有好的建议提交给我，我会感到很高兴，你可以帮助我进一步成长~ \n如果你有更好的思维与我分享，我会感到兴奋，我想与你把酒言欢~\n\n\n\n\n\n\n\n","source":"_posts/e2e_analysis.md","raw":"---\ntitle: 验收测试E2E分析方法\ncategories: \n- 测试理论\ntags:\n- 测试理论\n- 验收测试\ndate: 2021-08-20 11:11:34\n---\n\n\n## 前言\n\n对于验收测试工程师来说，编写验收测试分析和测试用例是一项必须且重要的工作内容，但大多数同学在做验收测试分析及用例编写时，仍旧陷入到传统的分析及用例编写思维中，与内部测试团队所输出的内容并无差异，虽然大家在讲述验收工程师职责或者测试分析思路时，都知道说要编写用户场景用例，可实战过程中仍旧是任性的走老套路，犟的很！ \n\n究其原因，还是没有摆脱传统的测试思维，更多的关注点仍旧在文档中罗列的基本需求点，除了字面上描述出来的东西，很难将自己放在用户角色上去想象体验手头的产品，在验收时，又本着任务的压力，只能优先去完成流程上的一些基本任务：验收测试分析、验收测试用例编写、各种会议评审、输出各类报告…… \n\n上述每一个具体事项实际都只是我们工作实施的一个产物体现，并不是最终的目的，也就是说不仅仅为了去完成一篇分析或者用例的编写，就匆匆忙忙开干，在没有深入理解需求，了解用户痛点，及项目意义的情况下，所有的忙碌都不会产生太高价值，看起来长篇大论的文字表格一堆，但其中蕴含的思维和测试覆盖点却很难达到我们的预期，往往后期需要花费大量的精力去查漏补缺，进行各种优化，算算总投入成本那是极不划算的，而且还觉得自己特忙。\n\n对于团队中每一个同学来讲，每个人都有自己的特长和优势，但也会存在部分同学的确存在以上描述的若干问题，所以也就有了此篇文档，作为个人理解的内容，想要起到抛砖引玉的效果，希望在某些方面能够对大家有所帮助，也许能够通过思维的碰撞产生更加适合当前团队的执行方法和流程。\n\n本文会以通俗易懂偏口语化的风格进行阐述，尽量结合当前项目的实际内容来阐述具体思想，文中所有举例只是为了阐述某种思维方式，请读者不要钻牛角尖，而应该深入扩展理解思维背后的原理，内化成自己的经验和做事方法。\n\n## 导读\n\n本文总体文字比较多，且讲述的内容非常基础，可能都是在各位平常工作中已经在实施的部分，只是做了一个系统的呈现，如果看的过程确有共鸣，则可以快速跳过熟知内容，直接查看“精加工生产E2E验收用例”部分内容； \n\n如果前文中部分内容平常未涉及到，则可以细致去想一下描述中的各问题及思维过程，最好是能转化成自己独特的思维逻辑；\n\n如果文章通篇读起来觉得索然无味，也可以私下进行一些深入的交流（排除语文功底因素），这是我极其希望遇到的场景。\n## 我可以怎么做\n\n- 如果你是一位新同学，或者是从传统测试转做验收测试的，下面的几点内容或许对你有所帮助；\n- 当然如果你是老司机，那也可以看看是否有其他更好的点子可以帮到大家。\n\n\n1. 作为验收工程师，首要任务是先把自己以前的思维做一个冻结，把杯子倒空，忘掉过往的所有荣耀与成就，重新出发；**--调整心态**\n2. 清晰认识自己的职责和责任，做的所有事情都不仅仅只是为了完成上级下达的任务，而是为了某一个目标; **--清晰自己工作的价值**\n>  比如XX项目经过你的验收后，可以拍着胸脯对他人说，已经验收通过没有问题，大胆发布，让用户拿去用吧!\n  或者是经过验收后，发现XX模块有风险，具体风险是XX，可能造成XX影响，建议提前采取XX行动，规避方案是XX，提前告知关注者项目的实际情况，即便是发布后真出现了问题，也做到了未雨绸缪。\n\n3. 接触任何一个项目时，首先是要弄清楚该项目的需求背景，直接接口人就是产品经理，从产品经理这里可以获取到项目的最原始信息，包括项目使用者，使用者的一些特点，此项目能够解决他们什么问题，核心价值具体体现在哪里，产品最差做到什么程度用户也能够接受（逐步剥离可以提炼到核心需求）？所有的这些只为弄清楚背景与用户痛点；\n4. 在了解项目的背景与用户痛点后，接下来的工作就需要始终将这些信息放到制高点，任何的思考行为都为这两点服务，你的模块分析是为了更好的保证用户能够流畅满意的使用，你的用例是为了能更全面的覆盖用户的操作行为，你的执行动作就是将自己当做用户来操作使用这个产品；\n5. 通过上述的信息输入后，就可以开展实际的验收测试分析，这里还是推荐使用思维导图的方式来开展此项工作；\n6. 在思维导图分析完成后，接下来就是用例的转化写作了，转化过程只需要抓住一个核心：思维导图中辛苦分析出来的验证点不要漏掉；\n7. 验收执行阶段工作主要是执行用例，在执行每条用例时，同样需要思考用例编写的本意是要验证什么点，切记无脑执行，往往能够发现用例可优化的地方，或者可扩展验证场景。\n\n## 正题\n\n前面的内容主要是一些铺垫，也就是大家说的鸡汤软文，下文主要从上面列出的几个步骤来描述一下个人理解的验收测试用例的生产过程，用例输出绝对不是直接上来就干的事儿，拿到项目一上来就直接干用例的行为那都是莽夫行为，测试最高价值体现就是你的思维，而对思维的加工最终输出的产物才是思维导图、测试用例这些实际的文档，下面会针对每个步骤进行详细的阐述，希望对大家有所帮助。\n### 下文整体思路会以下图思路开展\n\n![](pictures/e2e_analysis/01FJX.png)\n\n## 用例生产过程\n\n### 所需要的原料\n\n - 此部分内容，主要是列出我们在做一个项目的时候，最好弄清楚我们所需要的输入；\n - 包括我们需要具备的一些能力或者了解的知识点；\n - 当然不是所有列出的东西都一定需要具备或者精通，当前不具备的就可以针对性的去提升学习，以便能在工作中能够轻松应对。\n\n**实物原料：**- 项目需求文档；--必选（哪怕是一句话需求）\n\n- 需求原型；--可选\n\n- 研发概要设计文档；--可选\n- 研发详细设计文档；--可选\n- 项目demo；--可选\n- ……\n\n**思想原料：**- 熟悉软件研发流程；\n> 熟悉软件测试基本理论知识:\n1. 黑盒测试基本方法（等价类、边界值、正交、状态迁移、判定表、错误猜测、……）； \n2. 接口测试、安全测试、性能测试、网络基本知识的了解； \n3. 测试思维导图分析方法； \n4. 用例编写的基本原则，测试用例的八大要素；\n\n### 加工流程\n\n> 通过对上述或者更多的原料进行有序加工，我们的思维产物最终会以具体的思维导图、测试用例体现出来。\n\n#### Step1 深入理解项目背景、用户痛点\n\n**实操步骤**\n\n首先我们在接触到一个新项目时,首要的就是拿到该项目的需求文档,如果没有需求文档就直接找产品经理或者一线人员,甚至是直接用户进行沟通,主要目的就是弄清楚如下几个问题: \n\n1. 这个项目产生的原因是什么?--为什么要做这个项目,有钱任性?做着玩? 主要是为了解决用户什么问题,用户在当前碰到了什么难题需要我们来解围?\n2. 不做这个项目行不行?--市面上有没有现成的解决方案?为什么要我们做这个?我们这个项目的优势在哪里?我们能为用户提供什么核心价值?\n3. 我们的核心用户都是哪些人?都是一些什么样的人?这些人有些什么习惯或者特点?在产品使用上会不会有些特殊癖好或者要求?\n4. 我们是怎么解决用户遇到的这个难题的,当前的需求内容是否能够达到解决用户痛点的目的?\n\n经过上述几个问题的自问或者问他人,你一定会获得一些有用的信息,经过对这些信息的消化和理解,你基本上就具备了与产品经理或者用户等位思考的状态,在此状态下,再结合产品经理编写的现成的背景和痛点问题描述,基本上就真正理解了项目的背景了；\n\n如何确定自己已经理解了当前项目背景呢？\n\n**Check点**\n把这个项目介绍给其他人，能够流畅的按照上述几个问题维度来讲解清楚的话，就说明已经达到要求了。\n\n#### Step2 梳理、挖掘基本需求点\n\n> 这一部分内容大家最熟悉，也是一般人上来就开搞的一步，每个人都能整出一篇“丰满”的思维导图出来，全部展开的时候看起来内容丰富，但很多同学的思维导图内容细看后发现缺乏逻辑，有时候会很全，有时候会遗漏一些内容，实际上就是缺乏一些系统的思维。\n\n实际上我们在做项目或者模块分析时还是有套路可以耍的： 1\n\n首先就是把我们软件质量模型这张牌掏出来，如果能熟练的掌握质量模型的6大特性（功能性、可靠性、易用性、效率、可维护性、可移植性），27个子特性，那你做测试分析可能遗漏的几率是很小的。\n实际上很少人能全部掌握，但你需要做到的是6大特性一定要掌握，每个特性大概对应的是哪些维度要非常清楚，质量模型中的维度需要逐项去做分析覆盖，功能性这块基本是个测试都能做到，但如何把功能性做全做深就又是一个挑战；\n\n**功能特性分析：**\n\n1. 功能特性分析基本占据了80%以上的内容，也是我们需要花费80%精力去做好的部分，看起来最简单的部分，也是最难的部分;\n2. 你需要深入理解项目背景和用户痛点，需要了解需求文档中提及的每一个模块功能，以及模块与模块之间的联系；\n3. 需要在没有原型的基础上在脑海里自己勾勒出产品界面的雏形，想象各个功能模块之间的跳转逻辑以及依赖关系；\n4. 通过对SE/开发编写的概要设计、详细设计的仔细研读，了解每个模块的具体后台实现，来挖掘隐藏的测试点和逻辑联系；--这一步至少50%的测试人员做不到，很多人无法理解开发的后台实现逻辑，也就不可能知道该实现可能存在的问题，自然就不可能挖掘出这种隐藏的测试点，往往代码的缺陷就来自于这里，因为开发编码实际上就是把他的思维以代码的方式去呈现出来，那开发自己的想法都可能有问题，我们做测试的不去识别他的想法缺陷，再到后面去弥补，你肯定已经想到这个地方的成本有多高。所以能够落地去做的事情就是仔细研读开发编写的详细设计文档，技术这块不懂的就去查资料去问开发，直到理解他的实现逻辑是什么，在这个过程中你就会找到很多隐藏的测试点，从而能够丰富你的功能分析点。\n5. 对于解决方案类产品（B/S架构），B/S类架构项目都是分前后台的，往往测试分析的时候大家只会去关注前台的显示，文案，按钮这些基本肉眼可见的东西，对于后台数据库的内容往往“视而不见”，在理解开发详细设计时，就要同时清楚他们的数据表设计内容，了解表与表之间的关联关系，字段的具体含义，前端数据获取的地方，以此就非常容易识别前台代码是否写死，是否是按照约定的逻辑来处理加工数据的，也就能提早发现一些设计、实现上不合理的地方。\n\n**思维导图的输出**\n\n>  通过上面的思路分析后，我们就能输出80%的思维导图分析内容，也就抓住了这个项目的80%的测试点。\n\n此时你完成的思维导图大概应该是这个样子：\n![](pictures/e2e_analysis/022FJX.png)\n\n 完成80%内容后，剩下的把其他五大特性的内容进行完善即可，具体每个特性所体现的内容请大家自行学习，并转化成项目中可实施的测试点 此部分完成后思维导图大致会是下面的结构，能够确保质量模型维度的全覆盖，那测试点的梳理基本就完成95%了。\n\n![](pictures/e2e_analysis/03FJX.png)\n\n完成上述测试分析后，实际上我们还有一个很重要的维度容易忽略，那就是异常场景，当然很多同学也容易特立独行，在上面的分析过程中就投入大量精力去搞异常场景，显得自己考虑问题的角度比较深入或者独特。\n\n想法是好的，但这个不是我们主要发力的点，你基本业务流都没整明白，直接到这种容易“钻牛角尖”的胡同里，很容易走火入魔。 \n\n建议上来说，在完成上面的所有分析后，再把自己脱离出来，去思考一些异常场景的补充，此时你的角色就变换成一个“破坏”者，以你能想到的，在日常使用过程中可能发生的一些“可怕”场景都用上来，如果符合当前项目的操作入口，那么就是你异常场景的突破口。\n\n**打比方（也不知道比方会不会怪我老打他）**： \n\n  1. 使用过程中，直接关闭程序（数据都没保存呢……）--程序是否能再次正常启动，数据是否可以恢复到之前打开的状态；\n  2. 直接暴力切断电源，系统重启后，程序是否正常运行，数据是否恢复之前状态；\n  3. 直接关闭浏览器，提交的数据是否能下次恢复，程序是否能拦截并给出提示还有数据未保存；\n  4. 服务器直接断电，被手动关闭，重启服务器后，服务是否能正常拉起，恢复后台服务能力，数据是否均正常；\n  5. 对于存在输入的地方，我们可做的骚操作很多，这里边界值的上点和外点、非等价类的输入就是我们做异常测试的发力点，会不会因为我们的一些上点、内点、非等价类输入，或者特殊字符输入，或者SQL注入的内容输入造成程序崩溃，或者安全漏洞等等；\n  6. 对于图谋不轨的人，我们还需要考虑安全问题，是否存在明文传输（密码全程是否加密），通过浏览器F12调试模式查看接口的传参过程，通过后台数据库查看具体的密码存储形式，通过后台日志查看敏感信息是否脱敏处理……\n  7. 数据传输过程中，直接断开网络，程序下次是否能正常重新处理数据；\n  8. 上传非法格式，非法超大文件前台是否能正常校验拦截，通过接口直接上传，后台是否能正常拦截；\n  9. 程序提供的配置，逻辑上是否有做依赖控制，是否存在前后冲突的配置可以设置，导致部分配置不生效；\n  10. 数据的多次重复提交是否会存在异常；\n  11. 数据的新建=》删除=》再建，是否能正常处理；\n  12. 数据的提交更改后，下次进入展示，回显是否正确；\n  13. 存在数据记忆的场景，是否能够正常记忆；\n  14. 存在回退的场景，数据是否能够正常回滚无残留；\n  15. 存在数据迁移的场景，数据是否能够正常迁移，且兼容新版本的展示结构；\n  16. 存在数据结构升级的场景，是否能向下兼容老旧数据，或者正常转换旧数据结构，从而正常展示在前端；\n  17. 存在可以向后台提交数据的按钮时，是否可以快速频繁的点击提交，可能导致数据异常；\n  18. 存在单选、复选、全选、全不选的场景时，频繁的选择状态切换，选择逻辑是否处理正确，选择数据对象是否准确；\n  19. 存在批量新建、上传、删除等场景时，对于单条数据的批量操作，多条数据的批量操作，是否能正确处理；\n  20. 存在大数据量场景时，需要重点关注接口数据的处理准确性，在实现规格内，提交的大数据请求处理，是否能准确且高效的完成。\n\n此时你的思维导图大概是这个样子：\n\n![](pictures/e2e_analysis/04FJX.png)\n\n#### Step3 精加工生产E2E验收用例\n\n> - 通过上面的生产加工后，想必大家觉得分析工作已经完成了，可以说作为内部测试在完成上面工作后，测试分析工作的确可以告一段落，我也可以打包票说只要你能按照上面提到的维度，每个维度都做出了深入的思考与分析，那你的测试分析是比较完善的；\n> - 但作为验收工程师，最核心的部分还没开始，那就是E2E场景，也就是说，到现在为止，验收工程师的核心工作才刚刚开始……\n\n实际上前面的工作都已经做的比较全了，剩下的部分只需要结合部分思维来串联一下就可以完成，此刻你就变身为一个串珠的人儿了，把你精心准备好的“珍珠”按照某种方式串起来，做成一条条“项链”，这些“项链”就是我们验收的E2E场景用例，其主要会涉及到如下方面内容：\n\n1. 理解何为用户场景？\n> 用户日常使用时，使用产品的操作路径，可能进行的操作流。\n\n2. 写这些E2E场景的意义是什么？ \n尽可能全的模拟覆盖用户日常会操作的路径，提前发现可能存在的问题，确认产品是否能够满足用户日常使用，弥补在模块测试中对模块之间的关联性测试覆盖不足的问题。\n\n3. 用户场景的来源有哪些？ \n- 通过功能点分析，站在用户角度采用状态机思路编写E2E场景用例--你就是用户； \n- 通过分析一线人员提供的问题信息，获得用户使用的场景信息--真实使用者的反馈； \n- 通过一线人员提供的用户群体特征，使用产品的场景等信息，通过关联分析构建用户场景信息--对真实使用者的模拟分析，有时候用户自己都不知道自己需要的是什么，那我们就需要替用户去思考这个问题，如同乔布斯说的：在我发布苹果手机的时候，用户才知道这就是他们想要的。\n\n4. 什么叫做端到端（E2E）场景用例？ \n不同于传统测试过程中仅针对某一个功能点进行深入验证的用例，而是尽可能将多个功能点通过某种思路（如状态机）有目的设计成一连串的操作流，形成的一种用例形式。\n\n5. 场景用例的编写粒度该如何把控？ \n\t在编写这类用例时，很多同学会陷入两难境地，在测试步骤中，不知道编写粒度该控制到哪个层次，写太细了跟传统用例没区别，写太粗了又担心不具备可执行性； \n\t- 实际上这个问题很难按照某种要求去规定，主要把握几个原则： \n\t1.  场景用例编写的前提，一定是内部测试已经有非常详尽的功能用例，覆盖每个功能点，确保了基本功能是没有问题的；--如果担心这个地方有遗漏，说明我们内部测试需要改进，并且在测试执行阶段，验收工程师也需要有能力进行适当发散，做事不能眉毛胡子一把抓，每个阶段的重点核心不同，该放的时候要放，该收的地方得收。 \n\t2. 基于上述前提，就知道我们的场景用例不会写的太细，更多的是一种操作行为流的描述，可以做的是，在每一个操作行为后，预期结果我们尽可能的描述全面； \n\t3. 每一条用例都需要有一个核心目的，要想清楚该用例的核心是为了验证或者保证什么功能，那么用例的步骤描述都需要围绕这个核心去开展，避免一条用例中混杂不同的场景和行为路径，会导致用例缺乏目标，也容易产生冗余用例内容； \n\t4. 用例粒度确保能够清晰引导执行者完成步骤描述内容，在存在依赖的部分交代清楚依赖获取的方式，预期结果明确无歧义； \n\t5. 在编写过程中发现用例步骤太多（超过十几步）,那就需要针对该路径做分离处理，可以分成多条用例来覆盖，避免单条用例步骤过于复杂，可能对后续的执行带来不必要的麻烦；\n\t\n6. 我该如何知道E2E用例步骤该从哪里开始又从哪里结束？ \n\t- 此行为实际上也没有固定的公式可以参考，仍旧是结合部分经验来完成： \n\t1. 把握一个核心目的，场景用例内容必须包含我们前面分析的所有功能点；--如果没有包含在内，则问自己前面的分析是否有必要，如果觉得没必要就裁剪前面的分析； \n\t2. 用例开始起点一般可以采取某个功能模块的入口； \n\t3. 用例的结束就不一定会有唯一的结束点，因为从起点开始后，可能有多个分支均会走向结束，此时则可以分成多条用例来覆盖（对于前面覆盖的步骤则可以作为前置条件，以此精简其他分支的用例内容）； \n\t4. 有些分支走下去发现是一个死循环，无法有效闭环，那此时我们至少需要覆盖以此完整的循环，保证各个状态之间的转换路径均需要覆盖（下文会采用状态机的方式做阐述）\n\n我们先来了解一个概念：\"状态机\"，这个将对我们编写E2E用例有较大帮助，场景用例编写的总体思路我们将采用状态机的套路来进行，所以我们需要先了解这个概念： \n\n#### 状态机含义\n\n> 状态机就是有限状态自动机的简称，是现实事物运行规则抽象而成的一个数学模型 状态机有4 个要素: 现态、条件、动作、次态。 这样的归纳，主要是出于对状态机的内在因果关系的考虑: \n- “现态”和 “条件” 是因，\n> - “动作”和 “次态” 是果。\n\n1. 现态：是指当前所处的状态。\n2. 条件：又称为 “事件”，当一个条件被满足，将会触发一个动作，或者执行一次状态的迁移。\n3. 动作：条件满足后执行的动作。动作执行完毕后，可以迁移到新的状态，也可以仍旧保持原状态。动作不是必需的，当条件满足后，也可以不执任何动作，直接迁移到新状态。\n4. 次态：条件满足后要迁往的新状态。“次态”是相对于 “现态” 而言的，“次态”一旦被激活，就转变成新的 “现态” 了。\n\n**转换状态示意图：**\n下面就是对水在不同状态之间的转换示意图 - 假如水蒸气是现态，在施加降温这个条件后，会发生凝结动作，从而变成次态的液态水；\n> - 当前液态水是现态，在施加降温这个条件后，会发生凝固动作，从而变成次态的冰；\n> - 相反在施加加温这个条件后，冰又能变成液态水，在继续加温后，又能变成水蒸气。\n\n![image-20210903095132477](pictures/e2e_analysis/05FJX.png)\n\n- 说人话呢这个东西就是某物体、某程序功能，会被不同的条件动作触发产生变化，从而形成一种新的状态或者结果（也可能保持不变）；\n- 一般来说程序中的这些变化的状态，肯定是有限的，所以我们也叫有限状态机，正因为是有限的我们才有分析的可能性；\n- 既然是有限的状态，那我们就可以将任何程序采用此思想，将其抽象出一个个的状态；\n- 然后提炼出触发的各种条件，通过在不同状态之间施加不同的触发条件，就能让这些状态不断变化，从而完成我们对程序的不同路径的覆盖；\n- 通过上面的示意图我们也是能很容易去理解这个点的，之所以E2E用例的编写需要去采用这种思维呢，主要就是模拟用户日常可能会触发的各种点，只要我们能触碰到他们会触发的各种操作行为，了解到他们企图达到的最终状态，那我们的验收用例就是有意义的。\n\n> 将上面水的状态变化类比到我们软件产品中来，就是这么个意思：\n- 拿到某个功能模块时，可以选择一个最基础的入口作为起点（现态）；\n> - 确定起点后，可以分析有哪些条件可以来施加，也就是从这个起点开始，有哪些后续的功能按钮可以操作？\n> - 分别操作这些功能按钮后，会跳转到哪个模块或者页面（次态）？\n> - 依照上述思路，针对这些次态继续分析可以施加的条件（可点击的功能按钮），继续往下发觉后续的状态；\n> - 当分析到最后发现已经没有新的状态可以产生了，那就说明这条路径已经走到头，此时就可以结束了；\n> - 如果发现不同状态之间会存在循环，那么我们可以保证完成一次循环即可（比如：固态=》液态=》气态=》液态=》固态）；\n> - 如果发现在某一个次态时，会产生多分支时，那么就需要单独分析每个分支，直到每个分支都走到头才结束；\n> - 针对不同的分支我们就可以梳理出不同的场景用例来。\n\n#### 从一线人员获取灵感\n\n> 大多数同学可能觉得到这里任务就该结束了，实际上上面的所有行为都是我们自己通过功能分析构造的一些场景，仍旧会存在遗漏点，每个人的思维都是存在局限性的，如果条件允许的话，我们可以进一步与一线人员甚至直接用户进行交流，来获取其真实日常是如何开展的，从而获取到最为真实客观的使用场景信息。\n\n- 获取一线用户的真实场景信息并不是所有项目都具备的条件，但条件具备时就一定要充分利用起来；\n- 如果没有此条件，我们也可以主动创造，可以主动申请出差客户现场，进行有效信息的获取；\n- 与一线人员、产品经理进行日常有效交流，从交谈中挖掘有效信息，都是可以帮助到我们丰富场景的；\n- 通过上述各种途径获取到的信息，则可以转化成用例，作为有效的覆盖条件。\n\n#### 过程验收&amp;抽验的遗漏补充\n\n> 怎么还没完没了了？\n到此还没结束？\n当然，因为前期我们的所有行为都是纸上谈兵（做的策略分析），老话说的好，纸上得来终觉浅，绝知此事要躬行，事情还得自己“弯着腰”去做啊…… \n\n在验收的整个生命周期中，我们的时间跨度是非常大的，在前期用例全部编写完成后，还有很长一段时间，此期间伴随着迭代版本的提测，内部测试的测试，验收的抽验，等等过程，\n\n此阶段我们是有机会接触真实的产品形态，也能够去实践之前的策略性动作，在这个过程中，是能够发现一些遗漏点，或者过程性不完善的地方。\n\n- 在过程验收或者抽验阶段，发现的一些遗漏点，需要及时的补充到场景用例中；\n- 发现的一些不合理的地方，需要及时优化调整用例的执行步骤等内容；\n- 对于内部测试发现的BUG分布较多，已经识别风险较大的模块，则需要针对性的增加用例密度，提高用例覆盖粒度，做出针对性预防；--BUG都是集中产生的，容易长虫子的地方，他就会成批成批的长，不用去怀疑这个规律；\n- 过程中发现内部测试狙击不足的模块或者方向，也需要我们针对性的提高预防措施，增加用例密度，明知道前面的兄弟没守住，已经有鬼子进村了，还不做好彻底的预防，那是我们的失职；\n- 上述的策略都是在实战中逐步调整完善，进一步巩固我们的武器装备，布好天罗地网，从而在验收阶段真正做到胸有成竹。\n\n此时思维导图框架大概是这么个样子：\n\n![](pictures/e2e_analysis/06FJX.png)\n#### 转换成用例\n\n实际上在上面过程中就有可能已经完成了用例的转换，所以此阶段并不一定是在最后，我们对于用例的补充和思维导图的维护应该是同步的，避免用例有更新，思维导图有缺失，真正在后续去评审和讲解时都是拿思维导图来展示，用例很难逐条去评审，拿用例评审是无法有效知道是否有遗漏，只能评审用例的规范与否，但思维导图则可以方便点 的查看是否针对某个模块有遗漏的场景。\n\n如何编写转换成最终的用例则不在此文中做讲解，针对用例的编写可以单独进行分享，此文默认大家都能够有效的转换编写用例。\n## 质检\n\n> 在实际生产过程中，都有一个质检环节，我们的工作也不例外，此环节与各位的职位级别、能力无关，再牛皮的人都有出错的时候，那么质检的这个动作我们一定要实施。\n\n- 实际上就是我们的评审过程，当局者迷，有时候就会迷在自己的思维中，而其他评审角色就能够从一些意想不到的角度提出遗漏和不足的地方，以便帮助我们进一步完善分析和用例内容；\n- 永远不要迷恋自己的想法，不要相信自己的分析是完善的，在分析过程中，永远多敲一个回车，预留待填写的空间……\n- 有效的评审能够避免后期的不足，重视此过程是对我们对项目的负责。\n\n## 收工\n此次故事就讲到这里~ \n如果你已经睡着了，我会感到很抱歉，没有吸引到你~ \n如果你感觉有收获，我会感到很欣慰，我真的可以帮助到你~ \n如果你有好的建议提交给我，我会感到很高兴，你可以帮助我进一步成长~ \n如果你有更好的思维与我分享，我会感到兴奋，我想与你把酒言欢~\n\n\n\n\n\n\n\n","slug":"e2e_analysis","published":1,"updated":"2022-12-31T04:20:26.296Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clciheild000prdxhciwr8ner","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>对于验收测试工程师来说，编写验收测试分析和测试用例是一项必须且重要的工作内容，但大多数同学在做验收测试分析及用例编写时，仍旧陷入到传统的分析及用例编写思维中，与内部测试团队所输出的内容并无差异，虽然大家在讲述验收工程师职责或者测试分析思路时，都知道说要编写用户场景用例，可实战过程中仍旧是任性的走老套路，犟的很！ </p>\n<p>究其原因，还是没有摆脱传统的测试思维，更多的关注点仍旧在文档中罗列的基本需求点，除了字面上描述出来的东西，很难将自己放在用户角色上去想象体验手头的产品，在验收时，又本着任务的压力，只能优先去完成流程上的一些基本任务：验收测试分析、验收测试用例编写、各种会议评审、输出各类报告…… </p>\n<p>上述每一个具体事项实际都只是我们工作实施的一个产物体现，并不是最终的目的，也就是说不仅仅为了去完成一篇分析或者用例的编写，就匆匆忙忙开干，在没有深入理解需求，了解用户痛点，及项目意义的情况下，所有的忙碌都不会产生太高价值，看起来长篇大论的文字表格一堆，但其中蕴含的思维和测试覆盖点却很难达到我们的预期，往往后期需要花费大量的精力去查漏补缺，进行各种优化，算算总投入成本那是极不划算的，而且还觉得自己特忙。</p>\n<p>对于团队中每一个同学来讲，每个人都有自己的特长和优势，但也会存在部分同学的确存在以上描述的若干问题，所以也就有了此篇文档，作为个人理解的内容，想要起到抛砖引玉的效果，希望在某些方面能够对大家有所帮助，也许能够通过思维的碰撞产生更加适合当前团队的执行方法和流程。</p>\n<p>本文会以通俗易懂偏口语化的风格进行阐述，尽量结合当前项目的实际内容来阐述具体思想，文中所有举例只是为了阐述某种思维方式，请读者不要钻牛角尖，而应该深入扩展理解思维背后的原理，内化成自己的经验和做事方法。</p>\n<h2 id=\"导读\"><a href=\"#导读\" class=\"headerlink\" title=\"导读\"></a>导读</h2><p>本文总体文字比较多，且讲述的内容非常基础，可能都是在各位平常工作中已经在实施的部分，只是做了一个系统的呈现，如果看的过程确有共鸣，则可以快速跳过熟知内容，直接查看“精加工生产E2E验收用例”部分内容； </p>\n<p>如果前文中部分内容平常未涉及到，则可以细致去想一下描述中的各问题及思维过程，最好是能转化成自己独特的思维逻辑；</p>\n<p>如果文章通篇读起来觉得索然无味，也可以私下进行一些深入的交流（排除语文功底因素），这是我极其希望遇到的场景。</p>\n<h2 id=\"我可以怎么做\"><a href=\"#我可以怎么做\" class=\"headerlink\" title=\"我可以怎么做\"></a>我可以怎么做</h2><ul>\n<li>如果你是一位新同学，或者是从传统测试转做验收测试的，下面的几点内容或许对你有所帮助；</li>\n<li>当然如果你是老司机，那也可以看看是否有其他更好的点子可以帮到大家。</li>\n</ul>\n<ol>\n<li><p>作为验收工程师，首要任务是先把自己以前的思维做一个冻结，把杯子倒空，忘掉过往的所有荣耀与成就，重新出发；**–调整心态**</p>\n</li>\n<li><p>清晰认识自己的职责和责任，做的所有事情都不仅仅只是为了完成上级下达的任务，而是为了某一个目标; <strong>–清晰自己工作的价值</strong></p>\n<blockquote>\n<p> 比如XX项目经过你的验收后，可以拍着胸脯对他人说，已经验收通过没有问题，大胆发布，让用户拿去用吧!<br>  或者是经过验收后，发现XX模块有风险，具体风险是XX，可能造成XX影响，建议提前采取XX行动，规避方案是XX，提前告知关注者项目的实际情况，即便是发布后真出现了问题，也做到了未雨绸缪。</p>\n</blockquote>\n</li>\n<li><p>接触任何一个项目时，首先是要弄清楚该项目的需求背景，直接接口人就是产品经理，从产品经理这里可以获取到项目的最原始信息，包括项目使用者，使用者的一些特点，此项目能够解决他们什么问题，核心价值具体体现在哪里，产品最差做到什么程度用户也能够接受（逐步剥离可以提炼到核心需求）？所有的这些只为弄清楚背景与用户痛点；</p>\n</li>\n<li><p>在了解项目的背景与用户痛点后，接下来的工作就需要始终将这些信息放到制高点，任何的思考行为都为这两点服务，你的模块分析是为了更好的保证用户能够流畅满意的使用，你的用例是为了能更全面的覆盖用户的操作行为，你的执行动作就是将自己当做用户来操作使用这个产品；</p>\n</li>\n<li><p>通过上述的信息输入后，就可以开展实际的验收测试分析，这里还是推荐使用思维导图的方式来开展此项工作；</p>\n</li>\n<li><p>在思维导图分析完成后，接下来就是用例的转化写作了，转化过程只需要抓住一个核心：思维导图中辛苦分析出来的验证点不要漏掉；</p>\n</li>\n<li><p>验收执行阶段工作主要是执行用例，在执行每条用例时，同样需要思考用例编写的本意是要验证什么点，切记无脑执行，往往能够发现用例可优化的地方，或者可扩展验证场景。</p>\n</li>\n</ol>\n<h2 id=\"正题\"><a href=\"#正题\" class=\"headerlink\" title=\"正题\"></a>正题</h2><p>前面的内容主要是一些铺垫，也就是大家说的鸡汤软文，下文主要从上面列出的几个步骤来描述一下个人理解的验收测试用例的生产过程，用例输出绝对不是直接上来就干的事儿，拿到项目一上来就直接干用例的行为那都是莽夫行为，测试最高价值体现就是你的思维，而对思维的加工最终输出的产物才是思维导图、测试用例这些实际的文档，下面会针对每个步骤进行详细的阐述，希望对大家有所帮助。</p>\n<h3 id=\"下文整体思路会以下图思路开展\"><a href=\"#下文整体思路会以下图思路开展\" class=\"headerlink\" title=\"下文整体思路会以下图思路开展\"></a>下文整体思路会以下图思路开展</h3><p><img src=\"/pictures/e2e_analysis/01FJX.png\"></p>\n<h2 id=\"用例生产过程\"><a href=\"#用例生产过程\" class=\"headerlink\" title=\"用例生产过程\"></a>用例生产过程</h2><h3 id=\"所需要的原料\"><a href=\"#所需要的原料\" class=\"headerlink\" title=\"所需要的原料\"></a>所需要的原料</h3><ul>\n<li>此部分内容，主要是列出我们在做一个项目的时候，最好弄清楚我们所需要的输入；</li>\n<li>包括我们需要具备的一些能力或者了解的知识点；</li>\n<li>当然不是所有列出的东西都一定需要具备或者精通，当前不具备的就可以针对性的去提升学习，以便能在工作中能够轻松应对。</li>\n</ul>\n<p><strong>实物原料：</strong>- 项目需求文档；–必选（哪怕是一句话需求）</p>\n<ul>\n<li><p>需求原型；–可选</p>\n</li>\n<li><p>研发概要设计文档；–可选</p>\n</li>\n<li><p>研发详细设计文档；–可选</p>\n</li>\n<li><p>项目demo；–可选</p>\n</li>\n<li><p>……</p>\n</li>\n</ul>\n<p><strong>思想原料：</strong>- 熟悉软件研发流程；</p>\n<blockquote>\n<p>熟悉软件测试基本理论知识:</p>\n</blockquote>\n<ol>\n<li>黑盒测试基本方法（等价类、边界值、正交、状态迁移、判定表、错误猜测、……）； </li>\n<li>接口测试、安全测试、性能测试、网络基本知识的了解； </li>\n<li>测试思维导图分析方法； </li>\n<li>用例编写的基本原则，测试用例的八大要素；</li>\n</ol>\n<h3 id=\"加工流程\"><a href=\"#加工流程\" class=\"headerlink\" title=\"加工流程\"></a>加工流程</h3><blockquote>\n<p>通过对上述或者更多的原料进行有序加工，我们的思维产物最终会以具体的思维导图、测试用例体现出来。</p>\n</blockquote>\n<h4 id=\"Step1-深入理解项目背景、用户痛点\"><a href=\"#Step1-深入理解项目背景、用户痛点\" class=\"headerlink\" title=\"Step1 深入理解项目背景、用户痛点\"></a>Step1 深入理解项目背景、用户痛点</h4><p><strong>实操步骤</strong></p>\n<p>首先我们在接触到一个新项目时,首要的就是拿到该项目的需求文档,如果没有需求文档就直接找产品经理或者一线人员,甚至是直接用户进行沟通,主要目的就是弄清楚如下几个问题: </p>\n<ol>\n<li>这个项目产生的原因是什么?–为什么要做这个项目,有钱任性?做着玩? 主要是为了解决用户什么问题,用户在当前碰到了什么难题需要我们来解围?</li>\n<li>不做这个项目行不行?–市面上有没有现成的解决方案?为什么要我们做这个?我们这个项目的优势在哪里?我们能为用户提供什么核心价值?</li>\n<li>我们的核心用户都是哪些人?都是一些什么样的人?这些人有些什么习惯或者特点?在产品使用上会不会有些特殊癖好或者要求?</li>\n<li>我们是怎么解决用户遇到的这个难题的,当前的需求内容是否能够达到解决用户痛点的目的?</li>\n</ol>\n<p>经过上述几个问题的自问或者问他人,你一定会获得一些有用的信息,经过对这些信息的消化和理解,你基本上就具备了与产品经理或者用户等位思考的状态,在此状态下,再结合产品经理编写的现成的背景和痛点问题描述,基本上就真正理解了项目的背景了；</p>\n<p>如何确定自己已经理解了当前项目背景呢？</p>\n<p><strong>Check点</strong><br>把这个项目介绍给其他人，能够流畅的按照上述几个问题维度来讲解清楚的话，就说明已经达到要求了。</p>\n<h4 id=\"Step2-梳理、挖掘基本需求点\"><a href=\"#Step2-梳理、挖掘基本需求点\" class=\"headerlink\" title=\"Step2 梳理、挖掘基本需求点\"></a>Step2 梳理、挖掘基本需求点</h4><blockquote>\n<p>这一部分内容大家最熟悉，也是一般人上来就开搞的一步，每个人都能整出一篇“丰满”的思维导图出来，全部展开的时候看起来内容丰富，但很多同学的思维导图内容细看后发现缺乏逻辑，有时候会很全，有时候会遗漏一些内容，实际上就是缺乏一些系统的思维。</p>\n</blockquote>\n<p>实际上我们在做项目或者模块分析时还是有套路可以耍的： 1</p>\n<p>首先就是把我们软件质量模型这张牌掏出来，如果能熟练的掌握质量模型的6大特性（功能性、可靠性、易用性、效率、可维护性、可移植性），27个子特性，那你做测试分析可能遗漏的几率是很小的。<br>实际上很少人能全部掌握，但你需要做到的是6大特性一定要掌握，每个特性大概对应的是哪些维度要非常清楚，质量模型中的维度需要逐项去做分析覆盖，功能性这块基本是个测试都能做到，但如何把功能性做全做深就又是一个挑战；</p>\n<p><strong>功能特性分析：</strong></p>\n<ol>\n<li>功能特性分析基本占据了80%以上的内容，也是我们需要花费80%精力去做好的部分，看起来最简单的部分，也是最难的部分;</li>\n<li>你需要深入理解项目背景和用户痛点，需要了解需求文档中提及的每一个模块功能，以及模块与模块之间的联系；</li>\n<li>需要在没有原型的基础上在脑海里自己勾勒出产品界面的雏形，想象各个功能模块之间的跳转逻辑以及依赖关系；</li>\n<li>通过对SE&#x2F;开发编写的概要设计、详细设计的仔细研读，了解每个模块的具体后台实现，来挖掘隐藏的测试点和逻辑联系；–这一步至少50%的测试人员做不到，很多人无法理解开发的后台实现逻辑，也就不可能知道该实现可能存在的问题，自然就不可能挖掘出这种隐藏的测试点，往往代码的缺陷就来自于这里，因为开发编码实际上就是把他的思维以代码的方式去呈现出来，那开发自己的想法都可能有问题，我们做测试的不去识别他的想法缺陷，再到后面去弥补，你肯定已经想到这个地方的成本有多高。所以能够落地去做的事情就是仔细研读开发编写的详细设计文档，技术这块不懂的就去查资料去问开发，直到理解他的实现逻辑是什么，在这个过程中你就会找到很多隐藏的测试点，从而能够丰富你的功能分析点。</li>\n<li>对于解决方案类产品（B&#x2F;S架构），B&#x2F;S类架构项目都是分前后台的，往往测试分析的时候大家只会去关注前台的显示，文案，按钮这些基本肉眼可见的东西，对于后台数据库的内容往往“视而不见”，在理解开发详细设计时，就要同时清楚他们的数据表设计内容，了解表与表之间的关联关系，字段的具体含义，前端数据获取的地方，以此就非常容易识别前台代码是否写死，是否是按照约定的逻辑来处理加工数据的，也就能提早发现一些设计、实现上不合理的地方。</li>\n</ol>\n<p><strong>思维导图的输出</strong></p>\n<blockquote>\n<p> 通过上面的思路分析后，我们就能输出80%的思维导图分析内容，也就抓住了这个项目的80%的测试点。</p>\n</blockquote>\n<p>此时你完成的思维导图大概应该是这个样子：<br><img src=\"/pictures/e2e_analysis/022FJX.png\"></p>\n<p> 完成80%内容后，剩下的把其他五大特性的内容进行完善即可，具体每个特性所体现的内容请大家自行学习，并转化成项目中可实施的测试点 此部分完成后思维导图大致会是下面的结构，能够确保质量模型维度的全覆盖，那测试点的梳理基本就完成95%了。</p>\n<p><img src=\"/pictures/e2e_analysis/03FJX.png\"></p>\n<p>完成上述测试分析后，实际上我们还有一个很重要的维度容易忽略，那就是异常场景，当然很多同学也容易特立独行，在上面的分析过程中就投入大量精力去搞异常场景，显得自己考虑问题的角度比较深入或者独特。</p>\n<p>想法是好的，但这个不是我们主要发力的点，你基本业务流都没整明白，直接到这种容易“钻牛角尖”的胡同里，很容易走火入魔。 </p>\n<p>建议上来说，在完成上面的所有分析后，再把自己脱离出来，去思考一些异常场景的补充，此时你的角色就变换成一个“破坏”者，以你能想到的，在日常使用过程中可能发生的一些“可怕”场景都用上来，如果符合当前项目的操作入口，那么就是你异常场景的突破口。</p>\n<p><strong>打比方（也不知道比方会不会怪我老打他）</strong>： </p>\n<ol>\n<li>使用过程中，直接关闭程序（数据都没保存呢……）–程序是否能再次正常启动，数据是否可以恢复到之前打开的状态；</li>\n<li>直接暴力切断电源，系统重启后，程序是否正常运行，数据是否恢复之前状态；</li>\n<li>直接关闭浏览器，提交的数据是否能下次恢复，程序是否能拦截并给出提示还有数据未保存；</li>\n<li>服务器直接断电，被手动关闭，重启服务器后，服务是否能正常拉起，恢复后台服务能力，数据是否均正常；</li>\n<li>对于存在输入的地方，我们可做的骚操作很多，这里边界值的上点和外点、非等价类的输入就是我们做异常测试的发力点，会不会因为我们的一些上点、内点、非等价类输入，或者特殊字符输入，或者SQL注入的内容输入造成程序崩溃，或者安全漏洞等等；</li>\n<li>对于图谋不轨的人，我们还需要考虑安全问题，是否存在明文传输（密码全程是否加密），通过浏览器F12调试模式查看接口的传参过程，通过后台数据库查看具体的密码存储形式，通过后台日志查看敏感信息是否脱敏处理……</li>\n<li>数据传输过程中，直接断开网络，程序下次是否能正常重新处理数据；</li>\n<li>上传非法格式，非法超大文件前台是否能正常校验拦截，通过接口直接上传，后台是否能正常拦截；</li>\n<li>程序提供的配置，逻辑上是否有做依赖控制，是否存在前后冲突的配置可以设置，导致部分配置不生效；</li>\n<li>数据的多次重复提交是否会存在异常；</li>\n<li>数据的新建&#x3D;》删除&#x3D;》再建，是否能正常处理；</li>\n<li>数据的提交更改后，下次进入展示，回显是否正确；</li>\n<li>存在数据记忆的场景，是否能够正常记忆；</li>\n<li>存在回退的场景，数据是否能够正常回滚无残留；</li>\n<li>存在数据迁移的场景，数据是否能够正常迁移，且兼容新版本的展示结构；</li>\n<li>存在数据结构升级的场景，是否能向下兼容老旧数据，或者正常转换旧数据结构，从而正常展示在前端；</li>\n<li>存在可以向后台提交数据的按钮时，是否可以快速频繁的点击提交，可能导致数据异常；</li>\n<li>存在单选、复选、全选、全不选的场景时，频繁的选择状态切换，选择逻辑是否处理正确，选择数据对象是否准确；</li>\n<li>存在批量新建、上传、删除等场景时，对于单条数据的批量操作，多条数据的批量操作，是否能正确处理；</li>\n<li>存在大数据量场景时，需要重点关注接口数据的处理准确性，在实现规格内，提交的大数据请求处理，是否能准确且高效的完成。</li>\n</ol>\n<p>此时你的思维导图大概是这个样子：</p>\n<p><img src=\"/pictures/e2e_analysis/04FJX.png\"></p>\n<h4 id=\"Step3-精加工生产E2E验收用例\"><a href=\"#Step3-精加工生产E2E验收用例\" class=\"headerlink\" title=\"Step3 精加工生产E2E验收用例\"></a>Step3 精加工生产E2E验收用例</h4><blockquote>\n<ul>\n<li>通过上面的生产加工后，想必大家觉得分析工作已经完成了，可以说作为内部测试在完成上面工作后，测试分析工作的确可以告一段落，我也可以打包票说只要你能按照上面提到的维度，每个维度都做出了深入的思考与分析，那你的测试分析是比较完善的；</li>\n<li>但作为验收工程师，最核心的部分还没开始，那就是E2E场景，也就是说，到现在为止，验收工程师的核心工作才刚刚开始……</li>\n</ul>\n</blockquote>\n<p>实际上前面的工作都已经做的比较全了，剩下的部分只需要结合部分思维来串联一下就可以完成，此刻你就变身为一个串珠的人儿了，把你精心准备好的“珍珠”按照某种方式串起来，做成一条条“项链”，这些“项链”就是我们验收的E2E场景用例，其主要会涉及到如下方面内容：</p>\n<ol>\n<li><p>理解何为用户场景？</p>\n<blockquote>\n<p>用户日常使用时，使用产品的操作路径，可能进行的操作流。</p>\n</blockquote>\n</li>\n<li><p>写这些E2E场景的意义是什么？<br>尽可能全的模拟覆盖用户日常会操作的路径，提前发现可能存在的问题，确认产品是否能够满足用户日常使用，弥补在模块测试中对模块之间的关联性测试覆盖不足的问题。</p>\n</li>\n<li><p>用户场景的来源有哪些？</p>\n</li>\n</ol>\n<ul>\n<li>通过功能点分析，站在用户角度采用状态机思路编写E2E场景用例–你就是用户； </li>\n<li>通过分析一线人员提供的问题信息，获得用户使用的场景信息–真实使用者的反馈； </li>\n<li>通过一线人员提供的用户群体特征，使用产品的场景等信息，通过关联分析构建用户场景信息–对真实使用者的模拟分析，有时候用户自己都不知道自己需要的是什么，那我们就需要替用户去思考这个问题，如同乔布斯说的：在我发布苹果手机的时候，用户才知道这就是他们想要的。</li>\n</ul>\n<ol start=\"4\">\n<li><p>什么叫做端到端（E2E）场景用例？<br>不同于传统测试过程中仅针对某一个功能点进行深入验证的用例，而是尽可能将多个功能点通过某种思路（如状态机）有目的设计成一连串的操作流，形成的一种用例形式。</p>\n</li>\n<li><p>场景用例的编写粒度该如何把控？<br> 在编写这类用例时，很多同学会陷入两难境地，在测试步骤中，不知道编写粒度该控制到哪个层次，写太细了跟传统用例没区别，写太粗了又担心不具备可执行性； </p>\n<ul>\n<li>实际上这个问题很难按照某种要求去规定，主要把握几个原则：</li>\n</ul>\n<ol>\n<li>场景用例编写的前提，一定是内部测试已经有非常详尽的功能用例，覆盖每个功能点，确保了基本功能是没有问题的；–如果担心这个地方有遗漏，说明我们内部测试需要改进，并且在测试执行阶段，验收工程师也需要有能力进行适当发散，做事不能眉毛胡子一把抓，每个阶段的重点核心不同，该放的时候要放，该收的地方得收。 </li>\n<li>基于上述前提，就知道我们的场景用例不会写的太细，更多的是一种操作行为流的描述，可以做的是，在每一个操作行为后，预期结果我们尽可能的描述全面； </li>\n<li>每一条用例都需要有一个核心目的，要想清楚该用例的核心是为了验证或者保证什么功能，那么用例的步骤描述都需要围绕这个核心去开展，避免一条用例中混杂不同的场景和行为路径，会导致用例缺乏目标，也容易产生冗余用例内容； </li>\n<li>用例粒度确保能够清晰引导执行者完成步骤描述内容，在存在依赖的部分交代清楚依赖获取的方式，预期结果明确无歧义； </li>\n<li>在编写过程中发现用例步骤太多（超过十几步）,那就需要针对该路径做分离处理，可以分成多条用例来覆盖，避免单条用例步骤过于复杂，可能对后续的执行带来不必要的麻烦；</li>\n</ol>\n</li>\n<li><p>我该如何知道E2E用例步骤该从哪里开始又从哪里结束？ </p>\n<ul>\n<li>此行为实际上也没有固定的公式可以参考，仍旧是结合部分经验来完成：</li>\n</ul>\n<ol>\n<li>把握一个核心目的，场景用例内容必须包含我们前面分析的所有功能点；–如果没有包含在内，则问自己前面的分析是否有必要，如果觉得没必要就裁剪前面的分析； </li>\n<li>用例开始起点一般可以采取某个功能模块的入口； </li>\n<li>用例的结束就不一定会有唯一的结束点，因为从起点开始后，可能有多个分支均会走向结束，此时则可以分成多条用例来覆盖（对于前面覆盖的步骤则可以作为前置条件，以此精简其他分支的用例内容）； </li>\n<li>有些分支走下去发现是一个死循环，无法有效闭环，那此时我们至少需要覆盖以此完整的循环，保证各个状态之间的转换路径均需要覆盖（下文会采用状态机的方式做阐述）</li>\n</ol>\n</li>\n</ol>\n<p>我们先来了解一个概念：”状态机”，这个将对我们编写E2E用例有较大帮助，场景用例编写的总体思路我们将采用状态机的套路来进行，所以我们需要先了解这个概念： </p>\n<h4 id=\"状态机含义\"><a href=\"#状态机含义\" class=\"headerlink\" title=\"状态机含义\"></a>状态机含义</h4><blockquote>\n<p>状态机就是有限状态自动机的简称，是现实事物运行规则抽象而成的一个数学模型 状态机有4 个要素: 现态、条件、动作、次态。 这样的归纳，主要是出于对状态机的内在因果关系的考虑: </p>\n</blockquote>\n<ul>\n<li>“现态”和 “条件” 是因，<blockquote>\n<ul>\n<li>“动作”和 “次态” 是果。</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<ol>\n<li>现态：是指当前所处的状态。</li>\n<li>条件：又称为 “事件”，当一个条件被满足，将会触发一个动作，或者执行一次状态的迁移。</li>\n<li>动作：条件满足后执行的动作。动作执行完毕后，可以迁移到新的状态，也可以仍旧保持原状态。动作不是必需的，当条件满足后，也可以不执任何动作，直接迁移到新状态。</li>\n<li>次态：条件满足后要迁往的新状态。“次态”是相对于 “现态” 而言的，“次态”一旦被激活，就转变成新的 “现态” 了。</li>\n</ol>\n<p><strong>转换状态示意图：</strong><br>下面就是对水在不同状态之间的转换示意图 - 假如水蒸气是现态，在施加降温这个条件后，会发生凝结动作，从而变成次态的液态水；</p>\n<blockquote>\n<ul>\n<li>当前液态水是现态，在施加降温这个条件后，会发生凝固动作，从而变成次态的冰；</li>\n<li>相反在施加加温这个条件后，冰又能变成液态水，在继续加温后，又能变成水蒸气。</li>\n</ul>\n</blockquote>\n<p><img src=\"/pictures/e2e_analysis/05FJX.png\" alt=\"image-20210903095132477\"></p>\n<ul>\n<li>说人话呢这个东西就是某物体、某程序功能，会被不同的条件动作触发产生变化，从而形成一种新的状态或者结果（也可能保持不变）；</li>\n<li>一般来说程序中的这些变化的状态，肯定是有限的，所以我们也叫有限状态机，正因为是有限的我们才有分析的可能性；</li>\n<li>既然是有限的状态，那我们就可以将任何程序采用此思想，将其抽象出一个个的状态；</li>\n<li>然后提炼出触发的各种条件，通过在不同状态之间施加不同的触发条件，就能让这些状态不断变化，从而完成我们对程序的不同路径的覆盖；</li>\n<li>通过上面的示意图我们也是能很容易去理解这个点的，之所以E2E用例的编写需要去采用这种思维呢，主要就是模拟用户日常可能会触发的各种点，只要我们能触碰到他们会触发的各种操作行为，了解到他们企图达到的最终状态，那我们的验收用例就是有意义的。</li>\n</ul>\n<blockquote>\n<p>将上面水的状态变化类比到我们软件产品中来，就是这么个意思：</p>\n</blockquote>\n<ul>\n<li>拿到某个功能模块时，可以选择一个最基础的入口作为起点（现态）；<blockquote>\n<ul>\n<li>确定起点后，可以分析有哪些条件可以来施加，也就是从这个起点开始，有哪些后续的功能按钮可以操作？</li>\n<li>分别操作这些功能按钮后，会跳转到哪个模块或者页面（次态）？</li>\n<li>依照上述思路，针对这些次态继续分析可以施加的条件（可点击的功能按钮），继续往下发觉后续的状态；</li>\n<li>当分析到最后发现已经没有新的状态可以产生了，那就说明这条路径已经走到头，此时就可以结束了；</li>\n<li>如果发现不同状态之间会存在循环，那么我们可以保证完成一次循环即可（比如：固态&#x3D;》液态&#x3D;》气态&#x3D;》液态&#x3D;》固态）；</li>\n<li>如果发现在某一个次态时，会产生多分支时，那么就需要单独分析每个分支，直到每个分支都走到头才结束；</li>\n<li>针对不同的分支我们就可以梳理出不同的场景用例来。</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"从一线人员获取灵感\"><a href=\"#从一线人员获取灵感\" class=\"headerlink\" title=\"从一线人员获取灵感\"></a>从一线人员获取灵感</h4><blockquote>\n<p>大多数同学可能觉得到这里任务就该结束了，实际上上面的所有行为都是我们自己通过功能分析构造的一些场景，仍旧会存在遗漏点，每个人的思维都是存在局限性的，如果条件允许的话，我们可以进一步与一线人员甚至直接用户进行交流，来获取其真实日常是如何开展的，从而获取到最为真实客观的使用场景信息。</p>\n</blockquote>\n<ul>\n<li>获取一线用户的真实场景信息并不是所有项目都具备的条件，但条件具备时就一定要充分利用起来；</li>\n<li>如果没有此条件，我们也可以主动创造，可以主动申请出差客户现场，进行有效信息的获取；</li>\n<li>与一线人员、产品经理进行日常有效交流，从交谈中挖掘有效信息，都是可以帮助到我们丰富场景的；</li>\n<li>通过上述各种途径获取到的信息，则可以转化成用例，作为有效的覆盖条件。</li>\n</ul>\n<h4 id=\"过程验收-amp-抽验的遗漏补充\"><a href=\"#过程验收-amp-抽验的遗漏补充\" class=\"headerlink\" title=\"过程验收&amp;抽验的遗漏补充\"></a>过程验收&amp;抽验的遗漏补充</h4><blockquote>\n<p>怎么还没完没了了？<br>到此还没结束？<br>当然，因为前期我们的所有行为都是纸上谈兵（做的策略分析），老话说的好，纸上得来终觉浅，绝知此事要躬行，事情还得自己“弯着腰”去做啊…… </p>\n</blockquote>\n<p>在验收的整个生命周期中，我们的时间跨度是非常大的，在前期用例全部编写完成后，还有很长一段时间，此期间伴随着迭代版本的提测，内部测试的测试，验收的抽验，等等过程，</p>\n<p>此阶段我们是有机会接触真实的产品形态，也能够去实践之前的策略性动作，在这个过程中，是能够发现一些遗漏点，或者过程性不完善的地方。</p>\n<ul>\n<li>在过程验收或者抽验阶段，发现的一些遗漏点，需要及时的补充到场景用例中；</li>\n<li>发现的一些不合理的地方，需要及时优化调整用例的执行步骤等内容；</li>\n<li>对于内部测试发现的BUG分布较多，已经识别风险较大的模块，则需要针对性的增加用例密度，提高用例覆盖粒度，做出针对性预防；–BUG都是集中产生的，容易长虫子的地方，他就会成批成批的长，不用去怀疑这个规律；</li>\n<li>过程中发现内部测试狙击不足的模块或者方向，也需要我们针对性的提高预防措施，增加用例密度，明知道前面的兄弟没守住，已经有鬼子进村了，还不做好彻底的预防，那是我们的失职；</li>\n<li>上述的策略都是在实战中逐步调整完善，进一步巩固我们的武器装备，布好天罗地网，从而在验收阶段真正做到胸有成竹。</li>\n</ul>\n<p>此时思维导图框架大概是这么个样子：</p>\n<p><img src=\"/pictures/e2e_analysis/06FJX.png\"></p>\n<h4 id=\"转换成用例\"><a href=\"#转换成用例\" class=\"headerlink\" title=\"转换成用例\"></a>转换成用例</h4><p>实际上在上面过程中就有可能已经完成了用例的转换，所以此阶段并不一定是在最后，我们对于用例的补充和思维导图的维护应该是同步的，避免用例有更新，思维导图有缺失，真正在后续去评审和讲解时都是拿思维导图来展示，用例很难逐条去评审，拿用例评审是无法有效知道是否有遗漏，只能评审用例的规范与否，但思维导图则可以方便点 的查看是否针对某个模块有遗漏的场景。</p>\n<p>如何编写转换成最终的用例则不在此文中做讲解，针对用例的编写可以单独进行分享，此文默认大家都能够有效的转换编写用例。</p>\n<h2 id=\"质检\"><a href=\"#质检\" class=\"headerlink\" title=\"质检\"></a>质检</h2><blockquote>\n<p>在实际生产过程中，都有一个质检环节，我们的工作也不例外，此环节与各位的职位级别、能力无关，再牛皮的人都有出错的时候，那么质检的这个动作我们一定要实施。</p>\n</blockquote>\n<ul>\n<li>实际上就是我们的评审过程，当局者迷，有时候就会迷在自己的思维中，而其他评审角色就能够从一些意想不到的角度提出遗漏和不足的地方，以便帮助我们进一步完善分析和用例内容；</li>\n<li>永远不要迷恋自己的想法，不要相信自己的分析是完善的，在分析过程中，永远多敲一个回车，预留待填写的空间……</li>\n<li>有效的评审能够避免后期的不足，重视此过程是对我们对项目的负责。</li>\n</ul>\n<h2 id=\"收工\"><a href=\"#收工\" class=\"headerlink\" title=\"收工\"></a>收工</h2><p>此次故事就讲到这里~<br>如果你已经睡着了，我会感到很抱歉，没有吸引到你~<br>如果你感觉有收获，我会感到很欣慰，我真的可以帮助到你~<br>如果你有好的建议提交给我，我会感到很高兴，你可以帮助我进一步成长~<br>如果你有更好的思维与我分享，我会感到兴奋，我想与你把酒言欢~</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>对于验收测试工程师来说，编写验收测试分析和测试用例是一项必须且重要的工作内容，但大多数同学在做验收测试分析及用例编写时，仍旧陷入到传统的分析及用例编写思维中，与内部测试团队所输出的内容并无差异，虽然大家在讲述验收工程师职责或者测试分析思路时，都知道说要编写用户场景用例，可实战过程中仍旧是任性的走老套路，犟的很！ </p>\n<p>究其原因，还是没有摆脱传统的测试思维，更多的关注点仍旧在文档中罗列的基本需求点，除了字面上描述出来的东西，很难将自己放在用户角色上去想象体验手头的产品，在验收时，又本着任务的压力，只能优先去完成流程上的一些基本任务：验收测试分析、验收测试用例编写、各种会议评审、输出各类报告…… </p>\n<p>上述每一个具体事项实际都只是我们工作实施的一个产物体现，并不是最终的目的，也就是说不仅仅为了去完成一篇分析或者用例的编写，就匆匆忙忙开干，在没有深入理解需求，了解用户痛点，及项目意义的情况下，所有的忙碌都不会产生太高价值，看起来长篇大论的文字表格一堆，但其中蕴含的思维和测试覆盖点却很难达到我们的预期，往往后期需要花费大量的精力去查漏补缺，进行各种优化，算算总投入成本那是极不划算的，而且还觉得自己特忙。</p>\n<p>对于团队中每一个同学来讲，每个人都有自己的特长和优势，但也会存在部分同学的确存在以上描述的若干问题，所以也就有了此篇文档，作为个人理解的内容，想要起到抛砖引玉的效果，希望在某些方面能够对大家有所帮助，也许能够通过思维的碰撞产生更加适合当前团队的执行方法和流程。</p>\n<p>本文会以通俗易懂偏口语化的风格进行阐述，尽量结合当前项目的实际内容来阐述具体思想，文中所有举例只是为了阐述某种思维方式，请读者不要钻牛角尖，而应该深入扩展理解思维背后的原理，内化成自己的经验和做事方法。</p>\n<h2 id=\"导读\"><a href=\"#导读\" class=\"headerlink\" title=\"导读\"></a>导读</h2><p>本文总体文字比较多，且讲述的内容非常基础，可能都是在各位平常工作中已经在实施的部分，只是做了一个系统的呈现，如果看的过程确有共鸣，则可以快速跳过熟知内容，直接查看“精加工生产E2E验收用例”部分内容； </p>\n<p>如果前文中部分内容平常未涉及到，则可以细致去想一下描述中的各问题及思维过程，最好是能转化成自己独特的思维逻辑；</p>\n<p>如果文章通篇读起来觉得索然无味，也可以私下进行一些深入的交流（排除语文功底因素），这是我极其希望遇到的场景。</p>\n<h2 id=\"我可以怎么做\"><a href=\"#我可以怎么做\" class=\"headerlink\" title=\"我可以怎么做\"></a>我可以怎么做</h2><ul>\n<li>如果你是一位新同学，或者是从传统测试转做验收测试的，下面的几点内容或许对你有所帮助；</li>\n<li>当然如果你是老司机，那也可以看看是否有其他更好的点子可以帮到大家。</li>\n</ul>\n<ol>\n<li><p>作为验收工程师，首要任务是先把自己以前的思维做一个冻结，把杯子倒空，忘掉过往的所有荣耀与成就，重新出发；**–调整心态**</p>\n</li>\n<li><p>清晰认识自己的职责和责任，做的所有事情都不仅仅只是为了完成上级下达的任务，而是为了某一个目标; <strong>–清晰自己工作的价值</strong></p>\n<blockquote>\n<p> 比如XX项目经过你的验收后，可以拍着胸脯对他人说，已经验收通过没有问题，大胆发布，让用户拿去用吧!<br>  或者是经过验收后，发现XX模块有风险，具体风险是XX，可能造成XX影响，建议提前采取XX行动，规避方案是XX，提前告知关注者项目的实际情况，即便是发布后真出现了问题，也做到了未雨绸缪。</p>\n</blockquote>\n</li>\n<li><p>接触任何一个项目时，首先是要弄清楚该项目的需求背景，直接接口人就是产品经理，从产品经理这里可以获取到项目的最原始信息，包括项目使用者，使用者的一些特点，此项目能够解决他们什么问题，核心价值具体体现在哪里，产品最差做到什么程度用户也能够接受（逐步剥离可以提炼到核心需求）？所有的这些只为弄清楚背景与用户痛点；</p>\n</li>\n<li><p>在了解项目的背景与用户痛点后，接下来的工作就需要始终将这些信息放到制高点，任何的思考行为都为这两点服务，你的模块分析是为了更好的保证用户能够流畅满意的使用，你的用例是为了能更全面的覆盖用户的操作行为，你的执行动作就是将自己当做用户来操作使用这个产品；</p>\n</li>\n<li><p>通过上述的信息输入后，就可以开展实际的验收测试分析，这里还是推荐使用思维导图的方式来开展此项工作；</p>\n</li>\n<li><p>在思维导图分析完成后，接下来就是用例的转化写作了，转化过程只需要抓住一个核心：思维导图中辛苦分析出来的验证点不要漏掉；</p>\n</li>\n<li><p>验收执行阶段工作主要是执行用例，在执行每条用例时，同样需要思考用例编写的本意是要验证什么点，切记无脑执行，往往能够发现用例可优化的地方，或者可扩展验证场景。</p>\n</li>\n</ol>\n<h2 id=\"正题\"><a href=\"#正题\" class=\"headerlink\" title=\"正题\"></a>正题</h2><p>前面的内容主要是一些铺垫，也就是大家说的鸡汤软文，下文主要从上面列出的几个步骤来描述一下个人理解的验收测试用例的生产过程，用例输出绝对不是直接上来就干的事儿，拿到项目一上来就直接干用例的行为那都是莽夫行为，测试最高价值体现就是你的思维，而对思维的加工最终输出的产物才是思维导图、测试用例这些实际的文档，下面会针对每个步骤进行详细的阐述，希望对大家有所帮助。</p>\n<h3 id=\"下文整体思路会以下图思路开展\"><a href=\"#下文整体思路会以下图思路开展\" class=\"headerlink\" title=\"下文整体思路会以下图思路开展\"></a>下文整体思路会以下图思路开展</h3><p><img src=\"/pictures/e2e_analysis/01FJX.png\"></p>\n<h2 id=\"用例生产过程\"><a href=\"#用例生产过程\" class=\"headerlink\" title=\"用例生产过程\"></a>用例生产过程</h2><h3 id=\"所需要的原料\"><a href=\"#所需要的原料\" class=\"headerlink\" title=\"所需要的原料\"></a>所需要的原料</h3><ul>\n<li>此部分内容，主要是列出我们在做一个项目的时候，最好弄清楚我们所需要的输入；</li>\n<li>包括我们需要具备的一些能力或者了解的知识点；</li>\n<li>当然不是所有列出的东西都一定需要具备或者精通，当前不具备的就可以针对性的去提升学习，以便能在工作中能够轻松应对。</li>\n</ul>\n<p><strong>实物原料：</strong>- 项目需求文档；–必选（哪怕是一句话需求）</p>\n<ul>\n<li><p>需求原型；–可选</p>\n</li>\n<li><p>研发概要设计文档；–可选</p>\n</li>\n<li><p>研发详细设计文档；–可选</p>\n</li>\n<li><p>项目demo；–可选</p>\n</li>\n<li><p>……</p>\n</li>\n</ul>\n<p><strong>思想原料：</strong>- 熟悉软件研发流程；</p>\n<blockquote>\n<p>熟悉软件测试基本理论知识:</p>\n</blockquote>\n<ol>\n<li>黑盒测试基本方法（等价类、边界值、正交、状态迁移、判定表、错误猜测、……）； </li>\n<li>接口测试、安全测试、性能测试、网络基本知识的了解； </li>\n<li>测试思维导图分析方法； </li>\n<li>用例编写的基本原则，测试用例的八大要素；</li>\n</ol>\n<h3 id=\"加工流程\"><a href=\"#加工流程\" class=\"headerlink\" title=\"加工流程\"></a>加工流程</h3><blockquote>\n<p>通过对上述或者更多的原料进行有序加工，我们的思维产物最终会以具体的思维导图、测试用例体现出来。</p>\n</blockquote>\n<h4 id=\"Step1-深入理解项目背景、用户痛点\"><a href=\"#Step1-深入理解项目背景、用户痛点\" class=\"headerlink\" title=\"Step1 深入理解项目背景、用户痛点\"></a>Step1 深入理解项目背景、用户痛点</h4><p><strong>实操步骤</strong></p>\n<p>首先我们在接触到一个新项目时,首要的就是拿到该项目的需求文档,如果没有需求文档就直接找产品经理或者一线人员,甚至是直接用户进行沟通,主要目的就是弄清楚如下几个问题: </p>\n<ol>\n<li>这个项目产生的原因是什么?–为什么要做这个项目,有钱任性?做着玩? 主要是为了解决用户什么问题,用户在当前碰到了什么难题需要我们来解围?</li>\n<li>不做这个项目行不行?–市面上有没有现成的解决方案?为什么要我们做这个?我们这个项目的优势在哪里?我们能为用户提供什么核心价值?</li>\n<li>我们的核心用户都是哪些人?都是一些什么样的人?这些人有些什么习惯或者特点?在产品使用上会不会有些特殊癖好或者要求?</li>\n<li>我们是怎么解决用户遇到的这个难题的,当前的需求内容是否能够达到解决用户痛点的目的?</li>\n</ol>\n<p>经过上述几个问题的自问或者问他人,你一定会获得一些有用的信息,经过对这些信息的消化和理解,你基本上就具备了与产品经理或者用户等位思考的状态,在此状态下,再结合产品经理编写的现成的背景和痛点问题描述,基本上就真正理解了项目的背景了；</p>\n<p>如何确定自己已经理解了当前项目背景呢？</p>\n<p><strong>Check点</strong><br>把这个项目介绍给其他人，能够流畅的按照上述几个问题维度来讲解清楚的话，就说明已经达到要求了。</p>\n<h4 id=\"Step2-梳理、挖掘基本需求点\"><a href=\"#Step2-梳理、挖掘基本需求点\" class=\"headerlink\" title=\"Step2 梳理、挖掘基本需求点\"></a>Step2 梳理、挖掘基本需求点</h4><blockquote>\n<p>这一部分内容大家最熟悉，也是一般人上来就开搞的一步，每个人都能整出一篇“丰满”的思维导图出来，全部展开的时候看起来内容丰富，但很多同学的思维导图内容细看后发现缺乏逻辑，有时候会很全，有时候会遗漏一些内容，实际上就是缺乏一些系统的思维。</p>\n</blockquote>\n<p>实际上我们在做项目或者模块分析时还是有套路可以耍的： 1</p>\n<p>首先就是把我们软件质量模型这张牌掏出来，如果能熟练的掌握质量模型的6大特性（功能性、可靠性、易用性、效率、可维护性、可移植性），27个子特性，那你做测试分析可能遗漏的几率是很小的。<br>实际上很少人能全部掌握，但你需要做到的是6大特性一定要掌握，每个特性大概对应的是哪些维度要非常清楚，质量模型中的维度需要逐项去做分析覆盖，功能性这块基本是个测试都能做到，但如何把功能性做全做深就又是一个挑战；</p>\n<p><strong>功能特性分析：</strong></p>\n<ol>\n<li>功能特性分析基本占据了80%以上的内容，也是我们需要花费80%精力去做好的部分，看起来最简单的部分，也是最难的部分;</li>\n<li>你需要深入理解项目背景和用户痛点，需要了解需求文档中提及的每一个模块功能，以及模块与模块之间的联系；</li>\n<li>需要在没有原型的基础上在脑海里自己勾勒出产品界面的雏形，想象各个功能模块之间的跳转逻辑以及依赖关系；</li>\n<li>通过对SE&#x2F;开发编写的概要设计、详细设计的仔细研读，了解每个模块的具体后台实现，来挖掘隐藏的测试点和逻辑联系；–这一步至少50%的测试人员做不到，很多人无法理解开发的后台实现逻辑，也就不可能知道该实现可能存在的问题，自然就不可能挖掘出这种隐藏的测试点，往往代码的缺陷就来自于这里，因为开发编码实际上就是把他的思维以代码的方式去呈现出来，那开发自己的想法都可能有问题，我们做测试的不去识别他的想法缺陷，再到后面去弥补，你肯定已经想到这个地方的成本有多高。所以能够落地去做的事情就是仔细研读开发编写的详细设计文档，技术这块不懂的就去查资料去问开发，直到理解他的实现逻辑是什么，在这个过程中你就会找到很多隐藏的测试点，从而能够丰富你的功能分析点。</li>\n<li>对于解决方案类产品（B&#x2F;S架构），B&#x2F;S类架构项目都是分前后台的，往往测试分析的时候大家只会去关注前台的显示，文案，按钮这些基本肉眼可见的东西，对于后台数据库的内容往往“视而不见”，在理解开发详细设计时，就要同时清楚他们的数据表设计内容，了解表与表之间的关联关系，字段的具体含义，前端数据获取的地方，以此就非常容易识别前台代码是否写死，是否是按照约定的逻辑来处理加工数据的，也就能提早发现一些设计、实现上不合理的地方。</li>\n</ol>\n<p><strong>思维导图的输出</strong></p>\n<blockquote>\n<p> 通过上面的思路分析后，我们就能输出80%的思维导图分析内容，也就抓住了这个项目的80%的测试点。</p>\n</blockquote>\n<p>此时你完成的思维导图大概应该是这个样子：<br><img src=\"/pictures/e2e_analysis/022FJX.png\"></p>\n<p> 完成80%内容后，剩下的把其他五大特性的内容进行完善即可，具体每个特性所体现的内容请大家自行学习，并转化成项目中可实施的测试点 此部分完成后思维导图大致会是下面的结构，能够确保质量模型维度的全覆盖，那测试点的梳理基本就完成95%了。</p>\n<p><img src=\"/pictures/e2e_analysis/03FJX.png\"></p>\n<p>完成上述测试分析后，实际上我们还有一个很重要的维度容易忽略，那就是异常场景，当然很多同学也容易特立独行，在上面的分析过程中就投入大量精力去搞异常场景，显得自己考虑问题的角度比较深入或者独特。</p>\n<p>想法是好的，但这个不是我们主要发力的点，你基本业务流都没整明白，直接到这种容易“钻牛角尖”的胡同里，很容易走火入魔。 </p>\n<p>建议上来说，在完成上面的所有分析后，再把自己脱离出来，去思考一些异常场景的补充，此时你的角色就变换成一个“破坏”者，以你能想到的，在日常使用过程中可能发生的一些“可怕”场景都用上来，如果符合当前项目的操作入口，那么就是你异常场景的突破口。</p>\n<p><strong>打比方（也不知道比方会不会怪我老打他）</strong>： </p>\n<ol>\n<li>使用过程中，直接关闭程序（数据都没保存呢……）–程序是否能再次正常启动，数据是否可以恢复到之前打开的状态；</li>\n<li>直接暴力切断电源，系统重启后，程序是否正常运行，数据是否恢复之前状态；</li>\n<li>直接关闭浏览器，提交的数据是否能下次恢复，程序是否能拦截并给出提示还有数据未保存；</li>\n<li>服务器直接断电，被手动关闭，重启服务器后，服务是否能正常拉起，恢复后台服务能力，数据是否均正常；</li>\n<li>对于存在输入的地方，我们可做的骚操作很多，这里边界值的上点和外点、非等价类的输入就是我们做异常测试的发力点，会不会因为我们的一些上点、内点、非等价类输入，或者特殊字符输入，或者SQL注入的内容输入造成程序崩溃，或者安全漏洞等等；</li>\n<li>对于图谋不轨的人，我们还需要考虑安全问题，是否存在明文传输（密码全程是否加密），通过浏览器F12调试模式查看接口的传参过程，通过后台数据库查看具体的密码存储形式，通过后台日志查看敏感信息是否脱敏处理……</li>\n<li>数据传输过程中，直接断开网络，程序下次是否能正常重新处理数据；</li>\n<li>上传非法格式，非法超大文件前台是否能正常校验拦截，通过接口直接上传，后台是否能正常拦截；</li>\n<li>程序提供的配置，逻辑上是否有做依赖控制，是否存在前后冲突的配置可以设置，导致部分配置不生效；</li>\n<li>数据的多次重复提交是否会存在异常；</li>\n<li>数据的新建&#x3D;》删除&#x3D;》再建，是否能正常处理；</li>\n<li>数据的提交更改后，下次进入展示，回显是否正确；</li>\n<li>存在数据记忆的场景，是否能够正常记忆；</li>\n<li>存在回退的场景，数据是否能够正常回滚无残留；</li>\n<li>存在数据迁移的场景，数据是否能够正常迁移，且兼容新版本的展示结构；</li>\n<li>存在数据结构升级的场景，是否能向下兼容老旧数据，或者正常转换旧数据结构，从而正常展示在前端；</li>\n<li>存在可以向后台提交数据的按钮时，是否可以快速频繁的点击提交，可能导致数据异常；</li>\n<li>存在单选、复选、全选、全不选的场景时，频繁的选择状态切换，选择逻辑是否处理正确，选择数据对象是否准确；</li>\n<li>存在批量新建、上传、删除等场景时，对于单条数据的批量操作，多条数据的批量操作，是否能正确处理；</li>\n<li>存在大数据量场景时，需要重点关注接口数据的处理准确性，在实现规格内，提交的大数据请求处理，是否能准确且高效的完成。</li>\n</ol>\n<p>此时你的思维导图大概是这个样子：</p>\n<p><img src=\"/pictures/e2e_analysis/04FJX.png\"></p>\n<h4 id=\"Step3-精加工生产E2E验收用例\"><a href=\"#Step3-精加工生产E2E验收用例\" class=\"headerlink\" title=\"Step3 精加工生产E2E验收用例\"></a>Step3 精加工生产E2E验收用例</h4><blockquote>\n<ul>\n<li>通过上面的生产加工后，想必大家觉得分析工作已经完成了，可以说作为内部测试在完成上面工作后，测试分析工作的确可以告一段落，我也可以打包票说只要你能按照上面提到的维度，每个维度都做出了深入的思考与分析，那你的测试分析是比较完善的；</li>\n<li>但作为验收工程师，最核心的部分还没开始，那就是E2E场景，也就是说，到现在为止，验收工程师的核心工作才刚刚开始……</li>\n</ul>\n</blockquote>\n<p>实际上前面的工作都已经做的比较全了，剩下的部分只需要结合部分思维来串联一下就可以完成，此刻你就变身为一个串珠的人儿了，把你精心准备好的“珍珠”按照某种方式串起来，做成一条条“项链”，这些“项链”就是我们验收的E2E场景用例，其主要会涉及到如下方面内容：</p>\n<ol>\n<li><p>理解何为用户场景？</p>\n<blockquote>\n<p>用户日常使用时，使用产品的操作路径，可能进行的操作流。</p>\n</blockquote>\n</li>\n<li><p>写这些E2E场景的意义是什么？<br>尽可能全的模拟覆盖用户日常会操作的路径，提前发现可能存在的问题，确认产品是否能够满足用户日常使用，弥补在模块测试中对模块之间的关联性测试覆盖不足的问题。</p>\n</li>\n<li><p>用户场景的来源有哪些？</p>\n</li>\n</ol>\n<ul>\n<li>通过功能点分析，站在用户角度采用状态机思路编写E2E场景用例–你就是用户； </li>\n<li>通过分析一线人员提供的问题信息，获得用户使用的场景信息–真实使用者的反馈； </li>\n<li>通过一线人员提供的用户群体特征，使用产品的场景等信息，通过关联分析构建用户场景信息–对真实使用者的模拟分析，有时候用户自己都不知道自己需要的是什么，那我们就需要替用户去思考这个问题，如同乔布斯说的：在我发布苹果手机的时候，用户才知道这就是他们想要的。</li>\n</ul>\n<ol start=\"4\">\n<li><p>什么叫做端到端（E2E）场景用例？<br>不同于传统测试过程中仅针对某一个功能点进行深入验证的用例，而是尽可能将多个功能点通过某种思路（如状态机）有目的设计成一连串的操作流，形成的一种用例形式。</p>\n</li>\n<li><p>场景用例的编写粒度该如何把控？<br> 在编写这类用例时，很多同学会陷入两难境地，在测试步骤中，不知道编写粒度该控制到哪个层次，写太细了跟传统用例没区别，写太粗了又担心不具备可执行性； </p>\n<ul>\n<li>实际上这个问题很难按照某种要求去规定，主要把握几个原则：</li>\n</ul>\n<ol>\n<li>场景用例编写的前提，一定是内部测试已经有非常详尽的功能用例，覆盖每个功能点，确保了基本功能是没有问题的；–如果担心这个地方有遗漏，说明我们内部测试需要改进，并且在测试执行阶段，验收工程师也需要有能力进行适当发散，做事不能眉毛胡子一把抓，每个阶段的重点核心不同，该放的时候要放，该收的地方得收。 </li>\n<li>基于上述前提，就知道我们的场景用例不会写的太细，更多的是一种操作行为流的描述，可以做的是，在每一个操作行为后，预期结果我们尽可能的描述全面； </li>\n<li>每一条用例都需要有一个核心目的，要想清楚该用例的核心是为了验证或者保证什么功能，那么用例的步骤描述都需要围绕这个核心去开展，避免一条用例中混杂不同的场景和行为路径，会导致用例缺乏目标，也容易产生冗余用例内容； </li>\n<li>用例粒度确保能够清晰引导执行者完成步骤描述内容，在存在依赖的部分交代清楚依赖获取的方式，预期结果明确无歧义； </li>\n<li>在编写过程中发现用例步骤太多（超过十几步）,那就需要针对该路径做分离处理，可以分成多条用例来覆盖，避免单条用例步骤过于复杂，可能对后续的执行带来不必要的麻烦；</li>\n</ol>\n</li>\n<li><p>我该如何知道E2E用例步骤该从哪里开始又从哪里结束？ </p>\n<ul>\n<li>此行为实际上也没有固定的公式可以参考，仍旧是结合部分经验来完成：</li>\n</ul>\n<ol>\n<li>把握一个核心目的，场景用例内容必须包含我们前面分析的所有功能点；–如果没有包含在内，则问自己前面的分析是否有必要，如果觉得没必要就裁剪前面的分析； </li>\n<li>用例开始起点一般可以采取某个功能模块的入口； </li>\n<li>用例的结束就不一定会有唯一的结束点，因为从起点开始后，可能有多个分支均会走向结束，此时则可以分成多条用例来覆盖（对于前面覆盖的步骤则可以作为前置条件，以此精简其他分支的用例内容）； </li>\n<li>有些分支走下去发现是一个死循环，无法有效闭环，那此时我们至少需要覆盖以此完整的循环，保证各个状态之间的转换路径均需要覆盖（下文会采用状态机的方式做阐述）</li>\n</ol>\n</li>\n</ol>\n<p>我们先来了解一个概念：”状态机”，这个将对我们编写E2E用例有较大帮助，场景用例编写的总体思路我们将采用状态机的套路来进行，所以我们需要先了解这个概念： </p>\n<h4 id=\"状态机含义\"><a href=\"#状态机含义\" class=\"headerlink\" title=\"状态机含义\"></a>状态机含义</h4><blockquote>\n<p>状态机就是有限状态自动机的简称，是现实事物运行规则抽象而成的一个数学模型 状态机有4 个要素: 现态、条件、动作、次态。 这样的归纳，主要是出于对状态机的内在因果关系的考虑: </p>\n</blockquote>\n<ul>\n<li>“现态”和 “条件” 是因，<blockquote>\n<ul>\n<li>“动作”和 “次态” 是果。</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<ol>\n<li>现态：是指当前所处的状态。</li>\n<li>条件：又称为 “事件”，当一个条件被满足，将会触发一个动作，或者执行一次状态的迁移。</li>\n<li>动作：条件满足后执行的动作。动作执行完毕后，可以迁移到新的状态，也可以仍旧保持原状态。动作不是必需的，当条件满足后，也可以不执任何动作，直接迁移到新状态。</li>\n<li>次态：条件满足后要迁往的新状态。“次态”是相对于 “现态” 而言的，“次态”一旦被激活，就转变成新的 “现态” 了。</li>\n</ol>\n<p><strong>转换状态示意图：</strong><br>下面就是对水在不同状态之间的转换示意图 - 假如水蒸气是现态，在施加降温这个条件后，会发生凝结动作，从而变成次态的液态水；</p>\n<blockquote>\n<ul>\n<li>当前液态水是现态，在施加降温这个条件后，会发生凝固动作，从而变成次态的冰；</li>\n<li>相反在施加加温这个条件后，冰又能变成液态水，在继续加温后，又能变成水蒸气。</li>\n</ul>\n</blockquote>\n<p><img src=\"/pictures/e2e_analysis/05FJX.png\" alt=\"image-20210903095132477\"></p>\n<ul>\n<li>说人话呢这个东西就是某物体、某程序功能，会被不同的条件动作触发产生变化，从而形成一种新的状态或者结果（也可能保持不变）；</li>\n<li>一般来说程序中的这些变化的状态，肯定是有限的，所以我们也叫有限状态机，正因为是有限的我们才有分析的可能性；</li>\n<li>既然是有限的状态，那我们就可以将任何程序采用此思想，将其抽象出一个个的状态；</li>\n<li>然后提炼出触发的各种条件，通过在不同状态之间施加不同的触发条件，就能让这些状态不断变化，从而完成我们对程序的不同路径的覆盖；</li>\n<li>通过上面的示意图我们也是能很容易去理解这个点的，之所以E2E用例的编写需要去采用这种思维呢，主要就是模拟用户日常可能会触发的各种点，只要我们能触碰到他们会触发的各种操作行为，了解到他们企图达到的最终状态，那我们的验收用例就是有意义的。</li>\n</ul>\n<blockquote>\n<p>将上面水的状态变化类比到我们软件产品中来，就是这么个意思：</p>\n</blockquote>\n<ul>\n<li>拿到某个功能模块时，可以选择一个最基础的入口作为起点（现态）；<blockquote>\n<ul>\n<li>确定起点后，可以分析有哪些条件可以来施加，也就是从这个起点开始，有哪些后续的功能按钮可以操作？</li>\n<li>分别操作这些功能按钮后，会跳转到哪个模块或者页面（次态）？</li>\n<li>依照上述思路，针对这些次态继续分析可以施加的条件（可点击的功能按钮），继续往下发觉后续的状态；</li>\n<li>当分析到最后发现已经没有新的状态可以产生了，那就说明这条路径已经走到头，此时就可以结束了；</li>\n<li>如果发现不同状态之间会存在循环，那么我们可以保证完成一次循环即可（比如：固态&#x3D;》液态&#x3D;》气态&#x3D;》液态&#x3D;》固态）；</li>\n<li>如果发现在某一个次态时，会产生多分支时，那么就需要单独分析每个分支，直到每个分支都走到头才结束；</li>\n<li>针对不同的分支我们就可以梳理出不同的场景用例来。</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"从一线人员获取灵感\"><a href=\"#从一线人员获取灵感\" class=\"headerlink\" title=\"从一线人员获取灵感\"></a>从一线人员获取灵感</h4><blockquote>\n<p>大多数同学可能觉得到这里任务就该结束了，实际上上面的所有行为都是我们自己通过功能分析构造的一些场景，仍旧会存在遗漏点，每个人的思维都是存在局限性的，如果条件允许的话，我们可以进一步与一线人员甚至直接用户进行交流，来获取其真实日常是如何开展的，从而获取到最为真实客观的使用场景信息。</p>\n</blockquote>\n<ul>\n<li>获取一线用户的真实场景信息并不是所有项目都具备的条件，但条件具备时就一定要充分利用起来；</li>\n<li>如果没有此条件，我们也可以主动创造，可以主动申请出差客户现场，进行有效信息的获取；</li>\n<li>与一线人员、产品经理进行日常有效交流，从交谈中挖掘有效信息，都是可以帮助到我们丰富场景的；</li>\n<li>通过上述各种途径获取到的信息，则可以转化成用例，作为有效的覆盖条件。</li>\n</ul>\n<h4 id=\"过程验收-amp-抽验的遗漏补充\"><a href=\"#过程验收-amp-抽验的遗漏补充\" class=\"headerlink\" title=\"过程验收&amp;抽验的遗漏补充\"></a>过程验收&amp;抽验的遗漏补充</h4><blockquote>\n<p>怎么还没完没了了？<br>到此还没结束？<br>当然，因为前期我们的所有行为都是纸上谈兵（做的策略分析），老话说的好，纸上得来终觉浅，绝知此事要躬行，事情还得自己“弯着腰”去做啊…… </p>\n</blockquote>\n<p>在验收的整个生命周期中，我们的时间跨度是非常大的，在前期用例全部编写完成后，还有很长一段时间，此期间伴随着迭代版本的提测，内部测试的测试，验收的抽验，等等过程，</p>\n<p>此阶段我们是有机会接触真实的产品形态，也能够去实践之前的策略性动作，在这个过程中，是能够发现一些遗漏点，或者过程性不完善的地方。</p>\n<ul>\n<li>在过程验收或者抽验阶段，发现的一些遗漏点，需要及时的补充到场景用例中；</li>\n<li>发现的一些不合理的地方，需要及时优化调整用例的执行步骤等内容；</li>\n<li>对于内部测试发现的BUG分布较多，已经识别风险较大的模块，则需要针对性的增加用例密度，提高用例覆盖粒度，做出针对性预防；–BUG都是集中产生的，容易长虫子的地方，他就会成批成批的长，不用去怀疑这个规律；</li>\n<li>过程中发现内部测试狙击不足的模块或者方向，也需要我们针对性的提高预防措施，增加用例密度，明知道前面的兄弟没守住，已经有鬼子进村了，还不做好彻底的预防，那是我们的失职；</li>\n<li>上述的策略都是在实战中逐步调整完善，进一步巩固我们的武器装备，布好天罗地网，从而在验收阶段真正做到胸有成竹。</li>\n</ul>\n<p>此时思维导图框架大概是这么个样子：</p>\n<p><img src=\"/pictures/e2e_analysis/06FJX.png\"></p>\n<h4 id=\"转换成用例\"><a href=\"#转换成用例\" class=\"headerlink\" title=\"转换成用例\"></a>转换成用例</h4><p>实际上在上面过程中就有可能已经完成了用例的转换，所以此阶段并不一定是在最后，我们对于用例的补充和思维导图的维护应该是同步的，避免用例有更新，思维导图有缺失，真正在后续去评审和讲解时都是拿思维导图来展示，用例很难逐条去评审，拿用例评审是无法有效知道是否有遗漏，只能评审用例的规范与否，但思维导图则可以方便点 的查看是否针对某个模块有遗漏的场景。</p>\n<p>如何编写转换成最终的用例则不在此文中做讲解，针对用例的编写可以单独进行分享，此文默认大家都能够有效的转换编写用例。</p>\n<h2 id=\"质检\"><a href=\"#质检\" class=\"headerlink\" title=\"质检\"></a>质检</h2><blockquote>\n<p>在实际生产过程中，都有一个质检环节，我们的工作也不例外，此环节与各位的职位级别、能力无关，再牛皮的人都有出错的时候，那么质检的这个动作我们一定要实施。</p>\n</blockquote>\n<ul>\n<li>实际上就是我们的评审过程，当局者迷，有时候就会迷在自己的思维中，而其他评审角色就能够从一些意想不到的角度提出遗漏和不足的地方，以便帮助我们进一步完善分析和用例内容；</li>\n<li>永远不要迷恋自己的想法，不要相信自己的分析是完善的，在分析过程中，永远多敲一个回车，预留待填写的空间……</li>\n<li>有效的评审能够避免后期的不足，重视此过程是对我们对项目的负责。</li>\n</ul>\n<h2 id=\"收工\"><a href=\"#收工\" class=\"headerlink\" title=\"收工\"></a>收工</h2><p>此次故事就讲到这里~<br>如果你已经睡着了，我会感到很抱歉，没有吸引到你~<br>如果你感觉有收获，我会感到很欣慰，我真的可以帮助到你~<br>如果你有好的建议提交给我，我会感到很高兴，你可以帮助我进一步成长~<br>如果你有更好的思维与我分享，我会感到兴奋，我想与你把酒言欢~</p>\n"},{"title":"hexo配置algolia搜索服务","date":"2023-01-03T03:30:34.000Z","_content":"## 遇到的问题\n\n我在配置搜索服务时，遇到的问题是在执行``` hexo algolia```命令时报如下信息，好像我没有安装插件一样，但实际我是安装了的，最后折腾才发现，我安装该搜索服务时，是没有在我博客根目录执行安装命令，而是随便在其他目录下安装执行的，也不知道为何有这个问题，随后在根目录下再次安装就好了。\n\n```bash\nbabyfengfjx@babyfengfjx:~/Documents/typora_documents/github/workdata/myblog$ hexo algolia\nINFO  Validating config\nUsage: hexo <command>\n\nCommands:\n  clean     Remove generated files and cache.\n  config    Get or set configurations.\n  deploy    Deploy your website.\n  generate  Generate static files.\n  help      Get help on a command.\n  init      Create a new Hexo folder.\n  list      List the information of the site\n  migrate   Migrate your site from other system to Hexo.\n  new       Create a new post.\n  publish   Moves a draft post from _drafts to _posts folder.\n  render    Render files with renderer plugins.\n  server    Start the server.\n  version   Display version information.\n\nGlobal Options:\n  --config  Specify config file instead of using _config.yml\n  --cwd     Specify the CWD\n  --debug   Display all verbose messages in the terminal\n  --draft   Display draft posts\n  --safe    Disable all plugins and scripts\n  --silent  Hide output on console\n\nFor more help, you can use 'hexo help [command]' for the detailed information\nor you can check the docs: http://hexo.io/docs/\n```\n\n# 配置步骤\n\n## Step1:注册algolia\n\n[访问此处进行注册登录](https://www.algolia.com/)\n\n## Step2:创建索引数据库\n\n> 按照如下图进行索引实例创建即可，这里的索引名称后面会用到，自行创建记住即可。\n\n![image-20230103113149791](pictures/hexo_config_algolia/image-20230103113149791.png)\n\n## Step3：查看API信息\n\n> 可能很多人不知道具体在哪里看，当前可以查看的路径可以看如下截图。\n\n![image-20230103113426783](pictures/hexo_config_algolia/image-20230103113426783.png)\n\n![image-20230103113505830](pictures/hexo_config_algolia/image-20230103113505830.png)\n\n![image-20230103113638126](pictures/hexo_config_algolia/image-20230103113638126.png)\n\n## Step4:安装插件配置本地文件\n\n- 先进入自己博客项目的根目录，然后安装插件：``` npm install --save hexo-algolia```;\n\n- 然后在hexo根目录下的主配置文件```_config.yml```添加如下内容（具体值按照自己实际注册的内容填写即可）:\n\n  ```bash\n  algolia:\n    applicationID: 'RPHOC0xxxx'\n    apiKey: '723903e5de5899f6cc4ad96fc509xxxx'\n    adminApiKey: 'fe4c456ceeaea4f264f0d242b5fexxxx'\n    indexName: 'hexo_blog'\n    chunkSize: 5000\n  ```\n\n- 再在你的主题配置文件中开启相关功能配置：\n\n  ```bash\n  algolia_search:\n    enable: true # or false\n    hits:\n      per_page: 10 # the number of search results per page\n    labels:\n      input_placeholder: Search for Posts\n      hits_empty: \"We didn't find any results for the search: ${query}\" # if there are no result\n      hits_stats: \"${hits} results found in ${time} ms\"\n  ```\n\n## Step5：更新数据到algolia服务器\n\n在 hexo 站点根目录下执行`hexo algolia` 来搜集数据更新到我们刚创建的 Index 中\n\n此时执行上述命令一般会报如下错误：(这里就是上面说的我们还有一个本地环境变量没配置)\n\n```bash\nbabyfengfjx@babyfengfjx:~/Documents/typora_documents/github/workdata/myblog$ hexo algolia\nINFO  Validating config\nERROR [hexo-algolia] Please set an `HEXO_ALGOLIA_INDEXING_KEY` environment variable to enable content indexing.\nERROR >> Read https://npmjs.com/hexo-algolia#api-key for more informations.\n```\n\n直接执行一下如下命令：```export HEXO_ALGOLIA_INDEXING_KEY=fe4c456ceeaea4f264f0d242b5fexxxx``` 其中这个key就是Admin api key，添加完环境变量后，再次执行上述命令即可。\n\n## Step6：重新部署即可\n\n```bash\nhexo clean\nhexo g\nhexo d\n```\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/hexo_config_algolia.md","raw":"---\ntitle: hexo配置algolia搜索服务\ncategories: \n- hexo\ntags:\n- hexo\ndate: 2023-01-03 11:30:34\n---\n## 遇到的问题\n\n我在配置搜索服务时，遇到的问题是在执行``` hexo algolia```命令时报如下信息，好像我没有安装插件一样，但实际我是安装了的，最后折腾才发现，我安装该搜索服务时，是没有在我博客根目录执行安装命令，而是随便在其他目录下安装执行的，也不知道为何有这个问题，随后在根目录下再次安装就好了。\n\n```bash\nbabyfengfjx@babyfengfjx:~/Documents/typora_documents/github/workdata/myblog$ hexo algolia\nINFO  Validating config\nUsage: hexo <command>\n\nCommands:\n  clean     Remove generated files and cache.\n  config    Get or set configurations.\n  deploy    Deploy your website.\n  generate  Generate static files.\n  help      Get help on a command.\n  init      Create a new Hexo folder.\n  list      List the information of the site\n  migrate   Migrate your site from other system to Hexo.\n  new       Create a new post.\n  publish   Moves a draft post from _drafts to _posts folder.\n  render    Render files with renderer plugins.\n  server    Start the server.\n  version   Display version information.\n\nGlobal Options:\n  --config  Specify config file instead of using _config.yml\n  --cwd     Specify the CWD\n  --debug   Display all verbose messages in the terminal\n  --draft   Display draft posts\n  --safe    Disable all plugins and scripts\n  --silent  Hide output on console\n\nFor more help, you can use 'hexo help [command]' for the detailed information\nor you can check the docs: http://hexo.io/docs/\n```\n\n# 配置步骤\n\n## Step1:注册algolia\n\n[访问此处进行注册登录](https://www.algolia.com/)\n\n## Step2:创建索引数据库\n\n> 按照如下图进行索引实例创建即可，这里的索引名称后面会用到，自行创建记住即可。\n\n![image-20230103113149791](pictures/hexo_config_algolia/image-20230103113149791.png)\n\n## Step3：查看API信息\n\n> 可能很多人不知道具体在哪里看，当前可以查看的路径可以看如下截图。\n\n![image-20230103113426783](pictures/hexo_config_algolia/image-20230103113426783.png)\n\n![image-20230103113505830](pictures/hexo_config_algolia/image-20230103113505830.png)\n\n![image-20230103113638126](pictures/hexo_config_algolia/image-20230103113638126.png)\n\n## Step4:安装插件配置本地文件\n\n- 先进入自己博客项目的根目录，然后安装插件：``` npm install --save hexo-algolia```;\n\n- 然后在hexo根目录下的主配置文件```_config.yml```添加如下内容（具体值按照自己实际注册的内容填写即可）:\n\n  ```bash\n  algolia:\n    applicationID: 'RPHOC0xxxx'\n    apiKey: '723903e5de5899f6cc4ad96fc509xxxx'\n    adminApiKey: 'fe4c456ceeaea4f264f0d242b5fexxxx'\n    indexName: 'hexo_blog'\n    chunkSize: 5000\n  ```\n\n- 再在你的主题配置文件中开启相关功能配置：\n\n  ```bash\n  algolia_search:\n    enable: true # or false\n    hits:\n      per_page: 10 # the number of search results per page\n    labels:\n      input_placeholder: Search for Posts\n      hits_empty: \"We didn't find any results for the search: ${query}\" # if there are no result\n      hits_stats: \"${hits} results found in ${time} ms\"\n  ```\n\n## Step5：更新数据到algolia服务器\n\n在 hexo 站点根目录下执行`hexo algolia` 来搜集数据更新到我们刚创建的 Index 中\n\n此时执行上述命令一般会报如下错误：(这里就是上面说的我们还有一个本地环境变量没配置)\n\n```bash\nbabyfengfjx@babyfengfjx:~/Documents/typora_documents/github/workdata/myblog$ hexo algolia\nINFO  Validating config\nERROR [hexo-algolia] Please set an `HEXO_ALGOLIA_INDEXING_KEY` environment variable to enable content indexing.\nERROR >> Read https://npmjs.com/hexo-algolia#api-key for more informations.\n```\n\n直接执行一下如下命令：```export HEXO_ALGOLIA_INDEXING_KEY=fe4c456ceeaea4f264f0d242b5fexxxx``` 其中这个key就是Admin api key，添加完环境变量后，再次执行上述命令即可。\n\n## Step6：重新部署即可\n\n```bash\nhexo clean\nhexo g\nhexo d\n```\n\n\n\n\n\n\n\n\n\n\n\n","slug":"hexo_config_algolia","published":1,"updated":"2023-01-03T03:50:01.621Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clciheile000srdxhb1viaueu","content":"<h2 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h2><p>我在配置搜索服务时，遇到的问题是在执行<code> hexo algolia</code>命令时报如下信息，好像我没有安装插件一样，但实际我是安装了的，最后折腾才发现，我安装该搜索服务时，是没有在我博客根目录执行安装命令，而是随便在其他目录下安装执行的，也不知道为何有这个问题，随后在根目录下再次安装就好了。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">babyfengfjx@babyfengfjx:~/Documents/typora_documents/github/workdata/myblog$ hexo algolia</span><br><span class=\"line\">INFO  Validating config</span><br><span class=\"line\">Usage: hexo &lt;<span class=\"built_in\">command</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">Commands:</span><br><span class=\"line\">  clean     Remove generated files and cache.</span><br><span class=\"line\">  config    Get or <span class=\"built_in\">set</span> configurations.</span><br><span class=\"line\">  deploy    Deploy your website.</span><br><span class=\"line\">  generate  Generate static files.</span><br><span class=\"line\">  <span class=\"built_in\">help</span>      Get <span class=\"built_in\">help</span> on a <span class=\"built_in\">command</span>.</span><br><span class=\"line\">  init      Create a new Hexo folder.</span><br><span class=\"line\">  list      List the information of the site</span><br><span class=\"line\">  migrate   Migrate your site from other system to Hexo.</span><br><span class=\"line\">  new       Create a new post.</span><br><span class=\"line\">  publish   Moves a draft post from _drafts to _posts folder.</span><br><span class=\"line\">  render    Render files with renderer plugins.</span><br><span class=\"line\">  server    Start the server.</span><br><span class=\"line\">  version   Display version information.</span><br><span class=\"line\"></span><br><span class=\"line\">Global Options:</span><br><span class=\"line\">  --config  Specify config file instead of using _config.yml</span><br><span class=\"line\">  --cwd     Specify the CWD</span><br><span class=\"line\">  --debug   Display all verbose messages <span class=\"keyword\">in</span> the terminal</span><br><span class=\"line\">  --draft   Display draft posts</span><br><span class=\"line\">  --safe    Disable all plugins and scripts</span><br><span class=\"line\">  --silent  Hide output on console</span><br><span class=\"line\"></span><br><span class=\"line\">For more <span class=\"built_in\">help</span>, you can use <span class=\"string\">&#x27;hexo help [command]&#x27;</span> <span class=\"keyword\">for</span> the detailed information</span><br><span class=\"line\">or you can check the docs: http://hexo.io/docs/</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"配置步骤\"><a href=\"#配置步骤\" class=\"headerlink\" title=\"配置步骤\"></a>配置步骤</h1><h2 id=\"Step1-注册algolia\"><a href=\"#Step1-注册algolia\" class=\"headerlink\" title=\"Step1:注册algolia\"></a>Step1:注册algolia</h2><p><a href=\"https://www.algolia.com/\">访问此处进行注册登录</a></p>\n<h2 id=\"Step2-创建索引数据库\"><a href=\"#Step2-创建索引数据库\" class=\"headerlink\" title=\"Step2:创建索引数据库\"></a>Step2:创建索引数据库</h2><blockquote>\n<p>按照如下图进行索引实例创建即可，这里的索引名称后面会用到，自行创建记住即可。</p>\n</blockquote>\n<p><img src=\"/pictures/hexo_config_algolia/image-20230103113149791.png\" alt=\"image-20230103113149791\"></p>\n<h2 id=\"Step3：查看API信息\"><a href=\"#Step3：查看API信息\" class=\"headerlink\" title=\"Step3：查看API信息\"></a>Step3：查看API信息</h2><blockquote>\n<p>可能很多人不知道具体在哪里看，当前可以查看的路径可以看如下截图。</p>\n</blockquote>\n<p><img src=\"/pictures/hexo_config_algolia/image-20230103113426783.png\" alt=\"image-20230103113426783\"></p>\n<p><img src=\"/pictures/hexo_config_algolia/image-20230103113505830.png\" alt=\"image-20230103113505830\"></p>\n<p><img src=\"/pictures/hexo_config_algolia/image-20230103113638126.png\" alt=\"image-20230103113638126\"></p>\n<h2 id=\"Step4-安装插件配置本地文件\"><a href=\"#Step4-安装插件配置本地文件\" class=\"headerlink\" title=\"Step4:安装插件配置本地文件\"></a>Step4:安装插件配置本地文件</h2><ul>\n<li><p>先进入自己博客项目的根目录，然后安装插件：<code> npm install --save hexo-algolia</code>;</p>\n</li>\n<li><p>然后在hexo根目录下的主配置文件<code>_config.yml</code>添加如下内容（具体值按照自己实际注册的内容填写即可）:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">algolia:</span><br><span class=\"line\">  applicationID: <span class=\"string\">&#x27;RPHOC0xxxx&#x27;</span></span><br><span class=\"line\">  apiKey: <span class=\"string\">&#x27;723903e5de5899f6cc4ad96fc509xxxx&#x27;</span></span><br><span class=\"line\">  adminApiKey: <span class=\"string\">&#x27;fe4c456ceeaea4f264f0d242b5fexxxx&#x27;</span></span><br><span class=\"line\">  indexName: <span class=\"string\">&#x27;hexo_blog&#x27;</span></span><br><span class=\"line\">  chunkSize: 5000</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>再在你的主题配置文件中开启相关功能配置：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">algolia_search:</span><br><span class=\"line\">  <span class=\"built_in\">enable</span>: <span class=\"literal\">true</span> <span class=\"comment\"># or false</span></span><br><span class=\"line\">  hits:</span><br><span class=\"line\">    per_page: 10 <span class=\"comment\"># the number of search results per page</span></span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    input_placeholder: Search <span class=\"keyword\">for</span> Posts</span><br><span class=\"line\">    hits_empty: <span class=\"string\">&quot;We didn&#x27;t find any results for the search: <span class=\"variable\">$&#123;query&#125;</span>&quot;</span> <span class=\"comment\"># if there are no result</span></span><br><span class=\"line\">    hits_stats: <span class=\"string\">&quot;<span class=\"variable\">$&#123;hits&#125;</span> results found in <span class=\"variable\">$&#123;time&#125;</span> ms&quot;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"Step5：更新数据到algolia服务器\"><a href=\"#Step5：更新数据到algolia服务器\" class=\"headerlink\" title=\"Step5：更新数据到algolia服务器\"></a>Step5：更新数据到algolia服务器</h2><p>在 hexo 站点根目录下执行<code>hexo algolia</code> 来搜集数据更新到我们刚创建的 Index 中</p>\n<p>此时执行上述命令一般会报如下错误：(这里就是上面说的我们还有一个本地环境变量没配置)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">babyfengfjx@babyfengfjx:~/Documents/typora_documents/github/workdata/myblog$ hexo algolia</span><br><span class=\"line\">INFO  Validating config</span><br><span class=\"line\">ERROR [hexo-algolia] Please <span class=\"built_in\">set</span> an `HEXO_ALGOLIA_INDEXING_KEY` environment variable to <span class=\"built_in\">enable</span> content indexing.</span><br><span class=\"line\">ERROR &gt;&gt; Read https://npmjs.com/hexo-algolia<span class=\"comment\">#api-key for more informations.</span></span><br></pre></td></tr></table></figure>\n\n<p>直接执行一下如下命令：<code>export HEXO_ALGOLIA_INDEXING_KEY=fe4c456ceeaea4f264f0d242b5fexxxx</code> 其中这个key就是Admin api key，添加完环境变量后，再次执行上述命令即可。</p>\n<h2 id=\"Step6：重新部署即可\"><a href=\"#Step6：重新部署即可\" class=\"headerlink\" title=\"Step6：重新部署即可\"></a>Step6：重新部署即可</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br><span class=\"line\">hexo g</span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h2><p>我在配置搜索服务时，遇到的问题是在执行<code> hexo algolia</code>命令时报如下信息，好像我没有安装插件一样，但实际我是安装了的，最后折腾才发现，我安装该搜索服务时，是没有在我博客根目录执行安装命令，而是随便在其他目录下安装执行的，也不知道为何有这个问题，随后在根目录下再次安装就好了。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">babyfengfjx@babyfengfjx:~/Documents/typora_documents/github/workdata/myblog$ hexo algolia</span><br><span class=\"line\">INFO  Validating config</span><br><span class=\"line\">Usage: hexo &lt;<span class=\"built_in\">command</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">Commands:</span><br><span class=\"line\">  clean     Remove generated files and cache.</span><br><span class=\"line\">  config    Get or <span class=\"built_in\">set</span> configurations.</span><br><span class=\"line\">  deploy    Deploy your website.</span><br><span class=\"line\">  generate  Generate static files.</span><br><span class=\"line\">  <span class=\"built_in\">help</span>      Get <span class=\"built_in\">help</span> on a <span class=\"built_in\">command</span>.</span><br><span class=\"line\">  init      Create a new Hexo folder.</span><br><span class=\"line\">  list      List the information of the site</span><br><span class=\"line\">  migrate   Migrate your site from other system to Hexo.</span><br><span class=\"line\">  new       Create a new post.</span><br><span class=\"line\">  publish   Moves a draft post from _drafts to _posts folder.</span><br><span class=\"line\">  render    Render files with renderer plugins.</span><br><span class=\"line\">  server    Start the server.</span><br><span class=\"line\">  version   Display version information.</span><br><span class=\"line\"></span><br><span class=\"line\">Global Options:</span><br><span class=\"line\">  --config  Specify config file instead of using _config.yml</span><br><span class=\"line\">  --cwd     Specify the CWD</span><br><span class=\"line\">  --debug   Display all verbose messages <span class=\"keyword\">in</span> the terminal</span><br><span class=\"line\">  --draft   Display draft posts</span><br><span class=\"line\">  --safe    Disable all plugins and scripts</span><br><span class=\"line\">  --silent  Hide output on console</span><br><span class=\"line\"></span><br><span class=\"line\">For more <span class=\"built_in\">help</span>, you can use <span class=\"string\">&#x27;hexo help [command]&#x27;</span> <span class=\"keyword\">for</span> the detailed information</span><br><span class=\"line\">or you can check the docs: http://hexo.io/docs/</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"配置步骤\"><a href=\"#配置步骤\" class=\"headerlink\" title=\"配置步骤\"></a>配置步骤</h1><h2 id=\"Step1-注册algolia\"><a href=\"#Step1-注册algolia\" class=\"headerlink\" title=\"Step1:注册algolia\"></a>Step1:注册algolia</h2><p><a href=\"https://www.algolia.com/\">访问此处进行注册登录</a></p>\n<h2 id=\"Step2-创建索引数据库\"><a href=\"#Step2-创建索引数据库\" class=\"headerlink\" title=\"Step2:创建索引数据库\"></a>Step2:创建索引数据库</h2><blockquote>\n<p>按照如下图进行索引实例创建即可，这里的索引名称后面会用到，自行创建记住即可。</p>\n</blockquote>\n<p><img src=\"/pictures/hexo_config_algolia/image-20230103113149791.png\" alt=\"image-20230103113149791\"></p>\n<h2 id=\"Step3：查看API信息\"><a href=\"#Step3：查看API信息\" class=\"headerlink\" title=\"Step3：查看API信息\"></a>Step3：查看API信息</h2><blockquote>\n<p>可能很多人不知道具体在哪里看，当前可以查看的路径可以看如下截图。</p>\n</blockquote>\n<p><img src=\"/pictures/hexo_config_algolia/image-20230103113426783.png\" alt=\"image-20230103113426783\"></p>\n<p><img src=\"/pictures/hexo_config_algolia/image-20230103113505830.png\" alt=\"image-20230103113505830\"></p>\n<p><img src=\"/pictures/hexo_config_algolia/image-20230103113638126.png\" alt=\"image-20230103113638126\"></p>\n<h2 id=\"Step4-安装插件配置本地文件\"><a href=\"#Step4-安装插件配置本地文件\" class=\"headerlink\" title=\"Step4:安装插件配置本地文件\"></a>Step4:安装插件配置本地文件</h2><ul>\n<li><p>先进入自己博客项目的根目录，然后安装插件：<code> npm install --save hexo-algolia</code>;</p>\n</li>\n<li><p>然后在hexo根目录下的主配置文件<code>_config.yml</code>添加如下内容（具体值按照自己实际注册的内容填写即可）:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">algolia:</span><br><span class=\"line\">  applicationID: <span class=\"string\">&#x27;RPHOC0xxxx&#x27;</span></span><br><span class=\"line\">  apiKey: <span class=\"string\">&#x27;723903e5de5899f6cc4ad96fc509xxxx&#x27;</span></span><br><span class=\"line\">  adminApiKey: <span class=\"string\">&#x27;fe4c456ceeaea4f264f0d242b5fexxxx&#x27;</span></span><br><span class=\"line\">  indexName: <span class=\"string\">&#x27;hexo_blog&#x27;</span></span><br><span class=\"line\">  chunkSize: 5000</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>再在你的主题配置文件中开启相关功能配置：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">algolia_search:</span><br><span class=\"line\">  <span class=\"built_in\">enable</span>: <span class=\"literal\">true</span> <span class=\"comment\"># or false</span></span><br><span class=\"line\">  hits:</span><br><span class=\"line\">    per_page: 10 <span class=\"comment\"># the number of search results per page</span></span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    input_placeholder: Search <span class=\"keyword\">for</span> Posts</span><br><span class=\"line\">    hits_empty: <span class=\"string\">&quot;We didn&#x27;t find any results for the search: <span class=\"variable\">$&#123;query&#125;</span>&quot;</span> <span class=\"comment\"># if there are no result</span></span><br><span class=\"line\">    hits_stats: <span class=\"string\">&quot;<span class=\"variable\">$&#123;hits&#125;</span> results found in <span class=\"variable\">$&#123;time&#125;</span> ms&quot;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"Step5：更新数据到algolia服务器\"><a href=\"#Step5：更新数据到algolia服务器\" class=\"headerlink\" title=\"Step5：更新数据到algolia服务器\"></a>Step5：更新数据到algolia服务器</h2><p>在 hexo 站点根目录下执行<code>hexo algolia</code> 来搜集数据更新到我们刚创建的 Index 中</p>\n<p>此时执行上述命令一般会报如下错误：(这里就是上面说的我们还有一个本地环境变量没配置)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">babyfengfjx@babyfengfjx:~/Documents/typora_documents/github/workdata/myblog$ hexo algolia</span><br><span class=\"line\">INFO  Validating config</span><br><span class=\"line\">ERROR [hexo-algolia] Please <span class=\"built_in\">set</span> an `HEXO_ALGOLIA_INDEXING_KEY` environment variable to <span class=\"built_in\">enable</span> content indexing.</span><br><span class=\"line\">ERROR &gt;&gt; Read https://npmjs.com/hexo-algolia<span class=\"comment\">#api-key for more informations.</span></span><br></pre></td></tr></table></figure>\n\n<p>直接执行一下如下命令：<code>export HEXO_ALGOLIA_INDEXING_KEY=fe4c456ceeaea4f264f0d242b5fexxxx</code> 其中这个key就是Admin api key，添加完环境变量后，再次执行上述命令即可。</p>\n<h2 id=\"Step6：重新部署即可\"><a href=\"#Step6：重新部署即可\" class=\"headerlink\" title=\"Step6：重新部署即可\"></a>Step6：重新部署即可</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br><span class=\"line\">hexo g</span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n"},{"title":"通过live系统修改linux的密码","date":"2022-01-06T02:11:34.000Z","_content":"> 核心思想就是通过live系统进入一个临时系统，然后通过chroot到物理系统的根目录，进行相关密码重置工作。\n\n# Step One:进入live系统\n\n![1.gif](https://storage.deepin.org/thread/202205201618318171_1.gif)\n**很多人可能还不知道如何进入deepin的live系统，可以看上面动图的操作，也是非常简单：**\n\n1. 首先准备好一个装有deepin镜像的启动U盘（推荐使用ventoy）；\n2. 直接走装镜像的路子,启动到系统安装界面；\n3. 唯一区别是在grub安装界面的时候，不要选择任何选项，而是按一下键盘上的 **“E”** 按键（如果是非EFI启动，可能需要按TAB键）；\n4. 按过之后就会出现下图的编辑界面，通过上下左右按键移动到下方红框标识处，删除 **“cd-installer”** 内容；\n\n   ![2.png](https://storage.deepin.org/thread/20220520162047272_2.png)\n5. 然后直接按键盘上F10按键，接下来就会直接进入live系统界面了。\n6. 进入live系统后是如下界面的样子（下图是V20.6的镜像）：\n\n> 特别提醒：在live系统下长时间也会自动锁屏了，如果你也遇到了锁屏发现没有密码无法进入系统，可能你需要重新来一次，此时可以直接通过ctrl+alt+F2 进入TTY，然后在TTY界面设置密码即可：``sudo passwd uos``,然后再切回来用设置的密码登录即可。\n\n![3.png](https://storage.deepin.org/thread/202205201621386209_3.png)\n\n# Step Two:切换chroot目录\n\n1. 在live系统中打开文件管理器；\n2. 找到根目录所在分区（如我这里的Roota）;\n3. 进入目录后，右键点击空白处，打开终端；\n4. 然后输入 ``sudo chroot ./``;\n5. 回车后，我们就切换到原系统的根目录了。\n\n![qiehuanchroot.gif](https://storage.deepin.org/thread/202206011317339861_qiehuanchroot.gif)\n\n# Step Three:修改用户密码\n\n1. 确认你要修改密码的用户名，比如我这里要修改 ‘babyfengfjx’ 用户的密码；\n2. 在上面的终端里，接着执行：``passwd babyfengfjx``    -- 这里记得换成自己的用户名；\n3. 按照提示设置新的密码即可。\n\n![genghuanmima.gif](https://storage.deepin.org/thread/202206011319569555_genghuanmima.gif)\n\n# Step Four:重启系统，使用新的密码登录\n\n完成上述操作后，即可重启系统，使用刚设置的新密码进行登录了。","source":"_posts/linuxmodifypasswd.md","raw":"title: 通过live系统修改linux的密码\ncategories:\n  - linux\ntags:\n  - linux\ndate: 2022-01-06 10:11:34\n---\n> 核心思想就是通过live系统进入一个临时系统，然后通过chroot到物理系统的根目录，进行相关密码重置工作。\n\n# Step One:进入live系统\n\n![1.gif](https://storage.deepin.org/thread/202205201618318171_1.gif)\n**很多人可能还不知道如何进入deepin的live系统，可以看上面动图的操作，也是非常简单：**\n\n1. 首先准备好一个装有deepin镜像的启动U盘（推荐使用ventoy）；\n2. 直接走装镜像的路子,启动到系统安装界面；\n3. 唯一区别是在grub安装界面的时候，不要选择任何选项，而是按一下键盘上的 **“E”** 按键（如果是非EFI启动，可能需要按TAB键）；\n4. 按过之后就会出现下图的编辑界面，通过上下左右按键移动到下方红框标识处，删除 **“cd-installer”** 内容；\n\n   ![2.png](https://storage.deepin.org/thread/20220520162047272_2.png)\n5. 然后直接按键盘上F10按键，接下来就会直接进入live系统界面了。\n6. 进入live系统后是如下界面的样子（下图是V20.6的镜像）：\n\n> 特别提醒：在live系统下长时间也会自动锁屏了，如果你也遇到了锁屏发现没有密码无法进入系统，可能你需要重新来一次，此时可以直接通过ctrl+alt+F2 进入TTY，然后在TTY界面设置密码即可：``sudo passwd uos``,然后再切回来用设置的密码登录即可。\n\n![3.png](https://storage.deepin.org/thread/202205201621386209_3.png)\n\n# Step Two:切换chroot目录\n\n1. 在live系统中打开文件管理器；\n2. 找到根目录所在分区（如我这里的Roota）;\n3. 进入目录后，右键点击空白处，打开终端；\n4. 然后输入 ``sudo chroot ./``;\n5. 回车后，我们就切换到原系统的根目录了。\n\n![qiehuanchroot.gif](https://storage.deepin.org/thread/202206011317339861_qiehuanchroot.gif)\n\n# Step Three:修改用户密码\n\n1. 确认你要修改密码的用户名，比如我这里要修改 ‘babyfengfjx’ 用户的密码；\n2. 在上面的终端里，接着执行：``passwd babyfengfjx``    -- 这里记得换成自己的用户名；\n3. 按照提示设置新的密码即可。\n\n![genghuanmima.gif](https://storage.deepin.org/thread/202206011319569555_genghuanmima.gif)\n\n# Step Four:重启系统，使用新的密码登录\n\n完成上述操作后，即可重启系统，使用刚设置的新密码进行登录了。","slug":"linuxmodifypasswd","published":1,"updated":"2022-12-31T04:23:39.861Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clciheilf000xrdxh3ak12xuw","content":"<blockquote>\n<p>核心思想就是通过live系统进入一个临时系统，然后通过chroot到物理系统的根目录，进行相关密码重置工作。</p>\n</blockquote>\n<h1 id=\"Step-One-进入live系统\"><a href=\"#Step-One-进入live系统\" class=\"headerlink\" title=\"Step One:进入live系统\"></a>Step One:进入live系统</h1><p><img src=\"https://storage.deepin.org/thread/202205201618318171_1.gif\" alt=\"1.gif\"><br><strong>很多人可能还不知道如何进入deepin的live系统，可以看上面动图的操作，也是非常简单：</strong></p>\n<ol>\n<li><p>首先准备好一个装有deepin镜像的启动U盘（推荐使用ventoy）；</p>\n</li>\n<li><p>直接走装镜像的路子,启动到系统安装界面；</p>\n</li>\n<li><p>唯一区别是在grub安装界面的时候，不要选择任何选项，而是按一下键盘上的 <strong>“E”</strong> 按键（如果是非EFI启动，可能需要按TAB键）；</p>\n</li>\n<li><p>按过之后就会出现下图的编辑界面，通过上下左右按键移动到下方红框标识处，删除 <strong>“cd-installer”</strong> 内容；</p>\n<p><img src=\"https://storage.deepin.org/thread/20220520162047272_2.png\" alt=\"2.png\"></p>\n</li>\n<li><p>然后直接按键盘上F10按键，接下来就会直接进入live系统界面了。</p>\n</li>\n<li><p>进入live系统后是如下界面的样子（下图是V20.6的镜像）：</p>\n</li>\n</ol>\n<blockquote>\n<p>特别提醒：在live系统下长时间也会自动锁屏了，如果你也遇到了锁屏发现没有密码无法进入系统，可能你需要重新来一次，此时可以直接通过ctrl+alt+F2 进入TTY，然后在TTY界面设置密码即可：<code>sudo passwd uos</code>,然后再切回来用设置的密码登录即可。</p>\n</blockquote>\n<p><img src=\"https://storage.deepin.org/thread/202205201621386209_3.png\" alt=\"3.png\"></p>\n<h1 id=\"Step-Two-切换chroot目录\"><a href=\"#Step-Two-切换chroot目录\" class=\"headerlink\" title=\"Step Two:切换chroot目录\"></a>Step Two:切换chroot目录</h1><ol>\n<li>在live系统中打开文件管理器；</li>\n<li>找到根目录所在分区（如我这里的Roota）;</li>\n<li>进入目录后，右键点击空白处，打开终端；</li>\n<li>然后输入 <code>sudo chroot ./</code>;</li>\n<li>回车后，我们就切换到原系统的根目录了。</li>\n</ol>\n<p><img src=\"https://storage.deepin.org/thread/202206011317339861_qiehuanchroot.gif\" alt=\"qiehuanchroot.gif\"></p>\n<h1 id=\"Step-Three-修改用户密码\"><a href=\"#Step-Three-修改用户密码\" class=\"headerlink\" title=\"Step Three:修改用户密码\"></a>Step Three:修改用户密码</h1><ol>\n<li>确认你要修改密码的用户名，比如我这里要修改 ‘babyfengfjx’ 用户的密码；</li>\n<li>在上面的终端里，接着执行：<code>passwd babyfengfjx</code>    – 这里记得换成自己的用户名；</li>\n<li>按照提示设置新的密码即可。</li>\n</ol>\n<p><img src=\"https://storage.deepin.org/thread/202206011319569555_genghuanmima.gif\" alt=\"genghuanmima.gif\"></p>\n<h1 id=\"Step-Four-重启系统，使用新的密码登录\"><a href=\"#Step-Four-重启系统，使用新的密码登录\" class=\"headerlink\" title=\"Step Four:重启系统，使用新的密码登录\"></a>Step Four:重启系统，使用新的密码登录</h1><p>完成上述操作后，即可重启系统，使用刚设置的新密码进行登录了。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>核心思想就是通过live系统进入一个临时系统，然后通过chroot到物理系统的根目录，进行相关密码重置工作。</p>\n</blockquote>\n<h1 id=\"Step-One-进入live系统\"><a href=\"#Step-One-进入live系统\" class=\"headerlink\" title=\"Step One:进入live系统\"></a>Step One:进入live系统</h1><p><img src=\"https://storage.deepin.org/thread/202205201618318171_1.gif\" alt=\"1.gif\"><br><strong>很多人可能还不知道如何进入deepin的live系统，可以看上面动图的操作，也是非常简单：</strong></p>\n<ol>\n<li><p>首先准备好一个装有deepin镜像的启动U盘（推荐使用ventoy）；</p>\n</li>\n<li><p>直接走装镜像的路子,启动到系统安装界面；</p>\n</li>\n<li><p>唯一区别是在grub安装界面的时候，不要选择任何选项，而是按一下键盘上的 <strong>“E”</strong> 按键（如果是非EFI启动，可能需要按TAB键）；</p>\n</li>\n<li><p>按过之后就会出现下图的编辑界面，通过上下左右按键移动到下方红框标识处，删除 <strong>“cd-installer”</strong> 内容；</p>\n<p><img src=\"https://storage.deepin.org/thread/20220520162047272_2.png\" alt=\"2.png\"></p>\n</li>\n<li><p>然后直接按键盘上F10按键，接下来就会直接进入live系统界面了。</p>\n</li>\n<li><p>进入live系统后是如下界面的样子（下图是V20.6的镜像）：</p>\n</li>\n</ol>\n<blockquote>\n<p>特别提醒：在live系统下长时间也会自动锁屏了，如果你也遇到了锁屏发现没有密码无法进入系统，可能你需要重新来一次，此时可以直接通过ctrl+alt+F2 进入TTY，然后在TTY界面设置密码即可：<code>sudo passwd uos</code>,然后再切回来用设置的密码登录即可。</p>\n</blockquote>\n<p><img src=\"https://storage.deepin.org/thread/202205201621386209_3.png\" alt=\"3.png\"></p>\n<h1 id=\"Step-Two-切换chroot目录\"><a href=\"#Step-Two-切换chroot目录\" class=\"headerlink\" title=\"Step Two:切换chroot目录\"></a>Step Two:切换chroot目录</h1><ol>\n<li>在live系统中打开文件管理器；</li>\n<li>找到根目录所在分区（如我这里的Roota）;</li>\n<li>进入目录后，右键点击空白处，打开终端；</li>\n<li>然后输入 <code>sudo chroot ./</code>;</li>\n<li>回车后，我们就切换到原系统的根目录了。</li>\n</ol>\n<p><img src=\"https://storage.deepin.org/thread/202206011317339861_qiehuanchroot.gif\" alt=\"qiehuanchroot.gif\"></p>\n<h1 id=\"Step-Three-修改用户密码\"><a href=\"#Step-Three-修改用户密码\" class=\"headerlink\" title=\"Step Three:修改用户密码\"></a>Step Three:修改用户密码</h1><ol>\n<li>确认你要修改密码的用户名，比如我这里要修改 ‘babyfengfjx’ 用户的密码；</li>\n<li>在上面的终端里，接着执行：<code>passwd babyfengfjx</code>    – 这里记得换成自己的用户名；</li>\n<li>按照提示设置新的密码即可。</li>\n</ol>\n<p><img src=\"https://storage.deepin.org/thread/202206011319569555_genghuanmima.gif\" alt=\"genghuanmima.gif\"></p>\n<h1 id=\"Step-Four-重启系统，使用新的密码登录\"><a href=\"#Step-Four-重启系统，使用新的密码登录\" class=\"headerlink\" title=\"Step Four:重启系统，使用新的密码登录\"></a>Step Four:重启系统，使用新的密码登录</h1><p>完成上述操作后，即可重启系统，使用刚设置的新密码进行登录了。</p>\n"},{"title":"python调度框架APScheduler使用详解（非阻塞模式)","date":"2022-01-20T03:11:34.000Z","_content":"\n## 定时任务设置：\n\n定时任务，有阻塞和非阻塞方式两种，这个部分需要取分清楚:\n\n- ```from apscheduler.schedulers.background import BackgroundScheduler``` 这个是非阻塞的；\n\n- ```from apscheduler.schedulers.blocking import BlockingScheduler``` 这个是阻塞的，在没有其他主程序时，就需要用阻塞的方式，不然代码执行完主程序就结束了。\n\n\n\n```Python\n# coding=utf-8\n\"\"\"\nDemonstrates how to use the background scheduler to schedule a job that executes on 3 second\nintervals.\n\"\"\"\n \nfrom datetime import datetime\nimport time\nimport os\n \nfrom apscheduler.schedulers.background import BackgroundScheduler\n \n \ndef tick():\n    print('Tick! The time is: %s' % datetime.now())\n \n \nif __name__ == '__main__':\n    scheduler = BackgroundScheduler()\n    scheduler.add_job(tick, 'interval', seconds=3)　　#间隔3秒钟执行一次\n    scheduler.start()    #这里的调度任务是独立的一个线程\n    print('Press Ctrl+{0} to exit'.format('Break' if os.name == 'nt' else 'C'))\n \n    try:\n        # This is here to simulate application activity (which keeps the main thread alive).\n        while True:\n            time.sleep(2)    #其他任务是独立的线程执行\n            print('sleep!')\n    except (KeyboardInterrupt, SystemExit):\n        # Not strictly necessary if daemonic mode is enabled but should be done if possible\n        scheduler.shutdown()\n        print('Exit The Job!')\n```\n\n# 非阻塞调度，在指定的时间执行一次\n\n```Python\n# coding=utf-8\n\"\"\"\nDemonstrates how to use the background scheduler to schedule a job that executes on 3 second\nintervals.\n\"\"\"\n \nfrom datetime import datetime\nimport time\nimport os\n \nfrom apscheduler.schedulers.background import BackgroundScheduler\n \n \ndef tick():\n    print('Tick! The time is: %s' % datetime.now())\n \n \nif __name__ == '__main__':\n    scheduler = BackgroundScheduler()\n    #scheduler.add_job(tick, 'interval', seconds=3)\n    scheduler.add_job(tick, 'date', run_date='2016-02-14 15:01:05')　　#在指定的时间，只执行一次\n    scheduler.start()    #这里的调度任务是独立的一个线程\n    print('Press Ctrl+{0} to exit'.format('Break' if os.name == 'nt' else 'C'))\n \n    try:\n        # This is here to simulate application activity (which keeps the main thread alive).\n        while True:\n            time.sleep(2)    #其他任务是独立的线程执行\n            print('sleep!')\n    except (KeyboardInterrupt, SystemExit):\n        # Not strictly necessary if daemonic mode is enabled but should be done if possible\n        scheduler.shutdown()\n        print('Exit The Job!')\n```\n\n# 非阻塞的方式，采用cron的方式执行\n\n```Python\n# coding=utf-8\n\"\"\"\nDemonstrates how to use the background scheduler to schedule a job that executes on 3 second\nintervals.\n\"\"\"\n \nfrom datetime import datetime\nimport time\nimport os\n \nfrom apscheduler.schedulers.background import BackgroundScheduler\n \n \ndef tick():\n    print('Tick! The time is: %s' % datetime.now())\n \n \nif __name__ == '__main__':\n    scheduler = BackgroundScheduler()\n    #scheduler.add_job(tick, 'interval', seconds=3)\n    #scheduler.add_job(tick, 'date', run_date='2016-02-14 15:01:05')\n    scheduler.add_job(tick, 'cron', day_of_week='6', second='*/5')\n    '''\n        year (int|str) – 4-digit year\n        month (int|str) – month (1-12)\n        day (int|str) – day of the (1-31)\n        week (int|str) – ISO week (1-53)\n        day_of_week (int|str) – number or name of weekday (0-6 or mon,tue,wed,thu,fri,sat,sun)\n        hour (int|str) – hour (0-23)\n        minute (int|str) – minute (0-59)\n        second (int|str) – second (0-59)\n        \n        start_date (datetime|str) – earliest possible date/time to trigger on (inclusive)\n        end_date (datetime|str) – latest possible date/time to trigger on (inclusive)\n        timezone (datetime.tzinfo|str) – time zone to use for the date/time calculations (defaults to scheduler timezone)\n    \n        *    any    Fire on every value\n        */a    any    Fire every a values, starting from the minimum\n        a-b    any    Fire on any value within the a-b range (a must be smaller than b)\n        a-b/c    any    Fire every c values within the a-b range\n        xth y    day    Fire on the x -th occurrence of weekday y within the month\n        last x    day    Fire on the last occurrence of weekday x within the month\n        last    day    Fire on the last day within the month\n        x,y,z    any    Fire on any matching expression; can combine any number of any of the above expressions\n    '''\n    scheduler.start()    #这里的调度任务是独立的一个线程\n    print('Press Ctrl+{0} to exit'.format('Break' if os.name == 'nt' else 'C'))\n \n    try:\n        # This is here to simulate application activity (which keeps the main thread alive).\n        while True:\n            time.sleep(2)    #其他任务是独立的线程执行\n            print('sleep!')\n    except (KeyboardInterruptSystemExit):\n        # Not strictly necessary if daemonic mode is enabled but should be done if possible\n        scheduler.shutdown()\n        print('Exit The Job!')\n```\n\n# 阻塞的方式，间隔3秒执行一次\n\n```Python\n# coding=utf-8\n\"\"\"\nDemonstrates how to use the background scheduler to schedule a job that executes on 3 second\nintervals.\n\"\"\"\n \nfrom datetime import datetime\nimport os\n \nfrom apscheduler.schedulers.blocking import BlockingScheduler\n \n \ndef tick():\n    print('Tick! The time is: %s' % datetime.now())\n \n \nif __name__ == '__main__':\n    scheduler = BlockingScheduler()\n    scheduler.add_job(tick, 'interval', seconds=3)\n    \n    print('Press Ctrl+{0} to exit'.format('Break' if os.name == 'nt' else 'C'))\n \n    try:\n        scheduler.start()    #采用的是阻塞的方式，只有一个线程专职做调度的任务\n    except (KeyboardInterrupt, SystemExit):\n        # Not strictly necessary if daemonic mode is enabled but should be done if possible\n        scheduler.shutdown()\n        print('Exit The Job!')\n```\n\n# 采用阻塞的方法，只执行一次\n\n```Python\n# coding=utf-8\n\"\"\"\nDemonstrates how to use the background scheduler to schedule a job that executes on 3 second\nintervals.\n\"\"\"\n \nfrom datetime import datetime\nimport os\n \nfrom apscheduler.schedulers.blocking import BlockingScheduler\n \n \ndef tick():\n    print('Tick! The time is: %s' % datetime.now())\n \n \nif __name__ == '__main__':\n    scheduler = BlockingScheduler()\n    scheduler.add_job(tick, 'date', run_date='2016-02-14 15:23:05')\n    \n    print('Press Ctrl+{0} to exit'.format('Break' if os.name == 'nt' else 'C'))\n \n    try:\n        scheduler.start()    #采用的是阻塞的方式，只有一个线程专职做调度的任务\n    except (KeyboardInterrupt, SystemExit):\n        # Not strictly necessary if daemonic mode is enabled but should be done if possible\n        scheduler.shutdown()\n        print('Exit The Job!')\n```\n\n# 采用阻塞的方式，使用cron的调度方法\n\n```Python\n# coding=utf-8\n\"\"\"\nDemonstrates how to use the background scheduler to schedule a job that executes on 3 second\nintervals.\n\"\"\"\n \nfrom datetime import datetime\nimport os\n \nfrom apscheduler.schedulers.blocking import BlockingScheduler\n \n \ndef tick():\n    print('Tick! The time is: %s' % datetime.now())\n \n \nif __name__ == '__main__':\n    scheduler = BlockingScheduler()\n    scheduler.add_job(tick, 'cron', day_of_week='6', second='*/5')\n    '''\n        year (int|str) – 4-digit year\n        month (int|str) – month (1-12)\n        day (int|str) – day of the (1-31)\n        week (int|str) – ISO week (1-53)\n        day_of_week (int|str) – number or name of weekday (0-6 or mon,tue,wed,thu,fri,sat,sun)\n        hour (int|str) – hour (0-23)\n        minute (int|str) – minute (0-59)\n        second (int|str) – second (0-59)\n        \n        start_date (datetime|str) – earliest possible date/time to trigger on (inclusive)\n        end_date (datetime|str) – latest possible date/time to trigger on (inclusive)\n        timezone (datetime.tzinfo|str) – time zone to use for the date/time calculations (defaults to scheduler timezone)\n    \n        *    any    Fire on every value\n        */a    any    Fire every a values, starting from the minimum\n        a-b    any    Fire on any value within the a-b range (a must be smaller than b)\n        a-b/c    any    Fire every c values within the a-b range\n        xth y    day    Fire on the x -th occurrence of weekday y within the month\n        last x    day    Fire on the last occurrence of weekday x within the month\n        last    day    Fire on the last day within the month\n        x,y,z    any    Fire on any matching expression; can combine any number of any of the above expressions\n    '''\n    \n    print('Press Ctrl+{0} to exit'.format('Break' if os.name == 'nt' else 'C'))\n \n    try:\n        scheduler.start()    #采用的是阻塞的方式，只有一个线程专职做调度的任务\n    except (KeyboardInterrupt, SystemExit):\n        # Not strictly necessary if daemonic mode is enabled but should be done if possible\n        scheduler.shutdown()\n        print('Exit The Job!')\n```\n\n[转自此链接](https://www.cnblogs.com/cangqinglang/p/14338220.html)\n","source":"_posts/python调度框架APScheduler使用详解（非阻塞模式）.md","raw":"---\ntitle: python调度框架APScheduler使用详解（非阻塞模式)\ncategories: \n- python\ntags:\n- python\n- 任务调度\ndate: 2022-01-20 11:11:34\n---\n\n## 定时任务设置：\n\n定时任务，有阻塞和非阻塞方式两种，这个部分需要取分清楚:\n\n- ```from apscheduler.schedulers.background import BackgroundScheduler``` 这个是非阻塞的；\n\n- ```from apscheduler.schedulers.blocking import BlockingScheduler``` 这个是阻塞的，在没有其他主程序时，就需要用阻塞的方式，不然代码执行完主程序就结束了。\n\n\n\n```Python\n# coding=utf-8\n\"\"\"\nDemonstrates how to use the background scheduler to schedule a job that executes on 3 second\nintervals.\n\"\"\"\n \nfrom datetime import datetime\nimport time\nimport os\n \nfrom apscheduler.schedulers.background import BackgroundScheduler\n \n \ndef tick():\n    print('Tick! The time is: %s' % datetime.now())\n \n \nif __name__ == '__main__':\n    scheduler = BackgroundScheduler()\n    scheduler.add_job(tick, 'interval', seconds=3)　　#间隔3秒钟执行一次\n    scheduler.start()    #这里的调度任务是独立的一个线程\n    print('Press Ctrl+{0} to exit'.format('Break' if os.name == 'nt' else 'C'))\n \n    try:\n        # This is here to simulate application activity (which keeps the main thread alive).\n        while True:\n            time.sleep(2)    #其他任务是独立的线程执行\n            print('sleep!')\n    except (KeyboardInterrupt, SystemExit):\n        # Not strictly necessary if daemonic mode is enabled but should be done if possible\n        scheduler.shutdown()\n        print('Exit The Job!')\n```\n\n# 非阻塞调度，在指定的时间执行一次\n\n```Python\n# coding=utf-8\n\"\"\"\nDemonstrates how to use the background scheduler to schedule a job that executes on 3 second\nintervals.\n\"\"\"\n \nfrom datetime import datetime\nimport time\nimport os\n \nfrom apscheduler.schedulers.background import BackgroundScheduler\n \n \ndef tick():\n    print('Tick! The time is: %s' % datetime.now())\n \n \nif __name__ == '__main__':\n    scheduler = BackgroundScheduler()\n    #scheduler.add_job(tick, 'interval', seconds=3)\n    scheduler.add_job(tick, 'date', run_date='2016-02-14 15:01:05')　　#在指定的时间，只执行一次\n    scheduler.start()    #这里的调度任务是独立的一个线程\n    print('Press Ctrl+{0} to exit'.format('Break' if os.name == 'nt' else 'C'))\n \n    try:\n        # This is here to simulate application activity (which keeps the main thread alive).\n        while True:\n            time.sleep(2)    #其他任务是独立的线程执行\n            print('sleep!')\n    except (KeyboardInterrupt, SystemExit):\n        # Not strictly necessary if daemonic mode is enabled but should be done if possible\n        scheduler.shutdown()\n        print('Exit The Job!')\n```\n\n# 非阻塞的方式，采用cron的方式执行\n\n```Python\n# coding=utf-8\n\"\"\"\nDemonstrates how to use the background scheduler to schedule a job that executes on 3 second\nintervals.\n\"\"\"\n \nfrom datetime import datetime\nimport time\nimport os\n \nfrom apscheduler.schedulers.background import BackgroundScheduler\n \n \ndef tick():\n    print('Tick! The time is: %s' % datetime.now())\n \n \nif __name__ == '__main__':\n    scheduler = BackgroundScheduler()\n    #scheduler.add_job(tick, 'interval', seconds=3)\n    #scheduler.add_job(tick, 'date', run_date='2016-02-14 15:01:05')\n    scheduler.add_job(tick, 'cron', day_of_week='6', second='*/5')\n    '''\n        year (int|str) – 4-digit year\n        month (int|str) – month (1-12)\n        day (int|str) – day of the (1-31)\n        week (int|str) – ISO week (1-53)\n        day_of_week (int|str) – number or name of weekday (0-6 or mon,tue,wed,thu,fri,sat,sun)\n        hour (int|str) – hour (0-23)\n        minute (int|str) – minute (0-59)\n        second (int|str) – second (0-59)\n        \n        start_date (datetime|str) – earliest possible date/time to trigger on (inclusive)\n        end_date (datetime|str) – latest possible date/time to trigger on (inclusive)\n        timezone (datetime.tzinfo|str) – time zone to use for the date/time calculations (defaults to scheduler timezone)\n    \n        *    any    Fire on every value\n        */a    any    Fire every a values, starting from the minimum\n        a-b    any    Fire on any value within the a-b range (a must be smaller than b)\n        a-b/c    any    Fire every c values within the a-b range\n        xth y    day    Fire on the x -th occurrence of weekday y within the month\n        last x    day    Fire on the last occurrence of weekday x within the month\n        last    day    Fire on the last day within the month\n        x,y,z    any    Fire on any matching expression; can combine any number of any of the above expressions\n    '''\n    scheduler.start()    #这里的调度任务是独立的一个线程\n    print('Press Ctrl+{0} to exit'.format('Break' if os.name == 'nt' else 'C'))\n \n    try:\n        # This is here to simulate application activity (which keeps the main thread alive).\n        while True:\n            time.sleep(2)    #其他任务是独立的线程执行\n            print('sleep!')\n    except (KeyboardInterruptSystemExit):\n        # Not strictly necessary if daemonic mode is enabled but should be done if possible\n        scheduler.shutdown()\n        print('Exit The Job!')\n```\n\n# 阻塞的方式，间隔3秒执行一次\n\n```Python\n# coding=utf-8\n\"\"\"\nDemonstrates how to use the background scheduler to schedule a job that executes on 3 second\nintervals.\n\"\"\"\n \nfrom datetime import datetime\nimport os\n \nfrom apscheduler.schedulers.blocking import BlockingScheduler\n \n \ndef tick():\n    print('Tick! The time is: %s' % datetime.now())\n \n \nif __name__ == '__main__':\n    scheduler = BlockingScheduler()\n    scheduler.add_job(tick, 'interval', seconds=3)\n    \n    print('Press Ctrl+{0} to exit'.format('Break' if os.name == 'nt' else 'C'))\n \n    try:\n        scheduler.start()    #采用的是阻塞的方式，只有一个线程专职做调度的任务\n    except (KeyboardInterrupt, SystemExit):\n        # Not strictly necessary if daemonic mode is enabled but should be done if possible\n        scheduler.shutdown()\n        print('Exit The Job!')\n```\n\n# 采用阻塞的方法，只执行一次\n\n```Python\n# coding=utf-8\n\"\"\"\nDemonstrates how to use the background scheduler to schedule a job that executes on 3 second\nintervals.\n\"\"\"\n \nfrom datetime import datetime\nimport os\n \nfrom apscheduler.schedulers.blocking import BlockingScheduler\n \n \ndef tick():\n    print('Tick! The time is: %s' % datetime.now())\n \n \nif __name__ == '__main__':\n    scheduler = BlockingScheduler()\n    scheduler.add_job(tick, 'date', run_date='2016-02-14 15:23:05')\n    \n    print('Press Ctrl+{0} to exit'.format('Break' if os.name == 'nt' else 'C'))\n \n    try:\n        scheduler.start()    #采用的是阻塞的方式，只有一个线程专职做调度的任务\n    except (KeyboardInterrupt, SystemExit):\n        # Not strictly necessary if daemonic mode is enabled but should be done if possible\n        scheduler.shutdown()\n        print('Exit The Job!')\n```\n\n# 采用阻塞的方式，使用cron的调度方法\n\n```Python\n# coding=utf-8\n\"\"\"\nDemonstrates how to use the background scheduler to schedule a job that executes on 3 second\nintervals.\n\"\"\"\n \nfrom datetime import datetime\nimport os\n \nfrom apscheduler.schedulers.blocking import BlockingScheduler\n \n \ndef tick():\n    print('Tick! The time is: %s' % datetime.now())\n \n \nif __name__ == '__main__':\n    scheduler = BlockingScheduler()\n    scheduler.add_job(tick, 'cron', day_of_week='6', second='*/5')\n    '''\n        year (int|str) – 4-digit year\n        month (int|str) – month (1-12)\n        day (int|str) – day of the (1-31)\n        week (int|str) – ISO week (1-53)\n        day_of_week (int|str) – number or name of weekday (0-6 or mon,tue,wed,thu,fri,sat,sun)\n        hour (int|str) – hour (0-23)\n        minute (int|str) – minute (0-59)\n        second (int|str) – second (0-59)\n        \n        start_date (datetime|str) – earliest possible date/time to trigger on (inclusive)\n        end_date (datetime|str) – latest possible date/time to trigger on (inclusive)\n        timezone (datetime.tzinfo|str) – time zone to use for the date/time calculations (defaults to scheduler timezone)\n    \n        *    any    Fire on every value\n        */a    any    Fire every a values, starting from the minimum\n        a-b    any    Fire on any value within the a-b range (a must be smaller than b)\n        a-b/c    any    Fire every c values within the a-b range\n        xth y    day    Fire on the x -th occurrence of weekday y within the month\n        last x    day    Fire on the last occurrence of weekday x within the month\n        last    day    Fire on the last day within the month\n        x,y,z    any    Fire on any matching expression; can combine any number of any of the above expressions\n    '''\n    \n    print('Press Ctrl+{0} to exit'.format('Break' if os.name == 'nt' else 'C'))\n \n    try:\n        scheduler.start()    #采用的是阻塞的方式，只有一个线程专职做调度的任务\n    except (KeyboardInterrupt, SystemExit):\n        # Not strictly necessary if daemonic mode is enabled but should be done if possible\n        scheduler.shutdown()\n        print('Exit The Job!')\n```\n\n[转自此链接](https://www.cnblogs.com/cangqinglang/p/14338220.html)\n","slug":"python调度框架APScheduler使用详解（非阻塞模式）","published":1,"updated":"2022-12-31T04:20:44.395Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clciheilf0010rdxh1dtignlc","content":"<h2 id=\"定时任务设置：\"><a href=\"#定时任务设置：\" class=\"headerlink\" title=\"定时任务设置：\"></a>定时任务设置：</h2><p>定时任务，有阻塞和非阻塞方式两种，这个部分需要取分清楚:</p>\n<ul>\n<li><p><code>from apscheduler.schedulers.background import BackgroundScheduler</code> 这个是非阻塞的；</p>\n</li>\n<li><p><code>from apscheduler.schedulers.blocking import BlockingScheduler</code> 这个是阻塞的，在没有其他主程序时，就需要用阻塞的方式，不然代码执行完主程序就结束了。</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># coding=utf-8</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">Demonstrates how to use the background scheduler to schedule a job that executes on 3 second</span></span><br><span class=\"line\"><span class=\"string\">intervals.</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">from</span> datetime <span class=\"keyword\">import</span> datetime</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">from</span> apscheduler.schedulers.background <span class=\"keyword\">import</span> BackgroundScheduler</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">tick</span>():</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Tick! The time is: %s&#x27;</span> % datetime.now())</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    scheduler = BackgroundScheduler()</span><br><span class=\"line\">    scheduler.add_job(tick, <span class=\"string\">&#x27;interval&#x27;</span>, seconds=<span class=\"number\">3</span>)　　<span class=\"comment\">#间隔3秒钟执行一次</span></span><br><span class=\"line\">    scheduler.start()    <span class=\"comment\">#这里的调度任务是独立的一个线程</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Press Ctrl+&#123;0&#125; to exit&#x27;</span>.<span class=\"built_in\">format</span>(<span class=\"string\">&#x27;Break&#x27;</span> <span class=\"keyword\">if</span> os.name == <span class=\"string\">&#x27;nt&#x27;</span> <span class=\"keyword\">else</span> <span class=\"string\">&#x27;C&#x27;</span>))</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"comment\"># This is here to simulate application activity (which keeps the main thread alive).</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">            time.sleep(<span class=\"number\">2</span>)    <span class=\"comment\">#其他任务是独立的线程执行</span></span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;sleep!&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> (KeyboardInterrupt, SystemExit):</span><br><span class=\"line\">        <span class=\"comment\"># Not strictly necessary if daemonic mode is enabled but should be done if possible</span></span><br><span class=\"line\">        scheduler.shutdown()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Exit The Job!&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"非阻塞调度，在指定的时间执行一次\"><a href=\"#非阻塞调度，在指定的时间执行一次\" class=\"headerlink\" title=\"非阻塞调度，在指定的时间执行一次\"></a>非阻塞调度，在指定的时间执行一次</h1><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># coding=utf-8</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">Demonstrates how to use the background scheduler to schedule a job that executes on 3 second</span></span><br><span class=\"line\"><span class=\"string\">intervals.</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">from</span> datetime <span class=\"keyword\">import</span> datetime</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">from</span> apscheduler.schedulers.background <span class=\"keyword\">import</span> BackgroundScheduler</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">tick</span>():</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Tick! The time is: %s&#x27;</span> % datetime.now())</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    scheduler = BackgroundScheduler()</span><br><span class=\"line\">    <span class=\"comment\">#scheduler.add_job(tick, &#x27;interval&#x27;, seconds=3)</span></span><br><span class=\"line\">    scheduler.add_job(tick, <span class=\"string\">&#x27;date&#x27;</span>, run_date=<span class=\"string\">&#x27;2016-02-14 15:01:05&#x27;</span>)　　<span class=\"comment\">#在指定的时间，只执行一次</span></span><br><span class=\"line\">    scheduler.start()    <span class=\"comment\">#这里的调度任务是独立的一个线程</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Press Ctrl+&#123;0&#125; to exit&#x27;</span>.<span class=\"built_in\">format</span>(<span class=\"string\">&#x27;Break&#x27;</span> <span class=\"keyword\">if</span> os.name == <span class=\"string\">&#x27;nt&#x27;</span> <span class=\"keyword\">else</span> <span class=\"string\">&#x27;C&#x27;</span>))</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"comment\"># This is here to simulate application activity (which keeps the main thread alive).</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">            time.sleep(<span class=\"number\">2</span>)    <span class=\"comment\">#其他任务是独立的线程执行</span></span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;sleep!&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> (KeyboardInterrupt, SystemExit):</span><br><span class=\"line\">        <span class=\"comment\"># Not strictly necessary if daemonic mode is enabled but should be done if possible</span></span><br><span class=\"line\">        scheduler.shutdown()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Exit The Job!&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"非阻塞的方式，采用cron的方式执行\"><a href=\"#非阻塞的方式，采用cron的方式执行\" class=\"headerlink\" title=\"非阻塞的方式，采用cron的方式执行\"></a>非阻塞的方式，采用cron的方式执行</h1><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># coding=utf-8</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">Demonstrates how to use the background scheduler to schedule a job that executes on 3 second</span></span><br><span class=\"line\"><span class=\"string\">intervals.</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">from</span> datetime <span class=\"keyword\">import</span> datetime</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">from</span> apscheduler.schedulers.background <span class=\"keyword\">import</span> BackgroundScheduler</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">tick</span>():</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Tick! The time is: %s&#x27;</span> % datetime.now())</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    scheduler = BackgroundScheduler()</span><br><span class=\"line\">    <span class=\"comment\">#scheduler.add_job(tick, &#x27;interval&#x27;, seconds=3)</span></span><br><span class=\"line\">    <span class=\"comment\">#scheduler.add_job(tick, &#x27;date&#x27;, run_date=&#x27;2016-02-14 15:01:05&#x27;)</span></span><br><span class=\"line\">    scheduler.add_job(tick, <span class=\"string\">&#x27;cron&#x27;</span>, day_of_week=<span class=\"string\">&#x27;6&#x27;</span>, second=<span class=\"string\">&#x27;*/5&#x27;</span>)</span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">        year (int|str) – 4-digit year</span></span><br><span class=\"line\"><span class=\"string\">        month (int|str) – month (1-12)</span></span><br><span class=\"line\"><span class=\"string\">        day (int|str) – day of the (1-31)</span></span><br><span class=\"line\"><span class=\"string\">        week (int|str) – ISO week (1-53)</span></span><br><span class=\"line\"><span class=\"string\">        day_of_week (int|str) – number or name of weekday (0-6 or mon,tue,wed,thu,fri,sat,sun)</span></span><br><span class=\"line\"><span class=\"string\">        hour (int|str) – hour (0-23)</span></span><br><span class=\"line\"><span class=\"string\">        minute (int|str) – minute (0-59)</span></span><br><span class=\"line\"><span class=\"string\">        second (int|str) – second (0-59)</span></span><br><span class=\"line\"><span class=\"string\">        </span></span><br><span class=\"line\"><span class=\"string\">        start_date (datetime|str) – earliest possible date/time to trigger on (inclusive)</span></span><br><span class=\"line\"><span class=\"string\">        end_date (datetime|str) – latest possible date/time to trigger on (inclusive)</span></span><br><span class=\"line\"><span class=\"string\">        timezone (datetime.tzinfo|str) – time zone to use for the date/time calculations (defaults to scheduler timezone)</span></span><br><span class=\"line\"><span class=\"string\">    </span></span><br><span class=\"line\"><span class=\"string\">        *    any    Fire on every value</span></span><br><span class=\"line\"><span class=\"string\">        */a    any    Fire every a values, starting from the minimum</span></span><br><span class=\"line\"><span class=\"string\">        a-b    any    Fire on any value within the a-b range (a must be smaller than b)</span></span><br><span class=\"line\"><span class=\"string\">        a-b/c    any    Fire every c values within the a-b range</span></span><br><span class=\"line\"><span class=\"string\">        xth y    day    Fire on the x -th occurrence of weekday y within the month</span></span><br><span class=\"line\"><span class=\"string\">        last x    day    Fire on the last occurrence of weekday x within the month</span></span><br><span class=\"line\"><span class=\"string\">        last    day    Fire on the last day within the month</span></span><br><span class=\"line\"><span class=\"string\">        x,y,z    any    Fire on any matching expression; can combine any number of any of the above expressions</span></span><br><span class=\"line\"><span class=\"string\">    &#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    scheduler.start()    <span class=\"comment\">#这里的调度任务是独立的一个线程</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Press Ctrl+&#123;0&#125; to exit&#x27;</span>.<span class=\"built_in\">format</span>(<span class=\"string\">&#x27;Break&#x27;</span> <span class=\"keyword\">if</span> os.name == <span class=\"string\">&#x27;nt&#x27;</span> <span class=\"keyword\">else</span> <span class=\"string\">&#x27;C&#x27;</span>))</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"comment\"># This is here to simulate application activity (which keeps the main thread alive).</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">            time.sleep(<span class=\"number\">2</span>)    <span class=\"comment\">#其他任务是独立的线程执行</span></span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;sleep!&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> (KeyboardInterruptSystemExit):</span><br><span class=\"line\">        <span class=\"comment\"># Not strictly necessary if daemonic mode is enabled but should be done if possible</span></span><br><span class=\"line\">        scheduler.shutdown()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Exit The Job!&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"阻塞的方式，间隔3秒执行一次\"><a href=\"#阻塞的方式，间隔3秒执行一次\" class=\"headerlink\" title=\"阻塞的方式，间隔3秒执行一次\"></a>阻塞的方式，间隔3秒执行一次</h1><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># coding=utf-8</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">Demonstrates how to use the background scheduler to schedule a job that executes on 3 second</span></span><br><span class=\"line\"><span class=\"string\">intervals.</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">from</span> datetime <span class=\"keyword\">import</span> datetime</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">from</span> apscheduler.schedulers.blocking <span class=\"keyword\">import</span> BlockingScheduler</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">tick</span>():</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Tick! The time is: %s&#x27;</span> % datetime.now())</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    scheduler = BlockingScheduler()</span><br><span class=\"line\">    scheduler.add_job(tick, <span class=\"string\">&#x27;interval&#x27;</span>, seconds=<span class=\"number\">3</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Press Ctrl+&#123;0&#125; to exit&#x27;</span>.<span class=\"built_in\">format</span>(<span class=\"string\">&#x27;Break&#x27;</span> <span class=\"keyword\">if</span> os.name == <span class=\"string\">&#x27;nt&#x27;</span> <span class=\"keyword\">else</span> <span class=\"string\">&#x27;C&#x27;</span>))</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        scheduler.start()    <span class=\"comment\">#采用的是阻塞的方式，只有一个线程专职做调度的任务</span></span><br><span class=\"line\">    <span class=\"keyword\">except</span> (KeyboardInterrupt, SystemExit):</span><br><span class=\"line\">        <span class=\"comment\"># Not strictly necessary if daemonic mode is enabled but should be done if possible</span></span><br><span class=\"line\">        scheduler.shutdown()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Exit The Job!&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"采用阻塞的方法，只执行一次\"><a href=\"#采用阻塞的方法，只执行一次\" class=\"headerlink\" title=\"采用阻塞的方法，只执行一次\"></a>采用阻塞的方法，只执行一次</h1><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># coding=utf-8</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">Demonstrates how to use the background scheduler to schedule a job that executes on 3 second</span></span><br><span class=\"line\"><span class=\"string\">intervals.</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">from</span> datetime <span class=\"keyword\">import</span> datetime</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">from</span> apscheduler.schedulers.blocking <span class=\"keyword\">import</span> BlockingScheduler</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">tick</span>():</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Tick! The time is: %s&#x27;</span> % datetime.now())</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    scheduler = BlockingScheduler()</span><br><span class=\"line\">    scheduler.add_job(tick, <span class=\"string\">&#x27;date&#x27;</span>, run_date=<span class=\"string\">&#x27;2016-02-14 15:23:05&#x27;</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Press Ctrl+&#123;0&#125; to exit&#x27;</span>.<span class=\"built_in\">format</span>(<span class=\"string\">&#x27;Break&#x27;</span> <span class=\"keyword\">if</span> os.name == <span class=\"string\">&#x27;nt&#x27;</span> <span class=\"keyword\">else</span> <span class=\"string\">&#x27;C&#x27;</span>))</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        scheduler.start()    <span class=\"comment\">#采用的是阻塞的方式，只有一个线程专职做调度的任务</span></span><br><span class=\"line\">    <span class=\"keyword\">except</span> (KeyboardInterrupt, SystemExit):</span><br><span class=\"line\">        <span class=\"comment\"># Not strictly necessary if daemonic mode is enabled but should be done if possible</span></span><br><span class=\"line\">        scheduler.shutdown()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Exit The Job!&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"采用阻塞的方式，使用cron的调度方法\"><a href=\"#采用阻塞的方式，使用cron的调度方法\" class=\"headerlink\" title=\"采用阻塞的方式，使用cron的调度方法\"></a>采用阻塞的方式，使用cron的调度方法</h1><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># coding=utf-8</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">Demonstrates how to use the background scheduler to schedule a job that executes on 3 second</span></span><br><span class=\"line\"><span class=\"string\">intervals.</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">from</span> datetime <span class=\"keyword\">import</span> datetime</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">from</span> apscheduler.schedulers.blocking <span class=\"keyword\">import</span> BlockingScheduler</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">tick</span>():</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Tick! The time is: %s&#x27;</span> % datetime.now())</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    scheduler = BlockingScheduler()</span><br><span class=\"line\">    scheduler.add_job(tick, <span class=\"string\">&#x27;cron&#x27;</span>, day_of_week=<span class=\"string\">&#x27;6&#x27;</span>, second=<span class=\"string\">&#x27;*/5&#x27;</span>)</span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">        year (int|str) – 4-digit year</span></span><br><span class=\"line\"><span class=\"string\">        month (int|str) – month (1-12)</span></span><br><span class=\"line\"><span class=\"string\">        day (int|str) – day of the (1-31)</span></span><br><span class=\"line\"><span class=\"string\">        week (int|str) – ISO week (1-53)</span></span><br><span class=\"line\"><span class=\"string\">        day_of_week (int|str) – number or name of weekday (0-6 or mon,tue,wed,thu,fri,sat,sun)</span></span><br><span class=\"line\"><span class=\"string\">        hour (int|str) – hour (0-23)</span></span><br><span class=\"line\"><span class=\"string\">        minute (int|str) – minute (0-59)</span></span><br><span class=\"line\"><span class=\"string\">        second (int|str) – second (0-59)</span></span><br><span class=\"line\"><span class=\"string\">        </span></span><br><span class=\"line\"><span class=\"string\">        start_date (datetime|str) – earliest possible date/time to trigger on (inclusive)</span></span><br><span class=\"line\"><span class=\"string\">        end_date (datetime|str) – latest possible date/time to trigger on (inclusive)</span></span><br><span class=\"line\"><span class=\"string\">        timezone (datetime.tzinfo|str) – time zone to use for the date/time calculations (defaults to scheduler timezone)</span></span><br><span class=\"line\"><span class=\"string\">    </span></span><br><span class=\"line\"><span class=\"string\">        *    any    Fire on every value</span></span><br><span class=\"line\"><span class=\"string\">        */a    any    Fire every a values, starting from the minimum</span></span><br><span class=\"line\"><span class=\"string\">        a-b    any    Fire on any value within the a-b range (a must be smaller than b)</span></span><br><span class=\"line\"><span class=\"string\">        a-b/c    any    Fire every c values within the a-b range</span></span><br><span class=\"line\"><span class=\"string\">        xth y    day    Fire on the x -th occurrence of weekday y within the month</span></span><br><span class=\"line\"><span class=\"string\">        last x    day    Fire on the last occurrence of weekday x within the month</span></span><br><span class=\"line\"><span class=\"string\">        last    day    Fire on the last day within the month</span></span><br><span class=\"line\"><span class=\"string\">        x,y,z    any    Fire on any matching expression; can combine any number of any of the above expressions</span></span><br><span class=\"line\"><span class=\"string\">    &#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Press Ctrl+&#123;0&#125; to exit&#x27;</span>.<span class=\"built_in\">format</span>(<span class=\"string\">&#x27;Break&#x27;</span> <span class=\"keyword\">if</span> os.name == <span class=\"string\">&#x27;nt&#x27;</span> <span class=\"keyword\">else</span> <span class=\"string\">&#x27;C&#x27;</span>))</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        scheduler.start()    <span class=\"comment\">#采用的是阻塞的方式，只有一个线程专职做调度的任务</span></span><br><span class=\"line\">    <span class=\"keyword\">except</span> (KeyboardInterrupt, SystemExit):</span><br><span class=\"line\">        <span class=\"comment\"># Not strictly necessary if daemonic mode is enabled but should be done if possible</span></span><br><span class=\"line\">        scheduler.shutdown()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Exit The Job!&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://www.cnblogs.com/cangqinglang/p/14338220.html\">转自此链接</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"定时任务设置：\"><a href=\"#定时任务设置：\" class=\"headerlink\" title=\"定时任务设置：\"></a>定时任务设置：</h2><p>定时任务，有阻塞和非阻塞方式两种，这个部分需要取分清楚:</p>\n<ul>\n<li><p><code>from apscheduler.schedulers.background import BackgroundScheduler</code> 这个是非阻塞的；</p>\n</li>\n<li><p><code>from apscheduler.schedulers.blocking import BlockingScheduler</code> 这个是阻塞的，在没有其他主程序时，就需要用阻塞的方式，不然代码执行完主程序就结束了。</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># coding=utf-8</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">Demonstrates how to use the background scheduler to schedule a job that executes on 3 second</span></span><br><span class=\"line\"><span class=\"string\">intervals.</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">from</span> datetime <span class=\"keyword\">import</span> datetime</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">from</span> apscheduler.schedulers.background <span class=\"keyword\">import</span> BackgroundScheduler</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">tick</span>():</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Tick! The time is: %s&#x27;</span> % datetime.now())</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    scheduler = BackgroundScheduler()</span><br><span class=\"line\">    scheduler.add_job(tick, <span class=\"string\">&#x27;interval&#x27;</span>, seconds=<span class=\"number\">3</span>)　　<span class=\"comment\">#间隔3秒钟执行一次</span></span><br><span class=\"line\">    scheduler.start()    <span class=\"comment\">#这里的调度任务是独立的一个线程</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Press Ctrl+&#123;0&#125; to exit&#x27;</span>.<span class=\"built_in\">format</span>(<span class=\"string\">&#x27;Break&#x27;</span> <span class=\"keyword\">if</span> os.name == <span class=\"string\">&#x27;nt&#x27;</span> <span class=\"keyword\">else</span> <span class=\"string\">&#x27;C&#x27;</span>))</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"comment\"># This is here to simulate application activity (which keeps the main thread alive).</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">            time.sleep(<span class=\"number\">2</span>)    <span class=\"comment\">#其他任务是独立的线程执行</span></span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;sleep!&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> (KeyboardInterrupt, SystemExit):</span><br><span class=\"line\">        <span class=\"comment\"># Not strictly necessary if daemonic mode is enabled but should be done if possible</span></span><br><span class=\"line\">        scheduler.shutdown()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Exit The Job!&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"非阻塞调度，在指定的时间执行一次\"><a href=\"#非阻塞调度，在指定的时间执行一次\" class=\"headerlink\" title=\"非阻塞调度，在指定的时间执行一次\"></a>非阻塞调度，在指定的时间执行一次</h1><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># coding=utf-8</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">Demonstrates how to use the background scheduler to schedule a job that executes on 3 second</span></span><br><span class=\"line\"><span class=\"string\">intervals.</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">from</span> datetime <span class=\"keyword\">import</span> datetime</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">from</span> apscheduler.schedulers.background <span class=\"keyword\">import</span> BackgroundScheduler</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">tick</span>():</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Tick! The time is: %s&#x27;</span> % datetime.now())</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    scheduler = BackgroundScheduler()</span><br><span class=\"line\">    <span class=\"comment\">#scheduler.add_job(tick, &#x27;interval&#x27;, seconds=3)</span></span><br><span class=\"line\">    scheduler.add_job(tick, <span class=\"string\">&#x27;date&#x27;</span>, run_date=<span class=\"string\">&#x27;2016-02-14 15:01:05&#x27;</span>)　　<span class=\"comment\">#在指定的时间，只执行一次</span></span><br><span class=\"line\">    scheduler.start()    <span class=\"comment\">#这里的调度任务是独立的一个线程</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Press Ctrl+&#123;0&#125; to exit&#x27;</span>.<span class=\"built_in\">format</span>(<span class=\"string\">&#x27;Break&#x27;</span> <span class=\"keyword\">if</span> os.name == <span class=\"string\">&#x27;nt&#x27;</span> <span class=\"keyword\">else</span> <span class=\"string\">&#x27;C&#x27;</span>))</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"comment\"># This is here to simulate application activity (which keeps the main thread alive).</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">            time.sleep(<span class=\"number\">2</span>)    <span class=\"comment\">#其他任务是独立的线程执行</span></span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;sleep!&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> (KeyboardInterrupt, SystemExit):</span><br><span class=\"line\">        <span class=\"comment\"># Not strictly necessary if daemonic mode is enabled but should be done if possible</span></span><br><span class=\"line\">        scheduler.shutdown()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Exit The Job!&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"非阻塞的方式，采用cron的方式执行\"><a href=\"#非阻塞的方式，采用cron的方式执行\" class=\"headerlink\" title=\"非阻塞的方式，采用cron的方式执行\"></a>非阻塞的方式，采用cron的方式执行</h1><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># coding=utf-8</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">Demonstrates how to use the background scheduler to schedule a job that executes on 3 second</span></span><br><span class=\"line\"><span class=\"string\">intervals.</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">from</span> datetime <span class=\"keyword\">import</span> datetime</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">from</span> apscheduler.schedulers.background <span class=\"keyword\">import</span> BackgroundScheduler</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">tick</span>():</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Tick! The time is: %s&#x27;</span> % datetime.now())</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    scheduler = BackgroundScheduler()</span><br><span class=\"line\">    <span class=\"comment\">#scheduler.add_job(tick, &#x27;interval&#x27;, seconds=3)</span></span><br><span class=\"line\">    <span class=\"comment\">#scheduler.add_job(tick, &#x27;date&#x27;, run_date=&#x27;2016-02-14 15:01:05&#x27;)</span></span><br><span class=\"line\">    scheduler.add_job(tick, <span class=\"string\">&#x27;cron&#x27;</span>, day_of_week=<span class=\"string\">&#x27;6&#x27;</span>, second=<span class=\"string\">&#x27;*/5&#x27;</span>)</span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">        year (int|str) – 4-digit year</span></span><br><span class=\"line\"><span class=\"string\">        month (int|str) – month (1-12)</span></span><br><span class=\"line\"><span class=\"string\">        day (int|str) – day of the (1-31)</span></span><br><span class=\"line\"><span class=\"string\">        week (int|str) – ISO week (1-53)</span></span><br><span class=\"line\"><span class=\"string\">        day_of_week (int|str) – number or name of weekday (0-6 or mon,tue,wed,thu,fri,sat,sun)</span></span><br><span class=\"line\"><span class=\"string\">        hour (int|str) – hour (0-23)</span></span><br><span class=\"line\"><span class=\"string\">        minute (int|str) – minute (0-59)</span></span><br><span class=\"line\"><span class=\"string\">        second (int|str) – second (0-59)</span></span><br><span class=\"line\"><span class=\"string\">        </span></span><br><span class=\"line\"><span class=\"string\">        start_date (datetime|str) – earliest possible date/time to trigger on (inclusive)</span></span><br><span class=\"line\"><span class=\"string\">        end_date (datetime|str) – latest possible date/time to trigger on (inclusive)</span></span><br><span class=\"line\"><span class=\"string\">        timezone (datetime.tzinfo|str) – time zone to use for the date/time calculations (defaults to scheduler timezone)</span></span><br><span class=\"line\"><span class=\"string\">    </span></span><br><span class=\"line\"><span class=\"string\">        *    any    Fire on every value</span></span><br><span class=\"line\"><span class=\"string\">        */a    any    Fire every a values, starting from the minimum</span></span><br><span class=\"line\"><span class=\"string\">        a-b    any    Fire on any value within the a-b range (a must be smaller than b)</span></span><br><span class=\"line\"><span class=\"string\">        a-b/c    any    Fire every c values within the a-b range</span></span><br><span class=\"line\"><span class=\"string\">        xth y    day    Fire on the x -th occurrence of weekday y within the month</span></span><br><span class=\"line\"><span class=\"string\">        last x    day    Fire on the last occurrence of weekday x within the month</span></span><br><span class=\"line\"><span class=\"string\">        last    day    Fire on the last day within the month</span></span><br><span class=\"line\"><span class=\"string\">        x,y,z    any    Fire on any matching expression; can combine any number of any of the above expressions</span></span><br><span class=\"line\"><span class=\"string\">    &#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    scheduler.start()    <span class=\"comment\">#这里的调度任务是独立的一个线程</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Press Ctrl+&#123;0&#125; to exit&#x27;</span>.<span class=\"built_in\">format</span>(<span class=\"string\">&#x27;Break&#x27;</span> <span class=\"keyword\">if</span> os.name == <span class=\"string\">&#x27;nt&#x27;</span> <span class=\"keyword\">else</span> <span class=\"string\">&#x27;C&#x27;</span>))</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"comment\"># This is here to simulate application activity (which keeps the main thread alive).</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">            time.sleep(<span class=\"number\">2</span>)    <span class=\"comment\">#其他任务是独立的线程执行</span></span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;sleep!&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> (KeyboardInterruptSystemExit):</span><br><span class=\"line\">        <span class=\"comment\"># Not strictly necessary if daemonic mode is enabled but should be done if possible</span></span><br><span class=\"line\">        scheduler.shutdown()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Exit The Job!&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"阻塞的方式，间隔3秒执行一次\"><a href=\"#阻塞的方式，间隔3秒执行一次\" class=\"headerlink\" title=\"阻塞的方式，间隔3秒执行一次\"></a>阻塞的方式，间隔3秒执行一次</h1><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># coding=utf-8</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">Demonstrates how to use the background scheduler to schedule a job that executes on 3 second</span></span><br><span class=\"line\"><span class=\"string\">intervals.</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">from</span> datetime <span class=\"keyword\">import</span> datetime</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">from</span> apscheduler.schedulers.blocking <span class=\"keyword\">import</span> BlockingScheduler</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">tick</span>():</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Tick! The time is: %s&#x27;</span> % datetime.now())</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    scheduler = BlockingScheduler()</span><br><span class=\"line\">    scheduler.add_job(tick, <span class=\"string\">&#x27;interval&#x27;</span>, seconds=<span class=\"number\">3</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Press Ctrl+&#123;0&#125; to exit&#x27;</span>.<span class=\"built_in\">format</span>(<span class=\"string\">&#x27;Break&#x27;</span> <span class=\"keyword\">if</span> os.name == <span class=\"string\">&#x27;nt&#x27;</span> <span class=\"keyword\">else</span> <span class=\"string\">&#x27;C&#x27;</span>))</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        scheduler.start()    <span class=\"comment\">#采用的是阻塞的方式，只有一个线程专职做调度的任务</span></span><br><span class=\"line\">    <span class=\"keyword\">except</span> (KeyboardInterrupt, SystemExit):</span><br><span class=\"line\">        <span class=\"comment\"># Not strictly necessary if daemonic mode is enabled but should be done if possible</span></span><br><span class=\"line\">        scheduler.shutdown()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Exit The Job!&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"采用阻塞的方法，只执行一次\"><a href=\"#采用阻塞的方法，只执行一次\" class=\"headerlink\" title=\"采用阻塞的方法，只执行一次\"></a>采用阻塞的方法，只执行一次</h1><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># coding=utf-8</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">Demonstrates how to use the background scheduler to schedule a job that executes on 3 second</span></span><br><span class=\"line\"><span class=\"string\">intervals.</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">from</span> datetime <span class=\"keyword\">import</span> datetime</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">from</span> apscheduler.schedulers.blocking <span class=\"keyword\">import</span> BlockingScheduler</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">tick</span>():</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Tick! The time is: %s&#x27;</span> % datetime.now())</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    scheduler = BlockingScheduler()</span><br><span class=\"line\">    scheduler.add_job(tick, <span class=\"string\">&#x27;date&#x27;</span>, run_date=<span class=\"string\">&#x27;2016-02-14 15:23:05&#x27;</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Press Ctrl+&#123;0&#125; to exit&#x27;</span>.<span class=\"built_in\">format</span>(<span class=\"string\">&#x27;Break&#x27;</span> <span class=\"keyword\">if</span> os.name == <span class=\"string\">&#x27;nt&#x27;</span> <span class=\"keyword\">else</span> <span class=\"string\">&#x27;C&#x27;</span>))</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        scheduler.start()    <span class=\"comment\">#采用的是阻塞的方式，只有一个线程专职做调度的任务</span></span><br><span class=\"line\">    <span class=\"keyword\">except</span> (KeyboardInterrupt, SystemExit):</span><br><span class=\"line\">        <span class=\"comment\"># Not strictly necessary if daemonic mode is enabled but should be done if possible</span></span><br><span class=\"line\">        scheduler.shutdown()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Exit The Job!&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"采用阻塞的方式，使用cron的调度方法\"><a href=\"#采用阻塞的方式，使用cron的调度方法\" class=\"headerlink\" title=\"采用阻塞的方式，使用cron的调度方法\"></a>采用阻塞的方式，使用cron的调度方法</h1><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># coding=utf-8</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">Demonstrates how to use the background scheduler to schedule a job that executes on 3 second</span></span><br><span class=\"line\"><span class=\"string\">intervals.</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">from</span> datetime <span class=\"keyword\">import</span> datetime</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">from</span> apscheduler.schedulers.blocking <span class=\"keyword\">import</span> BlockingScheduler</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">tick</span>():</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Tick! The time is: %s&#x27;</span> % datetime.now())</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    scheduler = BlockingScheduler()</span><br><span class=\"line\">    scheduler.add_job(tick, <span class=\"string\">&#x27;cron&#x27;</span>, day_of_week=<span class=\"string\">&#x27;6&#x27;</span>, second=<span class=\"string\">&#x27;*/5&#x27;</span>)</span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">        year (int|str) – 4-digit year</span></span><br><span class=\"line\"><span class=\"string\">        month (int|str) – month (1-12)</span></span><br><span class=\"line\"><span class=\"string\">        day (int|str) – day of the (1-31)</span></span><br><span class=\"line\"><span class=\"string\">        week (int|str) – ISO week (1-53)</span></span><br><span class=\"line\"><span class=\"string\">        day_of_week (int|str) – number or name of weekday (0-6 or mon,tue,wed,thu,fri,sat,sun)</span></span><br><span class=\"line\"><span class=\"string\">        hour (int|str) – hour (0-23)</span></span><br><span class=\"line\"><span class=\"string\">        minute (int|str) – minute (0-59)</span></span><br><span class=\"line\"><span class=\"string\">        second (int|str) – second (0-59)</span></span><br><span class=\"line\"><span class=\"string\">        </span></span><br><span class=\"line\"><span class=\"string\">        start_date (datetime|str) – earliest possible date/time to trigger on (inclusive)</span></span><br><span class=\"line\"><span class=\"string\">        end_date (datetime|str) – latest possible date/time to trigger on (inclusive)</span></span><br><span class=\"line\"><span class=\"string\">        timezone (datetime.tzinfo|str) – time zone to use for the date/time calculations (defaults to scheduler timezone)</span></span><br><span class=\"line\"><span class=\"string\">    </span></span><br><span class=\"line\"><span class=\"string\">        *    any    Fire on every value</span></span><br><span class=\"line\"><span class=\"string\">        */a    any    Fire every a values, starting from the minimum</span></span><br><span class=\"line\"><span class=\"string\">        a-b    any    Fire on any value within the a-b range (a must be smaller than b)</span></span><br><span class=\"line\"><span class=\"string\">        a-b/c    any    Fire every c values within the a-b range</span></span><br><span class=\"line\"><span class=\"string\">        xth y    day    Fire on the x -th occurrence of weekday y within the month</span></span><br><span class=\"line\"><span class=\"string\">        last x    day    Fire on the last occurrence of weekday x within the month</span></span><br><span class=\"line\"><span class=\"string\">        last    day    Fire on the last day within the month</span></span><br><span class=\"line\"><span class=\"string\">        x,y,z    any    Fire on any matching expression; can combine any number of any of the above expressions</span></span><br><span class=\"line\"><span class=\"string\">    &#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Press Ctrl+&#123;0&#125; to exit&#x27;</span>.<span class=\"built_in\">format</span>(<span class=\"string\">&#x27;Break&#x27;</span> <span class=\"keyword\">if</span> os.name == <span class=\"string\">&#x27;nt&#x27;</span> <span class=\"keyword\">else</span> <span class=\"string\">&#x27;C&#x27;</span>))</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        scheduler.start()    <span class=\"comment\">#采用的是阻塞的方式，只有一个线程专职做调度的任务</span></span><br><span class=\"line\">    <span class=\"keyword\">except</span> (KeyboardInterrupt, SystemExit):</span><br><span class=\"line\">        <span class=\"comment\"># Not strictly necessary if daemonic mode is enabled but should be done if possible</span></span><br><span class=\"line\">        scheduler.shutdown()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Exit The Job!&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://www.cnblogs.com/cangqinglang/p/14338220.html\">转自此链接</a></p>\n"},{"title":"requests发送post请求返回405的处理方法","date":"2022-07-20T03:11:34.000Z","_content":"## Requests 请求返回405\n\n> 主要是因为API请求方式要求是json,但我们在分析不清楚的接口时，一般都按照惯性在传递参数的时候是以data方式，所以在使用requests时，不仅要用data=  xxx  ，还要看json= xxx  这种场景。\n\n下面这个代码当时使用请求时，是使用的是：res_data = requests.post(apiurl,**data=**body,headers=headers)   这里你的data= 并不是网站所需要的，其需要的是json,所以改成json= 就可以了。\n\n```Python\ndef get_cookie():\n    \"\"\"\n    从明道云拉取cookie信息\n    \"\"\"\n    apiurl = 'https://cooperation.xxx.com:443/api/v2/open/worksheet/getFilterRows'\n    headers = {\"User-Agent\": \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/101.0.4951.54 Safari/537.36 Edg/101.0.1210.39\"}\n    body = {\n              \"appKey\": \"f7b8e6816d39a931\",\n              \"sign\": \"ODlkNTVhNDdjZDhjNmYwODhjYjExZTU4NGFmODFkZDQzZjRlNGMzMzJlODdhNzhmNTVjYmQ4ZTA1MzAzNzc3Mw==\",\n              \"worksheetId\": \"hxggzjxx\",\n              \"viewId\": \"634509562b5b0f8d7a182f39\",\n              \"pageSize\": 5000,\n              \"pageIndex\": 1,\n              \"filters\":[\n              {\n                \"controlId\": \"leibie\",\n                \"dataType\": 2,\n                \"spliceType\": 1,\n                \"filterType\": 2,\n                \"values\": [\"应用商店审核平台\"]}   ]\n                }\n\n    res_data = requests.post(apiurl, json=body, headers=headers)  # 关键就是这里的传参方式改成json\n    print(res_data)\n\nget_cookie()\n```","source":"_posts/request发送请求405.md","raw":"title: requests发送post请求返回405的处理方法\ncategories:\n\n  - python\n  - 爬虫\ntags:\n  - python\n  - 爬虫\n  - requests\ndate: 2022-07-20 11:11:34\n---\n## Requests 请求返回405\n\n> 主要是因为API请求方式要求是json,但我们在分析不清楚的接口时，一般都按照惯性在传递参数的时候是以data方式，所以在使用requests时，不仅要用data=  xxx  ，还要看json= xxx  这种场景。\n\n下面这个代码当时使用请求时，是使用的是：res_data = requests.post(apiurl,**data=**body,headers=headers)   这里你的data= 并不是网站所需要的，其需要的是json,所以改成json= 就可以了。\n\n```Python\ndef get_cookie():\n    \"\"\"\n    从明道云拉取cookie信息\n    \"\"\"\n    apiurl = 'https://cooperation.xxx.com:443/api/v2/open/worksheet/getFilterRows'\n    headers = {\"User-Agent\": \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/101.0.4951.54 Safari/537.36 Edg/101.0.1210.39\"}\n    body = {\n              \"appKey\": \"f7b8e6816d39a931\",\n              \"sign\": \"ODlkNTVhNDdjZDhjNmYwODhjYjExZTU4NGFmODFkZDQzZjRlNGMzMzJlODdhNzhmNTVjYmQ4ZTA1MzAzNzc3Mw==\",\n              \"worksheetId\": \"hxggzjxx\",\n              \"viewId\": \"634509562b5b0f8d7a182f39\",\n              \"pageSize\": 5000,\n              \"pageIndex\": 1,\n              \"filters\":[\n              {\n                \"controlId\": \"leibie\",\n                \"dataType\": 2,\n                \"spliceType\": 1,\n                \"filterType\": 2,\n                \"values\": [\"应用商店审核平台\"]}   ]\n                }\n\n    res_data = requests.post(apiurl, json=body, headers=headers)  # 关键就是这里的传参方式改成json\n    print(res_data)\n\nget_cookie()\n```","slug":"request发送请求405","published":1,"updated":"2022-12-31T04:20:04.888Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clciheilg0015rdxh7kw9hm2q","content":"<h2 id=\"Requests-请求返回405\"><a href=\"#Requests-请求返回405\" class=\"headerlink\" title=\"Requests 请求返回405\"></a>Requests 请求返回405</h2><blockquote>\n<p>主要是因为API请求方式要求是json,但我们在分析不清楚的接口时，一般都按照惯性在传递参数的时候是以data方式，所以在使用requests时，不仅要用data&#x3D;  xxx  ，还要看json&#x3D; xxx  这种场景。</p>\n</blockquote>\n<p>下面这个代码当时使用请求时，是使用的是：res_data &#x3D; requests.post(apiurl,**data&#x3D;**body,headers&#x3D;headers)   这里你的data&#x3D; 并不是网站所需要的，其需要的是json,所以改成json&#x3D; 就可以了。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_cookie</span>():</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    从明道云拉取cookie信息</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    apiurl = <span class=\"string\">&#x27;https://cooperation.xxx.com:443/api/v2/open/worksheet/getFilterRows&#x27;</span></span><br><span class=\"line\">    headers = &#123;<span class=\"string\">&quot;User-Agent&quot;</span>: <span class=\"string\">&quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/101.0.4951.54 Safari/537.36 Edg/101.0.1210.39&quot;</span>&#125;</span><br><span class=\"line\">    body = &#123;</span><br><span class=\"line\">              <span class=\"string\">&quot;appKey&quot;</span>: <span class=\"string\">&quot;f7b8e6816d39a931&quot;</span>,</span><br><span class=\"line\">              <span class=\"string\">&quot;sign&quot;</span>: <span class=\"string\">&quot;ODlkNTVhNDdjZDhjNmYwODhjYjExZTU4NGFmODFkZDQzZjRlNGMzMzJlODdhNzhmNTVjYmQ4ZTA1MzAzNzc3Mw==&quot;</span>,</span><br><span class=\"line\">              <span class=\"string\">&quot;worksheetId&quot;</span>: <span class=\"string\">&quot;hxggzjxx&quot;</span>,</span><br><span class=\"line\">              <span class=\"string\">&quot;viewId&quot;</span>: <span class=\"string\">&quot;634509562b5b0f8d7a182f39&quot;</span>,</span><br><span class=\"line\">              <span class=\"string\">&quot;pageSize&quot;</span>: <span class=\"number\">5000</span>,</span><br><span class=\"line\">              <span class=\"string\">&quot;pageIndex&quot;</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">              <span class=\"string\">&quot;filters&quot;</span>:[</span><br><span class=\"line\">              &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;controlId&quot;</span>: <span class=\"string\">&quot;leibie&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;dataType&quot;</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;spliceType&quot;</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;filterType&quot;</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;values&quot;</span>: [<span class=\"string\">&quot;应用商店审核平台&quot;</span>]&#125;   ]</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    res_data = requests.post(apiurl, json=body, headers=headers)  <span class=\"comment\"># 关键就是这里的传参方式改成json</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(res_data)</span><br><span class=\"line\"></span><br><span class=\"line\">get_cookie()</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Requests-请求返回405\"><a href=\"#Requests-请求返回405\" class=\"headerlink\" title=\"Requests 请求返回405\"></a>Requests 请求返回405</h2><blockquote>\n<p>主要是因为API请求方式要求是json,但我们在分析不清楚的接口时，一般都按照惯性在传递参数的时候是以data方式，所以在使用requests时，不仅要用data&#x3D;  xxx  ，还要看json&#x3D; xxx  这种场景。</p>\n</blockquote>\n<p>下面这个代码当时使用请求时，是使用的是：res_data &#x3D; requests.post(apiurl,**data&#x3D;**body,headers&#x3D;headers)   这里你的data&#x3D; 并不是网站所需要的，其需要的是json,所以改成json&#x3D; 就可以了。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_cookie</span>():</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    从明道云拉取cookie信息</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    apiurl = <span class=\"string\">&#x27;https://cooperation.xxx.com:443/api/v2/open/worksheet/getFilterRows&#x27;</span></span><br><span class=\"line\">    headers = &#123;<span class=\"string\">&quot;User-Agent&quot;</span>: <span class=\"string\">&quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/101.0.4951.54 Safari/537.36 Edg/101.0.1210.39&quot;</span>&#125;</span><br><span class=\"line\">    body = &#123;</span><br><span class=\"line\">              <span class=\"string\">&quot;appKey&quot;</span>: <span class=\"string\">&quot;f7b8e6816d39a931&quot;</span>,</span><br><span class=\"line\">              <span class=\"string\">&quot;sign&quot;</span>: <span class=\"string\">&quot;ODlkNTVhNDdjZDhjNmYwODhjYjExZTU4NGFmODFkZDQzZjRlNGMzMzJlODdhNzhmNTVjYmQ4ZTA1MzAzNzc3Mw==&quot;</span>,</span><br><span class=\"line\">              <span class=\"string\">&quot;worksheetId&quot;</span>: <span class=\"string\">&quot;hxggzjxx&quot;</span>,</span><br><span class=\"line\">              <span class=\"string\">&quot;viewId&quot;</span>: <span class=\"string\">&quot;634509562b5b0f8d7a182f39&quot;</span>,</span><br><span class=\"line\">              <span class=\"string\">&quot;pageSize&quot;</span>: <span class=\"number\">5000</span>,</span><br><span class=\"line\">              <span class=\"string\">&quot;pageIndex&quot;</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">              <span class=\"string\">&quot;filters&quot;</span>:[</span><br><span class=\"line\">              &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;controlId&quot;</span>: <span class=\"string\">&quot;leibie&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;dataType&quot;</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;spliceType&quot;</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;filterType&quot;</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;values&quot;</span>: [<span class=\"string\">&quot;应用商店审核平台&quot;</span>]&#125;   ]</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    res_data = requests.post(apiurl, json=body, headers=headers)  <span class=\"comment\"># 关键就是这里的传参方式改成json</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(res_data)</span><br><span class=\"line\"></span><br><span class=\"line\">get_cookie()</span><br></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[{"post_id":"clciheilb000irdxh7blsb3p8","category_id":"clciheil50004rdxh8ken9c5c","_id":"clciheile000qrdxha2372khd"},{"post_id":"clciheilc000lrdxh5l1m7q1n","category_id":"clciheil50004rdxh8ken9c5c","_id":"clciheile000trdxhdymcbyiq"},{"post_id":"clciheil70008rdxh2knm292y","category_id":"clciheilb000jrdxh7hglaqwg","_id":"clciheilf000yrdxhcx7tboou"},{"post_id":"clciheil10001rdxh240j3qio","category_id":"clciheil50004rdxh8ken9c5c","_id":"clciheilf0011rdxh9jascnmw"},{"post_id":"clciheil10001rdxh240j3qio","category_id":"clciheild000nrdxhbrmpaffw","_id":"clciheilg0016rdxhbpf24rxi"},{"post_id":"clciheilf000xrdxh3ak12xuw","category_id":"clciheil50004rdxh8ken9c5c","_id":"clciheilg0017rdxh53gngfx4"},{"post_id":"clciheilf0010rdxh1dtignlc","category_id":"clciheile000vrdxh0a8sb0ml","_id":"clciheilh001ardxh8qa2gr5x"},{"post_id":"clciheil40003rdxhfolwhwtg","category_id":"clciheil50004rdxh8ken9c5c","_id":"clciheilh001irdxheqpt3ela"},{"post_id":"clciheil40003rdxhfolwhwtg","category_id":"clciheilg0018rdxhbiinfiio","_id":"clciheili001krdxheg489lz5"},{"post_id":"clciheilb000hrdxheeg48oki","category_id":"clciheilh001hrdxhai4y7ql4","_id":"clciheili001ordxhbfs366ax"},{"post_id":"clciheil60007rdxh80jz0304","category_id":"clciheil50004rdxh8ken9c5c","_id":"clciheilj001srdxhb2ju7mrb"},{"post_id":"clciheil60007rdxh80jz0304","category_id":"clciheili001mrdxhc44j0anl","_id":"clciheilj001urdxhhwrc1y43"},{"post_id":"clciheilc000mrdxh61y22tlf","category_id":"clciheile000vrdxh0a8sb0ml","_id":"clciheilj001vrdxh9mtc1ehp"},{"post_id":"clciheild000prdxhciwr8ner","category_id":"clciheili001rrdxh5x1hbkbr","_id":"clciheilj001yrdxhcl1yalm5"},{"post_id":"clciheile000srdxhb1viaueu","category_id":"clciheilj001wrdxhg90hca3p","_id":"clciheilk0021rdxhhbxbc1en"},{"post_id":"clciheil70009rdxh74q19m7d","category_id":"clciheile000vrdxh0a8sb0ml","_id":"clciheilk0024rdxhh9139w9u"},{"post_id":"clciheil70009rdxh74q19m7d","category_id":"clciheilj001zrdxhehae41sn","_id":"clciheilk0027rdxh4wri1ori"},{"post_id":"clciheilg0015rdxh7kw9hm2q","category_id":"clciheile000vrdxh0a8sb0ml","_id":"clciheill0029rdxh9o4vdkix"},{"post_id":"clciheilg0015rdxh7kw9hm2q","category_id":"clciheilk0022rdxhdd3c5u9z","_id":"clciheill002brdxh4ny5gwtm"},{"post_id":"clciheil9000drdxhcchlh5y0","category_id":"clciheile000vrdxh0a8sb0ml","_id":"clciheill002crdxh16ni0o7v"},{"post_id":"clciheil9000drdxhcchlh5y0","category_id":"clciheilk0022rdxhdd3c5u9z","_id":"clciheill002drdxh54kzf0tf"},{"post_id":"clciheila000erdxh9us47oj4","category_id":"clciheile000vrdxh0a8sb0ml","_id":"clciheill002grdxh1c74bo18"},{"post_id":"clciheila000erdxh9us47oj4","category_id":"clciheilk0028rdxh9d164r5h","_id":"clciheill002jrdxh1fwa9blq"}],"PostTag":[{"post_id":"clciheil10001rdxh240j3qio","tag_id":"clciheil60005rdxh3p6h0o5w","_id":"clciheil9000crdxh7q1c0ug6"},{"post_id":"clciheil40003rdxhfolwhwtg","tag_id":"clciheil60005rdxh3p6h0o5w","_id":"clciheile000rrdxha60u7ukn"},{"post_id":"clciheil40003rdxhfolwhwtg","tag_id":"clciheila000grdxhenl94nk8","_id":"clciheile000urdxhbmhg3fzj"},{"post_id":"clciheil40003rdxhfolwhwtg","tag_id":"clciheilc000krdxh3w2m6swv","_id":"clciheilf000zrdxhf8p670a4"},{"post_id":"clciheilf000xrdxh3ak12xuw","tag_id":"clciheil60005rdxh3p6h0o5w","_id":"clciheilf0012rdxheqwy5c5r"},{"post_id":"clciheil60007rdxh80jz0304","tag_id":"clciheil60005rdxh3p6h0o5w","_id":"clciheilh001brdxh9s89bmns"},{"post_id":"clciheil60007rdxh80jz0304","tag_id":"clciheile000wrdxh46iyaksh","_id":"clciheilh001crdxhbx4geke6"},{"post_id":"clciheil70008rdxh2knm292y","tag_id":"clciheilh0019rdxh1y5881v0","_id":"clciheilh001grdxh6lxza6z9"},{"post_id":"clciheil70009rdxh74q19m7d","tag_id":"clciheilh001erdxhgecwcean","_id":"clciheili001lrdxh5scv64iv"},{"post_id":"clciheil9000drdxhcchlh5y0","tag_id":"clciheilh001erdxhgecwcean","_id":"clciheill002frdxh9l0g7w87"},{"post_id":"clciheil9000drdxhcchlh5y0","tag_id":"clciheili001nrdxh7n2x18i8","_id":"clciheill002hrdxhep488yvb"},{"post_id":"clciheil9000drdxhcchlh5y0","tag_id":"clciheili001qrdxhavg14os0","_id":"clciheill002krdxhfyi7hqn1"},{"post_id":"clciheil9000drdxhcchlh5y0","tag_id":"clciheilj001trdxh5jcmfekg","_id":"clciheill002lrdxh39htbdlh"},{"post_id":"clciheil9000drdxhcchlh5y0","tag_id":"clciheilj001xrdxhflged0of","_id":"clciheilm002nrdxhhtz32azb"},{"post_id":"clciheil9000drdxhcchlh5y0","tag_id":"clciheilj0020rdxh85xc4zdy","_id":"clciheilm002ordxh1h57chek"},{"post_id":"clciheil9000drdxhcchlh5y0","tag_id":"clciheilk0023rdxhedlpedrt","_id":"clciheilm002qrdxh8s0de177"},{"post_id":"clciheil9000drdxhcchlh5y0","tag_id":"clciheilk0026rdxh54205e93","_id":"clciheilm002rrdxh83gm22fa"},{"post_id":"clciheil9000drdxhcchlh5y0","tag_id":"clciheill002ardxh19xtgj2f","_id":"clciheilm002trdxh3tzu573h"},{"post_id":"clciheila000erdxh9us47oj4","tag_id":"clciheilh001erdxhgecwcean","_id":"clciheilm002urdxheavqd0pt"},{"post_id":"clciheila000erdxh9us47oj4","tag_id":"clciheill002irdxhecfq885b","_id":"clciheilm002vrdxhfzxe5i0k"},{"post_id":"clciheilb000hrdxheeg48oki","tag_id":"clciheill002mrdxh79t7cf28","_id":"clciheilm002xrdxh3r1a8a6g"},{"post_id":"clciheilb000hrdxheeg48oki","tag_id":"clciheilm002prdxh5qky8smk","_id":"clciheilm002yrdxhex5idgzn"},{"post_id":"clciheilb000irdxh7blsb3p8","tag_id":"clciheil60005rdxh3p6h0o5w","_id":"clciheilm0030rdxhb83haqw4"},{"post_id":"clciheilb000irdxh7blsb3p8","tag_id":"clciheilm002srdxh6af12ro3","_id":"clciheilm0031rdxhhu00bjnm"},{"post_id":"clciheilc000lrdxh5l1m7q1n","tag_id":"clciheil60005rdxh3p6h0o5w","_id":"clciheiln0033rdxhezybbtwg"},{"post_id":"clciheilc000lrdxh5l1m7q1n","tag_id":"clciheilm002wrdxh04vchbh7","_id":"clciheiln0034rdxh1vr3584d"},{"post_id":"clciheilc000mrdxh61y22tlf","tag_id":"clciheilh001erdxhgecwcean","_id":"clciheiln0036rdxhb9ia7mcx"},{"post_id":"clciheilc000mrdxh61y22tlf","tag_id":"clciheiln0032rdxhg9xz9we7","_id":"clciheiln0037rdxh17wj8fo3"},{"post_id":"clciheild000prdxhciwr8ner","tag_id":"clciheiln0035rdxhdc7i8q55","_id":"clciheiln003ardxhffp1aame"},{"post_id":"clciheild000prdxhciwr8ner","tag_id":"clciheiln0038rdxhew6rgao2","_id":"clciheiln003brdxh10rj54oh"},{"post_id":"clciheile000srdxhb1viaueu","tag_id":"clciheiln0039rdxh8gmq4305","_id":"clciheilo003drdxh39wje4uf"},{"post_id":"clciheilf0010rdxh1dtignlc","tag_id":"clciheilh001erdxhgecwcean","_id":"clciheilo003grdxh9dwm9ngf"},{"post_id":"clciheilf0010rdxh1dtignlc","tag_id":"clciheilo003erdxhc2kugs1v","_id":"clciheilo003hrdxh48d96are"},{"post_id":"clciheilg0015rdxh7kw9hm2q","tag_id":"clciheilh001erdxhgecwcean","_id":"clciheilo003krdxh2vxdgub8"},{"post_id":"clciheilg0015rdxh7kw9hm2q","tag_id":"clciheili001nrdxh7n2x18i8","_id":"clciheilo003lrdxhhee2g6cr"},{"post_id":"clciheilg0015rdxh7kw9hm2q","tag_id":"clciheilj001trdxh5jcmfekg","_id":"clciheilo003mrdxh9tg7fl97"}],"Tag":[{"name":"linux","_id":"clciheil60005rdxh3p6h0o5w"},{"name":"ftp","_id":"clciheila000grdxhenl94nk8"},{"name":"NFS","_id":"clciheilc000krdxh3w2m6swv"},{"name":"shell","_id":"clciheile000wrdxh46iyaksh"},{"name":"xargs","_id":"clciheilg0014rdxhdksihpvu"},{"name":"IPD","_id":"clciheilh0019rdxh1y5881v0"},{"name":"python","_id":"clciheilh001erdxhgecwcean"},{"name":"爬虫","_id":"clciheili001nrdxh7n2x18i8"},{"name":"递归","_id":"clciheili001qrdxhavg14os0"},{"name":"requests","_id":"clciheilj001trdxh5jcmfekg"},{"name":"shelve","_id":"clciheilj001xrdxhflged0of"},{"name":"cookie","_id":"clciheilj0020rdxh85xc4zdy"},{"name":"session","_id":"clciheilk0023rdxhedlpedrt"},{"name":"apscheduler","_id":"clciheilk0026rdxh54205e93"},{"name":"重定向","_id":"clciheill002ardxh19xtgj2f"},{"name":"time","_id":"clciheill002irdxhecfq885b"},{"name":"Jmeter","_id":"clciheill002mrdxh79t7cf28"},{"name":"性能测试","_id":"clciheilm002prdxh5qky8smk"},{"name":"systemd","_id":"clciheilm002srdxh6af12ro3"},{"name":"扩容","_id":"clciheilm002wrdxh04vchbh7"},{"name":"面向对象","_id":"clciheiln0032rdxhg9xz9we7"},{"name":"测试理论","_id":"clciheiln0035rdxhdc7i8q55"},{"name":"验收测试","_id":"clciheiln0038rdxhew6rgao2"},{"name":"hexo","_id":"clciheiln0039rdxh8gmq4305"},{"name":"任务调度","_id":"clciheilo003erdxhc2kugs1v"}]}}