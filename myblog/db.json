{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-melody/source/melody-favicon.ico","path":"melody-favicon.ico","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-melody/source/css/404.styl","path":"css/404.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-melody/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-melody/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-melody/source/img/algolia.svg","path":"img/algolia.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-melody/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-melody/source/js/copy.js","path":"js/copy.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-melody/source/js/fancybox.js","path":"js/fancybox.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-melody/source/js/fireworks.js","path":"js/fireworks.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-melody/source/js/head.js","path":"js/head.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-melody/source/js/hexo-theme-melody.js","path":"js/hexo-theme-melody.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-melody/source/js/katex.js","path":"js/katex.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-melody/source/js/scroll.js","path":"js/scroll.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-melody/source/js/sidebar.js","path":"js/sidebar.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-melody/source/js/transition.js","path":"js/transition.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-melody/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-melody/source/js/search/algolia.js","path":"js/search/algolia.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-melody/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-melody/source/js/third-party/anime.min.js","path":"js/third-party/anime.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-melody/source/js/third-party/canvas-ribbon.js","path":"js/third-party/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-melody/source/js/third-party/jquery.fancybox.min.js","path":"js/third-party/jquery.fancybox.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-melody/source/js/third-party/jquery.min.js","path":"js/third-party/jquery.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-melody/source/js/third-party/velocity.min.js","path":"js/third-party/velocity.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-melody/source/js/third-party/velocity.ui.min.js","path":"js/third-party/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-melody/source/js/third-party/reveal/head.min.js","path":"js/third-party/reveal/head.min.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/404/index.md","hash":"3be35a66794a9de82ca96b5918f96f58ef7e4ac5","modified":1672306509000},{"_id":"source/_posts/01systemd_service.md","hash":"dc349880835584ece087f7e9a2334008da612e82","modified":1672723985041},{"_id":"source/_posts/02常见网络存储服务搭建方法 (copy).md","hash":"743dd0dfe27c571e98d8dac06e97375ac48cc4e6","modified":1672729370048},{"_id":"source/_posts/02常见网络存储服务搭建方法.md","hash":"927ccc9359c17038ef1384c6e7cf86a0c37c6c9b","modified":1672723772542},{"_id":"source/_posts/03shell_xargs.md","hash":"927ccc9359c17038ef1384c6e7cf86a0c37c6c9b","modified":1672728544409},{"_id":"source/_posts/e2e_analysis.md","hash":"0f1a40c8669246e7e2c4a398b4ec4943bd49845c","modified":1672460426296},{"_id":"source/_posts/hexo_config_algolia.md","hash":"2960a04a6d75e60deda4b0f0baeb0de7427f1bbd","modified":1672717801621},{"_id":"source/_posts/linuxmodifypasswd.md","hash":"ea4f63ffac56042ed9348c182d738884dc62b639","modified":1672460619861},{"_id":"source/_posts/python调度框架APScheduler使用详解（非阻塞模式）.md","hash":"403279b519865b95f9f042360330dac089049a91","modified":1672460444395},{"_id":"source/_posts/request发送请求405.md","hash":"763fb7b7c96889256a270bee576504918c5d8844","modified":1672460404888},{"_id":"source/categories/index.md","hash":"9d564aac6cb74b206beecbe1fe338fa1ed620f9a","modified":1672305884000},{"_id":"source/tags/index.md","hash":"cec1dd78cc8c8b5fc0bc03e117211daf7e9c1e09","modified":1672305778000},{"_id":"source/_posts/pictures/avatar/avatar.jpg","hash":"e8a9c2e581b618aec332ff4a9b49fa58c36e9be6","modified":1672393889000},{"_id":"source/_posts/pictures/e2e_analysis/01FJX.png","hash":"3f6d8601117f308d91f74e13d552646d5d778b48","modified":1672389289091},{"_id":"source/_posts/pictures/e2e_analysis/05FJX.png","hash":"1c2729ed8365a48aa72a1e7e895cf7238de202d9","modified":1672389304167},{"_id":"source/_posts/pictures/e2e_analysis/022FJX.png","hash":"4167d4aa6fae5ce25df205a3f49fc4f2524f182e","modified":1672389296047},{"_id":"node_modules/hexo-theme-melody/scripts/hexo-plugins.txt","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/js/hexo-theme-melody.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/includes/gallery/script.pug","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1672300004000},{"_id":"source/_posts/pictures/hexo_config_algolia/image-20230103113149791.png","hash":"2b49a35d8aa9178f62c8d50af863e672de15ec1e","modified":1672716709858},{"_id":"node_modules/hexo-theme-melody/.travis.demo.yml","hash":"4482d40a58a035ef96888dfc4ed96c861b8f78a5","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/CHANGELOG.md","hash":"a3fdc0bf95738aa013b0de6dcd1c6523512dcddf","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/FAQ.md","hash":"5984dd5335f8ead64f14d3885de5cc5ef09dfff8","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/LICENSE","hash":"dbbc2e6e42affa5ac962826f01bffa8c7aecd6b8","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/README.md","hash":"f0197363be56ef95b40854c4115bac4c8bbe93e8","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/_config.yml","hash":"5efa43b59d4112bacb83f2a23c50fc20948d57cf","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/package.json","hash":"7ec07ad0717da8ca91fb04d264902edbd2a550c0","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/languages/default.yml","hash":"2af19daf22ec99daf2482af9dac5c3ff641497c4","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/languages/en.yml","hash":"2af19daf22ec99daf2482af9dac5c3ff641497c4","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/languages/zh-Hans.yml","hash":"68c5794ec57227daec2e3afe2c5d502fa0a7092a","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/404.pug","hash":"0ad5d251ba70edad5c04a45d13ca6a8db3bf7b42","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/archive.pug","hash":"2133e9f369dac19b9f843fc956521f864ace7567","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/category.pug","hash":"ea5f82d69e586f293f428f3b237c17bf873b4f03","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/gallery.pug","hash":"c083a7bbf5f46305daed74632aef3403b7d94dc7","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/index.pug","hash":"5e969c09fa5902829ad0b14c0af8d432bd4c7078","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/page.pug","hash":"09c1c7c4ffff114c886b097ec82e046399ab79e1","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/post.pug","hash":"436bb1b7d14e29cba8010d3ea14df19681fbb5fe","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/slides.pug","hash":"1e84a92d5b854dd233e0b511d59c1cd7c8d647a1","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/tag.pug","hash":"ca333911bc97bc9d3eba6e1bc05e96b209ecedfb","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/scripts/gallery-tag.js","hash":"74e2e95f8daec619578f4b7dd1ed77cd5907f37e","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/scripts/replace-config.js","hash":"a8e9a18b2798d3c694a3efa8036f82046c3eb037","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/melody-favicon.ico","hash":"e33c804e570eb238fe095ed28346dd1b3a0666ae","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/includes/additional-js.pug","hash":"c4ca62466684758d5a26e5866f9ed87b5c9401b8","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/includes/config.pug","hash":"66e384b1cfe58a57b80f7dff0388bf00bb8bfdf8","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/includes/footer.pug","hash":"0e9f1778f021f1c205f0b1be83014fba576797af","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/includes/head.pug","hash":"bf287d6440011cb17d15dbaf5945517d36918800","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/includes/header.pug","hash":"f440a9741eeacfa62f0a0e7ef470a104f1cb510c","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/includes/layout.pug","hash":"58856b5048fb64e7dab75a6ae32cc2a0ad94de4f","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/includes/nav.pug","hash":"3f1fe059784df45f923587b81cc972659ed22e01","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/includes/pagination.pug","hash":"fe33a94d90836b767c42654ccc4c4de7d7f227fc","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/includes/recent-posts.pug","hash":"128c448f5bab71f59912516edff9d476ff6b8afe","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/includes/sidebar.pug","hash":"211b8ecfdb7b5dd836c87436def410a52dfa5ecd","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/css/404.styl","hash":"b7a0f8b23cb137b1a6c4fa0f9a35e06e93065b2c","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/css/index.styl","hash":"2053ba56db707e7a03796ba59f77103765b02353","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/css/var.styl","hash":"259feee66bf9c326e781bb63a177627dbe3eb539","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/img/algolia.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/img/avatar.png","hash":"a44601fac9a81dd7e392d05ea5ddc65c96b051df","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/js/copy.js","hash":"ce7f8601c7c75ced79e2e9851beec37299d49fd1","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/js/fancybox.js","hash":"2d3eaa654b2524c41dc5aba1d5e2e7cc9aaefd26","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/js/fireworks.js","hash":"4b6428da34535f0e8fe5a11976b8d89c48736500","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/js/head.js","hash":"555e9caa046d5a174af8d20c75e9e89c25aabb6c","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/js/katex.js","hash":"a5a999b357c0fd9aeacae721bf121f30d40d6726","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/js/scroll.js","hash":"e9aaeeae8958b8a06e016edbd17c84b63aea9255","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/js/sidebar.js","hash":"a42109c5a69dedc87e1aaf8cb2383fd43069677e","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/js/transition.js","hash":"11c3b82a5e9ef2bf7bd712b6c211d86426f9a23e","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/js/utils.js","hash":"f514662ad80803e1bb5f6bc653c4b9ad06ea4932","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/includes/404/404-nav.pug","hash":"4cd894857bb90fe44b55e852864692ed06588b8e","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/includes/404/layout.pug","hash":"9c7cdf16a9b9b4aa251dba9378a0f00d985101de","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/includes/comments/disqus.pug","hash":"e62b73df92566806bfb170f204295cffd7074215","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/includes/comments/gitalk.pug","hash":"86bdbc4a52024c3573bea27817394dd118b70a26","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/includes/comments/gitment.pug","hash":"0b7cd8b0b114876238ca022abda4c1fcdfaee12f","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/includes/comments/index.pug","hash":"30db5b0fb5662ecea0012b21d4de28d3963e272f","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/includes/comments/laibili.pug","hash":"97de1d1fb0459e7a2394ac2f5e449adf9b6986cb","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/includes/comments/valine.pug","hash":"bc58746ed5c8cc001ad47f1db30e3bdb1aab5fa9","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/includes/comments/vssue.pug","hash":"4ee6cea08286cbac2648a6032f73e5f8d2b88380","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/includes/comments/waline.pug","hash":"1b2cfeb2b2c67b49f94107c230a64ed0a35eae8d","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/includes/count/busuanzi.pug","hash":"4df5e63ab0113efb93f05ef781b2a7e3f34ba753","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/includes/gallery/layout.pug","hash":"8ff96c4f9afb416c5fc586c9585ae51cb6129529","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/includes/mixins/article-sort.pug","hash":"297b098dc6bba73b76bac4cf6bcd0c29d5dcb2ed","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/includes/mixins/slide.pug","hash":"91975f700b20131ab4df4d2ea3e1acc8bf2d3eef","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/includes/search/algolia.pug","hash":"44d5a061df53a276d22b3855652645d90117d0b6","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/includes/search/index.pug","hash":"b01828b37d789797aeb5433f1705cff3c540a4d5","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/includes/search/local-search.pug","hash":"f88070a84379bc06fb385e1193448fae6a8a54e1","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/includes/share/add-this.pug","hash":"17a11c1c36c9078639c2a82628ce5fc6584daffb","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/includes/share/index.pug","hash":"a2ec6da33cf5fa0ba6c8c38ec3841a0b0003ce98","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/includes/share/share-js.pug","hash":"e612725ba48711fc119f91c6196287ad13f5a2ba","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/includes/slide/layout.pug","hash":"e6963fb20340f60fe9bd2c9dbfff50decee159b3","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/includes/slide/script.pug","hash":"e19439122c18a8bca10819b635cdfed6e9135e46","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/includes/third-party/canvas-ribbon.pug","hash":"39a03f188ac415642766b062a80b1b710f3ea609","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/includes/third-party/katex.pug","hash":"79b2336ad8d921907a5b1badc10ba1651c92843b","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/includes/third-party/mathjax.pug","hash":"33b350f9826795cd59d9e277a24accc8a9bc9076","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/css/_global/index.styl","hash":"2a6195ce7e822362633ebf403c9438b42fa126bb","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/css/_highlight/diff.styl","hash":"ffdfbf088da7bf33899557395abcac0d2bffd67d","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/css/_highlight/highlight.styl","hash":"016c800bf7a0ef6d520e135ab69ef072760483cb","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/css/_highlight/theme.styl","hash":"7d85860927afa1d93b4a39febff3d95a73de4c36","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/css/_layout/comments.styl","hash":"e58602aad6792f1a5dbda0677ecb04d21ac10e97","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/css/_layout/footer.styl","hash":"ca8c816bdb144503bec7e755344fb0e4e370a7bf","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/css/_layout/head.styl","hash":"73488de3f36369c29ecd5e0be9661bb2b508548c","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/css/_layout/page.styl","hash":"38f0efbc9985d2d4e3699d9ac06ab3dba150ce6e","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/css/_layout/pagination.styl","hash":"a3f52d1f7ff1eaead8df016b2a4def6f7b4e9559","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/css/_layout/post.styl","hash":"34a421a32abb8003d7d83de53f42639be4e54daf","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/css/_layout/sidebar.styl","hash":"e8315401a6c791d00617c031be01f45df70fe7fd","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/css/_search/algolia.styl","hash":"534e5641e3efe2452db95cc25ec8da0111ceadcf","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/css/_search/index.styl","hash":"63cae4465ac54b71361c1795206534c7f2e6e5b1","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/css/_search/local-search.styl","hash":"d7970b385265fef782cdcaaf4fe68a2217625467","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/css/_third-party/jquery.fancybox.min.css","hash":"f9c94ec04062a1bfe1ef894c49e6ec33fa121778","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/css/_third-party/normalize.min.css","hash":"e12eef6d6811c132f4f2fcf6c936be384191bcaf","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/js/search/algolia.js","hash":"8d2cc7ac4a015563344a3981c3040d308489935c","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/js/search/local-search.js","hash":"c58bbe874fcdc512cca5244db487745e6a49ef48","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/js/third-party/anime.min.js","hash":"332031949d78a49e8a18611556253660574e47db","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/js/third-party/canvas-ribbon.js","hash":"8fd084e962fb2028be9f748b5cb5f53d030d1d03","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/js/third-party/jquery.fancybox.min.js","hash":"2ec3ef6c31b971ba5e58eb4a0c5ede902bbdd4af","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/js/third-party/velocity.min.js","hash":"69c85b9d6a931a7d3a5b0657e60112c31fb3b286","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/js/third-party/velocity.ui.min.js","hash":"d8124c091d19fa4072616a44a8897fabc6599fce","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/js/third-party/reveal/head.min.js","hash":"8c9495c76d5aa00d3dfb88653c362fba9f10cbb2","modified":1672300004000},{"_id":"source/_posts/pictures/hexo_config_algolia/image-20230103113638126.png","hash":"02b93d590c1fd22b1d2c4e856dd32844d6e4754a","modified":1672716998187},{"_id":"source/_posts/pictures/hexo_config_algolia/image-20230103113505830.png","hash":"3a0d425dcd30d5f72d8adc3f32faac37d4f8ebe9","modified":1672716905922},{"_id":"source/_posts/pictures/hexo_config_algolia/image-20230103113426783.png","hash":"1db09941c073a207e20748e2d3fe534d6a9bcb36","modified":1672716866844},{"_id":"node_modules/hexo-theme-melody/source/js/third-party/jquery.min.js","hash":"1055018c28ab41087ef9ccefe411606893dabea2","modified":1672300004000},{"_id":"source/_posts/pictures/e2e_analysis/03FJX.png","hash":"1bab1d556bdbe9b0f8607b8f10ac30c36330fec6","modified":1672389297527},{"_id":"source/_posts/pictures/e2e_analysis/04FJX.png","hash":"b8c89b803f2163d458724bde136468771bab0d6c","modified":1672389300263},{"_id":"source/_posts/pictures/e2e_analysis/06FJX.png","hash":"58539f0673802994edf8a49abbac5ad8d3e730c7","modified":1672389307671},{"_id":"public/404.html","hash":"4ab55f1caa54094e555ea6b70ae8aabd0a7cbe3f","modified":1672729380471},{"_id":"public/categories/index.html","hash":"7e5340c370723cf1f7e8fc751a5b4d0a902fd785","modified":1672729380471},{"_id":"public/tags/index.html","hash":"b74f31ed6986013a59176778e5020ea11c28c800","modified":1672729380471},{"_id":"public/2022/07/20/request发送请求405/index.html","hash":"326794e678deadde30d547050cfbfda30f3e6c38","modified":1672729380471},{"_id":"public/2022/01/06/linuxmodifypasswd/index.html","hash":"4dbf68261c94ece65ff16d32b470aa57327f982a","modified":1672729380471},{"_id":"public/2021/06/03/02常见网络存储服务搭建方法 (copy)/index.html","hash":"5fd4987176f0b879daa4036137499e56e6d1379a","modified":1672729380471},{"_id":"public/archives/index.html","hash":"f1806e59c88aec901b67cee98bfc5b292fd18f05","modified":1672729380471},{"_id":"public/archives/2021/index.html","hash":"9dedd1cd7007a95ea2a08577f5a58a1d482291e3","modified":1672729380471},{"_id":"public/archives/2021/06/index.html","hash":"6c57beb0b26c2933c764d7503dcd1af8f3d86908","modified":1672729380471},{"_id":"public/archives/2021/08/index.html","hash":"26108f120bfb8070b28151f76c8b4c1e4c8ea051","modified":1672729380471},{"_id":"public/archives/2022/index.html","hash":"c8d65999eee19e350a9522dfec299b4317a07cce","modified":1672729380471},{"_id":"public/archives/2022/01/index.html","hash":"625e3f2b3d9795d83ac1e3d5f0a327eba87243b2","modified":1672729380471},{"_id":"public/archives/2022/06/index.html","hash":"7e6dc2b5d73c79824752997677c13cb4d8496bbe","modified":1672729380471},{"_id":"public/archives/2022/07/index.html","hash":"0aac93cd81207650d4c09a2d8d32b959769624c6","modified":1672729380471},{"_id":"public/archives/2023/index.html","hash":"952a61a2462c13d79cfd3b1080657b4d359624c6","modified":1672729380471},{"_id":"public/archives/2023/01/index.html","hash":"5d87326691fe2767ac255d8a17344a31334101d3","modified":1672729380471},{"_id":"public/categories/linux/index.html","hash":"93f1cebff0111caaef6d470cc0f8e33c35f29265","modified":1672729380471},{"_id":"public/categories/linux/存储服务/index.html","hash":"9230c5fc7b6bffed07f10897663cf64581eed513","modified":1672729380471},{"_id":"public/categories/linux/systemd/index.html","hash":"46fa81087bf34bc9bb5e32416ff7cc6af90c1cfb","modified":1672729380471},{"_id":"public/categories/测试理论/index.html","hash":"1f4e19db6eae1b469da76a384ba87a00b81fea08","modified":1672729380471},{"_id":"public/categories/hexo/index.html","hash":"594718bb8998497e490d4d33f12f7009d27a2bf3","modified":1672729380471},{"_id":"public/categories/linux/shell/index.html","hash":"c096db73557a17b3f306d108c41c27439b4dcb37","modified":1672729380471},{"_id":"public/categories/python/index.html","hash":"75667d41150497cb677e781ec19e16b61d9f062f","modified":1672729380471},{"_id":"public/categories/python/爬虫/index.html","hash":"7e9ebd2747984a7e81b2975a6bfa3d268585a631","modified":1672729380471},{"_id":"public/tags/linux/index.html","hash":"c36a8a0c52c46e80e83ce61eddc00250b3b93027","modified":1672729380471},{"_id":"public/tags/shell/index.html","hash":"c35b5dc160fef520095bd0e046d20a31bbf56481","modified":1672729380471},{"_id":"public/tags/ftp/index.html","hash":"5dae1d05577e42ee6089a7ced1fc918f4f8da4ee","modified":1672729380471},{"_id":"public/tags/NFS/index.html","hash":"1efb2e2bbc51c9498939f0405548fe6d1669de2c","modified":1672729380471},{"_id":"public/tags/测试理论/index.html","hash":"3c0c0acdb5f08abfa668a3dd577eb66597d37732","modified":1672729380471},{"_id":"public/tags/验收测试/index.html","hash":"3293a71b9448def66d17d5c13d9c5997a903bbe8","modified":1672729380471},{"_id":"public/tags/hexo/index.html","hash":"24617e7bf5a4c7383ca057e9dbfc1e62dbcb12fa","modified":1672729380471},{"_id":"public/tags/python/index.html","hash":"097c9f82e59b07700b97bae964017639afe35530","modified":1672729380471},{"_id":"public/tags/任务调度/index.html","hash":"f5a26a37e1231cb9e1a6ef7d573494849f0cfa38","modified":1672729380471},{"_id":"public/tags/爬虫/index.html","hash":"2cc1e0c3a45d2afc51b76eeb2663939c0f119245","modified":1672729380471},{"_id":"public/tags/requests/index.html","hash":"86179493c8429bcb6e50d04326e7a5de008c6b6d","modified":1672729380471},{"_id":"public/2023/01/03/01systemd_service/index.html","hash":"fdc3a8d02c83bd1255f90d80b6e6029a800d113f","modified":1672729380471},{"_id":"public/2023/01/03/hexo_config_algolia/index.html","hash":"5fd796ebb2e59296b32586b5a772e5a4f9547c11","modified":1672729380471},{"_id":"public/2022/06/03/02常见网络存储服务搭建方法/index.html","hash":"2719a7487f6b6822f41271802a1e36fe92ef343f","modified":1672729380471},{"_id":"public/2022/06/03/03shell_xargs/index.html","hash":"886cb3f099152baa5226bc4796601429daf62730","modified":1672729380471},{"_id":"public/2022/01/20/python调度框架APScheduler使用详解（非阻塞模式）/index.html","hash":"4293c2259f666c2412cbc438aa72ed84a98bc5ba","modified":1672729380471},{"_id":"public/2021/08/20/e2e_analysis/index.html","hash":"419c1c18ba9d3cba407724aa803870424ad8c118","modified":1672729380471},{"_id":"public/index.html","hash":"481b66a519c1d70711ab149bf22a4eeeae2a3c14","modified":1672729380471},{"_id":"public/img/avatar.png","hash":"a44601fac9a81dd7e392d05ea5ddc65c96b051df","modified":1672729380471},{"_id":"public/img/algolia.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1672729380471},{"_id":"public/melody-favicon.ico","hash":"e33c804e570eb238fe095ed28346dd1b3a0666ae","modified":1672729380471},{"_id":"public/assets/algolia/algoliasearchLite.min.js","hash":"284416885e4e80e27fa4eae6fc305f4de15b914c","modified":1672729380471},{"_id":"public/css/404.css","hash":"712ecbf4ac203ab5f1ea92989c0f0062a3d0aca9","modified":1672729380471},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1672729380471},{"_id":"public/js/copy.js","hash":"ce7f8601c7c75ced79e2e9851beec37299d49fd1","modified":1672729380471},{"_id":"public/js/fancybox.js","hash":"2d3eaa654b2524c41dc5aba1d5e2e7cc9aaefd26","modified":1672729380471},{"_id":"public/js/fireworks.js","hash":"4b6428da34535f0e8fe5a11976b8d89c48736500","modified":1672729380471},{"_id":"public/js/head.js","hash":"555e9caa046d5a174af8d20c75e9e89c25aabb6c","modified":1672729380471},{"_id":"public/js/hexo-theme-melody.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1672729380471},{"_id":"public/js/katex.js","hash":"a5a999b357c0fd9aeacae721bf121f30d40d6726","modified":1672729380471},{"_id":"public/js/scroll.js","hash":"e9aaeeae8958b8a06e016edbd17c84b63aea9255","modified":1672729380471},{"_id":"public/js/sidebar.js","hash":"a42109c5a69dedc87e1aaf8cb2383fd43069677e","modified":1672729380471},{"_id":"public/js/transition.js","hash":"11c3b82a5e9ef2bf7bd712b6c211d86426f9a23e","modified":1672729380471},{"_id":"public/js/utils.js","hash":"f514662ad80803e1bb5f6bc653c4b9ad06ea4932","modified":1672729380471},{"_id":"public/js/search/algolia.js","hash":"8d2cc7ac4a015563344a3981c3040d308489935c","modified":1672729380471},{"_id":"public/js/search/local-search.js","hash":"c58bbe874fcdc512cca5244db487745e6a49ef48","modified":1672729380471},{"_id":"public/js/third-party/canvas-ribbon.js","hash":"8fd084e962fb2028be9f748b5cb5f53d030d1d03","modified":1672729380471},{"_id":"public/js/third-party/velocity.ui.min.js","hash":"d8124c091d19fa4072616a44a8897fabc6599fce","modified":1672729380471},{"_id":"public/js/third-party/reveal/head.min.js","hash":"95c9de30444117adbbb3218070fda00af187a76a","modified":1672729380471},{"_id":"public/css/index.css","hash":"0a31457d7a03f887afbfa157da30b79e41a3df05","modified":1672729380471},{"_id":"public/js/third-party/anime.min.js","hash":"332031949d78a49e8a18611556253660574e47db","modified":1672729380471},{"_id":"public/js/third-party/jquery.fancybox.min.js","hash":"2ec3ef6c31b971ba5e58eb4a0c5ede902bbdd4af","modified":1672729380471},{"_id":"public/js/third-party/jquery.min.js","hash":"1055018c28ab41087ef9ccefe411606893dabea2","modified":1672729380471},{"_id":"public/js/third-party/velocity.min.js","hash":"69c85b9d6a931a7d3a5b0657e60112c31fb3b286","modified":1672729380471},{"_id":"public/assets/algolia/algoliasearch.min.js","hash":"a3b131a9a47ccc16f4dd8988fabb6d306548db2f","modified":1672729380471},{"_id":"public/assets/algolia/algoliasearchLite.js","hash":"e56ad6b82caf69066de545201014291fc961635e","modified":1672729380471},{"_id":"public/assets/algolia/algoliasearch.js","hash":"6948fcdf071e4983e784e8c458cf201536f77792","modified":1672729380471}],"Category":[{"name":"linux","_id":"clcfvvv9m000484xh9v726ebr"},{"name":"存储服务","parent":"clcfvvv9m000484xh9v726ebr","_id":"clcfvvv9s000i84xh78apbvjg"},{"name":"systemd","parent":"clcfvvv9m000484xh9v726ebr","_id":"clcfvvv9t000n84xh3q0g8qv5"},{"name":"测试理论","_id":"clcfvvv9t000q84xh0k4g3cjl"},{"name":"hexo","_id":"clcfvvv9u000u84xhcn6q8n2x"},{"name":"shell","parent":"clcfvvv9m000484xh9v726ebr","_id":"clcfvvv9u001184xhezjsh5gv"},{"name":"python","_id":"clcfvvv9z001k84xh7dfy1qhc"},{"name":"爬虫","parent":"clcfvvv9z001k84xh7dfy1qhc","_id":"clcfvvva0001q84xhhd7c643k"}],"Data":[],"Page":[{"title":"404","date":"2022-12-29T09:34:33.000Z","layout":"404","_content":"","source":"404/index.md","raw":"---\ntitle: 404\ndate: 2022-12-29 17:34:33\nlayout: 404\npermalink: /404\n---","updated":"2022-12-29T09:35:09.000Z","path":"/404.html","comments":1,"_id":"clcfvvv9g000084xhhufv9l33","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"分类","date":"2022-12-28T16:00:00.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2022-12-29 00:00:00\ntype: \"categories\"\n---","updated":"2022-12-29T09:24:44.000Z","path":"categories/index.html","comments":1,"layout":"page","_id":"clcfvvv9l000284xh4d90cw07","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2022-12-29T09:16:52.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate:  2022-12-29 17:16:52\ntype: \"tags\"\n---","updated":"2022-12-29T09:22:58.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"clcfvvv9n000684xh1c3p8xpx","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"如何自己写一个开机自启动服务？","date":"2023-01-03T05:30:34.000Z","_content":"# systemd服务介绍\n> systemd 是 Linux 下一个与 SysV 和 LSB 初始化脚本兼容的系统和服务管理器。systemd 使用 socket 和 D-Bus 来开启服务，提供基于守护进程的按需启动策略，保留了 Linux cgroups 的进程追踪功能，支持快照和系统状态恢复，维护挂载和自挂载点，实现了各服务间基于从属关系的一个更为精细的逻辑控制，拥有前卫的并行性能。systemd 无需经过任何修改便可以替代 sysvinit \n\n# service 文件的构成\n> service文件一般分为三个部分:[**Unit**]、[**Service**]、[**Install**]\n\n## Unit\n**用来定义 Unit 的元数据，以及配置与其他 Unit 的关系**\n\n- Description：简短描述\n- Documentation：文档地址\n- Requires：当前 Unit 依赖的其他 Unit，如果它们没有运行，当前 Unit 会启动失败\n- Wants：与当前 Unit 配合的其他 Unit，如果它们没有运行，当前 Unit 不会启动失败\n- BindsTo：与Requires类似，它指定的 Unit 如果退出，会导致当前 Unit 停止运行\n- Before：如果该字段指定的 Unit 也要启动，那么必须在当前 Unit 之后启动\n- After：如果该字段指定的 Unit 也要启动，那么必须在当前 Unit 之前启动\n- Conflicts：这里指定的 Unit 不能与当前 Unit 同时运行\n- Condition…：当前 Unit 运行必须满足的条件，否则不会运行\n- Assert…：当前 Unit 运行必须满足的条件，否则会报启动失败\n\n## Service\n**用来定义Service的配置，只有 Service 类型的 Unit 才有这个部分**\n- Type：定义启动时的进程行为。它有以下几种值。\n  - \tType=simple：默认值，执行ExecStart指定的命令，启动主进程\n  - \tType=forking：以 fork 方式从父进程创建子进程，创建后父进程会立即退出\n  - \tType=oneshot：一次性进程，Systemd 会等当前服务退出，再继续往下执行\n  - \tType=dbus：当前服务通过D-Bus启动\n  - \tType=notify：当前服务启动完毕，会通知Systemd，再继续往下执行\n  - \tType=idle：若有其他任务执行完毕，当前服务才会运行\n\n- Type=simple：默认值，执行ExecStart指定的命令，启动主进程\n- Type=forking：以 fork 方式从父进程创建子进程，创建后父进程会立即退出\n- Type=oneshot：一次性进程，Systemd 会等当前服务退出，再继续往下执行\n- Type=dbus：当前服务通过D-Bus启动\n- Type=notify：当前服务启动完毕，会通知Systemd，再继续往下执行\n- Type=idle：若有其他任务执行完毕，当前服务才会运行\n- ExecStart：启动当前服务的命令\n- ExecStartPre：启动当前服务之前执行的命令\n- ExecStartPost：启动当前服务之后执行的命令\n- ExecReload：重启当前服务时执行的命令\n- ExecStop：停止当前服务时执行的命令\n- ExecStopPost：停止当其服务之后执行的命令\n- RestartSec：自动重启当前服务间隔的秒数\n- Restart：定义何种情况 Systemd 会自动重启当前服务，可能的值包括always（总是重启）、on-success、on-failure、on-abnormal、on-abort、on-watchdog\n- TimeoutSec：定义 Systemd 停止当前服务之前等待的秒数\n- Environment：指定环境变量\n\n## Install\n**用来定义如何启动，以及是否开机启动**\n- WantedBy：它的值是一个或多个 Target，当前 Unit 激活时（enable）符号链接会放入/etc/systemd/system目录下面以 Target 名 + .wants后缀构成的子目录中\n- RequiredBy：它的值是一个或多个 Target，当前 Unit 激活时，符号链接会放入/etc/systemd/system目录下面以 Target 名 + .required后缀构成的子目录中\n- Alias：当前 Unit 可用于启动的别名\n- Also：当前 Unit 激活（enable）时，会被同时激活的其他 Unit\n\n## 自动启动\n> 对于那些支持 Systemd 的软件，安装的时候，会自动在/usr/lib/systemd/system目录添加一个配置文件，如: systemctl enable httpd.service\n> 上面的命令相当于在 /etc/systemd/system 目录添加一个符号链接，指向 /usr/lib/systemd/system 里面的 httpd.service 文件。\n> 这是因为开机时， Systemd 只执行 /etc/systemd/system 目录里面的配置文件。这也意味着，如果把修改后的配置文件放在该目录，就可以达到覆盖原始配置的效果\n\n# 模板介绍\nvim /usr/lib/systemd/system/zdy.service\n```bash\n[Unit]\nDescription=描述\nEnvironment=环境变量或参数(系统环境变量此时无法使用)\nAfter=network.target\n\n[Service]\nType=forking\nEnvironmentFile=所需环境变量文件或参数文件\nExecStart=启动命令(需指定全路径)\nExecStop=停止命令(需指定全路径)\nUser=以什么用户执行命令  \n\n[Install]\nWantedBy=multi-user.target\n```\n# 实例\n> 当自己写了一个脚本后，期望每次开机后，该服务能自动运行，此时就必须考虑一个开机自启的方法了，经过多方咨询后，最终决定采用systemd服务来完成，具体内容如下。\n\n## 创建自己的服务\n**进入对应目录**\n```bash\ncd /etc/systemd/system\n```\n**创建服务文件**\n```bash\nsudo touch apptest.service  # 假如我起了一个叫apptest的服务\n```\n**编辑服务内容**\n```bash\n[Unit]\nDescription=apptest\nAfter=network.target  # 因我的服务需要在网络连接成功后才能正常运行，故需要等网络服务启动后才运行\n\n[Service]\nExecStart=/home/babyfengfjx/Desktop/apptest.py   # 此处就是需要启动的命令了，这个地方需要填写绝对路径，如果是后台运行的服务，不需要加nohup 这种了。\nType=simple\nUser=babyfengfjx   # 指定用我的普通用户运行，而不是用root\n\n[Install]\nWantedBy=multi-user.target\n```\n**启动服务**\n```bash\nsystemctl start apptest.service\n```\n**查看服务状态**\n```bash\nsystemctl status apptest.service\n```\n通过上述命令即可查看到该服务当前运行的状态，如果是**running**那就OK了，如果失败了则需要具体查看一下你的这个命令部分，一般都是这里出了问题。\n\n**个人出现的问题有**：\n- 命令中加了nohup，之前是为了能方便在后台运行就加了这个，实际上systemd管理的服务是不需要这个部分的；\n- 命令中日志输出的部分，没有使用绝对路径，导致执行的是否没有写入权限报错了；\n- 我使用的是python，在开始执行的时候，我写的是```python3 /home/babyfengfjx/Desktop/apptest.py``` 这个时候执行出现了报错，提示有一个python库没有安装，但我明明手动执行的时候是可以的呀，最后发现该服务是以root的名义去运行的，而我这个库只在当前普通用户中有，所以才会报错，最后直接将python执行部分写入到脚本开头中就OK了；\n- 因为我的脚本是需要普通用户执行的，所以加了一个User字段。\n\n## 设置开机自启动\n```bash\nsystemctl enable apptest.service\n```\n就这么easy，上述操作后就完事了，后面系统无论如何重启，我的服务都能自己跑起来咯～\n","source":"_posts/01systemd_service.md","raw":"---\ntitle: 如何自己写一个开机自启动服务？\ncategories: \n- linux\n- systemd\ntags:\n- linux\ndate: 2023-01-03 13:30:34\n---\n# systemd服务介绍\n> systemd 是 Linux 下一个与 SysV 和 LSB 初始化脚本兼容的系统和服务管理器。systemd 使用 socket 和 D-Bus 来开启服务，提供基于守护进程的按需启动策略，保留了 Linux cgroups 的进程追踪功能，支持快照和系统状态恢复，维护挂载和自挂载点，实现了各服务间基于从属关系的一个更为精细的逻辑控制，拥有前卫的并行性能。systemd 无需经过任何修改便可以替代 sysvinit \n\n# service 文件的构成\n> service文件一般分为三个部分:[**Unit**]、[**Service**]、[**Install**]\n\n## Unit\n**用来定义 Unit 的元数据，以及配置与其他 Unit 的关系**\n\n- Description：简短描述\n- Documentation：文档地址\n- Requires：当前 Unit 依赖的其他 Unit，如果它们没有运行，当前 Unit 会启动失败\n- Wants：与当前 Unit 配合的其他 Unit，如果它们没有运行，当前 Unit 不会启动失败\n- BindsTo：与Requires类似，它指定的 Unit 如果退出，会导致当前 Unit 停止运行\n- Before：如果该字段指定的 Unit 也要启动，那么必须在当前 Unit 之后启动\n- After：如果该字段指定的 Unit 也要启动，那么必须在当前 Unit 之前启动\n- Conflicts：这里指定的 Unit 不能与当前 Unit 同时运行\n- Condition…：当前 Unit 运行必须满足的条件，否则不会运行\n- Assert…：当前 Unit 运行必须满足的条件，否则会报启动失败\n\n## Service\n**用来定义Service的配置，只有 Service 类型的 Unit 才有这个部分**\n- Type：定义启动时的进程行为。它有以下几种值。\n  - \tType=simple：默认值，执行ExecStart指定的命令，启动主进程\n  - \tType=forking：以 fork 方式从父进程创建子进程，创建后父进程会立即退出\n  - \tType=oneshot：一次性进程，Systemd 会等当前服务退出，再继续往下执行\n  - \tType=dbus：当前服务通过D-Bus启动\n  - \tType=notify：当前服务启动完毕，会通知Systemd，再继续往下执行\n  - \tType=idle：若有其他任务执行完毕，当前服务才会运行\n\n- Type=simple：默认值，执行ExecStart指定的命令，启动主进程\n- Type=forking：以 fork 方式从父进程创建子进程，创建后父进程会立即退出\n- Type=oneshot：一次性进程，Systemd 会等当前服务退出，再继续往下执行\n- Type=dbus：当前服务通过D-Bus启动\n- Type=notify：当前服务启动完毕，会通知Systemd，再继续往下执行\n- Type=idle：若有其他任务执行完毕，当前服务才会运行\n- ExecStart：启动当前服务的命令\n- ExecStartPre：启动当前服务之前执行的命令\n- ExecStartPost：启动当前服务之后执行的命令\n- ExecReload：重启当前服务时执行的命令\n- ExecStop：停止当前服务时执行的命令\n- ExecStopPost：停止当其服务之后执行的命令\n- RestartSec：自动重启当前服务间隔的秒数\n- Restart：定义何种情况 Systemd 会自动重启当前服务，可能的值包括always（总是重启）、on-success、on-failure、on-abnormal、on-abort、on-watchdog\n- TimeoutSec：定义 Systemd 停止当前服务之前等待的秒数\n- Environment：指定环境变量\n\n## Install\n**用来定义如何启动，以及是否开机启动**\n- WantedBy：它的值是一个或多个 Target，当前 Unit 激活时（enable）符号链接会放入/etc/systemd/system目录下面以 Target 名 + .wants后缀构成的子目录中\n- RequiredBy：它的值是一个或多个 Target，当前 Unit 激活时，符号链接会放入/etc/systemd/system目录下面以 Target 名 + .required后缀构成的子目录中\n- Alias：当前 Unit 可用于启动的别名\n- Also：当前 Unit 激活（enable）时，会被同时激活的其他 Unit\n\n## 自动启动\n> 对于那些支持 Systemd 的软件，安装的时候，会自动在/usr/lib/systemd/system目录添加一个配置文件，如: systemctl enable httpd.service\n> 上面的命令相当于在 /etc/systemd/system 目录添加一个符号链接，指向 /usr/lib/systemd/system 里面的 httpd.service 文件。\n> 这是因为开机时， Systemd 只执行 /etc/systemd/system 目录里面的配置文件。这也意味着，如果把修改后的配置文件放在该目录，就可以达到覆盖原始配置的效果\n\n# 模板介绍\nvim /usr/lib/systemd/system/zdy.service\n```bash\n[Unit]\nDescription=描述\nEnvironment=环境变量或参数(系统环境变量此时无法使用)\nAfter=network.target\n\n[Service]\nType=forking\nEnvironmentFile=所需环境变量文件或参数文件\nExecStart=启动命令(需指定全路径)\nExecStop=停止命令(需指定全路径)\nUser=以什么用户执行命令  \n\n[Install]\nWantedBy=multi-user.target\n```\n# 实例\n> 当自己写了一个脚本后，期望每次开机后，该服务能自动运行，此时就必须考虑一个开机自启的方法了，经过多方咨询后，最终决定采用systemd服务来完成，具体内容如下。\n\n## 创建自己的服务\n**进入对应目录**\n```bash\ncd /etc/systemd/system\n```\n**创建服务文件**\n```bash\nsudo touch apptest.service  # 假如我起了一个叫apptest的服务\n```\n**编辑服务内容**\n```bash\n[Unit]\nDescription=apptest\nAfter=network.target  # 因我的服务需要在网络连接成功后才能正常运行，故需要等网络服务启动后才运行\n\n[Service]\nExecStart=/home/babyfengfjx/Desktop/apptest.py   # 此处就是需要启动的命令了，这个地方需要填写绝对路径，如果是后台运行的服务，不需要加nohup 这种了。\nType=simple\nUser=babyfengfjx   # 指定用我的普通用户运行，而不是用root\n\n[Install]\nWantedBy=multi-user.target\n```\n**启动服务**\n```bash\nsystemctl start apptest.service\n```\n**查看服务状态**\n```bash\nsystemctl status apptest.service\n```\n通过上述命令即可查看到该服务当前运行的状态，如果是**running**那就OK了，如果失败了则需要具体查看一下你的这个命令部分，一般都是这里出了问题。\n\n**个人出现的问题有**：\n- 命令中加了nohup，之前是为了能方便在后台运行就加了这个，实际上systemd管理的服务是不需要这个部分的；\n- 命令中日志输出的部分，没有使用绝对路径，导致执行的是否没有写入权限报错了；\n- 我使用的是python，在开始执行的时候，我写的是```python3 /home/babyfengfjx/Desktop/apptest.py``` 这个时候执行出现了报错，提示有一个python库没有安装，但我明明手动执行的时候是可以的呀，最后发现该服务是以root的名义去运行的，而我这个库只在当前普通用户中有，所以才会报错，最后直接将python执行部分写入到脚本开头中就OK了；\n- 因为我的脚本是需要普通用户执行的，所以加了一个User字段。\n\n## 设置开机自启动\n```bash\nsystemctl enable apptest.service\n```\n就这么easy，上述操作后就完事了，后面系统无论如何重启，我的服务都能自己跑起来咯～\n","slug":"01systemd_service","published":1,"updated":"2023-01-03T05:33:05.041Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clcfvvv9j000184xh3fgmbegp","content":"<h1 id=\"systemd服务介绍\"><a href=\"#systemd服务介绍\" class=\"headerlink\" title=\"systemd服务介绍\"></a>systemd服务介绍</h1><blockquote>\n<p>systemd 是 Linux 下一个与 SysV 和 LSB 初始化脚本兼容的系统和服务管理器。systemd 使用 socket 和 D-Bus 来开启服务，提供基于守护进程的按需启动策略，保留了 Linux cgroups 的进程追踪功能，支持快照和系统状态恢复，维护挂载和自挂载点，实现了各服务间基于从属关系的一个更为精细的逻辑控制，拥有前卫的并行性能。systemd 无需经过任何修改便可以替代 sysvinit </p>\n</blockquote>\n<h1 id=\"service-文件的构成\"><a href=\"#service-文件的构成\" class=\"headerlink\" title=\"service 文件的构成\"></a>service 文件的构成</h1><blockquote>\n<p>service文件一般分为三个部分:[<strong>Unit</strong>]、[<strong>Service</strong>]、[<strong>Install</strong>]</p>\n</blockquote>\n<h2 id=\"Unit\"><a href=\"#Unit\" class=\"headerlink\" title=\"Unit\"></a>Unit</h2><p><strong>用来定义 Unit 的元数据，以及配置与其他 Unit 的关系</strong></p>\n<ul>\n<li>Description：简短描述</li>\n<li>Documentation：文档地址</li>\n<li>Requires：当前 Unit 依赖的其他 Unit，如果它们没有运行，当前 Unit 会启动失败</li>\n<li>Wants：与当前 Unit 配合的其他 Unit，如果它们没有运行，当前 Unit 不会启动失败</li>\n<li>BindsTo：与Requires类似，它指定的 Unit 如果退出，会导致当前 Unit 停止运行</li>\n<li>Before：如果该字段指定的 Unit 也要启动，那么必须在当前 Unit 之后启动</li>\n<li>After：如果该字段指定的 Unit 也要启动，那么必须在当前 Unit 之前启动</li>\n<li>Conflicts：这里指定的 Unit 不能与当前 Unit 同时运行</li>\n<li>Condition…：当前 Unit 运行必须满足的条件，否则不会运行</li>\n<li>Assert…：当前 Unit 运行必须满足的条件，否则会报启动失败</li>\n</ul>\n<h2 id=\"Service\"><a href=\"#Service\" class=\"headerlink\" title=\"Service\"></a>Service</h2><p><strong>用来定义Service的配置，只有 Service 类型的 Unit 才有这个部分</strong></p>\n<ul>\n<li><p>Type：定义启动时的进程行为。它有以下几种值。</p>\n<ul>\n<li><pre><code>Type=simple：默认值，执行ExecStart指定的命令，启动主进程\n</code></pre>\n</li>\n<li><pre><code>Type=forking：以 fork 方式从父进程创建子进程，创建后父进程会立即退出\n</code></pre>\n</li>\n<li><pre><code>Type=oneshot：一次性进程，Systemd 会等当前服务退出，再继续往下执行\n</code></pre>\n</li>\n<li><pre><code>Type=dbus：当前服务通过D-Bus启动\n</code></pre>\n</li>\n<li><pre><code>Type=notify：当前服务启动完毕，会通知Systemd，再继续往下执行\n</code></pre>\n</li>\n<li><pre><code>Type=idle：若有其他任务执行完毕，当前服务才会运行\n</code></pre>\n</li>\n</ul>\n</li>\n<li><p>Type&#x3D;simple：默认值，执行ExecStart指定的命令，启动主进程</p>\n</li>\n<li><p>Type&#x3D;forking：以 fork 方式从父进程创建子进程，创建后父进程会立即退出</p>\n</li>\n<li><p>Type&#x3D;oneshot：一次性进程，Systemd 会等当前服务退出，再继续往下执行</p>\n</li>\n<li><p>Type&#x3D;dbus：当前服务通过D-Bus启动</p>\n</li>\n<li><p>Type&#x3D;notify：当前服务启动完毕，会通知Systemd，再继续往下执行</p>\n</li>\n<li><p>Type&#x3D;idle：若有其他任务执行完毕，当前服务才会运行</p>\n</li>\n<li><p>ExecStart：启动当前服务的命令</p>\n</li>\n<li><p>ExecStartPre：启动当前服务之前执行的命令</p>\n</li>\n<li><p>ExecStartPost：启动当前服务之后执行的命令</p>\n</li>\n<li><p>ExecReload：重启当前服务时执行的命令</p>\n</li>\n<li><p>ExecStop：停止当前服务时执行的命令</p>\n</li>\n<li><p>ExecStopPost：停止当其服务之后执行的命令</p>\n</li>\n<li><p>RestartSec：自动重启当前服务间隔的秒数</p>\n</li>\n<li><p>Restart：定义何种情况 Systemd 会自动重启当前服务，可能的值包括always（总是重启）、on-success、on-failure、on-abnormal、on-abort、on-watchdog</p>\n</li>\n<li><p>TimeoutSec：定义 Systemd 停止当前服务之前等待的秒数</p>\n</li>\n<li><p>Environment：指定环境变量</p>\n</li>\n</ul>\n<h2 id=\"Install\"><a href=\"#Install\" class=\"headerlink\" title=\"Install\"></a>Install</h2><p><strong>用来定义如何启动，以及是否开机启动</strong></p>\n<ul>\n<li>WantedBy：它的值是一个或多个 Target，当前 Unit 激活时（enable）符号链接会放入&#x2F;etc&#x2F;systemd&#x2F;system目录下面以 Target 名 + .wants后缀构成的子目录中</li>\n<li>RequiredBy：它的值是一个或多个 Target，当前 Unit 激活时，符号链接会放入&#x2F;etc&#x2F;systemd&#x2F;system目录下面以 Target 名 + .required后缀构成的子目录中</li>\n<li>Alias：当前 Unit 可用于启动的别名</li>\n<li>Also：当前 Unit 激活（enable）时，会被同时激活的其他 Unit</li>\n</ul>\n<h2 id=\"自动启动\"><a href=\"#自动启动\" class=\"headerlink\" title=\"自动启动\"></a>自动启动</h2><blockquote>\n<p>对于那些支持 Systemd 的软件，安装的时候，会自动在&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system目录添加一个配置文件，如: systemctl enable httpd.service<br>上面的命令相当于在 &#x2F;etc&#x2F;systemd&#x2F;system 目录添加一个符号链接，指向 &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system 里面的 httpd.service 文件。<br>这是因为开机时， Systemd 只执行 &#x2F;etc&#x2F;systemd&#x2F;system 目录里面的配置文件。这也意味着，如果把修改后的配置文件放在该目录，就可以达到覆盖原始配置的效果</p>\n</blockquote>\n<h1 id=\"模板介绍\"><a href=\"#模板介绍\" class=\"headerlink\" title=\"模板介绍\"></a>模板介绍</h1><p>vim &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;zdy.service</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=描述</span><br><span class=\"line\">Environment=环境变量或参数(系统环境变量此时无法使用)</span><br><span class=\"line\">After=network.target</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Type=forking</span><br><span class=\"line\">EnvironmentFile=所需环境变量文件或参数文件</span><br><span class=\"line\">ExecStart=启动命令(需指定全路径)</span><br><span class=\"line\">ExecStop=停止命令(需指定全路径)</span><br><span class=\"line\">User=以什么用户执行命令  </span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>\n<h1 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h1><blockquote>\n<p>当自己写了一个脚本后，期望每次开机后，该服务能自动运行，此时就必须考虑一个开机自启的方法了，经过多方咨询后，最终决定采用systemd服务来完成，具体内容如下。</p>\n</blockquote>\n<h2 id=\"创建自己的服务\"><a href=\"#创建自己的服务\" class=\"headerlink\" title=\"创建自己的服务\"></a>创建自己的服务</h2><p><strong>进入对应目录</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /etc/systemd/system</span><br></pre></td></tr></table></figure>\n<p><strong>创建服务文件</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo <span class=\"built_in\">touch</span> apptest.service  <span class=\"comment\"># 假如我起了一个叫apptest的服务</span></span><br></pre></td></tr></table></figure>\n<p><strong>编辑服务内容</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=apptest</span><br><span class=\"line\">After=network.target  <span class=\"comment\"># 因我的服务需要在网络连接成功后才能正常运行，故需要等网络服务启动后才运行</span></span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">ExecStart=/home/babyfengfjx/Desktop/apptest.py   <span class=\"comment\"># 此处就是需要启动的命令了，这个地方需要填写绝对路径，如果是后台运行的服务，不需要加nohup 这种了。</span></span><br><span class=\"line\">Type=simple</span><br><span class=\"line\">User=babyfengfjx   <span class=\"comment\"># 指定用我的普通用户运行，而不是用root</span></span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>\n<p><strong>启动服务</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">systemctl start apptest.service</span><br></pre></td></tr></table></figure>\n<p><strong>查看服务状态</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">systemctl status apptest.service</span><br></pre></td></tr></table></figure>\n<p>通过上述命令即可查看到该服务当前运行的状态，如果是<strong>running</strong>那就OK了，如果失败了则需要具体查看一下你的这个命令部分，一般都是这里出了问题。</p>\n<p><strong>个人出现的问题有</strong>：</p>\n<ul>\n<li>命令中加了nohup，之前是为了能方便在后台运行就加了这个，实际上systemd管理的服务是不需要这个部分的；</li>\n<li>命令中日志输出的部分，没有使用绝对路径，导致执行的是否没有写入权限报错了；</li>\n<li>我使用的是python，在开始执行的时候，我写的是<code>python3 /home/babyfengfjx/Desktop/apptest.py</code> 这个时候执行出现了报错，提示有一个python库没有安装，但我明明手动执行的时候是可以的呀，最后发现该服务是以root的名义去运行的，而我这个库只在当前普通用户中有，所以才会报错，最后直接将python执行部分写入到脚本开头中就OK了；</li>\n<li>因为我的脚本是需要普通用户执行的，所以加了一个User字段。</li>\n</ul>\n<h2 id=\"设置开机自启动\"><a href=\"#设置开机自启动\" class=\"headerlink\" title=\"设置开机自启动\"></a>设置开机自启动</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">systemctl <span class=\"built_in\">enable</span> apptest.service</span><br></pre></td></tr></table></figure>\n<p>就这么easy，上述操作后就完事了，后面系统无论如何重启，我的服务都能自己跑起来咯～</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"systemd服务介绍\"><a href=\"#systemd服务介绍\" class=\"headerlink\" title=\"systemd服务介绍\"></a>systemd服务介绍</h1><blockquote>\n<p>systemd 是 Linux 下一个与 SysV 和 LSB 初始化脚本兼容的系统和服务管理器。systemd 使用 socket 和 D-Bus 来开启服务，提供基于守护进程的按需启动策略，保留了 Linux cgroups 的进程追踪功能，支持快照和系统状态恢复，维护挂载和自挂载点，实现了各服务间基于从属关系的一个更为精细的逻辑控制，拥有前卫的并行性能。systemd 无需经过任何修改便可以替代 sysvinit </p>\n</blockquote>\n<h1 id=\"service-文件的构成\"><a href=\"#service-文件的构成\" class=\"headerlink\" title=\"service 文件的构成\"></a>service 文件的构成</h1><blockquote>\n<p>service文件一般分为三个部分:[<strong>Unit</strong>]、[<strong>Service</strong>]、[<strong>Install</strong>]</p>\n</blockquote>\n<h2 id=\"Unit\"><a href=\"#Unit\" class=\"headerlink\" title=\"Unit\"></a>Unit</h2><p><strong>用来定义 Unit 的元数据，以及配置与其他 Unit 的关系</strong></p>\n<ul>\n<li>Description：简短描述</li>\n<li>Documentation：文档地址</li>\n<li>Requires：当前 Unit 依赖的其他 Unit，如果它们没有运行，当前 Unit 会启动失败</li>\n<li>Wants：与当前 Unit 配合的其他 Unit，如果它们没有运行，当前 Unit 不会启动失败</li>\n<li>BindsTo：与Requires类似，它指定的 Unit 如果退出，会导致当前 Unit 停止运行</li>\n<li>Before：如果该字段指定的 Unit 也要启动，那么必须在当前 Unit 之后启动</li>\n<li>After：如果该字段指定的 Unit 也要启动，那么必须在当前 Unit 之前启动</li>\n<li>Conflicts：这里指定的 Unit 不能与当前 Unit 同时运行</li>\n<li>Condition…：当前 Unit 运行必须满足的条件，否则不会运行</li>\n<li>Assert…：当前 Unit 运行必须满足的条件，否则会报启动失败</li>\n</ul>\n<h2 id=\"Service\"><a href=\"#Service\" class=\"headerlink\" title=\"Service\"></a>Service</h2><p><strong>用来定义Service的配置，只有 Service 类型的 Unit 才有这个部分</strong></p>\n<ul>\n<li><p>Type：定义启动时的进程行为。它有以下几种值。</p>\n<ul>\n<li><pre><code>Type=simple：默认值，执行ExecStart指定的命令，启动主进程\n</code></pre>\n</li>\n<li><pre><code>Type=forking：以 fork 方式从父进程创建子进程，创建后父进程会立即退出\n</code></pre>\n</li>\n<li><pre><code>Type=oneshot：一次性进程，Systemd 会等当前服务退出，再继续往下执行\n</code></pre>\n</li>\n<li><pre><code>Type=dbus：当前服务通过D-Bus启动\n</code></pre>\n</li>\n<li><pre><code>Type=notify：当前服务启动完毕，会通知Systemd，再继续往下执行\n</code></pre>\n</li>\n<li><pre><code>Type=idle：若有其他任务执行完毕，当前服务才会运行\n</code></pre>\n</li>\n</ul>\n</li>\n<li><p>Type&#x3D;simple：默认值，执行ExecStart指定的命令，启动主进程</p>\n</li>\n<li><p>Type&#x3D;forking：以 fork 方式从父进程创建子进程，创建后父进程会立即退出</p>\n</li>\n<li><p>Type&#x3D;oneshot：一次性进程，Systemd 会等当前服务退出，再继续往下执行</p>\n</li>\n<li><p>Type&#x3D;dbus：当前服务通过D-Bus启动</p>\n</li>\n<li><p>Type&#x3D;notify：当前服务启动完毕，会通知Systemd，再继续往下执行</p>\n</li>\n<li><p>Type&#x3D;idle：若有其他任务执行完毕，当前服务才会运行</p>\n</li>\n<li><p>ExecStart：启动当前服务的命令</p>\n</li>\n<li><p>ExecStartPre：启动当前服务之前执行的命令</p>\n</li>\n<li><p>ExecStartPost：启动当前服务之后执行的命令</p>\n</li>\n<li><p>ExecReload：重启当前服务时执行的命令</p>\n</li>\n<li><p>ExecStop：停止当前服务时执行的命令</p>\n</li>\n<li><p>ExecStopPost：停止当其服务之后执行的命令</p>\n</li>\n<li><p>RestartSec：自动重启当前服务间隔的秒数</p>\n</li>\n<li><p>Restart：定义何种情况 Systemd 会自动重启当前服务，可能的值包括always（总是重启）、on-success、on-failure、on-abnormal、on-abort、on-watchdog</p>\n</li>\n<li><p>TimeoutSec：定义 Systemd 停止当前服务之前等待的秒数</p>\n</li>\n<li><p>Environment：指定环境变量</p>\n</li>\n</ul>\n<h2 id=\"Install\"><a href=\"#Install\" class=\"headerlink\" title=\"Install\"></a>Install</h2><p><strong>用来定义如何启动，以及是否开机启动</strong></p>\n<ul>\n<li>WantedBy：它的值是一个或多个 Target，当前 Unit 激活时（enable）符号链接会放入&#x2F;etc&#x2F;systemd&#x2F;system目录下面以 Target 名 + .wants后缀构成的子目录中</li>\n<li>RequiredBy：它的值是一个或多个 Target，当前 Unit 激活时，符号链接会放入&#x2F;etc&#x2F;systemd&#x2F;system目录下面以 Target 名 + .required后缀构成的子目录中</li>\n<li>Alias：当前 Unit 可用于启动的别名</li>\n<li>Also：当前 Unit 激活（enable）时，会被同时激活的其他 Unit</li>\n</ul>\n<h2 id=\"自动启动\"><a href=\"#自动启动\" class=\"headerlink\" title=\"自动启动\"></a>自动启动</h2><blockquote>\n<p>对于那些支持 Systemd 的软件，安装的时候，会自动在&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system目录添加一个配置文件，如: systemctl enable httpd.service<br>上面的命令相当于在 &#x2F;etc&#x2F;systemd&#x2F;system 目录添加一个符号链接，指向 &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system 里面的 httpd.service 文件。<br>这是因为开机时， Systemd 只执行 &#x2F;etc&#x2F;systemd&#x2F;system 目录里面的配置文件。这也意味着，如果把修改后的配置文件放在该目录，就可以达到覆盖原始配置的效果</p>\n</blockquote>\n<h1 id=\"模板介绍\"><a href=\"#模板介绍\" class=\"headerlink\" title=\"模板介绍\"></a>模板介绍</h1><p>vim &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;zdy.service</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=描述</span><br><span class=\"line\">Environment=环境变量或参数(系统环境变量此时无法使用)</span><br><span class=\"line\">After=network.target</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Type=forking</span><br><span class=\"line\">EnvironmentFile=所需环境变量文件或参数文件</span><br><span class=\"line\">ExecStart=启动命令(需指定全路径)</span><br><span class=\"line\">ExecStop=停止命令(需指定全路径)</span><br><span class=\"line\">User=以什么用户执行命令  </span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>\n<h1 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h1><blockquote>\n<p>当自己写了一个脚本后，期望每次开机后，该服务能自动运行，此时就必须考虑一个开机自启的方法了，经过多方咨询后，最终决定采用systemd服务来完成，具体内容如下。</p>\n</blockquote>\n<h2 id=\"创建自己的服务\"><a href=\"#创建自己的服务\" class=\"headerlink\" title=\"创建自己的服务\"></a>创建自己的服务</h2><p><strong>进入对应目录</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /etc/systemd/system</span><br></pre></td></tr></table></figure>\n<p><strong>创建服务文件</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo <span class=\"built_in\">touch</span> apptest.service  <span class=\"comment\"># 假如我起了一个叫apptest的服务</span></span><br></pre></td></tr></table></figure>\n<p><strong>编辑服务内容</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=apptest</span><br><span class=\"line\">After=network.target  <span class=\"comment\"># 因我的服务需要在网络连接成功后才能正常运行，故需要等网络服务启动后才运行</span></span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">ExecStart=/home/babyfengfjx/Desktop/apptest.py   <span class=\"comment\"># 此处就是需要启动的命令了，这个地方需要填写绝对路径，如果是后台运行的服务，不需要加nohup 这种了。</span></span><br><span class=\"line\">Type=simple</span><br><span class=\"line\">User=babyfengfjx   <span class=\"comment\"># 指定用我的普通用户运行，而不是用root</span></span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>\n<p><strong>启动服务</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">systemctl start apptest.service</span><br></pre></td></tr></table></figure>\n<p><strong>查看服务状态</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">systemctl status apptest.service</span><br></pre></td></tr></table></figure>\n<p>通过上述命令即可查看到该服务当前运行的状态，如果是<strong>running</strong>那就OK了，如果失败了则需要具体查看一下你的这个命令部分，一般都是这里出了问题。</p>\n<p><strong>个人出现的问题有</strong>：</p>\n<ul>\n<li>命令中加了nohup，之前是为了能方便在后台运行就加了这个，实际上systemd管理的服务是不需要这个部分的；</li>\n<li>命令中日志输出的部分，没有使用绝对路径，导致执行的是否没有写入权限报错了；</li>\n<li>我使用的是python，在开始执行的时候，我写的是<code>python3 /home/babyfengfjx/Desktop/apptest.py</code> 这个时候执行出现了报错，提示有一个python库没有安装，但我明明手动执行的时候是可以的呀，最后发现该服务是以root的名义去运行的，而我这个库只在当前普通用户中有，所以才会报错，最后直接将python执行部分写入到脚本开头中就OK了；</li>\n<li>因为我的脚本是需要普通用户执行的，所以加了一个User字段。</li>\n</ul>\n<h2 id=\"设置开机自启动\"><a href=\"#设置开机自启动\" class=\"headerlink\" title=\"设置开机自启动\"></a>设置开机自启动</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">systemctl <span class=\"built_in\">enable</span> apptest.service</span><br></pre></td></tr></table></figure>\n<p>就这么easy，上述操作后就完事了，后面系统无论如何重启，我的服务都能自己跑起来咯～</p>\n"},{"title":"shell脚本通过xargs配合管道符传递结果","date":"2021-06-03T03:21:34.000Z","_content":"---\n# shell脚本通过xargs配合管道符传递结果\n\n> xargs 是一个 Unix 命令，它的作用是将标准输入中的数据转换为命令行参数，并执行指定的命令。\n\n```Shell\n# 通过find来查找目录下的相关文件，然后传递给cat，注意这里的I参数很重要\nfind -name \"*list\" | xargs -I {} cat {} | grep -i \"^deb\"\n```\n\n**基本用法如下：**\n\n```shell\ncommand | xargs [-options] [command [initial-arguments]]\n```\n\n其中:\n\n- `command` 指定要执行的命令，`xargs` 会将标准输入中的数据作为命令行参数传递给这个命令。\n\n- `-options` 是可选的，用于指定 xargs 的行为方式。\n\n- `initial-arguments` 是可选的，表示在传递的命令行参数之前需要传递的额外参数。\n\n例如，你可以使用 xargs 将文件列表转换为 `rm` 命令的参数，从而删除多个文件：\n\n```shell\nfind . -name \"*.txt\" | xargs rm\n```\n\n或者你可以使用 xargs 将文本文件中的每一行作为 `grep` 命令的参数来搜索多个文件：\n\n```shell\ncat patterns.txt | xargs grep -l\n```\n\n当 xargs 处理的参数数量较多时，它会自动将这些参数分成多批执行，以避免命令行参数过长的问题。你可以使用 `-n` 选项来指定每批参数的数量，例如：\n\n```shell\nfind . -name \"*.txt\" | xargs -n 3 rm\n```\n\n这条命令会将找到的文件名分成多批，每批最多包含 3 个文件名。每批文件名都会作为 `rm` 命令的参数执行。\n\n**配合管道：**\n\n使用 xargs 配合管道是一种常见的模式，这种模式可以用于将输出结果传递给另一个命令作为参数。\n\n例如，你可以使用如下命令查找文件系统中大小超过 100MB 的文件，并使用 xargs 将这些文件删除：\n\n```shell\nfind / -size +100M | xargs rm\n```\n\n也可以使用 xargs 配合管道来实现更复杂的任务，例如：\n\n```shell\ngrep -R \"ERROR\" . | cut -d \":\" -f 1 | sort | uniq | xargs -I{} sed -i '/ERROR/d' {}\n```\n\n这条命令会在当前目录及子目录中查找所有包含 \"ERROR\" 的文件，然后删除这些文件中的 \"ERROR\" 行。\n\n需要注意的是，使用 xargs 配合管道时，应该**避免在管道中使用命令别名**，因为别名可能不会在 xargs 中生效。应该使用完整的命令名称。\n\n\n\n**上面的 -I{} 是什么意思:**\n\n**`-I{}` 是 xargs 的一个选项，用于指定命令中的某个位置应该插入参数**。\n\n例如，在上面的命令中，`-I{}` 表示在命令 `sed -i '/ERROR/d'` 中的 `{}` 处插入参数。因此，当 xargs 执行这条命令时，实际上会执行类似于 `sed -i '/ERROR/d' file1 file2 file3` 的命令。\n\n你可以使用任意的字符替换 `{}`，例如：\n\n```shell\nfind . -name \"*.txt\" | xargs -IXXX mv XXX backup/XXX\n```\n\n这条命令会将找到的所有 .txt 文件移动到 backup 目录下。\n\n需要注意的是，在使用 xargs 的 `-I` 选项时，**你需要确保命令中的替换字符（例如 `{}` 或 `XXX`）不会在命令本身中出现**。否则，xargs 可能会将命令中的字符也作为参数替换。\n\n**扩展：**\n\n除了 `-I` 选项外，xargs 还提供了其他的选项来控制命令的执行方式。\n\n例如，你可以使用 `-p` 选项来让 xargs 在执行命令前显示命令，以便你可以检查命令是否正确：\n\n```shell\necho a b c | xargs -p rm\n```\n\n这条命令会输出 `rm a b c`，然后询问你是否执行这条命令。你可以输入 `y` 来执行命令，或者输入 `n` 来取消执行。\n\n你还可以使用 `-t` 选项来让 xargs 在执行命令前输出命令，以便你可以跟踪命令的执行过程：\n\n```shell\necho a b c | xargs -t rm\n```\n\n这条命令会输出 `rm a b c`，然后执行命令。\n\n\n\n","source":"_posts/02常见网络存储服务搭建方法 (copy).md","raw":"---\ntitle: shell脚本通过xargs配合管道符传递结果\ncategories: \n- linux\n- shell\ntags:\n- linux\n- shell\ndate: 2021-06-03 11:21:34\n---\n---\n# shell脚本通过xargs配合管道符传递结果\n\n> xargs 是一个 Unix 命令，它的作用是将标准输入中的数据转换为命令行参数，并执行指定的命令。\n\n```Shell\n# 通过find来查找目录下的相关文件，然后传递给cat，注意这里的I参数很重要\nfind -name \"*list\" | xargs -I {} cat {} | grep -i \"^deb\"\n```\n\n**基本用法如下：**\n\n```shell\ncommand | xargs [-options] [command [initial-arguments]]\n```\n\n其中:\n\n- `command` 指定要执行的命令，`xargs` 会将标准输入中的数据作为命令行参数传递给这个命令。\n\n- `-options` 是可选的，用于指定 xargs 的行为方式。\n\n- `initial-arguments` 是可选的，表示在传递的命令行参数之前需要传递的额外参数。\n\n例如，你可以使用 xargs 将文件列表转换为 `rm` 命令的参数，从而删除多个文件：\n\n```shell\nfind . -name \"*.txt\" | xargs rm\n```\n\n或者你可以使用 xargs 将文本文件中的每一行作为 `grep` 命令的参数来搜索多个文件：\n\n```shell\ncat patterns.txt | xargs grep -l\n```\n\n当 xargs 处理的参数数量较多时，它会自动将这些参数分成多批执行，以避免命令行参数过长的问题。你可以使用 `-n` 选项来指定每批参数的数量，例如：\n\n```shell\nfind . -name \"*.txt\" | xargs -n 3 rm\n```\n\n这条命令会将找到的文件名分成多批，每批最多包含 3 个文件名。每批文件名都会作为 `rm` 命令的参数执行。\n\n**配合管道：**\n\n使用 xargs 配合管道是一种常见的模式，这种模式可以用于将输出结果传递给另一个命令作为参数。\n\n例如，你可以使用如下命令查找文件系统中大小超过 100MB 的文件，并使用 xargs 将这些文件删除：\n\n```shell\nfind / -size +100M | xargs rm\n```\n\n也可以使用 xargs 配合管道来实现更复杂的任务，例如：\n\n```shell\ngrep -R \"ERROR\" . | cut -d \":\" -f 1 | sort | uniq | xargs -I{} sed -i '/ERROR/d' {}\n```\n\n这条命令会在当前目录及子目录中查找所有包含 \"ERROR\" 的文件，然后删除这些文件中的 \"ERROR\" 行。\n\n需要注意的是，使用 xargs 配合管道时，应该**避免在管道中使用命令别名**，因为别名可能不会在 xargs 中生效。应该使用完整的命令名称。\n\n\n\n**上面的 -I{} 是什么意思:**\n\n**`-I{}` 是 xargs 的一个选项，用于指定命令中的某个位置应该插入参数**。\n\n例如，在上面的命令中，`-I{}` 表示在命令 `sed -i '/ERROR/d'` 中的 `{}` 处插入参数。因此，当 xargs 执行这条命令时，实际上会执行类似于 `sed -i '/ERROR/d' file1 file2 file3` 的命令。\n\n你可以使用任意的字符替换 `{}`，例如：\n\n```shell\nfind . -name \"*.txt\" | xargs -IXXX mv XXX backup/XXX\n```\n\n这条命令会将找到的所有 .txt 文件移动到 backup 目录下。\n\n需要注意的是，在使用 xargs 的 `-I` 选项时，**你需要确保命令中的替换字符（例如 `{}` 或 `XXX`）不会在命令本身中出现**。否则，xargs 可能会将命令中的字符也作为参数替换。\n\n**扩展：**\n\n除了 `-I` 选项外，xargs 还提供了其他的选项来控制命令的执行方式。\n\n例如，你可以使用 `-p` 选项来让 xargs 在执行命令前显示命令，以便你可以检查命令是否正确：\n\n```shell\necho a b c | xargs -p rm\n```\n\n这条命令会输出 `rm a b c`，然后询问你是否执行这条命令。你可以输入 `y` 来执行命令，或者输入 `n` 来取消执行。\n\n你还可以使用 `-t` 选项来让 xargs 在执行命令前输出命令，以便你可以跟踪命令的执行过程：\n\n```shell\necho a b c | xargs -t rm\n```\n\n这条命令会输出 `rm a b c`，然后执行命令。\n\n\n\n","slug":"02常见网络存储服务搭建方法 (copy)","published":1,"updated":"2023-01-03T07:02:50.048Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clcfvvv9l000384xhfif1a3fn","content":"<hr>\n<h1 id=\"shell脚本通过xargs配合管道符传递结果\"><a href=\"#shell脚本通过xargs配合管道符传递结果\" class=\"headerlink\" title=\"shell脚本通过xargs配合管道符传递结果\"></a>shell脚本通过xargs配合管道符传递结果</h1><blockquote>\n<p>xargs 是一个 Unix 命令，它的作用是将标准输入中的数据转换为命令行参数，并执行指定的命令。</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">通过find来查找目录下的相关文件，然后传递给<span class=\"built_in\">cat</span>，注意这里的I参数很重要</span></span><br><span class=\"line\">find -name &quot;*list&quot; | xargs -I &#123;&#125; cat &#123;&#125; | grep -i &quot;^deb&quot;</span><br></pre></td></tr></table></figure>\n\n<p><strong>基本用法如下：</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">command | xargs [-options] [command [initial-arguments]]</span><br></pre></td></tr></table></figure>\n\n<p>其中:</p>\n<ul>\n<li><p><code>command</code> 指定要执行的命令，<code>xargs</code> 会将标准输入中的数据作为命令行参数传递给这个命令。</p>\n</li>\n<li><p><code>-options</code> 是可选的，用于指定 xargs 的行为方式。</p>\n</li>\n<li><p><code>initial-arguments</code> 是可选的，表示在传递的命令行参数之前需要传递的额外参数。</p>\n</li>\n</ul>\n<p>例如，你可以使用 xargs 将文件列表转换为 <code>rm</code> 命令的参数，从而删除多个文件：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">find . -name &quot;*.txt&quot; | xargs rm</span><br></pre></td></tr></table></figure>\n\n<p>或者你可以使用 xargs 将文本文件中的每一行作为 <code>grep</code> 命令的参数来搜索多个文件：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">cat patterns.txt | xargs grep -l</span><br></pre></td></tr></table></figure>\n\n<p>当 xargs 处理的参数数量较多时，它会自动将这些参数分成多批执行，以避免命令行参数过长的问题。你可以使用 <code>-n</code> 选项来指定每批参数的数量，例如：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">find . -name &quot;*.txt&quot; | xargs -n 3 rm</span><br></pre></td></tr></table></figure>\n\n<p>这条命令会将找到的文件名分成多批，每批最多包含 3 个文件名。每批文件名都会作为 <code>rm</code> 命令的参数执行。</p>\n<p><strong>配合管道：</strong></p>\n<p>使用 xargs 配合管道是一种常见的模式，这种模式可以用于将输出结果传递给另一个命令作为参数。</p>\n<p>例如，你可以使用如下命令查找文件系统中大小超过 100MB 的文件，并使用 xargs 将这些文件删除：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">find / -size +100M | xargs rm</span><br></pre></td></tr></table></figure>\n\n<p>也可以使用 xargs 配合管道来实现更复杂的任务，例如：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">grep -R &quot;ERROR&quot; . | cut -d &quot;:&quot; -f 1 | sort | uniq | xargs -I&#123;&#125; sed -i &#x27;/ERROR/d&#x27; &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这条命令会在当前目录及子目录中查找所有包含 “ERROR” 的文件，然后删除这些文件中的 “ERROR” 行。</p>\n<p>需要注意的是，使用 xargs 配合管道时，应该<strong>避免在管道中使用命令别名</strong>，因为别名可能不会在 xargs 中生效。应该使用完整的命令名称。</p>\n<p><strong>上面的 -I{} 是什么意思:</strong></p>\n<p><strong><code>-I&#123;&#125;</code> 是 xargs 的一个选项，用于指定命令中的某个位置应该插入参数</strong>。</p>\n<p>例如，在上面的命令中，<code>-I&#123;&#125;</code> 表示在命令 <code>sed -i &#39;/ERROR/d&#39;</code> 中的 <code>&#123;&#125;</code> 处插入参数。因此，当 xargs 执行这条命令时，实际上会执行类似于 <code>sed -i &#39;/ERROR/d&#39; file1 file2 file3</code> 的命令。</p>\n<p>你可以使用任意的字符替换 <code>&#123;&#125;</code>，例如：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">find . -name &quot;*.txt&quot; | xargs -IXXX mv XXX backup/XXX</span><br></pre></td></tr></table></figure>\n\n<p>这条命令会将找到的所有 .txt 文件移动到 backup 目录下。</p>\n<p>需要注意的是，在使用 xargs 的 <code>-I</code> 选项时，<strong>你需要确保命令中的替换字符（例如 <code>&#123;&#125;</code> 或 <code>XXX</code>）不会在命令本身中出现</strong>。否则，xargs 可能会将命令中的字符也作为参数替换。</p>\n<p><strong>扩展：</strong></p>\n<p>除了 <code>-I</code> 选项外，xargs 还提供了其他的选项来控制命令的执行方式。</p>\n<p>例如，你可以使用 <code>-p</code> 选项来让 xargs 在执行命令前显示命令，以便你可以检查命令是否正确：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">echo a b c | xargs -p rm</span><br></pre></td></tr></table></figure>\n\n<p>这条命令会输出 <code>rm a b c</code>，然后询问你是否执行这条命令。你可以输入 <code>y</code> 来执行命令，或者输入 <code>n</code> 来取消执行。</p>\n<p>你还可以使用 <code>-t</code> 选项来让 xargs 在执行命令前输出命令，以便你可以跟踪命令的执行过程：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">echo a b c | xargs -t rm</span><br></pre></td></tr></table></figure>\n\n<p>这条命令会输出 <code>rm a b c</code>，然后执行命令。</p>\n","site":{"data":{}},"excerpt":"","more":"<hr>\n<h1 id=\"shell脚本通过xargs配合管道符传递结果\"><a href=\"#shell脚本通过xargs配合管道符传递结果\" class=\"headerlink\" title=\"shell脚本通过xargs配合管道符传递结果\"></a>shell脚本通过xargs配合管道符传递结果</h1><blockquote>\n<p>xargs 是一个 Unix 命令，它的作用是将标准输入中的数据转换为命令行参数，并执行指定的命令。</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">通过find来查找目录下的相关文件，然后传递给<span class=\"built_in\">cat</span>，注意这里的I参数很重要</span></span><br><span class=\"line\">find -name &quot;*list&quot; | xargs -I &#123;&#125; cat &#123;&#125; | grep -i &quot;^deb&quot;</span><br></pre></td></tr></table></figure>\n\n<p><strong>基本用法如下：</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">command | xargs [-options] [command [initial-arguments]]</span><br></pre></td></tr></table></figure>\n\n<p>其中:</p>\n<ul>\n<li><p><code>command</code> 指定要执行的命令，<code>xargs</code> 会将标准输入中的数据作为命令行参数传递给这个命令。</p>\n</li>\n<li><p><code>-options</code> 是可选的，用于指定 xargs 的行为方式。</p>\n</li>\n<li><p><code>initial-arguments</code> 是可选的，表示在传递的命令行参数之前需要传递的额外参数。</p>\n</li>\n</ul>\n<p>例如，你可以使用 xargs 将文件列表转换为 <code>rm</code> 命令的参数，从而删除多个文件：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">find . -name &quot;*.txt&quot; | xargs rm</span><br></pre></td></tr></table></figure>\n\n<p>或者你可以使用 xargs 将文本文件中的每一行作为 <code>grep</code> 命令的参数来搜索多个文件：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">cat patterns.txt | xargs grep -l</span><br></pre></td></tr></table></figure>\n\n<p>当 xargs 处理的参数数量较多时，它会自动将这些参数分成多批执行，以避免命令行参数过长的问题。你可以使用 <code>-n</code> 选项来指定每批参数的数量，例如：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">find . -name &quot;*.txt&quot; | xargs -n 3 rm</span><br></pre></td></tr></table></figure>\n\n<p>这条命令会将找到的文件名分成多批，每批最多包含 3 个文件名。每批文件名都会作为 <code>rm</code> 命令的参数执行。</p>\n<p><strong>配合管道：</strong></p>\n<p>使用 xargs 配合管道是一种常见的模式，这种模式可以用于将输出结果传递给另一个命令作为参数。</p>\n<p>例如，你可以使用如下命令查找文件系统中大小超过 100MB 的文件，并使用 xargs 将这些文件删除：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">find / -size +100M | xargs rm</span><br></pre></td></tr></table></figure>\n\n<p>也可以使用 xargs 配合管道来实现更复杂的任务，例如：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">grep -R &quot;ERROR&quot; . | cut -d &quot;:&quot; -f 1 | sort | uniq | xargs -I&#123;&#125; sed -i &#x27;/ERROR/d&#x27; &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这条命令会在当前目录及子目录中查找所有包含 “ERROR” 的文件，然后删除这些文件中的 “ERROR” 行。</p>\n<p>需要注意的是，使用 xargs 配合管道时，应该<strong>避免在管道中使用命令别名</strong>，因为别名可能不会在 xargs 中生效。应该使用完整的命令名称。</p>\n<p><strong>上面的 -I{} 是什么意思:</strong></p>\n<p><strong><code>-I&#123;&#125;</code> 是 xargs 的一个选项，用于指定命令中的某个位置应该插入参数</strong>。</p>\n<p>例如，在上面的命令中，<code>-I&#123;&#125;</code> 表示在命令 <code>sed -i &#39;/ERROR/d&#39;</code> 中的 <code>&#123;&#125;</code> 处插入参数。因此，当 xargs 执行这条命令时，实际上会执行类似于 <code>sed -i &#39;/ERROR/d&#39; file1 file2 file3</code> 的命令。</p>\n<p>你可以使用任意的字符替换 <code>&#123;&#125;</code>，例如：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">find . -name &quot;*.txt&quot; | xargs -IXXX mv XXX backup/XXX</span><br></pre></td></tr></table></figure>\n\n<p>这条命令会将找到的所有 .txt 文件移动到 backup 目录下。</p>\n<p>需要注意的是，在使用 xargs 的 <code>-I</code> 选项时，<strong>你需要确保命令中的替换字符（例如 <code>&#123;&#125;</code> 或 <code>XXX</code>）不会在命令本身中出现</strong>。否则，xargs 可能会将命令中的字符也作为参数替换。</p>\n<p><strong>扩展：</strong></p>\n<p>除了 <code>-I</code> 选项外，xargs 还提供了其他的选项来控制命令的执行方式。</p>\n<p>例如，你可以使用 <code>-p</code> 选项来让 xargs 在执行命令前显示命令，以便你可以检查命令是否正确：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">echo a b c | xargs -p rm</span><br></pre></td></tr></table></figure>\n\n<p>这条命令会输出 <code>rm a b c</code>，然后询问你是否执行这条命令。你可以输入 <code>y</code> 来执行命令，或者输入 <code>n</code> 来取消执行。</p>\n<p>你还可以使用 <code>-t</code> 选项来让 xargs 在执行命令前输出命令，以便你可以跟踪命令的执行过程：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">echo a b c | xargs -t rm</span><br></pre></td></tr></table></figure>\n\n<p>这条命令会输出 <code>rm a b c</code>，然后执行命令。</p>\n"},{"title":"常见网络存储服务搭建方法","date":"2022-06-03T03:21:34.000Z","_content":"---\n# Samba服务搭建\n>Samba是在Linux系统上实现SMB协议的一个免费软件，由服务器及客户端程序构成。SMB（Server Messages Block，信息服务块）是一种在局域网上共享文件和打印机的一种通信协议，它为局域网内的不同计算机之间提供文件及打印机等资源的共享服务。\n## 安装服务\n```bash\nsudo apt-get install samba-common samba\n```\n## 创建共享文件夹\n```bash\nsudo mkdir /opt/share\n```\n## 编辑配置文件\n> - 关于samba配置文件，smb.conf总共分为两大部分，分别为“全局设置（GIobal Settings）”和“共享定义（Share Definitions）”。全局设置定义于Samba服务器的整体行为，例如，工作组，主机名等方面。共享定义则用于设置的具体的共享目录或者设备中。\n> - 配置文件绝对路径在：```/etc/samba/smb.conf```\n\n### 全局设置\n- workgroup用于设置在windows中显示的工作组\n- server string是Samba服务器的说明\n- workgroup和server string字段后面的内容可以随便写\n- 通常来说，将Samba服务器的编码设置为UTF-8是比较好的，也能解决显示的问题：```unix charset = UTF-8```\n- 但是这样也会存在问题，UTF-8编码的中文文件名在某些系统下面会乱码，Samba提供了dos charset这个字段。下面这条配置命令为哪些不认识的Unicode的Windows系统使用GBK编码:```dos charset = cp936```\n- security字段设置了用户登录的验证方式，share和user是最常用到的两种。share方式允许任何用户登录到系统，而不用提供用户名和口令,但是由于Samba是默认要使用验证方式的，所以这里就要讲到user方式。这种方式要求用户提供账户信息供服务器验证，但是要使用user验证，Samba的配置文件里面就应该包含这一行:```security = user```\n### 共享设置\n这个文件叫做smb.conf（位于/etc或者/etc/samba目录下面），可以用uos系统自带的文本编辑器打开，在末尾输入：\n```bash\n[share] #\"[]\" 中的文字表示共享目录名字，可以随意设置\n    comment = Linux Share　 #comment字段用于设置这个共享目录的描述\n    path = /opt/share　　　　 #share指定了共享目录的路径\n    public = yes　　　　　　 #表示在windows的“网上邻居”中可见\n    writeable = no　　　　　 #writeable表示设置目录是否可写（yes是可写的意思）\n    browseable = yes　　　 #表示在windows的“网上邻居”中可见\n    guest ok = no 　　　　　#告诉Samba服务器这个共享目录允许匿名访问\n```\n## 添加用户\n\n```bash\nsudo useradd smbuser  # 新增一个叫smbuser的用户\nsudo smbpasswd -a smbuser  # 给这个新增用户创建samb共享密码\nNew SMB password:\nRetype new SMB password:\nAdded user smbuser\n```\n后面就可以使用带-U参数的smbpasswd命令修改已经有用户的口令。如果用户希望本地修改服务器上自己的口令，可以使用-r参数。下面的命令用户修改在服务器smbserver上smbuser用户的口令了\n\n```bash\nsmbpasswd -r smbserver -U smbuser\n```\n## 赋予权限\nsmbuser对共享目录写权限,一下配置需要写成yes\n```bash\nwriteable = yes\n```\n如果只写writeable = yes是远远不够的，如果服务器上的这么目录本身对smbuser不可写的话，就需要添加以下命令：\n```bash\nsudo chown smbuser:smbuser /opt/share\n```\n## 服务启动、停止、重启\n### 启动服务：```service smbd start```\n### 停止服务：```service smbd stop```\n### 重启服务：```service smbd restart```\n### 查看服务状态：```service smbd status```\n```bash\ndeepin@wh-k8snode-70:/etc/samba$ service smbd status\n● smbd.service - Samba SMB Daemon\n   Loaded: loaded (/lib/systemd/system/smbd.service; enabled; vendor preset: enabled)\n   Active: active (running) since Mon 2022-06-20 11:50:46 CST; 1h 57min ago\n     Docs: man:smbd(8)\n           man:samba(7)\n           man:smb.conf(5)\n  Process: 20165 ExecStartPre=/usr/share/samba/update-apparmor-samba-profile (code=exited, status=0/SUCCESS)\n Main PID: 20174 (smbd)\n   Status: \"smbd: ready to serve connections...\"\n    Tasks: 6 (limit: 4915)\n   Memory: 26.7M\n   CGroup: /system.slice/smbd.service\n           ├─ 8209 /usr/sbin/smbd --foreground --no-process-group\n           ├─10619 /usr/sbin/smbd --foreground --no-process-group\n           ├─20174 /usr/sbin/smbd --foreground --no-process-group\n           ├─20176 /usr/sbin/smbd --foreground --no-process-group\n           ├─20177 /usr/sbin/smbd --foreground --no-process-group\n           └─20178 /usr/sbin/smbd --foreground --no-process-group\n\n```\n## 常见问题\n1. 修改配置文件后，服务无法启动。\n> 在实际修改配置文件过程中，可能在参数后面有一些看不见的字符，会导致服务无法正常启动，最好检查每个修改的参数后面无一些空格或者其他特殊符号。\n2. 创建了几个samba用户，想通过不同的用户来对不同的文件进行访问，但是出现了报错（内容是不允许一个用户使用一个以上用户名与服务器或者共享资源的多重连接）\n**解决：**\n> 先断开现有的samba连接：cmd命令行下执行net use * /del /X\n> 再重新选择你要使用的目录，使用对应的用户名进行登录就可以了\n\n3. 配置好samba服务器，但是测试过程中会出现以下报错：\n>主要原因是因为服务器的防火墙没有关，可以选择在文件/etc/security/limits.conf下输入*　-   nofile   16384,然后shutdown -r now 重启一下就可以了\n\n4. samba服务器已经可以让windows通过网络来访问samba，但是没有办法写入，修改，删除，只能查看,出现这样的问题可能就是我们自己在配置的时候出现问题了，如果我的用户是deepin:\n```#chmod  777 FileServer```   　--这种操作就可以让组samba里的用户进行写操作了。\n```bash\n[deepin]\n   create mode =0664\n   force create mode=0750   #文件新建的权限为750\n   directory mode=0750      　#新建文件夹的权限只有组里的用户查看，其他组里的用户都没有权限进入\n```\n# FTP服务搭建\n## vsftpd配置使用\n>vsftpd 是Linus上非常安全好用的ftp服务，只需要简单的安装后就可以搭建起ftp服务；\n>该服务主要的配置文件就是vsftpd.conf ,在deepin/uos系统中的绝对路径是：/etc/vsftpd.conf\n### 安装\n只需要简单的进行安装配置即可，前提是你开启了开发者模式我们才能通过终端安装软件\n```bash\nsudo apt install vsftpd\n```\n如果提示没有找到对应安装包，则可能是没有进行仓库的更新连接，执行如下命令即可\n```bash\nsudo apt update \n```\n### 服务的启停配置\n#### 启动服务\n```bash\nservice vsftpd start\n```\n#### 停止服务\n```bash\nservice vsftpd stop\n```\n#### 重启服务\n```bash\nservice vsftpd restart\n```\n#### 查看服务状态\n```bash\nservice vsftpd status\n#执行后结果如下：active则表示正常运行，如果失败了则可以通过提示信息查询对应问题\nbabyfengfjx@babyfengfjx:~$ service vsftpd status \n● vsftpd.service - vsftpd FTP server\n   Loaded: loaded (/lib/systemd/system/vsftpd.service; enabled; vendor preset: enabled)\n   Active: active (running) since Sat 2021-10-09 16:22:48 CST; 1s ago\n  Process: 18334 ExecStartPre=/bin/mkdir -p /var/run/vsftpd/empty (code=exited, status=0/SUCCESS)\n Main PID: 18335 (vsftpd)\n    Tasks: 1 (limit: 4915)\n   Memory: 568.0K\n   CGroup: /system.slice/vsftpd.service\n           └─18335 /usr/sbin/vsftpd /etc/vsftpd.conf\n```\n#### 配置文件展示\n在使用该服务过程中，主要就是这些配置文件该如何配置，很多同学在实际配置过程中很难一次配置成功，这里就给出一个实际可用的配置参数以供参考 \n\n配置文件路径：/etc/vsftpd.conf\n\n配置过程中尽量是将匿名登录关闭，使用本地用户登录，以确保安全。 \n```bash\n# Example config file /etc/vsftpd.conf\n#\n# The default compiled in settings are fairly paranoid. This sample file\n# loosens things up a bit, to make the ftp daemon more usable.\n# Please see vsftpd.conf.5 for all compiled in defaults.\n#\n# READ THIS: This example file is NOT an exhaustive list of vsftpd options.\n# Please read the vsftpd.conf.5 manual page to get a full idea of vsftpd's\n# capabilities.\n#\n#\n# Run standalone?  vsftpd can run either from an inetd or as a standalone\n# daemon started from an initscript.\nlisten=YES\n#\n# This directive enables listening on IPv6 sockets. By default, listening\n# on the IPv6 \"any\" address (::) will accept connections from both IPv6\n# and IPv4 clients. It is not necessary to listen on *both* IPv4 and IPv6\n# sockets. If you want that (perhaps because you want to listen on specific\n# addresses) then you must run two copies of vsftpd with two configuration\n# files.\nlisten_ipv6=NO\n#\n# Allow anonymous FTP? (Disabled by default).\nanonymous_enable=NO\n#\n# Uncomment this to allow local users to log in.\nlocal_enable=YES\n#\n# Uncomment this to enable any form of FTP write command.\nwrite_enable=YES\n#\n# Default umask for local users is 077. You may wish to change this to 022,\n# if your users expect that (022 is used by most other ftpd's)\n#local_umask=022\n#\n# Uncomment this to allow the anonymous FTP user to upload files. This only\n# has an effect if the above global write enable is activated. Also, you will\n# obviously need to create a directory writable by the FTP user.\n#anon_upload_enable=YES\n#\n# Uncomment this if you want the anonymous FTP user to be able to create\n# new directories.\n#anon_mkdir_write_enable=YES\n#\n# Activate directory messages - messages given to remote users when they\n# go into a certain directory.\ndirmessage_enable=YES\n#\n# If enabled, vsftpd will display directory listings with the time\n# in  your  local  time  zone.  The default is to display GMT. The\n# times returned by the MDTM FTP command are also affected by this\n# option.\nuse_localtime=YES\n#\n# Activate logging of uploads/downloads.\nxferlog_enable=YES\n#\n# Make sure PORT transfer connections originate from port 20 (ftp-data).\nconnect_from_port_20=YES\n#\n# If you want, you can arrange for uploaded anonymous files to be owned by\n# a different user. Note! Using \"root\" for uploaded files is not\n# recommended!\n#chown_uploads=YES\n#chown_username=whoever\n#\n# You may override where the log file goes if you like. The default is shown\n# below.\n#xferlog_file=/var/log/vsftpd.log\n#\n# If you want, you can have your log file in standard ftpd xferlog format.\n# Note that the default log file location is /var/log/xferlog in this case.\n#xferlog_std_format=YES\n#\n# You may change the default value for timing out an idle session.\n#idle_session_timeout=600\n#\n# You may change the default value for timing out a data connection.\n#data_connection_timeout=120\n#\n# It is recommended that you define on your system a unique user which the\n# ftp server can use as a totally isolated and unprivileged user.\n#nopriv_user=ftpsecure\n#\n# Enable this and the server will recognise asynchronous ABOR requests. Not\n# recommended for security (the code is non-trivial). Not enabling it,\n# however, may confuse older FTP clients.\n#async_abor_enable=YES\n#\n# By default the server will pretend to allow ASCII mode but in fact ignore\n# the request. Turn on the below options to have the server actually do ASCII\n# mangling on files when in ASCII mode.\n# Beware that on some FTP servers, ASCII support allows a denial of service\n# attack (DoS) via the command \"SIZE /big/file\" in ASCII mode. vsftpd\n# predicted this attack and has always been safe, reporting the size of the\n# raw file.\n# ASCII mangling is a horrible feature of the protocol.\n#ascii_upload_enable=YES\n#ascii_download_enable=YES\n#\n# You may fully customise the login banner string:\n#ftpd_banner=Welcome to blah FTP service.\n#\n# You may specify a file of disallowed anonymous e-mail addresses. Apparently\n# useful for combatting certain DoS attacks.\n#deny_email_enable=YES\n# (default follows)\n#banned_email_file=/etc/vsftpd.banned_emails\n#\n# You may restrict local users to their home directories.  See the FAQ for\n# the possible risks in this before using chroot_local_user or\n# chroot_list_enable below.\n# chroot_local_user=YES\n#\n# You may specify an explicit list of local users to chroot() to their home\n# directory. If chroot_local_user is YES, then this list becomes a list of\n# users to NOT chroot().\n# (Warning! chroot'ing can be very dangerous. If using chroot, make sure that\n# the user does not have write access to the top level directory within the\n# chroot)\n# chroot_local_user=YES\n# chroot_list_enable=YES\n# (default follows)\n# chroot_list_file=/etc/vsftpd.chroot_list\n#\n# You may activate the \"-R\" option to the builtin ls. This is disabled by\n# default to avoid remote users being able to cause excessive I/O on large\n# sites. However, some broken FTP clients such as \"ncftp\" and \"mirror\" assume\n# the presence of the \"-R\" option, so there is a strong case for enabling it.\n#ls_recurse_enable=YES\n#\n# Customization\n#\n# Some of vsftpd's settings don't fit the filesystem layout by\n# default.\n#\n# This option should be the name of a directory which is empty.  Also, the\n# directory should not be writable by the ftp user. This directory is used\n# as a secure chroot() jail at times vsftpd does not require filesystem\n# access.\nsecure_chroot_dir=/var/run/vsftpd/empty\n#\n# This string is the name of the PAM service vsftpd will use.\npam_service_name=vsftpd\n#\n# This option specifies the location of the RSA certificate to use for SSL\n# encrypted connections.\nrsa_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pem\nrsa_private_key_file=/etc/ssl/private/ssl-cert-snakeoil.key\nssl_enable=NO\n\n\n#\n# Uncomment this to indicate that vsftpd use a utf8 filesystem.\n#utf8_filesystem=YES\n```\n\n#### 实际开启的配置项如下：\n按照如下简单的配置就可以通过本地用户进行访问了 \n```bash\nlisten=YES\nlisten_ipv6=NO\nanonymous_enable=NO\nlocal_enable=YES\nwrite_enable=YES\ndirmessage_enable=YES\nuse_localtime=YES\nxferlog_enable=YES\nconnect_from_port_20=YES\nsecure_chroot_dir=/var/run/vsftpd/empty\npam_service_name=vsftpd\nrsa_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pem\nrsa_private_key_file=/etc/ssl/private/ssl-cert-snakeoil.key\nssl_enable=NO\n```\n#### 遇到的问题\n- 无法配置指定根目录，也就是任何本地账户登录后的目录都是根目录，无法自定义配置指定目录，配置后也不生效； \n- 在添加新用户配置成nologin时，是无法正常使用该类用户进行访问的； \n- 添加的新用户，需要先登录一次后，方可使用该账号访问ftp; \n# SFTP服务搭建\n## 群组配置---服务端\n```bash\nsudo groupadd sftp\ncat /etc/group  # 确认组新建成功\nsudo vim /etc/group #修改 sftp:x:1002:\nsudo useradd -g sftp -s /bin/false mysftp \nsudo passwd mysftp # 设置新密码为服务器访问密码\n```\n## 共享目录---服务端\n```bash\nsudo mkdir -p /data/sftp/mysftp\nsudo usermod -d /data/sftp/mysftp mysftp\n```\n## 配置文件修改---服务端\n```bash\nsudo vim /etc/ssh/sshd_config\nSubsystem sftp /usr/libexec/openssh/sftp-server # 该行原本配置，需要手动注释掉\n并在文件最后面添加如下几行内容然后保存\nSubsystem sftp internal-sftp\nMatch Group sftp\nChrootDirectory /data/sftp/%u\nForceCommand internal-sftp\nAllowTcpForwarding no\nX11Forwarding no\n```\n## 目录授权与新建---服务端\n```bash\nsudo chown root:sftp /data/sftp/mysftp\nsudo chmod 755 /data/sftp/mysftp\nsudo mkdir /data/sftp/mysftp/upload\nsudo chown mysftp:sftp /data/sftp/mysftp/upload\nsudo chmod 755 /data/sftp/mysftp/upload\n```\n## 重启服务---服务端\n```bash\nsudo systemctl  restart sshd.service   # 重启服务时如果提示服务不存在，则先添加如下服务\nsystemctl enable ssh.service \n# 再执行：\nsudo systemctl  restart sshd.service \n```\n## 访问服务器---客户端\n进入文件管理器或我的电脑\n输入---例如sftp：//10.20.32.** （根据实际服务端IP输入，并键如账号密码，即可访问）\n# NFS服务搭建\n## 服务端\n### 工具安装\n```bash\nsudo apt-get install nfs-kernel-server # 安装 NFS服务器端\n```\n\n### 创建共享文件夹\n```bash\nsudo mkdir /home/deepin-server/nfs       # 路径可以根据自己需要设置\nsudo chmod -R 777 /home/deepin-server/nfs    # 设置共享目录权限\n```\n\n### 修改配置文件\n```vim /etc/exports```\n```bash\n配置文件虽然只有一句，但是其中还是有很多讲究； \n共享文件可执行权限有： \n      ro           只读访问 \n      rw           读写访问 \n      sync          所有数据在请求时写入共享 \n      hide          在NFS共享目录中不共享其子目录 \n      no_hide         共享NFS目录的子目录 \n      all_squash       共享文件的UID和GID映射匿名用户anonymous，适合公用目录。 \n      no_all_squash      保留共享文件的UID和GID（默认） \n      root_squash       root用户的所有请求映射成如anonymous用户一样的权限（默认） \n      no_root_squas      root用户具有根目录的完全管理访问权限 \nip配置一般需要进行限定，最好不要使用* ，不然存在安全问题，可以限定具体ip或者ip段才能挂载。 \n```\n\n### 配置文件修改如下：\n```\ndeepin-server@deepin-server-PC:~$ cat /etc/exports \n# /etc/exports: the access control list for filesystems which may be exported\n#               to NFS clients.  See exports(5).\n#\n# Example for NFSv2 and NFSv3:\n# /srv/homes       hostname1(rw,sync,no_subtree_check) hostname2(ro,sync,no_subtree_check)\n# Example for NFSv4:\n# /srv/nfs4        gss/krb5i(rw,sync,fsid=0,crossmnt,no_subtree_check)\n# /srv/nfs4/homes  gss/krb5i(rw,sync,no_subtree_check)\n/home/deepin-server/nfs  10.20.*(rw)#此处ip只做了部分限制，圆括号里面就是配置权限的。\n```\n### 启动服务\n```bash\nsystemctl start rpcbind nfs-server\n```\n\n### 查看服务状态\n```服务在running态即可\ndeepin-server@deepin-server-PC:~$ sudo systemctl status rpcbind nfs-server\n● rpcbind.service - RPC bind portmap service\n   Loaded: loaded (/lib/systemd/system/rpcbind.service; enabled; vendor preset: enabled)\n   Active: active (running) since Wed 2022-01-05 11:53:19 CST; 1h 56min ago\n     Docs: man:rpcbind(8)\n Main PID: 19304 (rpcbind)\n    Tasks: 1 (limit: 19660)\n   Memory: 608.0K\n   CGroup: /system.slice/rpcbind.service\n           └─19304 /sbin/rpcbind -f -w\n\n1月 05 11:53:19 deepin-server-PC systemd[1]: Starting RPC bind portmap service...\n1月 05 11:53:19 deepin-server-PC systemd[1]: Started RPC bind portmap service.\n\n● nfs-server.service - NFS server and services\n   Loaded: loaded (/lib/systemd/system/nfs-server.service; enabled; vendor preset: enabled)\n   Active: active (exited) since Wed 2022-01-05 11:53:21 CST; 1h 56min ago\n  Process: 19319 ExecStartPre=/usr/sbin/exportfs -r (code=exited, status=0/SUCCESS)\n  Process: 19320 ExecStart=/usr/sbin/rpc.nfsd $RPCNFSDARGS (code=exited, status=0/SUCCESS)\n Main PID: 19320 (code=exited, status=0/SUCCESS)\n\n1月 05 11:53:20 deepin-server-PC systemd[1]: Starting NFS server and services...\n1月 05 11:53:20 deepin-server-PC exportfs[19319]: exportfs: /etc/exports [1]: Neither 'subtree_check' or 'no_subtree_check' specified for export \"10.20.*:/home/deepin-server/Documents/NFS文件目录for-test\".\n1月 05 11:53:20 deepin-server-PC exportfs[19319]:   Assuming default behaviour ('no_subtree_check').\n1月 05 11:53:20 deepin-server-PC exportfs[19319]:   NOTE: this default has changed since nfs-utils version 1.0.x\n1月 05 11:53:21 deepin-server-PC systemd[1]: Started NFS server and services.\ndeepin-server@deepin-server-PC:~$ \n```\n至此服务端算是配置完成了。\n## 客户端配置\n客户端主要就是挂载操作，不过挂载nfs的时候同样需要安装客户端软件\n### 客户端安装\n```bash\nsudo apt-get install nfs-common\n```\n\n### 查看服务端nfs共享信息\n```bash\nshowmount -e 10.20.13.152\nbabyfengfjx@babyfengfjx:~$ showmount -e 10.20.13.152\nExport list for 10.20.13.152:\n/home/deepin-server/Documents/NFS文件目录for-test 10.20.*\nbabyfengfjx@babyfengfjx:~$ \n```\n### 客户端创建挂载目录\n随便在本地客户端创建一个目录作为NFS挂载目录即可\n```bash\nsudo mkdir /home/babyfengfjx/Documents/nfsfile/\n```\n\n### 客户端挂载\n将服务端的NFS共享目录，挂载到本地客户端对应目录即可\n```bash\nsudo mount -t nfs 10.20.13.152:/home/deepin-server/Documents/NFS文件目录for-test /home/babyfengfjx/Documents/nfsfile/\n```\n### 查看并传输文件\n上述操作完成后，此时就可以在客户端对应目录使用NFS存储了，上传新建文件均可以随心所欲。\n### 开机自动挂载\n写入fstab方法并不推荐，如果NFS挂载失败可能会影响设备正常启动 \n#### 写入fstab进行开机自动挂载\n```bash\necho \"10.20.13.152:/home/deepin-server/Documents/NFS文件目录for-test /home/babyfengfjx/Documents/nfsfile/ nfs4 defaults 0 0\" >> /etc/fstab\n mount -av\n```\n#### 通过配置开机自运行脚本\n**原理如下：**\n>新建 /etc/rc.local 文件\n>这种方法的原理是系统开机后会自动启动 rc-local 服务； \n>rc-local 服务启动后就会自动执行 /etc 目录下的 rc.local 脚本； \n>该方法的优点就是不存在第一种方法的三个缺点，脚本执行失败不会出现黑屏弹窗、sleep 不会造成开机黑屏以及执行脚本的用户是 root 用户。 \n\n\n**主要步骤：**\n1. 新建 /etc/rc.local 文件\n2. 粘贴以下模板\n```bash\n#!/bin/sh -e\n# rc.local\n# This script is executed at the end of each multiuser runlevel.\n# Make sure that the script will \"exit 0\" on success or any other\n# value on error.\n# In order to enable or disable this script just change the execution\n# bits.\n# By default this script does nothing.\n01.LitterScript/02.bbsmonitor/bbsmonitor.py >bbs.log 2>&1 &\n# 因为该命令本身就是会以root权限执行，所以不用加sudo\nsleep 5;mount -t nfs 10.20.13.152:/home/deepin-server/Documents/NFS文件目录for-test /home/babyfengfjx/Documents/nfsfile/\nexit 0\n```\n3. 在 exit 0 上方插入你需要自启的命令(一行一个)后保存文件\n4. 给脚本加上 755 权限\nsudo chmod +755 /etc/rc.local\n5. 调试脚本(可选)\nsudo /etc/rc.local # 使用 sudo 模拟 root 用户开机自启 /etc/rc.local 文件\n如果第 5 步模拟启动脚本没有报错，那我们就可以重启电脑看看是否可以成功实现脚本开机自启。重启进入系统后我们可以通过 systemctl status rc-local.service 查看 rc-local 的运行状态，如果结果显示的是 active (exited) 则说明你的脚本已经成功执行，反之如果结果显示 failed,那么你需要检查一下脚本是否哪里有问题。\n\n##### 这里提供可能导致脚本无法正常启动的原因：\n1、执行脚本的用户不一致\n由于 rc.local 开机自启的时候是以 root 用户执行的，这里很多人会忽略了一个问题，很多情况下你的命令是必须要普通用户执行的。比如 conky 和虚拟机(用户A建立的VBox和VM Ware虚拟机用户B无法访问)等。\n假设用户 lolimay 在终端用 VBoxHeadless -s aikuai & 后台启动了虚拟机名 aikuai，那么我们在 rc.local 文件应该用下面这种方式写：\n```su - lolimay -c \"VBoxHeadless -s aikuai &\" # 以 lolimay 用户执行该命令```\n2、多余的 sudo\n前面已经提到 rc.local 开机时是以 root 用户启动的，所以写在 rc.local 文件中命令不需要带有 sudo 前缀(实际上就算你带有了 sudo 前缀也不会产生错误)。\n3、最佳实践\n个人建议每当往 rc.local 文件中添加了一个需要自启的命令时，可以先用 sudo /etc/rc.local 命令模拟一下看看是否能够执行成功(如果执行失败也能够直观地看到出错的原因)，这样能够有效减少你重启电脑来调试的次数。\n\n","source":"_posts/02常见网络存储服务搭建方法.md","raw":"---\ntitle: 常见网络存储服务搭建方法\ncategories: \n- linux\n- 存储服务\ntags:\n- linux\n- ftp\n- NFS\ndate: 2022-06-03 11:21:34\n---\n---\n# Samba服务搭建\n>Samba是在Linux系统上实现SMB协议的一个免费软件，由服务器及客户端程序构成。SMB（Server Messages Block，信息服务块）是一种在局域网上共享文件和打印机的一种通信协议，它为局域网内的不同计算机之间提供文件及打印机等资源的共享服务。\n## 安装服务\n```bash\nsudo apt-get install samba-common samba\n```\n## 创建共享文件夹\n```bash\nsudo mkdir /opt/share\n```\n## 编辑配置文件\n> - 关于samba配置文件，smb.conf总共分为两大部分，分别为“全局设置（GIobal Settings）”和“共享定义（Share Definitions）”。全局设置定义于Samba服务器的整体行为，例如，工作组，主机名等方面。共享定义则用于设置的具体的共享目录或者设备中。\n> - 配置文件绝对路径在：```/etc/samba/smb.conf```\n\n### 全局设置\n- workgroup用于设置在windows中显示的工作组\n- server string是Samba服务器的说明\n- workgroup和server string字段后面的内容可以随便写\n- 通常来说，将Samba服务器的编码设置为UTF-8是比较好的，也能解决显示的问题：```unix charset = UTF-8```\n- 但是这样也会存在问题，UTF-8编码的中文文件名在某些系统下面会乱码，Samba提供了dos charset这个字段。下面这条配置命令为哪些不认识的Unicode的Windows系统使用GBK编码:```dos charset = cp936```\n- security字段设置了用户登录的验证方式，share和user是最常用到的两种。share方式允许任何用户登录到系统，而不用提供用户名和口令,但是由于Samba是默认要使用验证方式的，所以这里就要讲到user方式。这种方式要求用户提供账户信息供服务器验证，但是要使用user验证，Samba的配置文件里面就应该包含这一行:```security = user```\n### 共享设置\n这个文件叫做smb.conf（位于/etc或者/etc/samba目录下面），可以用uos系统自带的文本编辑器打开，在末尾输入：\n```bash\n[share] #\"[]\" 中的文字表示共享目录名字，可以随意设置\n    comment = Linux Share　 #comment字段用于设置这个共享目录的描述\n    path = /opt/share　　　　 #share指定了共享目录的路径\n    public = yes　　　　　　 #表示在windows的“网上邻居”中可见\n    writeable = no　　　　　 #writeable表示设置目录是否可写（yes是可写的意思）\n    browseable = yes　　　 #表示在windows的“网上邻居”中可见\n    guest ok = no 　　　　　#告诉Samba服务器这个共享目录允许匿名访问\n```\n## 添加用户\n\n```bash\nsudo useradd smbuser  # 新增一个叫smbuser的用户\nsudo smbpasswd -a smbuser  # 给这个新增用户创建samb共享密码\nNew SMB password:\nRetype new SMB password:\nAdded user smbuser\n```\n后面就可以使用带-U参数的smbpasswd命令修改已经有用户的口令。如果用户希望本地修改服务器上自己的口令，可以使用-r参数。下面的命令用户修改在服务器smbserver上smbuser用户的口令了\n\n```bash\nsmbpasswd -r smbserver -U smbuser\n```\n## 赋予权限\nsmbuser对共享目录写权限,一下配置需要写成yes\n```bash\nwriteable = yes\n```\n如果只写writeable = yes是远远不够的，如果服务器上的这么目录本身对smbuser不可写的话，就需要添加以下命令：\n```bash\nsudo chown smbuser:smbuser /opt/share\n```\n## 服务启动、停止、重启\n### 启动服务：```service smbd start```\n### 停止服务：```service smbd stop```\n### 重启服务：```service smbd restart```\n### 查看服务状态：```service smbd status```\n```bash\ndeepin@wh-k8snode-70:/etc/samba$ service smbd status\n● smbd.service - Samba SMB Daemon\n   Loaded: loaded (/lib/systemd/system/smbd.service; enabled; vendor preset: enabled)\n   Active: active (running) since Mon 2022-06-20 11:50:46 CST; 1h 57min ago\n     Docs: man:smbd(8)\n           man:samba(7)\n           man:smb.conf(5)\n  Process: 20165 ExecStartPre=/usr/share/samba/update-apparmor-samba-profile (code=exited, status=0/SUCCESS)\n Main PID: 20174 (smbd)\n   Status: \"smbd: ready to serve connections...\"\n    Tasks: 6 (limit: 4915)\n   Memory: 26.7M\n   CGroup: /system.slice/smbd.service\n           ├─ 8209 /usr/sbin/smbd --foreground --no-process-group\n           ├─10619 /usr/sbin/smbd --foreground --no-process-group\n           ├─20174 /usr/sbin/smbd --foreground --no-process-group\n           ├─20176 /usr/sbin/smbd --foreground --no-process-group\n           ├─20177 /usr/sbin/smbd --foreground --no-process-group\n           └─20178 /usr/sbin/smbd --foreground --no-process-group\n\n```\n## 常见问题\n1. 修改配置文件后，服务无法启动。\n> 在实际修改配置文件过程中，可能在参数后面有一些看不见的字符，会导致服务无法正常启动，最好检查每个修改的参数后面无一些空格或者其他特殊符号。\n2. 创建了几个samba用户，想通过不同的用户来对不同的文件进行访问，但是出现了报错（内容是不允许一个用户使用一个以上用户名与服务器或者共享资源的多重连接）\n**解决：**\n> 先断开现有的samba连接：cmd命令行下执行net use * /del /X\n> 再重新选择你要使用的目录，使用对应的用户名进行登录就可以了\n\n3. 配置好samba服务器，但是测试过程中会出现以下报错：\n>主要原因是因为服务器的防火墙没有关，可以选择在文件/etc/security/limits.conf下输入*　-   nofile   16384,然后shutdown -r now 重启一下就可以了\n\n4. samba服务器已经可以让windows通过网络来访问samba，但是没有办法写入，修改，删除，只能查看,出现这样的问题可能就是我们自己在配置的时候出现问题了，如果我的用户是deepin:\n```#chmod  777 FileServer```   　--这种操作就可以让组samba里的用户进行写操作了。\n```bash\n[deepin]\n   create mode =0664\n   force create mode=0750   #文件新建的权限为750\n   directory mode=0750      　#新建文件夹的权限只有组里的用户查看，其他组里的用户都没有权限进入\n```\n# FTP服务搭建\n## vsftpd配置使用\n>vsftpd 是Linus上非常安全好用的ftp服务，只需要简单的安装后就可以搭建起ftp服务；\n>该服务主要的配置文件就是vsftpd.conf ,在deepin/uos系统中的绝对路径是：/etc/vsftpd.conf\n### 安装\n只需要简单的进行安装配置即可，前提是你开启了开发者模式我们才能通过终端安装软件\n```bash\nsudo apt install vsftpd\n```\n如果提示没有找到对应安装包，则可能是没有进行仓库的更新连接，执行如下命令即可\n```bash\nsudo apt update \n```\n### 服务的启停配置\n#### 启动服务\n```bash\nservice vsftpd start\n```\n#### 停止服务\n```bash\nservice vsftpd stop\n```\n#### 重启服务\n```bash\nservice vsftpd restart\n```\n#### 查看服务状态\n```bash\nservice vsftpd status\n#执行后结果如下：active则表示正常运行，如果失败了则可以通过提示信息查询对应问题\nbabyfengfjx@babyfengfjx:~$ service vsftpd status \n● vsftpd.service - vsftpd FTP server\n   Loaded: loaded (/lib/systemd/system/vsftpd.service; enabled; vendor preset: enabled)\n   Active: active (running) since Sat 2021-10-09 16:22:48 CST; 1s ago\n  Process: 18334 ExecStartPre=/bin/mkdir -p /var/run/vsftpd/empty (code=exited, status=0/SUCCESS)\n Main PID: 18335 (vsftpd)\n    Tasks: 1 (limit: 4915)\n   Memory: 568.0K\n   CGroup: /system.slice/vsftpd.service\n           └─18335 /usr/sbin/vsftpd /etc/vsftpd.conf\n```\n#### 配置文件展示\n在使用该服务过程中，主要就是这些配置文件该如何配置，很多同学在实际配置过程中很难一次配置成功，这里就给出一个实际可用的配置参数以供参考 \n\n配置文件路径：/etc/vsftpd.conf\n\n配置过程中尽量是将匿名登录关闭，使用本地用户登录，以确保安全。 \n```bash\n# Example config file /etc/vsftpd.conf\n#\n# The default compiled in settings are fairly paranoid. This sample file\n# loosens things up a bit, to make the ftp daemon more usable.\n# Please see vsftpd.conf.5 for all compiled in defaults.\n#\n# READ THIS: This example file is NOT an exhaustive list of vsftpd options.\n# Please read the vsftpd.conf.5 manual page to get a full idea of vsftpd's\n# capabilities.\n#\n#\n# Run standalone?  vsftpd can run either from an inetd or as a standalone\n# daemon started from an initscript.\nlisten=YES\n#\n# This directive enables listening on IPv6 sockets. By default, listening\n# on the IPv6 \"any\" address (::) will accept connections from both IPv6\n# and IPv4 clients. It is not necessary to listen on *both* IPv4 and IPv6\n# sockets. If you want that (perhaps because you want to listen on specific\n# addresses) then you must run two copies of vsftpd with two configuration\n# files.\nlisten_ipv6=NO\n#\n# Allow anonymous FTP? (Disabled by default).\nanonymous_enable=NO\n#\n# Uncomment this to allow local users to log in.\nlocal_enable=YES\n#\n# Uncomment this to enable any form of FTP write command.\nwrite_enable=YES\n#\n# Default umask for local users is 077. You may wish to change this to 022,\n# if your users expect that (022 is used by most other ftpd's)\n#local_umask=022\n#\n# Uncomment this to allow the anonymous FTP user to upload files. This only\n# has an effect if the above global write enable is activated. Also, you will\n# obviously need to create a directory writable by the FTP user.\n#anon_upload_enable=YES\n#\n# Uncomment this if you want the anonymous FTP user to be able to create\n# new directories.\n#anon_mkdir_write_enable=YES\n#\n# Activate directory messages - messages given to remote users when they\n# go into a certain directory.\ndirmessage_enable=YES\n#\n# If enabled, vsftpd will display directory listings with the time\n# in  your  local  time  zone.  The default is to display GMT. The\n# times returned by the MDTM FTP command are also affected by this\n# option.\nuse_localtime=YES\n#\n# Activate logging of uploads/downloads.\nxferlog_enable=YES\n#\n# Make sure PORT transfer connections originate from port 20 (ftp-data).\nconnect_from_port_20=YES\n#\n# If you want, you can arrange for uploaded anonymous files to be owned by\n# a different user. Note! Using \"root\" for uploaded files is not\n# recommended!\n#chown_uploads=YES\n#chown_username=whoever\n#\n# You may override where the log file goes if you like. The default is shown\n# below.\n#xferlog_file=/var/log/vsftpd.log\n#\n# If you want, you can have your log file in standard ftpd xferlog format.\n# Note that the default log file location is /var/log/xferlog in this case.\n#xferlog_std_format=YES\n#\n# You may change the default value for timing out an idle session.\n#idle_session_timeout=600\n#\n# You may change the default value for timing out a data connection.\n#data_connection_timeout=120\n#\n# It is recommended that you define on your system a unique user which the\n# ftp server can use as a totally isolated and unprivileged user.\n#nopriv_user=ftpsecure\n#\n# Enable this and the server will recognise asynchronous ABOR requests. Not\n# recommended for security (the code is non-trivial). Not enabling it,\n# however, may confuse older FTP clients.\n#async_abor_enable=YES\n#\n# By default the server will pretend to allow ASCII mode but in fact ignore\n# the request. Turn on the below options to have the server actually do ASCII\n# mangling on files when in ASCII mode.\n# Beware that on some FTP servers, ASCII support allows a denial of service\n# attack (DoS) via the command \"SIZE /big/file\" in ASCII mode. vsftpd\n# predicted this attack and has always been safe, reporting the size of the\n# raw file.\n# ASCII mangling is a horrible feature of the protocol.\n#ascii_upload_enable=YES\n#ascii_download_enable=YES\n#\n# You may fully customise the login banner string:\n#ftpd_banner=Welcome to blah FTP service.\n#\n# You may specify a file of disallowed anonymous e-mail addresses. Apparently\n# useful for combatting certain DoS attacks.\n#deny_email_enable=YES\n# (default follows)\n#banned_email_file=/etc/vsftpd.banned_emails\n#\n# You may restrict local users to their home directories.  See the FAQ for\n# the possible risks in this before using chroot_local_user or\n# chroot_list_enable below.\n# chroot_local_user=YES\n#\n# You may specify an explicit list of local users to chroot() to their home\n# directory. If chroot_local_user is YES, then this list becomes a list of\n# users to NOT chroot().\n# (Warning! chroot'ing can be very dangerous. If using chroot, make sure that\n# the user does not have write access to the top level directory within the\n# chroot)\n# chroot_local_user=YES\n# chroot_list_enable=YES\n# (default follows)\n# chroot_list_file=/etc/vsftpd.chroot_list\n#\n# You may activate the \"-R\" option to the builtin ls. This is disabled by\n# default to avoid remote users being able to cause excessive I/O on large\n# sites. However, some broken FTP clients such as \"ncftp\" and \"mirror\" assume\n# the presence of the \"-R\" option, so there is a strong case for enabling it.\n#ls_recurse_enable=YES\n#\n# Customization\n#\n# Some of vsftpd's settings don't fit the filesystem layout by\n# default.\n#\n# This option should be the name of a directory which is empty.  Also, the\n# directory should not be writable by the ftp user. This directory is used\n# as a secure chroot() jail at times vsftpd does not require filesystem\n# access.\nsecure_chroot_dir=/var/run/vsftpd/empty\n#\n# This string is the name of the PAM service vsftpd will use.\npam_service_name=vsftpd\n#\n# This option specifies the location of the RSA certificate to use for SSL\n# encrypted connections.\nrsa_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pem\nrsa_private_key_file=/etc/ssl/private/ssl-cert-snakeoil.key\nssl_enable=NO\n\n\n#\n# Uncomment this to indicate that vsftpd use a utf8 filesystem.\n#utf8_filesystem=YES\n```\n\n#### 实际开启的配置项如下：\n按照如下简单的配置就可以通过本地用户进行访问了 \n```bash\nlisten=YES\nlisten_ipv6=NO\nanonymous_enable=NO\nlocal_enable=YES\nwrite_enable=YES\ndirmessage_enable=YES\nuse_localtime=YES\nxferlog_enable=YES\nconnect_from_port_20=YES\nsecure_chroot_dir=/var/run/vsftpd/empty\npam_service_name=vsftpd\nrsa_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pem\nrsa_private_key_file=/etc/ssl/private/ssl-cert-snakeoil.key\nssl_enable=NO\n```\n#### 遇到的问题\n- 无法配置指定根目录，也就是任何本地账户登录后的目录都是根目录，无法自定义配置指定目录，配置后也不生效； \n- 在添加新用户配置成nologin时，是无法正常使用该类用户进行访问的； \n- 添加的新用户，需要先登录一次后，方可使用该账号访问ftp; \n# SFTP服务搭建\n## 群组配置---服务端\n```bash\nsudo groupadd sftp\ncat /etc/group  # 确认组新建成功\nsudo vim /etc/group #修改 sftp:x:1002:\nsudo useradd -g sftp -s /bin/false mysftp \nsudo passwd mysftp # 设置新密码为服务器访问密码\n```\n## 共享目录---服务端\n```bash\nsudo mkdir -p /data/sftp/mysftp\nsudo usermod -d /data/sftp/mysftp mysftp\n```\n## 配置文件修改---服务端\n```bash\nsudo vim /etc/ssh/sshd_config\nSubsystem sftp /usr/libexec/openssh/sftp-server # 该行原本配置，需要手动注释掉\n并在文件最后面添加如下几行内容然后保存\nSubsystem sftp internal-sftp\nMatch Group sftp\nChrootDirectory /data/sftp/%u\nForceCommand internal-sftp\nAllowTcpForwarding no\nX11Forwarding no\n```\n## 目录授权与新建---服务端\n```bash\nsudo chown root:sftp /data/sftp/mysftp\nsudo chmod 755 /data/sftp/mysftp\nsudo mkdir /data/sftp/mysftp/upload\nsudo chown mysftp:sftp /data/sftp/mysftp/upload\nsudo chmod 755 /data/sftp/mysftp/upload\n```\n## 重启服务---服务端\n```bash\nsudo systemctl  restart sshd.service   # 重启服务时如果提示服务不存在，则先添加如下服务\nsystemctl enable ssh.service \n# 再执行：\nsudo systemctl  restart sshd.service \n```\n## 访问服务器---客户端\n进入文件管理器或我的电脑\n输入---例如sftp：//10.20.32.** （根据实际服务端IP输入，并键如账号密码，即可访问）\n# NFS服务搭建\n## 服务端\n### 工具安装\n```bash\nsudo apt-get install nfs-kernel-server # 安装 NFS服务器端\n```\n\n### 创建共享文件夹\n```bash\nsudo mkdir /home/deepin-server/nfs       # 路径可以根据自己需要设置\nsudo chmod -R 777 /home/deepin-server/nfs    # 设置共享目录权限\n```\n\n### 修改配置文件\n```vim /etc/exports```\n```bash\n配置文件虽然只有一句，但是其中还是有很多讲究； \n共享文件可执行权限有： \n      ro           只读访问 \n      rw           读写访问 \n      sync          所有数据在请求时写入共享 \n      hide          在NFS共享目录中不共享其子目录 \n      no_hide         共享NFS目录的子目录 \n      all_squash       共享文件的UID和GID映射匿名用户anonymous，适合公用目录。 \n      no_all_squash      保留共享文件的UID和GID（默认） \n      root_squash       root用户的所有请求映射成如anonymous用户一样的权限（默认） \n      no_root_squas      root用户具有根目录的完全管理访问权限 \nip配置一般需要进行限定，最好不要使用* ，不然存在安全问题，可以限定具体ip或者ip段才能挂载。 \n```\n\n### 配置文件修改如下：\n```\ndeepin-server@deepin-server-PC:~$ cat /etc/exports \n# /etc/exports: the access control list for filesystems which may be exported\n#               to NFS clients.  See exports(5).\n#\n# Example for NFSv2 and NFSv3:\n# /srv/homes       hostname1(rw,sync,no_subtree_check) hostname2(ro,sync,no_subtree_check)\n# Example for NFSv4:\n# /srv/nfs4        gss/krb5i(rw,sync,fsid=0,crossmnt,no_subtree_check)\n# /srv/nfs4/homes  gss/krb5i(rw,sync,no_subtree_check)\n/home/deepin-server/nfs  10.20.*(rw)#此处ip只做了部分限制，圆括号里面就是配置权限的。\n```\n### 启动服务\n```bash\nsystemctl start rpcbind nfs-server\n```\n\n### 查看服务状态\n```服务在running态即可\ndeepin-server@deepin-server-PC:~$ sudo systemctl status rpcbind nfs-server\n● rpcbind.service - RPC bind portmap service\n   Loaded: loaded (/lib/systemd/system/rpcbind.service; enabled; vendor preset: enabled)\n   Active: active (running) since Wed 2022-01-05 11:53:19 CST; 1h 56min ago\n     Docs: man:rpcbind(8)\n Main PID: 19304 (rpcbind)\n    Tasks: 1 (limit: 19660)\n   Memory: 608.0K\n   CGroup: /system.slice/rpcbind.service\n           └─19304 /sbin/rpcbind -f -w\n\n1月 05 11:53:19 deepin-server-PC systemd[1]: Starting RPC bind portmap service...\n1月 05 11:53:19 deepin-server-PC systemd[1]: Started RPC bind portmap service.\n\n● nfs-server.service - NFS server and services\n   Loaded: loaded (/lib/systemd/system/nfs-server.service; enabled; vendor preset: enabled)\n   Active: active (exited) since Wed 2022-01-05 11:53:21 CST; 1h 56min ago\n  Process: 19319 ExecStartPre=/usr/sbin/exportfs -r (code=exited, status=0/SUCCESS)\n  Process: 19320 ExecStart=/usr/sbin/rpc.nfsd $RPCNFSDARGS (code=exited, status=0/SUCCESS)\n Main PID: 19320 (code=exited, status=0/SUCCESS)\n\n1月 05 11:53:20 deepin-server-PC systemd[1]: Starting NFS server and services...\n1月 05 11:53:20 deepin-server-PC exportfs[19319]: exportfs: /etc/exports [1]: Neither 'subtree_check' or 'no_subtree_check' specified for export \"10.20.*:/home/deepin-server/Documents/NFS文件目录for-test\".\n1月 05 11:53:20 deepin-server-PC exportfs[19319]:   Assuming default behaviour ('no_subtree_check').\n1月 05 11:53:20 deepin-server-PC exportfs[19319]:   NOTE: this default has changed since nfs-utils version 1.0.x\n1月 05 11:53:21 deepin-server-PC systemd[1]: Started NFS server and services.\ndeepin-server@deepin-server-PC:~$ \n```\n至此服务端算是配置完成了。\n## 客户端配置\n客户端主要就是挂载操作，不过挂载nfs的时候同样需要安装客户端软件\n### 客户端安装\n```bash\nsudo apt-get install nfs-common\n```\n\n### 查看服务端nfs共享信息\n```bash\nshowmount -e 10.20.13.152\nbabyfengfjx@babyfengfjx:~$ showmount -e 10.20.13.152\nExport list for 10.20.13.152:\n/home/deepin-server/Documents/NFS文件目录for-test 10.20.*\nbabyfengfjx@babyfengfjx:~$ \n```\n### 客户端创建挂载目录\n随便在本地客户端创建一个目录作为NFS挂载目录即可\n```bash\nsudo mkdir /home/babyfengfjx/Documents/nfsfile/\n```\n\n### 客户端挂载\n将服务端的NFS共享目录，挂载到本地客户端对应目录即可\n```bash\nsudo mount -t nfs 10.20.13.152:/home/deepin-server/Documents/NFS文件目录for-test /home/babyfengfjx/Documents/nfsfile/\n```\n### 查看并传输文件\n上述操作完成后，此时就可以在客户端对应目录使用NFS存储了，上传新建文件均可以随心所欲。\n### 开机自动挂载\n写入fstab方法并不推荐，如果NFS挂载失败可能会影响设备正常启动 \n#### 写入fstab进行开机自动挂载\n```bash\necho \"10.20.13.152:/home/deepin-server/Documents/NFS文件目录for-test /home/babyfengfjx/Documents/nfsfile/ nfs4 defaults 0 0\" >> /etc/fstab\n mount -av\n```\n#### 通过配置开机自运行脚本\n**原理如下：**\n>新建 /etc/rc.local 文件\n>这种方法的原理是系统开机后会自动启动 rc-local 服务； \n>rc-local 服务启动后就会自动执行 /etc 目录下的 rc.local 脚本； \n>该方法的优点就是不存在第一种方法的三个缺点，脚本执行失败不会出现黑屏弹窗、sleep 不会造成开机黑屏以及执行脚本的用户是 root 用户。 \n\n\n**主要步骤：**\n1. 新建 /etc/rc.local 文件\n2. 粘贴以下模板\n```bash\n#!/bin/sh -e\n# rc.local\n# This script is executed at the end of each multiuser runlevel.\n# Make sure that the script will \"exit 0\" on success or any other\n# value on error.\n# In order to enable or disable this script just change the execution\n# bits.\n# By default this script does nothing.\n01.LitterScript/02.bbsmonitor/bbsmonitor.py >bbs.log 2>&1 &\n# 因为该命令本身就是会以root权限执行，所以不用加sudo\nsleep 5;mount -t nfs 10.20.13.152:/home/deepin-server/Documents/NFS文件目录for-test /home/babyfengfjx/Documents/nfsfile/\nexit 0\n```\n3. 在 exit 0 上方插入你需要自启的命令(一行一个)后保存文件\n4. 给脚本加上 755 权限\nsudo chmod +755 /etc/rc.local\n5. 调试脚本(可选)\nsudo /etc/rc.local # 使用 sudo 模拟 root 用户开机自启 /etc/rc.local 文件\n如果第 5 步模拟启动脚本没有报错，那我们就可以重启电脑看看是否可以成功实现脚本开机自启。重启进入系统后我们可以通过 systemctl status rc-local.service 查看 rc-local 的运行状态，如果结果显示的是 active (exited) 则说明你的脚本已经成功执行，反之如果结果显示 failed,那么你需要检查一下脚本是否哪里有问题。\n\n##### 这里提供可能导致脚本无法正常启动的原因：\n1、执行脚本的用户不一致\n由于 rc.local 开机自启的时候是以 root 用户执行的，这里很多人会忽略了一个问题，很多情况下你的命令是必须要普通用户执行的。比如 conky 和虚拟机(用户A建立的VBox和VM Ware虚拟机用户B无法访问)等。\n假设用户 lolimay 在终端用 VBoxHeadless -s aikuai & 后台启动了虚拟机名 aikuai，那么我们在 rc.local 文件应该用下面这种方式写：\n```su - lolimay -c \"VBoxHeadless -s aikuai &\" # 以 lolimay 用户执行该命令```\n2、多余的 sudo\n前面已经提到 rc.local 开机时是以 root 用户启动的，所以写在 rc.local 文件中命令不需要带有 sudo 前缀(实际上就算你带有了 sudo 前缀也不会产生错误)。\n3、最佳实践\n个人建议每当往 rc.local 文件中添加了一个需要自启的命令时，可以先用 sudo /etc/rc.local 命令模拟一下看看是否能够执行成功(如果执行失败也能够直观地看到出错的原因)，这样能够有效减少你重启电脑来调试的次数。\n\n","slug":"02常见网络存储服务搭建方法","published":1,"updated":"2023-01-03T05:29:32.542Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clcfvvv9o000784xh2fckdxq1","content":"<hr>\n<h1 id=\"Samba服务搭建\"><a href=\"#Samba服务搭建\" class=\"headerlink\" title=\"Samba服务搭建\"></a>Samba服务搭建</h1><blockquote>\n<p>Samba是在Linux系统上实现SMB协议的一个免费软件，由服务器及客户端程序构成。SMB（Server Messages Block，信息服务块）是一种在局域网上共享文件和打印机的一种通信协议，它为局域网内的不同计算机之间提供文件及打印机等资源的共享服务。</p>\n</blockquote>\n<h2 id=\"安装服务\"><a href=\"#安装服务\" class=\"headerlink\" title=\"安装服务\"></a>安装服务</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get install samba-common samba</span><br></pre></td></tr></table></figure>\n<h2 id=\"创建共享文件夹\"><a href=\"#创建共享文件夹\" class=\"headerlink\" title=\"创建共享文件夹\"></a>创建共享文件夹</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo <span class=\"built_in\">mkdir</span> /opt/share</span><br></pre></td></tr></table></figure>\n<h2 id=\"编辑配置文件\"><a href=\"#编辑配置文件\" class=\"headerlink\" title=\"编辑配置文件\"></a>编辑配置文件</h2><blockquote>\n<ul>\n<li>关于samba配置文件，smb.conf总共分为两大部分，分别为“全局设置（GIobal Settings）”和“共享定义（Share Definitions）”。全局设置定义于Samba服务器的整体行为，例如，工作组，主机名等方面。共享定义则用于设置的具体的共享目录或者设备中。</li>\n<li>配置文件绝对路径在：<code>/etc/samba/smb.conf</code></li>\n</ul>\n</blockquote>\n<h3 id=\"全局设置\"><a href=\"#全局设置\" class=\"headerlink\" title=\"全局设置\"></a>全局设置</h3><ul>\n<li>workgroup用于设置在windows中显示的工作组</li>\n<li>server string是Samba服务器的说明</li>\n<li>workgroup和server string字段后面的内容可以随便写</li>\n<li>通常来说，将Samba服务器的编码设置为UTF-8是比较好的，也能解决显示的问题：<code>unix charset = UTF-8</code></li>\n<li>但是这样也会存在问题，UTF-8编码的中文文件名在某些系统下面会乱码，Samba提供了dos charset这个字段。下面这条配置命令为哪些不认识的Unicode的Windows系统使用GBK编码:<code>dos charset = cp936</code></li>\n<li>security字段设置了用户登录的验证方式，share和user是最常用到的两种。share方式允许任何用户登录到系统，而不用提供用户名和口令,但是由于Samba是默认要使用验证方式的，所以这里就要讲到user方式。这种方式要求用户提供账户信息供服务器验证，但是要使用user验证，Samba的配置文件里面就应该包含这一行:<code>security = user</code></li>\n</ul>\n<h3 id=\"共享设置\"><a href=\"#共享设置\" class=\"headerlink\" title=\"共享设置\"></a>共享设置</h3><p>这个文件叫做smb.conf（位于&#x2F;etc或者&#x2F;etc&#x2F;samba目录下面），可以用uos系统自带的文本编辑器打开，在末尾输入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[share] <span class=\"comment\">#&quot;[]&quot; 中的文字表示共享目录名字，可以随意设置</span></span><br><span class=\"line\">    comment = Linux Share　 <span class=\"comment\">#comment字段用于设置这个共享目录的描述</span></span><br><span class=\"line\">    path = /opt/share　　　　 <span class=\"comment\">#share指定了共享目录的路径</span></span><br><span class=\"line\">    public = <span class=\"built_in\">yes</span>　　　　　　 <span class=\"comment\">#表示在windows的“网上邻居”中可见</span></span><br><span class=\"line\">    writeable = no　　　　　 <span class=\"comment\">#writeable表示设置目录是否可写（yes是可写的意思）</span></span><br><span class=\"line\">    browseable = <span class=\"built_in\">yes</span>　　　 <span class=\"comment\">#表示在windows的“网上邻居”中可见</span></span><br><span class=\"line\">    guest ok = no 　　　　　<span class=\"comment\">#告诉Samba服务器这个共享目录允许匿名访问</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"添加用户\"><a href=\"#添加用户\" class=\"headerlink\" title=\"添加用户\"></a>添加用户</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo useradd smbuser  <span class=\"comment\"># 新增一个叫smbuser的用户</span></span><br><span class=\"line\">sudo smbpasswd -a smbuser  <span class=\"comment\"># 给这个新增用户创建samb共享密码</span></span><br><span class=\"line\">New SMB password:</span><br><span class=\"line\">Retype new SMB password:</span><br><span class=\"line\">Added user smbuser</span><br></pre></td></tr></table></figure>\n<p>后面就可以使用带-U参数的smbpasswd命令修改已经有用户的口令。如果用户希望本地修改服务器上自己的口令，可以使用-r参数。下面的命令用户修改在服务器smbserver上smbuser用户的口令了</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">smbpasswd -r smbserver -U smbuser</span><br></pre></td></tr></table></figure>\n<h2 id=\"赋予权限\"><a href=\"#赋予权限\" class=\"headerlink\" title=\"赋予权限\"></a>赋予权限</h2><p>smbuser对共享目录写权限,一下配置需要写成yes</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">writeable = <span class=\"built_in\">yes</span></span><br></pre></td></tr></table></figure>\n<p>如果只写writeable &#x3D; yes是远远不够的，如果服务器上的这么目录本身对smbuser不可写的话，就需要添加以下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo <span class=\"built_in\">chown</span> smbuser:smbuser /opt/share</span><br></pre></td></tr></table></figure>\n<h2 id=\"服务启动、停止、重启\"><a href=\"#服务启动、停止、重启\" class=\"headerlink\" title=\"服务启动、停止、重启\"></a>服务启动、停止、重启</h2><h3 id=\"启动服务：service-smbd-start\"><a href=\"#启动服务：service-smbd-start\" class=\"headerlink\" title=\"启动服务：service smbd start\"></a>启动服务：<code>service smbd start</code></h3><h3 id=\"停止服务：service-smbd-stop\"><a href=\"#停止服务：service-smbd-stop\" class=\"headerlink\" title=\"停止服务：service smbd stop\"></a>停止服务：<code>service smbd stop</code></h3><h3 id=\"重启服务：service-smbd-restart\"><a href=\"#重启服务：service-smbd-restart\" class=\"headerlink\" title=\"重启服务：service smbd restart\"></a>重启服务：<code>service smbd restart</code></h3><h3 id=\"查看服务状态：service-smbd-status\"><a href=\"#查看服务状态：service-smbd-status\" class=\"headerlink\" title=\"查看服务状态：service smbd status\"></a>查看服务状态：<code>service smbd status</code></h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">deepin@wh-k8snode-70:/etc/samba$ service smbd status</span><br><span class=\"line\">● smbd.service - Samba SMB Daemon</span><br><span class=\"line\">   Loaded: loaded (/lib/systemd/system/smbd.service; enabled; vendor preset: enabled)</span><br><span class=\"line\">   Active: active (running) since Mon 2022-06-20 11:50:46 CST; 1h 57min ago</span><br><span class=\"line\">     Docs: man:smbd(8)</span><br><span class=\"line\">           man:samba(7)</span><br><span class=\"line\">           man:smb.conf(5)</span><br><span class=\"line\">  Process: 20165 ExecStartPre=/usr/share/samba/update-apparmor-samba-profile (code=exited, status=0/SUCCESS)</span><br><span class=\"line\"> Main PID: 20174 (smbd)</span><br><span class=\"line\">   Status: <span class=\"string\">&quot;smbd: ready to serve connections...&quot;</span></span><br><span class=\"line\">    Tasks: 6 (<span class=\"built_in\">limit</span>: 4915)</span><br><span class=\"line\">   Memory: 26.7M</span><br><span class=\"line\">   CGroup: /system.slice/smbd.service</span><br><span class=\"line\">           ├─ 8209 /usr/sbin/smbd --foreground --no-process-group</span><br><span class=\"line\">           ├─10619 /usr/sbin/smbd --foreground --no-process-group</span><br><span class=\"line\">           ├─20174 /usr/sbin/smbd --foreground --no-process-group</span><br><span class=\"line\">           ├─20176 /usr/sbin/smbd --foreground --no-process-group</span><br><span class=\"line\">           ├─20177 /usr/sbin/smbd --foreground --no-process-group</span><br><span class=\"line\">           └─20178 /usr/sbin/smbd --foreground --no-process-group</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h2><ol>\n<li><p>修改配置文件后，服务无法启动。</p>\n<blockquote>\n<p>在实际修改配置文件过程中，可能在参数后面有一些看不见的字符，会导致服务无法正常启动，最好检查每个修改的参数后面无一些空格或者其他特殊符号。</p>\n</blockquote>\n</li>\n<li><p>创建了几个samba用户，想通过不同的用户来对不同的文件进行访问，但是出现了报错（内容是不允许一个用户使用一个以上用户名与服务器或者共享资源的多重连接）<br><strong>解决：</strong></p>\n<blockquote>\n<p>先断开现有的samba连接：cmd命令行下执行net use * &#x2F;del &#x2F;X<br>再重新选择你要使用的目录，使用对应的用户名进行登录就可以了</p>\n</blockquote>\n</li>\n<li><p>配置好samba服务器，但是测试过程中会出现以下报错：</p>\n<blockquote>\n<p>主要原因是因为服务器的防火墙没有关，可以选择在文件&#x2F;etc&#x2F;security&#x2F;limits.conf下输入*　-   nofile   16384,然后shutdown -r now 重启一下就可以了</p>\n</blockquote>\n</li>\n<li><p>samba服务器已经可以让windows通过网络来访问samba，但是没有办法写入，修改，删除，只能查看,出现这样的问题可能就是我们自己在配置的时候出现问题了，如果我的用户是deepin:</p>\n<figure class=\"highlight plaintext\"><figcaption><span>777 FileServer```   　--这种操作就可以让组samba里的用户进行写操作了。</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\">```bash</span><br><span class=\"line\">[deepin]</span><br><span class=\"line\">   create mode =0664</span><br><span class=\"line\">   force create mode=0750   #文件新建的权限为750</span><br><span class=\"line\">   directory mode=0750      　#新建文件夹的权限只有组里的用户查看，其他组里的用户都没有权限进入</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h1 id=\"FTP服务搭建\"><a href=\"#FTP服务搭建\" class=\"headerlink\" title=\"FTP服务搭建\"></a>FTP服务搭建</h1><h2 id=\"vsftpd配置使用\"><a href=\"#vsftpd配置使用\" class=\"headerlink\" title=\"vsftpd配置使用\"></a>vsftpd配置使用</h2><blockquote>\n<p>vsftpd 是Linus上非常安全好用的ftp服务，只需要简单的安装后就可以搭建起ftp服务；<br>该服务主要的配置文件就是vsftpd.conf ,在deepin&#x2F;uos系统中的绝对路径是：&#x2F;etc&#x2F;vsftpd.conf</p>\n</blockquote>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>只需要简单的进行安装配置即可，前提是你开启了开发者模式我们才能通过终端安装软件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt install vsftpd</span><br></pre></td></tr></table></figure>\n<p>如果提示没有找到对应安装包，则可能是没有进行仓库的更新连接，执行如下命令即可</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt update </span><br></pre></td></tr></table></figure>\n<h3 id=\"服务的启停配置\"><a href=\"#服务的启停配置\" class=\"headerlink\" title=\"服务的启停配置\"></a>服务的启停配置</h3><h4 id=\"启动服务\"><a href=\"#启动服务\" class=\"headerlink\" title=\"启动服务\"></a>启动服务</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">service vsftpd start</span><br></pre></td></tr></table></figure>\n<h4 id=\"停止服务\"><a href=\"#停止服务\" class=\"headerlink\" title=\"停止服务\"></a>停止服务</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">service vsftpd stop</span><br></pre></td></tr></table></figure>\n<h4 id=\"重启服务\"><a href=\"#重启服务\" class=\"headerlink\" title=\"重启服务\"></a>重启服务</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">service vsftpd restart</span><br></pre></td></tr></table></figure>\n<h4 id=\"查看服务状态\"><a href=\"#查看服务状态\" class=\"headerlink\" title=\"查看服务状态\"></a>查看服务状态</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">service vsftpd status</span><br><span class=\"line\"><span class=\"comment\">#执行后结果如下：active则表示正常运行，如果失败了则可以通过提示信息查询对应问题</span></span><br><span class=\"line\">babyfengfjx@babyfengfjx:~$ service vsftpd status </span><br><span class=\"line\">● vsftpd.service - vsftpd FTP server</span><br><span class=\"line\">   Loaded: loaded (/lib/systemd/system/vsftpd.service; enabled; vendor preset: enabled)</span><br><span class=\"line\">   Active: active (running) since Sat 2021-10-09 16:22:48 CST; 1s ago</span><br><span class=\"line\">  Process: 18334 ExecStartPre=/bin/mkdir -p /var/run/vsftpd/empty (code=exited, status=0/SUCCESS)</span><br><span class=\"line\"> Main PID: 18335 (vsftpd)</span><br><span class=\"line\">    Tasks: 1 (<span class=\"built_in\">limit</span>: 4915)</span><br><span class=\"line\">   Memory: 568.0K</span><br><span class=\"line\">   CGroup: /system.slice/vsftpd.service</span><br><span class=\"line\">           └─18335 /usr/sbin/vsftpd /etc/vsftpd.conf</span><br></pre></td></tr></table></figure>\n<h4 id=\"配置文件展示\"><a href=\"#配置文件展示\" class=\"headerlink\" title=\"配置文件展示\"></a>配置文件展示</h4><p>在使用该服务过程中，主要就是这些配置文件该如何配置，很多同学在实际配置过程中很难一次配置成功，这里就给出一个实际可用的配置参数以供参考 </p>\n<p>配置文件路径：&#x2F;etc&#x2F;vsftpd.conf</p>\n<p>配置过程中尽量是将匿名登录关闭，使用本地用户登录，以确保安全。 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Example config file /etc/vsftpd.conf</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># The default compiled in settings are fairly paranoid. This sample file</span></span><br><span class=\"line\"><span class=\"comment\"># loosens things up a bit, to make the ftp daemon more usable.</span></span><br><span class=\"line\"><span class=\"comment\"># Please see vsftpd.conf.5 for all compiled in defaults.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># READ THIS: This example file is NOT an exhaustive list of vsftpd options.</span></span><br><span class=\"line\"><span class=\"comment\"># Please read the vsftpd.conf.5 manual page to get a full idea of vsftpd&#x27;s</span></span><br><span class=\"line\"><span class=\"comment\"># capabilities.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Run standalone?  vsftpd can run either from an inetd or as a standalone</span></span><br><span class=\"line\"><span class=\"comment\"># daemon started from an initscript.</span></span><br><span class=\"line\">listen=YES</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># This directive enables listening on IPv6 sockets. By default, listening</span></span><br><span class=\"line\"><span class=\"comment\"># on the IPv6 &quot;any&quot; address (::) will accept connections from both IPv6</span></span><br><span class=\"line\"><span class=\"comment\"># and IPv4 clients. It is not necessary to listen on *both* IPv4 and IPv6</span></span><br><span class=\"line\"><span class=\"comment\"># sockets. If you want that (perhaps because you want to listen on specific</span></span><br><span class=\"line\"><span class=\"comment\"># addresses) then you must run two copies of vsftpd with two configuration</span></span><br><span class=\"line\"><span class=\"comment\"># files.</span></span><br><span class=\"line\">listen_ipv6=NO</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Allow anonymous FTP? (Disabled by default).</span></span><br><span class=\"line\">anonymous_enable=NO</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Uncomment this to allow local users to log in.</span></span><br><span class=\"line\">local_enable=YES</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Uncomment this to enable any form of FTP write command.</span></span><br><span class=\"line\">write_enable=YES</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Default umask for local users is 077. You may wish to change this to 022,</span></span><br><span class=\"line\"><span class=\"comment\"># if your users expect that (022 is used by most other ftpd&#x27;s)</span></span><br><span class=\"line\"><span class=\"comment\">#local_umask=022</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Uncomment this to allow the anonymous FTP user to upload files. This only</span></span><br><span class=\"line\"><span class=\"comment\"># has an effect if the above global write enable is activated. Also, you will</span></span><br><span class=\"line\"><span class=\"comment\"># obviously need to create a directory writable by the FTP user.</span></span><br><span class=\"line\"><span class=\"comment\">#anon_upload_enable=YES</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Uncomment this if you want the anonymous FTP user to be able to create</span></span><br><span class=\"line\"><span class=\"comment\"># new directories.</span></span><br><span class=\"line\"><span class=\"comment\">#anon_mkdir_write_enable=YES</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Activate directory messages - messages given to remote users when they</span></span><br><span class=\"line\"><span class=\"comment\"># go into a certain directory.</span></span><br><span class=\"line\">dirmessage_enable=YES</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># If enabled, vsftpd will display directory listings with the time</span></span><br><span class=\"line\"><span class=\"comment\"># in  your  local  time  zone.  The default is to display GMT. The</span></span><br><span class=\"line\"><span class=\"comment\"># times returned by the MDTM FTP command are also affected by this</span></span><br><span class=\"line\"><span class=\"comment\"># option.</span></span><br><span class=\"line\">use_localtime=YES</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Activate logging of uploads/downloads.</span></span><br><span class=\"line\">xferlog_enable=YES</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Make sure PORT transfer connections originate from port 20 (ftp-data).</span></span><br><span class=\"line\">connect_from_port_20=YES</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># If you want, you can arrange for uploaded anonymous files to be owned by</span></span><br><span class=\"line\"><span class=\"comment\"># a different user. Note! Using &quot;root&quot; for uploaded files is not</span></span><br><span class=\"line\"><span class=\"comment\"># recommended!</span></span><br><span class=\"line\"><span class=\"comment\">#chown_uploads=YES</span></span><br><span class=\"line\"><span class=\"comment\">#chown_username=whoever</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># You may override where the log file goes if you like. The default is shown</span></span><br><span class=\"line\"><span class=\"comment\"># below.</span></span><br><span class=\"line\"><span class=\"comment\">#xferlog_file=/var/log/vsftpd.log</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># If you want, you can have your log file in standard ftpd xferlog format.</span></span><br><span class=\"line\"><span class=\"comment\"># Note that the default log file location is /var/log/xferlog in this case.</span></span><br><span class=\"line\"><span class=\"comment\">#xferlog_std_format=YES</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># You may change the default value for timing out an idle session.</span></span><br><span class=\"line\"><span class=\"comment\">#idle_session_timeout=600</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># You may change the default value for timing out a data connection.</span></span><br><span class=\"line\"><span class=\"comment\">#data_connection_timeout=120</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># It is recommended that you define on your system a unique user which the</span></span><br><span class=\"line\"><span class=\"comment\"># ftp server can use as a totally isolated and unprivileged user.</span></span><br><span class=\"line\"><span class=\"comment\">#nopriv_user=ftpsecure</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Enable this and the server will recognise asynchronous ABOR requests. Not</span></span><br><span class=\"line\"><span class=\"comment\"># recommended for security (the code is non-trivial). Not enabling it,</span></span><br><span class=\"line\"><span class=\"comment\"># however, may confuse older FTP clients.</span></span><br><span class=\"line\"><span class=\"comment\">#async_abor_enable=YES</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># By default the server will pretend to allow ASCII mode but in fact ignore</span></span><br><span class=\"line\"><span class=\"comment\"># the request. Turn on the below options to have the server actually do ASCII</span></span><br><span class=\"line\"><span class=\"comment\"># mangling on files when in ASCII mode.</span></span><br><span class=\"line\"><span class=\"comment\"># Beware that on some FTP servers, ASCII support allows a denial of service</span></span><br><span class=\"line\"><span class=\"comment\"># attack (DoS) via the command &quot;SIZE /big/file&quot; in ASCII mode. vsftpd</span></span><br><span class=\"line\"><span class=\"comment\"># predicted this attack and has always been safe, reporting the size of the</span></span><br><span class=\"line\"><span class=\"comment\"># raw file.</span></span><br><span class=\"line\"><span class=\"comment\"># ASCII mangling is a horrible feature of the protocol.</span></span><br><span class=\"line\"><span class=\"comment\">#ascii_upload_enable=YES</span></span><br><span class=\"line\"><span class=\"comment\">#ascii_download_enable=YES</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># You may fully customise the login banner string:</span></span><br><span class=\"line\"><span class=\"comment\">#ftpd_banner=Welcome to blah FTP service.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># You may specify a file of disallowed anonymous e-mail addresses. Apparently</span></span><br><span class=\"line\"><span class=\"comment\"># useful for combatting certain DoS attacks.</span></span><br><span class=\"line\"><span class=\"comment\">#deny_email_enable=YES</span></span><br><span class=\"line\"><span class=\"comment\"># (default follows)</span></span><br><span class=\"line\"><span class=\"comment\">#banned_email_file=/etc/vsftpd.banned_emails</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># You may restrict local users to their home directories.  See the FAQ for</span></span><br><span class=\"line\"><span class=\"comment\"># the possible risks in this before using chroot_local_user or</span></span><br><span class=\"line\"><span class=\"comment\"># chroot_list_enable below.</span></span><br><span class=\"line\"><span class=\"comment\"># chroot_local_user=YES</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># You may specify an explicit list of local users to chroot() to their home</span></span><br><span class=\"line\"><span class=\"comment\"># directory. If chroot_local_user is YES, then this list becomes a list of</span></span><br><span class=\"line\"><span class=\"comment\"># users to NOT chroot().</span></span><br><span class=\"line\"><span class=\"comment\"># (Warning! chroot&#x27;ing can be very dangerous. If using chroot, make sure that</span></span><br><span class=\"line\"><span class=\"comment\"># the user does not have write access to the top level directory within the</span></span><br><span class=\"line\"><span class=\"comment\"># chroot)</span></span><br><span class=\"line\"><span class=\"comment\"># chroot_local_user=YES</span></span><br><span class=\"line\"><span class=\"comment\"># chroot_list_enable=YES</span></span><br><span class=\"line\"><span class=\"comment\"># (default follows)</span></span><br><span class=\"line\"><span class=\"comment\"># chroot_list_file=/etc/vsftpd.chroot_list</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># You may activate the &quot;-R&quot; option to the builtin ls. This is disabled by</span></span><br><span class=\"line\"><span class=\"comment\"># default to avoid remote users being able to cause excessive I/O on large</span></span><br><span class=\"line\"><span class=\"comment\"># sites. However, some broken FTP clients such as &quot;ncftp&quot; and &quot;mirror&quot; assume</span></span><br><span class=\"line\"><span class=\"comment\"># the presence of the &quot;-R&quot; option, so there is a strong case for enabling it.</span></span><br><span class=\"line\"><span class=\"comment\">#ls_recurse_enable=YES</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Customization</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Some of vsftpd&#x27;s settings don&#x27;t fit the filesystem layout by</span></span><br><span class=\"line\"><span class=\"comment\"># default.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># This option should be the name of a directory which is empty.  Also, the</span></span><br><span class=\"line\"><span class=\"comment\"># directory should not be writable by the ftp user. This directory is used</span></span><br><span class=\"line\"><span class=\"comment\"># as a secure chroot() jail at times vsftpd does not require filesystem</span></span><br><span class=\"line\"><span class=\"comment\"># access.</span></span><br><span class=\"line\">secure_chroot_dir=/var/run/vsftpd/empty</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># This string is the name of the PAM service vsftpd will use.</span></span><br><span class=\"line\">pam_service_name=vsftpd</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># This option specifies the location of the RSA certificate to use for SSL</span></span><br><span class=\"line\"><span class=\"comment\"># encrypted connections.</span></span><br><span class=\"line\">rsa_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pem</span><br><span class=\"line\">rsa_private_key_file=/etc/ssl/private/ssl-cert-snakeoil.key</span><br><span class=\"line\">ssl_enable=NO</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Uncomment this to indicate that vsftpd use a utf8 filesystem.</span></span><br><span class=\"line\"><span class=\"comment\">#utf8_filesystem=YES</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"实际开启的配置项如下：\"><a href=\"#实际开启的配置项如下：\" class=\"headerlink\" title=\"实际开启的配置项如下：\"></a>实际开启的配置项如下：</h4><p>按照如下简单的配置就可以通过本地用户进行访问了 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">listen=YES</span><br><span class=\"line\">listen_ipv6=NO</span><br><span class=\"line\">anonymous_enable=NO</span><br><span class=\"line\">local_enable=YES</span><br><span class=\"line\">write_enable=YES</span><br><span class=\"line\">dirmessage_enable=YES</span><br><span class=\"line\">use_localtime=YES</span><br><span class=\"line\">xferlog_enable=YES</span><br><span class=\"line\">connect_from_port_20=YES</span><br><span class=\"line\">secure_chroot_dir=/var/run/vsftpd/empty</span><br><span class=\"line\">pam_service_name=vsftpd</span><br><span class=\"line\">rsa_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pem</span><br><span class=\"line\">rsa_private_key_file=/etc/ssl/private/ssl-cert-snakeoil.key</span><br><span class=\"line\">ssl_enable=NO</span><br></pre></td></tr></table></figure>\n<h4 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h4><ul>\n<li>无法配置指定根目录，也就是任何本地账户登录后的目录都是根目录，无法自定义配置指定目录，配置后也不生效； </li>\n<li>在添加新用户配置成nologin时，是无法正常使用该类用户进行访问的； </li>\n<li>添加的新用户，需要先登录一次后，方可使用该账号访问ftp;</li>\n</ul>\n<h1 id=\"SFTP服务搭建\"><a href=\"#SFTP服务搭建\" class=\"headerlink\" title=\"SFTP服务搭建\"></a>SFTP服务搭建</h1><h2 id=\"群组配置—服务端\"><a href=\"#群组配置—服务端\" class=\"headerlink\" title=\"群组配置—服务端\"></a>群组配置—服务端</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo groupadd sftp</span><br><span class=\"line\"><span class=\"built_in\">cat</span> /etc/group  <span class=\"comment\"># 确认组新建成功</span></span><br><span class=\"line\">sudo vim /etc/group <span class=\"comment\">#修改 sftp:x:1002:</span></span><br><span class=\"line\">sudo useradd -g sftp -s /bin/false mysftp </span><br><span class=\"line\">sudo passwd mysftp <span class=\"comment\"># 设置新密码为服务器访问密码</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"共享目录—服务端\"><a href=\"#共享目录—服务端\" class=\"headerlink\" title=\"共享目录—服务端\"></a>共享目录—服务端</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo <span class=\"built_in\">mkdir</span> -p /data/sftp/mysftp</span><br><span class=\"line\">sudo usermod -d /data/sftp/mysftp mysftp</span><br></pre></td></tr></table></figure>\n<h2 id=\"配置文件修改—服务端\"><a href=\"#配置文件修改—服务端\" class=\"headerlink\" title=\"配置文件修改—服务端\"></a>配置文件修改—服务端</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/ssh/sshd_config</span><br><span class=\"line\">Subsystem sftp /usr/libexec/openssh/sftp-server <span class=\"comment\"># 该行原本配置，需要手动注释掉</span></span><br><span class=\"line\">并在文件最后面添加如下几行内容然后保存</span><br><span class=\"line\">Subsystem sftp internal-sftp</span><br><span class=\"line\">Match Group sftp</span><br><span class=\"line\">ChrootDirectory /data/sftp/%u</span><br><span class=\"line\">ForceCommand internal-sftp</span><br><span class=\"line\">AllowTcpForwarding no</span><br><span class=\"line\">X11Forwarding no</span><br></pre></td></tr></table></figure>\n<h2 id=\"目录授权与新建—服务端\"><a href=\"#目录授权与新建—服务端\" class=\"headerlink\" title=\"目录授权与新建—服务端\"></a>目录授权与新建—服务端</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo <span class=\"built_in\">chown</span> root:sftp /data/sftp/mysftp</span><br><span class=\"line\">sudo <span class=\"built_in\">chmod</span> 755 /data/sftp/mysftp</span><br><span class=\"line\">sudo <span class=\"built_in\">mkdir</span> /data/sftp/mysftp/upload</span><br><span class=\"line\">sudo <span class=\"built_in\">chown</span> mysftp:sftp /data/sftp/mysftp/upload</span><br><span class=\"line\">sudo <span class=\"built_in\">chmod</span> 755 /data/sftp/mysftp/upload</span><br></pre></td></tr></table></figure>\n<h2 id=\"重启服务—服务端\"><a href=\"#重启服务—服务端\" class=\"headerlink\" title=\"重启服务—服务端\"></a>重启服务—服务端</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo systemctl  restart sshd.service   <span class=\"comment\"># 重启服务时如果提示服务不存在，则先添加如下服务</span></span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> ssh.service </span><br><span class=\"line\"><span class=\"comment\"># 再执行：</span></span><br><span class=\"line\">sudo systemctl  restart sshd.service </span><br></pre></td></tr></table></figure>\n<h2 id=\"访问服务器—客户端\"><a href=\"#访问服务器—客户端\" class=\"headerlink\" title=\"访问服务器—客户端\"></a>访问服务器—客户端</h2><p>进入文件管理器或我的电脑<br>输入—例如sftp：&#x2F;&#x2F;10.20.32.** （根据实际服务端IP输入，并键如账号密码，即可访问）</p>\n<h1 id=\"NFS服务搭建\"><a href=\"#NFS服务搭建\" class=\"headerlink\" title=\"NFS服务搭建\"></a>NFS服务搭建</h1><h2 id=\"服务端\"><a href=\"#服务端\" class=\"headerlink\" title=\"服务端\"></a>服务端</h2><h3 id=\"工具安装\"><a href=\"#工具安装\" class=\"headerlink\" title=\"工具安装\"></a>工具安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get install nfs-kernel-server <span class=\"comment\"># 安装 NFS服务器端</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建共享文件夹-1\"><a href=\"#创建共享文件夹-1\" class=\"headerlink\" title=\"创建共享文件夹\"></a>创建共享文件夹</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo <span class=\"built_in\">mkdir</span> /home/deepin-server/nfs       <span class=\"comment\"># 路径可以根据自己需要设置</span></span><br><span class=\"line\">sudo <span class=\"built_in\">chmod</span> -R 777 /home/deepin-server/nfs    <span class=\"comment\"># 设置共享目录权限</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"修改配置文件\"><a href=\"#修改配置文件\" class=\"headerlink\" title=\"修改配置文件\"></a>修改配置文件</h3><p><code>vim /etc/exports</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">配置文件虽然只有一句，但是其中还是有很多讲究； </span><br><span class=\"line\">共享文件可执行权限有： </span><br><span class=\"line\">      ro           只读访问 </span><br><span class=\"line\">      rw           读写访问 </span><br><span class=\"line\">      <span class=\"built_in\">sync</span>          所有数据在请求时写入共享 </span><br><span class=\"line\">      hide          在NFS共享目录中不共享其子目录 </span><br><span class=\"line\">      no_hide         共享NFS目录的子目录 </span><br><span class=\"line\">      all_squash       共享文件的UID和GID映射匿名用户anonymous，适合公用目录。 </span><br><span class=\"line\">      no_all_squash      保留共享文件的UID和GID（默认） </span><br><span class=\"line\">      root_squash       root用户的所有请求映射成如anonymous用户一样的权限（默认） </span><br><span class=\"line\">      no_root_squas      root用户具有根目录的完全管理访问权限 </span><br><span class=\"line\">ip配置一般需要进行限定，最好不要使用* ，不然存在安全问题，可以限定具体ip或者ip段才能挂载。 </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置文件修改如下：\"><a href=\"#配置文件修改如下：\" class=\"headerlink\" title=\"配置文件修改如下：\"></a>配置文件修改如下：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">deepin-server@deepin-server-PC:~$ cat /etc/exports </span><br><span class=\"line\"># /etc/exports: the access control list for filesystems which may be exported</span><br><span class=\"line\">#               to NFS clients.  See exports(5).</span><br><span class=\"line\">#</span><br><span class=\"line\"># Example for NFSv2 and NFSv3:</span><br><span class=\"line\"># /srv/homes       hostname1(rw,sync,no_subtree_check) hostname2(ro,sync,no_subtree_check)</span><br><span class=\"line\"># Example for NFSv4:</span><br><span class=\"line\"># /srv/nfs4        gss/krb5i(rw,sync,fsid=0,crossmnt,no_subtree_check)</span><br><span class=\"line\"># /srv/nfs4/homes  gss/krb5i(rw,sync,no_subtree_check)</span><br><span class=\"line\">/home/deepin-server/nfs  10.20.*(rw)#此处ip只做了部分限制，圆括号里面就是配置权限的。</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动服务-1\"><a href=\"#启动服务-1\" class=\"headerlink\" title=\"启动服务\"></a>启动服务</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">systemctl start rpcbind nfs-server</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查看服务状态-1\"><a href=\"#查看服务状态-1\" class=\"headerlink\" title=\"查看服务状态\"></a>查看服务状态</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">deepin-server@deepin-server-PC:~$ sudo systemctl status rpcbind nfs-server</span><br><span class=\"line\">● rpcbind.service - RPC bind portmap service</span><br><span class=\"line\">   Loaded: loaded (/lib/systemd/system/rpcbind.service; enabled; vendor preset: enabled)</span><br><span class=\"line\">   Active: active (running) since Wed 2022-01-05 11:53:19 CST; 1h 56min ago</span><br><span class=\"line\">     Docs: man:rpcbind(8)</span><br><span class=\"line\"> Main PID: 19304 (rpcbind)</span><br><span class=\"line\">    Tasks: 1 (limit: 19660)</span><br><span class=\"line\">   Memory: 608.0K</span><br><span class=\"line\">   CGroup: /system.slice/rpcbind.service</span><br><span class=\"line\">           └─19304 /sbin/rpcbind -f -w</span><br><span class=\"line\"></span><br><span class=\"line\">1月 05 11:53:19 deepin-server-PC systemd[1]: Starting RPC bind portmap service...</span><br><span class=\"line\">1月 05 11:53:19 deepin-server-PC systemd[1]: Started RPC bind portmap service.</span><br><span class=\"line\"></span><br><span class=\"line\">● nfs-server.service - NFS server and services</span><br><span class=\"line\">   Loaded: loaded (/lib/systemd/system/nfs-server.service; enabled; vendor preset: enabled)</span><br><span class=\"line\">   Active: active (exited) since Wed 2022-01-05 11:53:21 CST; 1h 56min ago</span><br><span class=\"line\">  Process: 19319 ExecStartPre=/usr/sbin/exportfs -r (code=exited, status=0/SUCCESS)</span><br><span class=\"line\">  Process: 19320 ExecStart=/usr/sbin/rpc.nfsd $RPCNFSDARGS (code=exited, status=0/SUCCESS)</span><br><span class=\"line\"> Main PID: 19320 (code=exited, status=0/SUCCESS)</span><br><span class=\"line\"></span><br><span class=\"line\">1月 05 11:53:20 deepin-server-PC systemd[1]: Starting NFS server and services...</span><br><span class=\"line\">1月 05 11:53:20 deepin-server-PC exportfs[19319]: exportfs: /etc/exports [1]: Neither &#x27;subtree_check&#x27; or &#x27;no_subtree_check&#x27; specified for export &quot;10.20.*:/home/deepin-server/Documents/NFS文件目录for-test&quot;.</span><br><span class=\"line\">1月 05 11:53:20 deepin-server-PC exportfs[19319]:   Assuming default behaviour (&#x27;no_subtree_check&#x27;).</span><br><span class=\"line\">1月 05 11:53:20 deepin-server-PC exportfs[19319]:   NOTE: this default has changed since nfs-utils version 1.0.x</span><br><span class=\"line\">1月 05 11:53:21 deepin-server-PC systemd[1]: Started NFS server and services.</span><br><span class=\"line\">deepin-server@deepin-server-PC:~$ </span><br></pre></td></tr></table></figure>\n<p>至此服务端算是配置完成了。</p>\n<h2 id=\"客户端配置\"><a href=\"#客户端配置\" class=\"headerlink\" title=\"客户端配置\"></a>客户端配置</h2><p>客户端主要就是挂载操作，不过挂载nfs的时候同样需要安装客户端软件</p>\n<h3 id=\"客户端安装\"><a href=\"#客户端安装\" class=\"headerlink\" title=\"客户端安装\"></a>客户端安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get install nfs-common</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查看服务端nfs共享信息\"><a href=\"#查看服务端nfs共享信息\" class=\"headerlink\" title=\"查看服务端nfs共享信息\"></a>查看服务端nfs共享信息</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">showmount -e 10.20.13.152</span><br><span class=\"line\">babyfengfjx@babyfengfjx:~$ showmount -e 10.20.13.152</span><br><span class=\"line\">Export list <span class=\"keyword\">for</span> 10.20.13.152:</span><br><span class=\"line\">/home/deepin-server/Documents/NFS文件目录for-test 10.20.*</span><br><span class=\"line\">babyfengfjx@babyfengfjx:~$ </span><br></pre></td></tr></table></figure>\n<h3 id=\"客户端创建挂载目录\"><a href=\"#客户端创建挂载目录\" class=\"headerlink\" title=\"客户端创建挂载目录\"></a>客户端创建挂载目录</h3><p>随便在本地客户端创建一个目录作为NFS挂载目录即可</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo <span class=\"built_in\">mkdir</span> /home/babyfengfjx/Documents/nfsfile/</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"客户端挂载\"><a href=\"#客户端挂载\" class=\"headerlink\" title=\"客户端挂载\"></a>客户端挂载</h3><p>将服务端的NFS共享目录，挂载到本地客户端对应目录即可</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo mount -t nfs 10.20.13.152:/home/deepin-server/Documents/NFS文件目录for-test /home/babyfengfjx/Documents/nfsfile/</span><br></pre></td></tr></table></figure>\n<h3 id=\"查看并传输文件\"><a href=\"#查看并传输文件\" class=\"headerlink\" title=\"查看并传输文件\"></a>查看并传输文件</h3><p>上述操作完成后，此时就可以在客户端对应目录使用NFS存储了，上传新建文件均可以随心所欲。</p>\n<h3 id=\"开机自动挂载\"><a href=\"#开机自动挂载\" class=\"headerlink\" title=\"开机自动挂载\"></a>开机自动挂载</h3><p>写入fstab方法并不推荐，如果NFS挂载失败可能会影响设备正常启动 </p>\n<h4 id=\"写入fstab进行开机自动挂载\"><a href=\"#写入fstab进行开机自动挂载\" class=\"headerlink\" title=\"写入fstab进行开机自动挂载\"></a>写入fstab进行开机自动挂载</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;10.20.13.152:/home/deepin-server/Documents/NFS文件目录for-test /home/babyfengfjx/Documents/nfsfile/ nfs4 defaults 0 0&quot;</span> &gt;&gt; /etc/fstab</span><br><span class=\"line\"> mount -av</span><br></pre></td></tr></table></figure>\n<h4 id=\"通过配置开机自运行脚本\"><a href=\"#通过配置开机自运行脚本\" class=\"headerlink\" title=\"通过配置开机自运行脚本\"></a>通过配置开机自运行脚本</h4><p><strong>原理如下：</strong></p>\n<blockquote>\n<p>新建 &#x2F;etc&#x2F;rc.local 文件<br>这种方法的原理是系统开机后会自动启动 rc-local 服务；<br>rc-local 服务启动后就会自动执行 &#x2F;etc 目录下的 rc.local 脚本；<br>该方法的优点就是不存在第一种方法的三个缺点，脚本执行失败不会出现黑屏弹窗、sleep 不会造成开机黑屏以及执行脚本的用户是 root 用户。 </p>\n</blockquote>\n<p><strong>主要步骤：</strong></p>\n<ol>\n<li>新建 &#x2F;etc&#x2F;rc.local 文件</li>\n<li>粘贴以下模板<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/sh -e</span></span><br><span class=\"line\"><span class=\"comment\"># rc.local</span></span><br><span class=\"line\"><span class=\"comment\"># This script is executed at the end of each multiuser runlevel.</span></span><br><span class=\"line\"><span class=\"comment\"># Make sure that the script will &quot;exit 0&quot; on success or any other</span></span><br><span class=\"line\"><span class=\"comment\"># value on error.</span></span><br><span class=\"line\"><span class=\"comment\"># In order to enable or disable this script just change the execution</span></span><br><span class=\"line\"><span class=\"comment\"># bits.</span></span><br><span class=\"line\"><span class=\"comment\"># By default this script does nothing.</span></span><br><span class=\"line\">01.LitterScript/02.bbsmonitor/bbsmonitor.py &gt;bbs.log 2&gt;&amp;1 &amp;</span><br><span class=\"line\"><span class=\"comment\"># 因为该命令本身就是会以root权限执行，所以不用加sudo</span></span><br><span class=\"line\"><span class=\"built_in\">sleep</span> 5;mount -t nfs 10.20.13.152:/home/deepin-server/Documents/NFS文件目录for-test /home/babyfengfjx/Documents/nfsfile/</span><br><span class=\"line\"><span class=\"built_in\">exit</span> 0</span><br></pre></td></tr></table></figure></li>\n<li>在 exit 0 上方插入你需要自启的命令(一行一个)后保存文件</li>\n<li>给脚本加上 755 权限<br>sudo chmod +755 &#x2F;etc&#x2F;rc.local</li>\n<li>调试脚本(可选)<br>sudo &#x2F;etc&#x2F;rc.local # 使用 sudo 模拟 root 用户开机自启 &#x2F;etc&#x2F;rc.local 文件<br>如果第 5 步模拟启动脚本没有报错，那我们就可以重启电脑看看是否可以成功实现脚本开机自启。重启进入系统后我们可以通过 systemctl status rc-local.service 查看 rc-local 的运行状态，如果结果显示的是 active (exited) 则说明你的脚本已经成功执行，反之如果结果显示 failed,那么你需要检查一下脚本是否哪里有问题。</li>\n</ol>\n<h5 id=\"这里提供可能导致脚本无法正常启动的原因：\"><a href=\"#这里提供可能导致脚本无法正常启动的原因：\" class=\"headerlink\" title=\"这里提供可能导致脚本无法正常启动的原因：\"></a>这里提供可能导致脚本无法正常启动的原因：</h5><p>1、执行脚本的用户不一致<br>由于 rc.local 开机自启的时候是以 root 用户执行的，这里很多人会忽略了一个问题，很多情况下你的命令是必须要普通用户执行的。比如 conky 和虚拟机(用户A建立的VBox和VM Ware虚拟机用户B无法访问)等。<br>假设用户 lolimay 在终端用 VBoxHeadless -s aikuai &amp; 后台启动了虚拟机名 aikuai，那么我们在 rc.local 文件应该用下面这种方式写：<br><code>su - lolimay -c &quot;VBoxHeadless -s aikuai &amp;&quot; # 以 lolimay 用户执行该命令</code><br>2、多余的 sudo<br>前面已经提到 rc.local 开机时是以 root 用户启动的，所以写在 rc.local 文件中命令不需要带有 sudo 前缀(实际上就算你带有了 sudo 前缀也不会产生错误)。<br>3、最佳实践<br>个人建议每当往 rc.local 文件中添加了一个需要自启的命令时，可以先用 sudo &#x2F;etc&#x2F;rc.local 命令模拟一下看看是否能够执行成功(如果执行失败也能够直观地看到出错的原因)，这样能够有效减少你重启电脑来调试的次数。</p>\n","site":{"data":{}},"excerpt":"","more":"<hr>\n<h1 id=\"Samba服务搭建\"><a href=\"#Samba服务搭建\" class=\"headerlink\" title=\"Samba服务搭建\"></a>Samba服务搭建</h1><blockquote>\n<p>Samba是在Linux系统上实现SMB协议的一个免费软件，由服务器及客户端程序构成。SMB（Server Messages Block，信息服务块）是一种在局域网上共享文件和打印机的一种通信协议，它为局域网内的不同计算机之间提供文件及打印机等资源的共享服务。</p>\n</blockquote>\n<h2 id=\"安装服务\"><a href=\"#安装服务\" class=\"headerlink\" title=\"安装服务\"></a>安装服务</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get install samba-common samba</span><br></pre></td></tr></table></figure>\n<h2 id=\"创建共享文件夹\"><a href=\"#创建共享文件夹\" class=\"headerlink\" title=\"创建共享文件夹\"></a>创建共享文件夹</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo <span class=\"built_in\">mkdir</span> /opt/share</span><br></pre></td></tr></table></figure>\n<h2 id=\"编辑配置文件\"><a href=\"#编辑配置文件\" class=\"headerlink\" title=\"编辑配置文件\"></a>编辑配置文件</h2><blockquote>\n<ul>\n<li>关于samba配置文件，smb.conf总共分为两大部分，分别为“全局设置（GIobal Settings）”和“共享定义（Share Definitions）”。全局设置定义于Samba服务器的整体行为，例如，工作组，主机名等方面。共享定义则用于设置的具体的共享目录或者设备中。</li>\n<li>配置文件绝对路径在：<code>/etc/samba/smb.conf</code></li>\n</ul>\n</blockquote>\n<h3 id=\"全局设置\"><a href=\"#全局设置\" class=\"headerlink\" title=\"全局设置\"></a>全局设置</h3><ul>\n<li>workgroup用于设置在windows中显示的工作组</li>\n<li>server string是Samba服务器的说明</li>\n<li>workgroup和server string字段后面的内容可以随便写</li>\n<li>通常来说，将Samba服务器的编码设置为UTF-8是比较好的，也能解决显示的问题：<code>unix charset = UTF-8</code></li>\n<li>但是这样也会存在问题，UTF-8编码的中文文件名在某些系统下面会乱码，Samba提供了dos charset这个字段。下面这条配置命令为哪些不认识的Unicode的Windows系统使用GBK编码:<code>dos charset = cp936</code></li>\n<li>security字段设置了用户登录的验证方式，share和user是最常用到的两种。share方式允许任何用户登录到系统，而不用提供用户名和口令,但是由于Samba是默认要使用验证方式的，所以这里就要讲到user方式。这种方式要求用户提供账户信息供服务器验证，但是要使用user验证，Samba的配置文件里面就应该包含这一行:<code>security = user</code></li>\n</ul>\n<h3 id=\"共享设置\"><a href=\"#共享设置\" class=\"headerlink\" title=\"共享设置\"></a>共享设置</h3><p>这个文件叫做smb.conf（位于&#x2F;etc或者&#x2F;etc&#x2F;samba目录下面），可以用uos系统自带的文本编辑器打开，在末尾输入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[share] <span class=\"comment\">#&quot;[]&quot; 中的文字表示共享目录名字，可以随意设置</span></span><br><span class=\"line\">    comment = Linux Share　 <span class=\"comment\">#comment字段用于设置这个共享目录的描述</span></span><br><span class=\"line\">    path = /opt/share　　　　 <span class=\"comment\">#share指定了共享目录的路径</span></span><br><span class=\"line\">    public = <span class=\"built_in\">yes</span>　　　　　　 <span class=\"comment\">#表示在windows的“网上邻居”中可见</span></span><br><span class=\"line\">    writeable = no　　　　　 <span class=\"comment\">#writeable表示设置目录是否可写（yes是可写的意思）</span></span><br><span class=\"line\">    browseable = <span class=\"built_in\">yes</span>　　　 <span class=\"comment\">#表示在windows的“网上邻居”中可见</span></span><br><span class=\"line\">    guest ok = no 　　　　　<span class=\"comment\">#告诉Samba服务器这个共享目录允许匿名访问</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"添加用户\"><a href=\"#添加用户\" class=\"headerlink\" title=\"添加用户\"></a>添加用户</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo useradd smbuser  <span class=\"comment\"># 新增一个叫smbuser的用户</span></span><br><span class=\"line\">sudo smbpasswd -a smbuser  <span class=\"comment\"># 给这个新增用户创建samb共享密码</span></span><br><span class=\"line\">New SMB password:</span><br><span class=\"line\">Retype new SMB password:</span><br><span class=\"line\">Added user smbuser</span><br></pre></td></tr></table></figure>\n<p>后面就可以使用带-U参数的smbpasswd命令修改已经有用户的口令。如果用户希望本地修改服务器上自己的口令，可以使用-r参数。下面的命令用户修改在服务器smbserver上smbuser用户的口令了</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">smbpasswd -r smbserver -U smbuser</span><br></pre></td></tr></table></figure>\n<h2 id=\"赋予权限\"><a href=\"#赋予权限\" class=\"headerlink\" title=\"赋予权限\"></a>赋予权限</h2><p>smbuser对共享目录写权限,一下配置需要写成yes</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">writeable = <span class=\"built_in\">yes</span></span><br></pre></td></tr></table></figure>\n<p>如果只写writeable &#x3D; yes是远远不够的，如果服务器上的这么目录本身对smbuser不可写的话，就需要添加以下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo <span class=\"built_in\">chown</span> smbuser:smbuser /opt/share</span><br></pre></td></tr></table></figure>\n<h2 id=\"服务启动、停止、重启\"><a href=\"#服务启动、停止、重启\" class=\"headerlink\" title=\"服务启动、停止、重启\"></a>服务启动、停止、重启</h2><h3 id=\"启动服务：service-smbd-start\"><a href=\"#启动服务：service-smbd-start\" class=\"headerlink\" title=\"启动服务：service smbd start\"></a>启动服务：<code>service smbd start</code></h3><h3 id=\"停止服务：service-smbd-stop\"><a href=\"#停止服务：service-smbd-stop\" class=\"headerlink\" title=\"停止服务：service smbd stop\"></a>停止服务：<code>service smbd stop</code></h3><h3 id=\"重启服务：service-smbd-restart\"><a href=\"#重启服务：service-smbd-restart\" class=\"headerlink\" title=\"重启服务：service smbd restart\"></a>重启服务：<code>service smbd restart</code></h3><h3 id=\"查看服务状态：service-smbd-status\"><a href=\"#查看服务状态：service-smbd-status\" class=\"headerlink\" title=\"查看服务状态：service smbd status\"></a>查看服务状态：<code>service smbd status</code></h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">deepin@wh-k8snode-70:/etc/samba$ service smbd status</span><br><span class=\"line\">● smbd.service - Samba SMB Daemon</span><br><span class=\"line\">   Loaded: loaded (/lib/systemd/system/smbd.service; enabled; vendor preset: enabled)</span><br><span class=\"line\">   Active: active (running) since Mon 2022-06-20 11:50:46 CST; 1h 57min ago</span><br><span class=\"line\">     Docs: man:smbd(8)</span><br><span class=\"line\">           man:samba(7)</span><br><span class=\"line\">           man:smb.conf(5)</span><br><span class=\"line\">  Process: 20165 ExecStartPre=/usr/share/samba/update-apparmor-samba-profile (code=exited, status=0/SUCCESS)</span><br><span class=\"line\"> Main PID: 20174 (smbd)</span><br><span class=\"line\">   Status: <span class=\"string\">&quot;smbd: ready to serve connections...&quot;</span></span><br><span class=\"line\">    Tasks: 6 (<span class=\"built_in\">limit</span>: 4915)</span><br><span class=\"line\">   Memory: 26.7M</span><br><span class=\"line\">   CGroup: /system.slice/smbd.service</span><br><span class=\"line\">           ├─ 8209 /usr/sbin/smbd --foreground --no-process-group</span><br><span class=\"line\">           ├─10619 /usr/sbin/smbd --foreground --no-process-group</span><br><span class=\"line\">           ├─20174 /usr/sbin/smbd --foreground --no-process-group</span><br><span class=\"line\">           ├─20176 /usr/sbin/smbd --foreground --no-process-group</span><br><span class=\"line\">           ├─20177 /usr/sbin/smbd --foreground --no-process-group</span><br><span class=\"line\">           └─20178 /usr/sbin/smbd --foreground --no-process-group</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h2><ol>\n<li><p>修改配置文件后，服务无法启动。</p>\n<blockquote>\n<p>在实际修改配置文件过程中，可能在参数后面有一些看不见的字符，会导致服务无法正常启动，最好检查每个修改的参数后面无一些空格或者其他特殊符号。</p>\n</blockquote>\n</li>\n<li><p>创建了几个samba用户，想通过不同的用户来对不同的文件进行访问，但是出现了报错（内容是不允许一个用户使用一个以上用户名与服务器或者共享资源的多重连接）<br><strong>解决：</strong></p>\n<blockquote>\n<p>先断开现有的samba连接：cmd命令行下执行net use * &#x2F;del &#x2F;X<br>再重新选择你要使用的目录，使用对应的用户名进行登录就可以了</p>\n</blockquote>\n</li>\n<li><p>配置好samba服务器，但是测试过程中会出现以下报错：</p>\n<blockquote>\n<p>主要原因是因为服务器的防火墙没有关，可以选择在文件&#x2F;etc&#x2F;security&#x2F;limits.conf下输入*　-   nofile   16384,然后shutdown -r now 重启一下就可以了</p>\n</blockquote>\n</li>\n<li><p>samba服务器已经可以让windows通过网络来访问samba，但是没有办法写入，修改，删除，只能查看,出现这样的问题可能就是我们自己在配置的时候出现问题了，如果我的用户是deepin:</p>\n<figure class=\"highlight plaintext\"><figcaption><span>777 FileServer```   　--这种操作就可以让组samba里的用户进行写操作了。</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\">```bash</span><br><span class=\"line\">[deepin]</span><br><span class=\"line\">   create mode =0664</span><br><span class=\"line\">   force create mode=0750   #文件新建的权限为750</span><br><span class=\"line\">   directory mode=0750      　#新建文件夹的权限只有组里的用户查看，其他组里的用户都没有权限进入</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h1 id=\"FTP服务搭建\"><a href=\"#FTP服务搭建\" class=\"headerlink\" title=\"FTP服务搭建\"></a>FTP服务搭建</h1><h2 id=\"vsftpd配置使用\"><a href=\"#vsftpd配置使用\" class=\"headerlink\" title=\"vsftpd配置使用\"></a>vsftpd配置使用</h2><blockquote>\n<p>vsftpd 是Linus上非常安全好用的ftp服务，只需要简单的安装后就可以搭建起ftp服务；<br>该服务主要的配置文件就是vsftpd.conf ,在deepin&#x2F;uos系统中的绝对路径是：&#x2F;etc&#x2F;vsftpd.conf</p>\n</blockquote>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>只需要简单的进行安装配置即可，前提是你开启了开发者模式我们才能通过终端安装软件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt install vsftpd</span><br></pre></td></tr></table></figure>\n<p>如果提示没有找到对应安装包，则可能是没有进行仓库的更新连接，执行如下命令即可</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt update </span><br></pre></td></tr></table></figure>\n<h3 id=\"服务的启停配置\"><a href=\"#服务的启停配置\" class=\"headerlink\" title=\"服务的启停配置\"></a>服务的启停配置</h3><h4 id=\"启动服务\"><a href=\"#启动服务\" class=\"headerlink\" title=\"启动服务\"></a>启动服务</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">service vsftpd start</span><br></pre></td></tr></table></figure>\n<h4 id=\"停止服务\"><a href=\"#停止服务\" class=\"headerlink\" title=\"停止服务\"></a>停止服务</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">service vsftpd stop</span><br></pre></td></tr></table></figure>\n<h4 id=\"重启服务\"><a href=\"#重启服务\" class=\"headerlink\" title=\"重启服务\"></a>重启服务</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">service vsftpd restart</span><br></pre></td></tr></table></figure>\n<h4 id=\"查看服务状态\"><a href=\"#查看服务状态\" class=\"headerlink\" title=\"查看服务状态\"></a>查看服务状态</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">service vsftpd status</span><br><span class=\"line\"><span class=\"comment\">#执行后结果如下：active则表示正常运行，如果失败了则可以通过提示信息查询对应问题</span></span><br><span class=\"line\">babyfengfjx@babyfengfjx:~$ service vsftpd status </span><br><span class=\"line\">● vsftpd.service - vsftpd FTP server</span><br><span class=\"line\">   Loaded: loaded (/lib/systemd/system/vsftpd.service; enabled; vendor preset: enabled)</span><br><span class=\"line\">   Active: active (running) since Sat 2021-10-09 16:22:48 CST; 1s ago</span><br><span class=\"line\">  Process: 18334 ExecStartPre=/bin/mkdir -p /var/run/vsftpd/empty (code=exited, status=0/SUCCESS)</span><br><span class=\"line\"> Main PID: 18335 (vsftpd)</span><br><span class=\"line\">    Tasks: 1 (<span class=\"built_in\">limit</span>: 4915)</span><br><span class=\"line\">   Memory: 568.0K</span><br><span class=\"line\">   CGroup: /system.slice/vsftpd.service</span><br><span class=\"line\">           └─18335 /usr/sbin/vsftpd /etc/vsftpd.conf</span><br></pre></td></tr></table></figure>\n<h4 id=\"配置文件展示\"><a href=\"#配置文件展示\" class=\"headerlink\" title=\"配置文件展示\"></a>配置文件展示</h4><p>在使用该服务过程中，主要就是这些配置文件该如何配置，很多同学在实际配置过程中很难一次配置成功，这里就给出一个实际可用的配置参数以供参考 </p>\n<p>配置文件路径：&#x2F;etc&#x2F;vsftpd.conf</p>\n<p>配置过程中尽量是将匿名登录关闭，使用本地用户登录，以确保安全。 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Example config file /etc/vsftpd.conf</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># The default compiled in settings are fairly paranoid. This sample file</span></span><br><span class=\"line\"><span class=\"comment\"># loosens things up a bit, to make the ftp daemon more usable.</span></span><br><span class=\"line\"><span class=\"comment\"># Please see vsftpd.conf.5 for all compiled in defaults.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># READ THIS: This example file is NOT an exhaustive list of vsftpd options.</span></span><br><span class=\"line\"><span class=\"comment\"># Please read the vsftpd.conf.5 manual page to get a full idea of vsftpd&#x27;s</span></span><br><span class=\"line\"><span class=\"comment\"># capabilities.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Run standalone?  vsftpd can run either from an inetd or as a standalone</span></span><br><span class=\"line\"><span class=\"comment\"># daemon started from an initscript.</span></span><br><span class=\"line\">listen=YES</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># This directive enables listening on IPv6 sockets. By default, listening</span></span><br><span class=\"line\"><span class=\"comment\"># on the IPv6 &quot;any&quot; address (::) will accept connections from both IPv6</span></span><br><span class=\"line\"><span class=\"comment\"># and IPv4 clients. It is not necessary to listen on *both* IPv4 and IPv6</span></span><br><span class=\"line\"><span class=\"comment\"># sockets. If you want that (perhaps because you want to listen on specific</span></span><br><span class=\"line\"><span class=\"comment\"># addresses) then you must run two copies of vsftpd with two configuration</span></span><br><span class=\"line\"><span class=\"comment\"># files.</span></span><br><span class=\"line\">listen_ipv6=NO</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Allow anonymous FTP? (Disabled by default).</span></span><br><span class=\"line\">anonymous_enable=NO</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Uncomment this to allow local users to log in.</span></span><br><span class=\"line\">local_enable=YES</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Uncomment this to enable any form of FTP write command.</span></span><br><span class=\"line\">write_enable=YES</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Default umask for local users is 077. You may wish to change this to 022,</span></span><br><span class=\"line\"><span class=\"comment\"># if your users expect that (022 is used by most other ftpd&#x27;s)</span></span><br><span class=\"line\"><span class=\"comment\">#local_umask=022</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Uncomment this to allow the anonymous FTP user to upload files. This only</span></span><br><span class=\"line\"><span class=\"comment\"># has an effect if the above global write enable is activated. Also, you will</span></span><br><span class=\"line\"><span class=\"comment\"># obviously need to create a directory writable by the FTP user.</span></span><br><span class=\"line\"><span class=\"comment\">#anon_upload_enable=YES</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Uncomment this if you want the anonymous FTP user to be able to create</span></span><br><span class=\"line\"><span class=\"comment\"># new directories.</span></span><br><span class=\"line\"><span class=\"comment\">#anon_mkdir_write_enable=YES</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Activate directory messages - messages given to remote users when they</span></span><br><span class=\"line\"><span class=\"comment\"># go into a certain directory.</span></span><br><span class=\"line\">dirmessage_enable=YES</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># If enabled, vsftpd will display directory listings with the time</span></span><br><span class=\"line\"><span class=\"comment\"># in  your  local  time  zone.  The default is to display GMT. The</span></span><br><span class=\"line\"><span class=\"comment\"># times returned by the MDTM FTP command are also affected by this</span></span><br><span class=\"line\"><span class=\"comment\"># option.</span></span><br><span class=\"line\">use_localtime=YES</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Activate logging of uploads/downloads.</span></span><br><span class=\"line\">xferlog_enable=YES</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Make sure PORT transfer connections originate from port 20 (ftp-data).</span></span><br><span class=\"line\">connect_from_port_20=YES</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># If you want, you can arrange for uploaded anonymous files to be owned by</span></span><br><span class=\"line\"><span class=\"comment\"># a different user. Note! Using &quot;root&quot; for uploaded files is not</span></span><br><span class=\"line\"><span class=\"comment\"># recommended!</span></span><br><span class=\"line\"><span class=\"comment\">#chown_uploads=YES</span></span><br><span class=\"line\"><span class=\"comment\">#chown_username=whoever</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># You may override where the log file goes if you like. The default is shown</span></span><br><span class=\"line\"><span class=\"comment\"># below.</span></span><br><span class=\"line\"><span class=\"comment\">#xferlog_file=/var/log/vsftpd.log</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># If you want, you can have your log file in standard ftpd xferlog format.</span></span><br><span class=\"line\"><span class=\"comment\"># Note that the default log file location is /var/log/xferlog in this case.</span></span><br><span class=\"line\"><span class=\"comment\">#xferlog_std_format=YES</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># You may change the default value for timing out an idle session.</span></span><br><span class=\"line\"><span class=\"comment\">#idle_session_timeout=600</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># You may change the default value for timing out a data connection.</span></span><br><span class=\"line\"><span class=\"comment\">#data_connection_timeout=120</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># It is recommended that you define on your system a unique user which the</span></span><br><span class=\"line\"><span class=\"comment\"># ftp server can use as a totally isolated and unprivileged user.</span></span><br><span class=\"line\"><span class=\"comment\">#nopriv_user=ftpsecure</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Enable this and the server will recognise asynchronous ABOR requests. Not</span></span><br><span class=\"line\"><span class=\"comment\"># recommended for security (the code is non-trivial). Not enabling it,</span></span><br><span class=\"line\"><span class=\"comment\"># however, may confuse older FTP clients.</span></span><br><span class=\"line\"><span class=\"comment\">#async_abor_enable=YES</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># By default the server will pretend to allow ASCII mode but in fact ignore</span></span><br><span class=\"line\"><span class=\"comment\"># the request. Turn on the below options to have the server actually do ASCII</span></span><br><span class=\"line\"><span class=\"comment\"># mangling on files when in ASCII mode.</span></span><br><span class=\"line\"><span class=\"comment\"># Beware that on some FTP servers, ASCII support allows a denial of service</span></span><br><span class=\"line\"><span class=\"comment\"># attack (DoS) via the command &quot;SIZE /big/file&quot; in ASCII mode. vsftpd</span></span><br><span class=\"line\"><span class=\"comment\"># predicted this attack and has always been safe, reporting the size of the</span></span><br><span class=\"line\"><span class=\"comment\"># raw file.</span></span><br><span class=\"line\"><span class=\"comment\"># ASCII mangling is a horrible feature of the protocol.</span></span><br><span class=\"line\"><span class=\"comment\">#ascii_upload_enable=YES</span></span><br><span class=\"line\"><span class=\"comment\">#ascii_download_enable=YES</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># You may fully customise the login banner string:</span></span><br><span class=\"line\"><span class=\"comment\">#ftpd_banner=Welcome to blah FTP service.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># You may specify a file of disallowed anonymous e-mail addresses. Apparently</span></span><br><span class=\"line\"><span class=\"comment\"># useful for combatting certain DoS attacks.</span></span><br><span class=\"line\"><span class=\"comment\">#deny_email_enable=YES</span></span><br><span class=\"line\"><span class=\"comment\"># (default follows)</span></span><br><span class=\"line\"><span class=\"comment\">#banned_email_file=/etc/vsftpd.banned_emails</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># You may restrict local users to their home directories.  See the FAQ for</span></span><br><span class=\"line\"><span class=\"comment\"># the possible risks in this before using chroot_local_user or</span></span><br><span class=\"line\"><span class=\"comment\"># chroot_list_enable below.</span></span><br><span class=\"line\"><span class=\"comment\"># chroot_local_user=YES</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># You may specify an explicit list of local users to chroot() to their home</span></span><br><span class=\"line\"><span class=\"comment\"># directory. If chroot_local_user is YES, then this list becomes a list of</span></span><br><span class=\"line\"><span class=\"comment\"># users to NOT chroot().</span></span><br><span class=\"line\"><span class=\"comment\"># (Warning! chroot&#x27;ing can be very dangerous. If using chroot, make sure that</span></span><br><span class=\"line\"><span class=\"comment\"># the user does not have write access to the top level directory within the</span></span><br><span class=\"line\"><span class=\"comment\"># chroot)</span></span><br><span class=\"line\"><span class=\"comment\"># chroot_local_user=YES</span></span><br><span class=\"line\"><span class=\"comment\"># chroot_list_enable=YES</span></span><br><span class=\"line\"><span class=\"comment\"># (default follows)</span></span><br><span class=\"line\"><span class=\"comment\"># chroot_list_file=/etc/vsftpd.chroot_list</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># You may activate the &quot;-R&quot; option to the builtin ls. This is disabled by</span></span><br><span class=\"line\"><span class=\"comment\"># default to avoid remote users being able to cause excessive I/O on large</span></span><br><span class=\"line\"><span class=\"comment\"># sites. However, some broken FTP clients such as &quot;ncftp&quot; and &quot;mirror&quot; assume</span></span><br><span class=\"line\"><span class=\"comment\"># the presence of the &quot;-R&quot; option, so there is a strong case for enabling it.</span></span><br><span class=\"line\"><span class=\"comment\">#ls_recurse_enable=YES</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Customization</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Some of vsftpd&#x27;s settings don&#x27;t fit the filesystem layout by</span></span><br><span class=\"line\"><span class=\"comment\"># default.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># This option should be the name of a directory which is empty.  Also, the</span></span><br><span class=\"line\"><span class=\"comment\"># directory should not be writable by the ftp user. This directory is used</span></span><br><span class=\"line\"><span class=\"comment\"># as a secure chroot() jail at times vsftpd does not require filesystem</span></span><br><span class=\"line\"><span class=\"comment\"># access.</span></span><br><span class=\"line\">secure_chroot_dir=/var/run/vsftpd/empty</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># This string is the name of the PAM service vsftpd will use.</span></span><br><span class=\"line\">pam_service_name=vsftpd</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># This option specifies the location of the RSA certificate to use for SSL</span></span><br><span class=\"line\"><span class=\"comment\"># encrypted connections.</span></span><br><span class=\"line\">rsa_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pem</span><br><span class=\"line\">rsa_private_key_file=/etc/ssl/private/ssl-cert-snakeoil.key</span><br><span class=\"line\">ssl_enable=NO</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Uncomment this to indicate that vsftpd use a utf8 filesystem.</span></span><br><span class=\"line\"><span class=\"comment\">#utf8_filesystem=YES</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"实际开启的配置项如下：\"><a href=\"#实际开启的配置项如下：\" class=\"headerlink\" title=\"实际开启的配置项如下：\"></a>实际开启的配置项如下：</h4><p>按照如下简单的配置就可以通过本地用户进行访问了 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">listen=YES</span><br><span class=\"line\">listen_ipv6=NO</span><br><span class=\"line\">anonymous_enable=NO</span><br><span class=\"line\">local_enable=YES</span><br><span class=\"line\">write_enable=YES</span><br><span class=\"line\">dirmessage_enable=YES</span><br><span class=\"line\">use_localtime=YES</span><br><span class=\"line\">xferlog_enable=YES</span><br><span class=\"line\">connect_from_port_20=YES</span><br><span class=\"line\">secure_chroot_dir=/var/run/vsftpd/empty</span><br><span class=\"line\">pam_service_name=vsftpd</span><br><span class=\"line\">rsa_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pem</span><br><span class=\"line\">rsa_private_key_file=/etc/ssl/private/ssl-cert-snakeoil.key</span><br><span class=\"line\">ssl_enable=NO</span><br></pre></td></tr></table></figure>\n<h4 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h4><ul>\n<li>无法配置指定根目录，也就是任何本地账户登录后的目录都是根目录，无法自定义配置指定目录，配置后也不生效； </li>\n<li>在添加新用户配置成nologin时，是无法正常使用该类用户进行访问的； </li>\n<li>添加的新用户，需要先登录一次后，方可使用该账号访问ftp;</li>\n</ul>\n<h1 id=\"SFTP服务搭建\"><a href=\"#SFTP服务搭建\" class=\"headerlink\" title=\"SFTP服务搭建\"></a>SFTP服务搭建</h1><h2 id=\"群组配置—服务端\"><a href=\"#群组配置—服务端\" class=\"headerlink\" title=\"群组配置—服务端\"></a>群组配置—服务端</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo groupadd sftp</span><br><span class=\"line\"><span class=\"built_in\">cat</span> /etc/group  <span class=\"comment\"># 确认组新建成功</span></span><br><span class=\"line\">sudo vim /etc/group <span class=\"comment\">#修改 sftp:x:1002:</span></span><br><span class=\"line\">sudo useradd -g sftp -s /bin/false mysftp </span><br><span class=\"line\">sudo passwd mysftp <span class=\"comment\"># 设置新密码为服务器访问密码</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"共享目录—服务端\"><a href=\"#共享目录—服务端\" class=\"headerlink\" title=\"共享目录—服务端\"></a>共享目录—服务端</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo <span class=\"built_in\">mkdir</span> -p /data/sftp/mysftp</span><br><span class=\"line\">sudo usermod -d /data/sftp/mysftp mysftp</span><br></pre></td></tr></table></figure>\n<h2 id=\"配置文件修改—服务端\"><a href=\"#配置文件修改—服务端\" class=\"headerlink\" title=\"配置文件修改—服务端\"></a>配置文件修改—服务端</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/ssh/sshd_config</span><br><span class=\"line\">Subsystem sftp /usr/libexec/openssh/sftp-server <span class=\"comment\"># 该行原本配置，需要手动注释掉</span></span><br><span class=\"line\">并在文件最后面添加如下几行内容然后保存</span><br><span class=\"line\">Subsystem sftp internal-sftp</span><br><span class=\"line\">Match Group sftp</span><br><span class=\"line\">ChrootDirectory /data/sftp/%u</span><br><span class=\"line\">ForceCommand internal-sftp</span><br><span class=\"line\">AllowTcpForwarding no</span><br><span class=\"line\">X11Forwarding no</span><br></pre></td></tr></table></figure>\n<h2 id=\"目录授权与新建—服务端\"><a href=\"#目录授权与新建—服务端\" class=\"headerlink\" title=\"目录授权与新建—服务端\"></a>目录授权与新建—服务端</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo <span class=\"built_in\">chown</span> root:sftp /data/sftp/mysftp</span><br><span class=\"line\">sudo <span class=\"built_in\">chmod</span> 755 /data/sftp/mysftp</span><br><span class=\"line\">sudo <span class=\"built_in\">mkdir</span> /data/sftp/mysftp/upload</span><br><span class=\"line\">sudo <span class=\"built_in\">chown</span> mysftp:sftp /data/sftp/mysftp/upload</span><br><span class=\"line\">sudo <span class=\"built_in\">chmod</span> 755 /data/sftp/mysftp/upload</span><br></pre></td></tr></table></figure>\n<h2 id=\"重启服务—服务端\"><a href=\"#重启服务—服务端\" class=\"headerlink\" title=\"重启服务—服务端\"></a>重启服务—服务端</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo systemctl  restart sshd.service   <span class=\"comment\"># 重启服务时如果提示服务不存在，则先添加如下服务</span></span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> ssh.service </span><br><span class=\"line\"><span class=\"comment\"># 再执行：</span></span><br><span class=\"line\">sudo systemctl  restart sshd.service </span><br></pre></td></tr></table></figure>\n<h2 id=\"访问服务器—客户端\"><a href=\"#访问服务器—客户端\" class=\"headerlink\" title=\"访问服务器—客户端\"></a>访问服务器—客户端</h2><p>进入文件管理器或我的电脑<br>输入—例如sftp：&#x2F;&#x2F;10.20.32.** （根据实际服务端IP输入，并键如账号密码，即可访问）</p>\n<h1 id=\"NFS服务搭建\"><a href=\"#NFS服务搭建\" class=\"headerlink\" title=\"NFS服务搭建\"></a>NFS服务搭建</h1><h2 id=\"服务端\"><a href=\"#服务端\" class=\"headerlink\" title=\"服务端\"></a>服务端</h2><h3 id=\"工具安装\"><a href=\"#工具安装\" class=\"headerlink\" title=\"工具安装\"></a>工具安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get install nfs-kernel-server <span class=\"comment\"># 安装 NFS服务器端</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建共享文件夹-1\"><a href=\"#创建共享文件夹-1\" class=\"headerlink\" title=\"创建共享文件夹\"></a>创建共享文件夹</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo <span class=\"built_in\">mkdir</span> /home/deepin-server/nfs       <span class=\"comment\"># 路径可以根据自己需要设置</span></span><br><span class=\"line\">sudo <span class=\"built_in\">chmod</span> -R 777 /home/deepin-server/nfs    <span class=\"comment\"># 设置共享目录权限</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"修改配置文件\"><a href=\"#修改配置文件\" class=\"headerlink\" title=\"修改配置文件\"></a>修改配置文件</h3><p><code>vim /etc/exports</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">配置文件虽然只有一句，但是其中还是有很多讲究； </span><br><span class=\"line\">共享文件可执行权限有： </span><br><span class=\"line\">      ro           只读访问 </span><br><span class=\"line\">      rw           读写访问 </span><br><span class=\"line\">      <span class=\"built_in\">sync</span>          所有数据在请求时写入共享 </span><br><span class=\"line\">      hide          在NFS共享目录中不共享其子目录 </span><br><span class=\"line\">      no_hide         共享NFS目录的子目录 </span><br><span class=\"line\">      all_squash       共享文件的UID和GID映射匿名用户anonymous，适合公用目录。 </span><br><span class=\"line\">      no_all_squash      保留共享文件的UID和GID（默认） </span><br><span class=\"line\">      root_squash       root用户的所有请求映射成如anonymous用户一样的权限（默认） </span><br><span class=\"line\">      no_root_squas      root用户具有根目录的完全管理访问权限 </span><br><span class=\"line\">ip配置一般需要进行限定，最好不要使用* ，不然存在安全问题，可以限定具体ip或者ip段才能挂载。 </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置文件修改如下：\"><a href=\"#配置文件修改如下：\" class=\"headerlink\" title=\"配置文件修改如下：\"></a>配置文件修改如下：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">deepin-server@deepin-server-PC:~$ cat /etc/exports </span><br><span class=\"line\"># /etc/exports: the access control list for filesystems which may be exported</span><br><span class=\"line\">#               to NFS clients.  See exports(5).</span><br><span class=\"line\">#</span><br><span class=\"line\"># Example for NFSv2 and NFSv3:</span><br><span class=\"line\"># /srv/homes       hostname1(rw,sync,no_subtree_check) hostname2(ro,sync,no_subtree_check)</span><br><span class=\"line\"># Example for NFSv4:</span><br><span class=\"line\"># /srv/nfs4        gss/krb5i(rw,sync,fsid=0,crossmnt,no_subtree_check)</span><br><span class=\"line\"># /srv/nfs4/homes  gss/krb5i(rw,sync,no_subtree_check)</span><br><span class=\"line\">/home/deepin-server/nfs  10.20.*(rw)#此处ip只做了部分限制，圆括号里面就是配置权限的。</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动服务-1\"><a href=\"#启动服务-1\" class=\"headerlink\" title=\"启动服务\"></a>启动服务</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">systemctl start rpcbind nfs-server</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查看服务状态-1\"><a href=\"#查看服务状态-1\" class=\"headerlink\" title=\"查看服务状态\"></a>查看服务状态</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">deepin-server@deepin-server-PC:~$ sudo systemctl status rpcbind nfs-server</span><br><span class=\"line\">● rpcbind.service - RPC bind portmap service</span><br><span class=\"line\">   Loaded: loaded (/lib/systemd/system/rpcbind.service; enabled; vendor preset: enabled)</span><br><span class=\"line\">   Active: active (running) since Wed 2022-01-05 11:53:19 CST; 1h 56min ago</span><br><span class=\"line\">     Docs: man:rpcbind(8)</span><br><span class=\"line\"> Main PID: 19304 (rpcbind)</span><br><span class=\"line\">    Tasks: 1 (limit: 19660)</span><br><span class=\"line\">   Memory: 608.0K</span><br><span class=\"line\">   CGroup: /system.slice/rpcbind.service</span><br><span class=\"line\">           └─19304 /sbin/rpcbind -f -w</span><br><span class=\"line\"></span><br><span class=\"line\">1月 05 11:53:19 deepin-server-PC systemd[1]: Starting RPC bind portmap service...</span><br><span class=\"line\">1月 05 11:53:19 deepin-server-PC systemd[1]: Started RPC bind portmap service.</span><br><span class=\"line\"></span><br><span class=\"line\">● nfs-server.service - NFS server and services</span><br><span class=\"line\">   Loaded: loaded (/lib/systemd/system/nfs-server.service; enabled; vendor preset: enabled)</span><br><span class=\"line\">   Active: active (exited) since Wed 2022-01-05 11:53:21 CST; 1h 56min ago</span><br><span class=\"line\">  Process: 19319 ExecStartPre=/usr/sbin/exportfs -r (code=exited, status=0/SUCCESS)</span><br><span class=\"line\">  Process: 19320 ExecStart=/usr/sbin/rpc.nfsd $RPCNFSDARGS (code=exited, status=0/SUCCESS)</span><br><span class=\"line\"> Main PID: 19320 (code=exited, status=0/SUCCESS)</span><br><span class=\"line\"></span><br><span class=\"line\">1月 05 11:53:20 deepin-server-PC systemd[1]: Starting NFS server and services...</span><br><span class=\"line\">1月 05 11:53:20 deepin-server-PC exportfs[19319]: exportfs: /etc/exports [1]: Neither &#x27;subtree_check&#x27; or &#x27;no_subtree_check&#x27; specified for export &quot;10.20.*:/home/deepin-server/Documents/NFS文件目录for-test&quot;.</span><br><span class=\"line\">1月 05 11:53:20 deepin-server-PC exportfs[19319]:   Assuming default behaviour (&#x27;no_subtree_check&#x27;).</span><br><span class=\"line\">1月 05 11:53:20 deepin-server-PC exportfs[19319]:   NOTE: this default has changed since nfs-utils version 1.0.x</span><br><span class=\"line\">1月 05 11:53:21 deepin-server-PC systemd[1]: Started NFS server and services.</span><br><span class=\"line\">deepin-server@deepin-server-PC:~$ </span><br></pre></td></tr></table></figure>\n<p>至此服务端算是配置完成了。</p>\n<h2 id=\"客户端配置\"><a href=\"#客户端配置\" class=\"headerlink\" title=\"客户端配置\"></a>客户端配置</h2><p>客户端主要就是挂载操作，不过挂载nfs的时候同样需要安装客户端软件</p>\n<h3 id=\"客户端安装\"><a href=\"#客户端安装\" class=\"headerlink\" title=\"客户端安装\"></a>客户端安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get install nfs-common</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查看服务端nfs共享信息\"><a href=\"#查看服务端nfs共享信息\" class=\"headerlink\" title=\"查看服务端nfs共享信息\"></a>查看服务端nfs共享信息</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">showmount -e 10.20.13.152</span><br><span class=\"line\">babyfengfjx@babyfengfjx:~$ showmount -e 10.20.13.152</span><br><span class=\"line\">Export list <span class=\"keyword\">for</span> 10.20.13.152:</span><br><span class=\"line\">/home/deepin-server/Documents/NFS文件目录for-test 10.20.*</span><br><span class=\"line\">babyfengfjx@babyfengfjx:~$ </span><br></pre></td></tr></table></figure>\n<h3 id=\"客户端创建挂载目录\"><a href=\"#客户端创建挂载目录\" class=\"headerlink\" title=\"客户端创建挂载目录\"></a>客户端创建挂载目录</h3><p>随便在本地客户端创建一个目录作为NFS挂载目录即可</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo <span class=\"built_in\">mkdir</span> /home/babyfengfjx/Documents/nfsfile/</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"客户端挂载\"><a href=\"#客户端挂载\" class=\"headerlink\" title=\"客户端挂载\"></a>客户端挂载</h3><p>将服务端的NFS共享目录，挂载到本地客户端对应目录即可</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo mount -t nfs 10.20.13.152:/home/deepin-server/Documents/NFS文件目录for-test /home/babyfengfjx/Documents/nfsfile/</span><br></pre></td></tr></table></figure>\n<h3 id=\"查看并传输文件\"><a href=\"#查看并传输文件\" class=\"headerlink\" title=\"查看并传输文件\"></a>查看并传输文件</h3><p>上述操作完成后，此时就可以在客户端对应目录使用NFS存储了，上传新建文件均可以随心所欲。</p>\n<h3 id=\"开机自动挂载\"><a href=\"#开机自动挂载\" class=\"headerlink\" title=\"开机自动挂载\"></a>开机自动挂载</h3><p>写入fstab方法并不推荐，如果NFS挂载失败可能会影响设备正常启动 </p>\n<h4 id=\"写入fstab进行开机自动挂载\"><a href=\"#写入fstab进行开机自动挂载\" class=\"headerlink\" title=\"写入fstab进行开机自动挂载\"></a>写入fstab进行开机自动挂载</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;10.20.13.152:/home/deepin-server/Documents/NFS文件目录for-test /home/babyfengfjx/Documents/nfsfile/ nfs4 defaults 0 0&quot;</span> &gt;&gt; /etc/fstab</span><br><span class=\"line\"> mount -av</span><br></pre></td></tr></table></figure>\n<h4 id=\"通过配置开机自运行脚本\"><a href=\"#通过配置开机自运行脚本\" class=\"headerlink\" title=\"通过配置开机自运行脚本\"></a>通过配置开机自运行脚本</h4><p><strong>原理如下：</strong></p>\n<blockquote>\n<p>新建 &#x2F;etc&#x2F;rc.local 文件<br>这种方法的原理是系统开机后会自动启动 rc-local 服务；<br>rc-local 服务启动后就会自动执行 &#x2F;etc 目录下的 rc.local 脚本；<br>该方法的优点就是不存在第一种方法的三个缺点，脚本执行失败不会出现黑屏弹窗、sleep 不会造成开机黑屏以及执行脚本的用户是 root 用户。 </p>\n</blockquote>\n<p><strong>主要步骤：</strong></p>\n<ol>\n<li>新建 &#x2F;etc&#x2F;rc.local 文件</li>\n<li>粘贴以下模板<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/sh -e</span></span><br><span class=\"line\"><span class=\"comment\"># rc.local</span></span><br><span class=\"line\"><span class=\"comment\"># This script is executed at the end of each multiuser runlevel.</span></span><br><span class=\"line\"><span class=\"comment\"># Make sure that the script will &quot;exit 0&quot; on success or any other</span></span><br><span class=\"line\"><span class=\"comment\"># value on error.</span></span><br><span class=\"line\"><span class=\"comment\"># In order to enable or disable this script just change the execution</span></span><br><span class=\"line\"><span class=\"comment\"># bits.</span></span><br><span class=\"line\"><span class=\"comment\"># By default this script does nothing.</span></span><br><span class=\"line\">01.LitterScript/02.bbsmonitor/bbsmonitor.py &gt;bbs.log 2&gt;&amp;1 &amp;</span><br><span class=\"line\"><span class=\"comment\"># 因为该命令本身就是会以root权限执行，所以不用加sudo</span></span><br><span class=\"line\"><span class=\"built_in\">sleep</span> 5;mount -t nfs 10.20.13.152:/home/deepin-server/Documents/NFS文件目录for-test /home/babyfengfjx/Documents/nfsfile/</span><br><span class=\"line\"><span class=\"built_in\">exit</span> 0</span><br></pre></td></tr></table></figure></li>\n<li>在 exit 0 上方插入你需要自启的命令(一行一个)后保存文件</li>\n<li>给脚本加上 755 权限<br>sudo chmod +755 &#x2F;etc&#x2F;rc.local</li>\n<li>调试脚本(可选)<br>sudo &#x2F;etc&#x2F;rc.local # 使用 sudo 模拟 root 用户开机自启 &#x2F;etc&#x2F;rc.local 文件<br>如果第 5 步模拟启动脚本没有报错，那我们就可以重启电脑看看是否可以成功实现脚本开机自启。重启进入系统后我们可以通过 systemctl status rc-local.service 查看 rc-local 的运行状态，如果结果显示的是 active (exited) 则说明你的脚本已经成功执行，反之如果结果显示 failed,那么你需要检查一下脚本是否哪里有问题。</li>\n</ol>\n<h5 id=\"这里提供可能导致脚本无法正常启动的原因：\"><a href=\"#这里提供可能导致脚本无法正常启动的原因：\" class=\"headerlink\" title=\"这里提供可能导致脚本无法正常启动的原因：\"></a>这里提供可能导致脚本无法正常启动的原因：</h5><p>1、执行脚本的用户不一致<br>由于 rc.local 开机自启的时候是以 root 用户执行的，这里很多人会忽略了一个问题，很多情况下你的命令是必须要普通用户执行的。比如 conky 和虚拟机(用户A建立的VBox和VM Ware虚拟机用户B无法访问)等。<br>假设用户 lolimay 在终端用 VBoxHeadless -s aikuai &amp; 后台启动了虚拟机名 aikuai，那么我们在 rc.local 文件应该用下面这种方式写：<br><code>su - lolimay -c &quot;VBoxHeadless -s aikuai &amp;&quot; # 以 lolimay 用户执行该命令</code><br>2、多余的 sudo<br>前面已经提到 rc.local 开机时是以 root 用户启动的，所以写在 rc.local 文件中命令不需要带有 sudo 前缀(实际上就算你带有了 sudo 前缀也不会产生错误)。<br>3、最佳实践<br>个人建议每当往 rc.local 文件中添加了一个需要自启的命令时，可以先用 sudo &#x2F;etc&#x2F;rc.local 命令模拟一下看看是否能够执行成功(如果执行失败也能够直观地看到出错的原因)，这样能够有效减少你重启电脑来调试的次数。</p>\n"},{"title":"常见网络存储服务搭建方法","date":"2022-06-03T03:21:34.000Z","_content":"---\n# Samba服务搭建\n>Samba是在Linux系统上实现SMB协议的一个免费软件，由服务器及客户端程序构成。SMB（Server Messages Block，信息服务块）是一种在局域网上共享文件和打印机的一种通信协议，它为局域网内的不同计算机之间提供文件及打印机等资源的共享服务。\n## 安装服务\n```bash\nsudo apt-get install samba-common samba\n```\n## 创建共享文件夹\n```bash\nsudo mkdir /opt/share\n```\n## 编辑配置文件\n> - 关于samba配置文件，smb.conf总共分为两大部分，分别为“全局设置（GIobal Settings）”和“共享定义（Share Definitions）”。全局设置定义于Samba服务器的整体行为，例如，工作组，主机名等方面。共享定义则用于设置的具体的共享目录或者设备中。\n> - 配置文件绝对路径在：```/etc/samba/smb.conf```\n\n### 全局设置\n- workgroup用于设置在windows中显示的工作组\n- server string是Samba服务器的说明\n- workgroup和server string字段后面的内容可以随便写\n- 通常来说，将Samba服务器的编码设置为UTF-8是比较好的，也能解决显示的问题：```unix charset = UTF-8```\n- 但是这样也会存在问题，UTF-8编码的中文文件名在某些系统下面会乱码，Samba提供了dos charset这个字段。下面这条配置命令为哪些不认识的Unicode的Windows系统使用GBK编码:```dos charset = cp936```\n- security字段设置了用户登录的验证方式，share和user是最常用到的两种。share方式允许任何用户登录到系统，而不用提供用户名和口令,但是由于Samba是默认要使用验证方式的，所以这里就要讲到user方式。这种方式要求用户提供账户信息供服务器验证，但是要使用user验证，Samba的配置文件里面就应该包含这一行:```security = user```\n### 共享设置\n这个文件叫做smb.conf（位于/etc或者/etc/samba目录下面），可以用uos系统自带的文本编辑器打开，在末尾输入：\n```bash\n[share] #\"[]\" 中的文字表示共享目录名字，可以随意设置\n    comment = Linux Share　 #comment字段用于设置这个共享目录的描述\n    path = /opt/share　　　　 #share指定了共享目录的路径\n    public = yes　　　　　　 #表示在windows的“网上邻居”中可见\n    writeable = no　　　　　 #writeable表示设置目录是否可写（yes是可写的意思）\n    browseable = yes　　　 #表示在windows的“网上邻居”中可见\n    guest ok = no 　　　　　#告诉Samba服务器这个共享目录允许匿名访问\n```\n## 添加用户\n\n```bash\nsudo useradd smbuser  # 新增一个叫smbuser的用户\nsudo smbpasswd -a smbuser  # 给这个新增用户创建samb共享密码\nNew SMB password:\nRetype new SMB password:\nAdded user smbuser\n```\n后面就可以使用带-U参数的smbpasswd命令修改已经有用户的口令。如果用户希望本地修改服务器上自己的口令，可以使用-r参数。下面的命令用户修改在服务器smbserver上smbuser用户的口令了\n\n```bash\nsmbpasswd -r smbserver -U smbuser\n```\n## 赋予权限\nsmbuser对共享目录写权限,一下配置需要写成yes\n```bash\nwriteable = yes\n```\n如果只写writeable = yes是远远不够的，如果服务器上的这么目录本身对smbuser不可写的话，就需要添加以下命令：\n```bash\nsudo chown smbuser:smbuser /opt/share\n```\n## 服务启动、停止、重启\n### 启动服务：```service smbd start```\n### 停止服务：```service smbd stop```\n### 重启服务：```service smbd restart```\n### 查看服务状态：```service smbd status```\n```bash\ndeepin@wh-k8snode-70:/etc/samba$ service smbd status\n● smbd.service - Samba SMB Daemon\n   Loaded: loaded (/lib/systemd/system/smbd.service; enabled; vendor preset: enabled)\n   Active: active (running) since Mon 2022-06-20 11:50:46 CST; 1h 57min ago\n     Docs: man:smbd(8)\n           man:samba(7)\n           man:smb.conf(5)\n  Process: 20165 ExecStartPre=/usr/share/samba/update-apparmor-samba-profile (code=exited, status=0/SUCCESS)\n Main PID: 20174 (smbd)\n   Status: \"smbd: ready to serve connections...\"\n    Tasks: 6 (limit: 4915)\n   Memory: 26.7M\n   CGroup: /system.slice/smbd.service\n           ├─ 8209 /usr/sbin/smbd --foreground --no-process-group\n           ├─10619 /usr/sbin/smbd --foreground --no-process-group\n           ├─20174 /usr/sbin/smbd --foreground --no-process-group\n           ├─20176 /usr/sbin/smbd --foreground --no-process-group\n           ├─20177 /usr/sbin/smbd --foreground --no-process-group\n           └─20178 /usr/sbin/smbd --foreground --no-process-group\n\n```\n## 常见问题\n1. 修改配置文件后，服务无法启动。\n> 在实际修改配置文件过程中，可能在参数后面有一些看不见的字符，会导致服务无法正常启动，最好检查每个修改的参数后面无一些空格或者其他特殊符号。\n2. 创建了几个samba用户，想通过不同的用户来对不同的文件进行访问，但是出现了报错（内容是不允许一个用户使用一个以上用户名与服务器或者共享资源的多重连接）\n**解决：**\n> 先断开现有的samba连接：cmd命令行下执行net use * /del /X\n> 再重新选择你要使用的目录，使用对应的用户名进行登录就可以了\n\n3. 配置好samba服务器，但是测试过程中会出现以下报错：\n>主要原因是因为服务器的防火墙没有关，可以选择在文件/etc/security/limits.conf下输入*　-   nofile   16384,然后shutdown -r now 重启一下就可以了\n\n4. samba服务器已经可以让windows通过网络来访问samba，但是没有办法写入，修改，删除，只能查看,出现这样的问题可能就是我们自己在配置的时候出现问题了，如果我的用户是deepin:\n```#chmod  777 FileServer```   　--这种操作就可以让组samba里的用户进行写操作了。\n```bash\n[deepin]\n   create mode =0664\n   force create mode=0750   #文件新建的权限为750\n   directory mode=0750      　#新建文件夹的权限只有组里的用户查看，其他组里的用户都没有权限进入\n```\n# FTP服务搭建\n## vsftpd配置使用\n>vsftpd 是Linus上非常安全好用的ftp服务，只需要简单的安装后就可以搭建起ftp服务；\n>该服务主要的配置文件就是vsftpd.conf ,在deepin/uos系统中的绝对路径是：/etc/vsftpd.conf\n### 安装\n只需要简单的进行安装配置即可，前提是你开启了开发者模式我们才能通过终端安装软件\n```bash\nsudo apt install vsftpd\n```\n如果提示没有找到对应安装包，则可能是没有进行仓库的更新连接，执行如下命令即可\n```bash\nsudo apt update \n```\n### 服务的启停配置\n#### 启动服务\n```bash\nservice vsftpd start\n```\n#### 停止服务\n```bash\nservice vsftpd stop\n```\n#### 重启服务\n```bash\nservice vsftpd restart\n```\n#### 查看服务状态\n```bash\nservice vsftpd status\n#执行后结果如下：active则表示正常运行，如果失败了则可以通过提示信息查询对应问题\nbabyfengfjx@babyfengfjx:~$ service vsftpd status \n● vsftpd.service - vsftpd FTP server\n   Loaded: loaded (/lib/systemd/system/vsftpd.service; enabled; vendor preset: enabled)\n   Active: active (running) since Sat 2021-10-09 16:22:48 CST; 1s ago\n  Process: 18334 ExecStartPre=/bin/mkdir -p /var/run/vsftpd/empty (code=exited, status=0/SUCCESS)\n Main PID: 18335 (vsftpd)\n    Tasks: 1 (limit: 4915)\n   Memory: 568.0K\n   CGroup: /system.slice/vsftpd.service\n           └─18335 /usr/sbin/vsftpd /etc/vsftpd.conf\n```\n#### 配置文件展示\n在使用该服务过程中，主要就是这些配置文件该如何配置，很多同学在实际配置过程中很难一次配置成功，这里就给出一个实际可用的配置参数以供参考 \n\n配置文件路径：/etc/vsftpd.conf\n\n配置过程中尽量是将匿名登录关闭，使用本地用户登录，以确保安全。 \n```bash\n# Example config file /etc/vsftpd.conf\n#\n# The default compiled in settings are fairly paranoid. This sample file\n# loosens things up a bit, to make the ftp daemon more usable.\n# Please see vsftpd.conf.5 for all compiled in defaults.\n#\n# READ THIS: This example file is NOT an exhaustive list of vsftpd options.\n# Please read the vsftpd.conf.5 manual page to get a full idea of vsftpd's\n# capabilities.\n#\n#\n# Run standalone?  vsftpd can run either from an inetd or as a standalone\n# daemon started from an initscript.\nlisten=YES\n#\n# This directive enables listening on IPv6 sockets. By default, listening\n# on the IPv6 \"any\" address (::) will accept connections from both IPv6\n# and IPv4 clients. It is not necessary to listen on *both* IPv4 and IPv6\n# sockets. If you want that (perhaps because you want to listen on specific\n# addresses) then you must run two copies of vsftpd with two configuration\n# files.\nlisten_ipv6=NO\n#\n# Allow anonymous FTP? (Disabled by default).\nanonymous_enable=NO\n#\n# Uncomment this to allow local users to log in.\nlocal_enable=YES\n#\n# Uncomment this to enable any form of FTP write command.\nwrite_enable=YES\n#\n# Default umask for local users is 077. You may wish to change this to 022,\n# if your users expect that (022 is used by most other ftpd's)\n#local_umask=022\n#\n# Uncomment this to allow the anonymous FTP user to upload files. This only\n# has an effect if the above global write enable is activated. Also, you will\n# obviously need to create a directory writable by the FTP user.\n#anon_upload_enable=YES\n#\n# Uncomment this if you want the anonymous FTP user to be able to create\n# new directories.\n#anon_mkdir_write_enable=YES\n#\n# Activate directory messages - messages given to remote users when they\n# go into a certain directory.\ndirmessage_enable=YES\n#\n# If enabled, vsftpd will display directory listings with the time\n# in  your  local  time  zone.  The default is to display GMT. The\n# times returned by the MDTM FTP command are also affected by this\n# option.\nuse_localtime=YES\n#\n# Activate logging of uploads/downloads.\nxferlog_enable=YES\n#\n# Make sure PORT transfer connections originate from port 20 (ftp-data).\nconnect_from_port_20=YES\n#\n# If you want, you can arrange for uploaded anonymous files to be owned by\n# a different user. Note! Using \"root\" for uploaded files is not\n# recommended!\n#chown_uploads=YES\n#chown_username=whoever\n#\n# You may override where the log file goes if you like. The default is shown\n# below.\n#xferlog_file=/var/log/vsftpd.log\n#\n# If you want, you can have your log file in standard ftpd xferlog format.\n# Note that the default log file location is /var/log/xferlog in this case.\n#xferlog_std_format=YES\n#\n# You may change the default value for timing out an idle session.\n#idle_session_timeout=600\n#\n# You may change the default value for timing out a data connection.\n#data_connection_timeout=120\n#\n# It is recommended that you define on your system a unique user which the\n# ftp server can use as a totally isolated and unprivileged user.\n#nopriv_user=ftpsecure\n#\n# Enable this and the server will recognise asynchronous ABOR requests. Not\n# recommended for security (the code is non-trivial). Not enabling it,\n# however, may confuse older FTP clients.\n#async_abor_enable=YES\n#\n# By default the server will pretend to allow ASCII mode but in fact ignore\n# the request. Turn on the below options to have the server actually do ASCII\n# mangling on files when in ASCII mode.\n# Beware that on some FTP servers, ASCII support allows a denial of service\n# attack (DoS) via the command \"SIZE /big/file\" in ASCII mode. vsftpd\n# predicted this attack and has always been safe, reporting the size of the\n# raw file.\n# ASCII mangling is a horrible feature of the protocol.\n#ascii_upload_enable=YES\n#ascii_download_enable=YES\n#\n# You may fully customise the login banner string:\n#ftpd_banner=Welcome to blah FTP service.\n#\n# You may specify a file of disallowed anonymous e-mail addresses. Apparently\n# useful for combatting certain DoS attacks.\n#deny_email_enable=YES\n# (default follows)\n#banned_email_file=/etc/vsftpd.banned_emails\n#\n# You may restrict local users to their home directories.  See the FAQ for\n# the possible risks in this before using chroot_local_user or\n# chroot_list_enable below.\n# chroot_local_user=YES\n#\n# You may specify an explicit list of local users to chroot() to their home\n# directory. If chroot_local_user is YES, then this list becomes a list of\n# users to NOT chroot().\n# (Warning! chroot'ing can be very dangerous. If using chroot, make sure that\n# the user does not have write access to the top level directory within the\n# chroot)\n# chroot_local_user=YES\n# chroot_list_enable=YES\n# (default follows)\n# chroot_list_file=/etc/vsftpd.chroot_list\n#\n# You may activate the \"-R\" option to the builtin ls. This is disabled by\n# default to avoid remote users being able to cause excessive I/O on large\n# sites. However, some broken FTP clients such as \"ncftp\" and \"mirror\" assume\n# the presence of the \"-R\" option, so there is a strong case for enabling it.\n#ls_recurse_enable=YES\n#\n# Customization\n#\n# Some of vsftpd's settings don't fit the filesystem layout by\n# default.\n#\n# This option should be the name of a directory which is empty.  Also, the\n# directory should not be writable by the ftp user. This directory is used\n# as a secure chroot() jail at times vsftpd does not require filesystem\n# access.\nsecure_chroot_dir=/var/run/vsftpd/empty\n#\n# This string is the name of the PAM service vsftpd will use.\npam_service_name=vsftpd\n#\n# This option specifies the location of the RSA certificate to use for SSL\n# encrypted connections.\nrsa_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pem\nrsa_private_key_file=/etc/ssl/private/ssl-cert-snakeoil.key\nssl_enable=NO\n\n\n#\n# Uncomment this to indicate that vsftpd use a utf8 filesystem.\n#utf8_filesystem=YES\n```\n\n#### 实际开启的配置项如下：\n按照如下简单的配置就可以通过本地用户进行访问了 \n```bash\nlisten=YES\nlisten_ipv6=NO\nanonymous_enable=NO\nlocal_enable=YES\nwrite_enable=YES\ndirmessage_enable=YES\nuse_localtime=YES\nxferlog_enable=YES\nconnect_from_port_20=YES\nsecure_chroot_dir=/var/run/vsftpd/empty\npam_service_name=vsftpd\nrsa_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pem\nrsa_private_key_file=/etc/ssl/private/ssl-cert-snakeoil.key\nssl_enable=NO\n```\n#### 遇到的问题\n- 无法配置指定根目录，也就是任何本地账户登录后的目录都是根目录，无法自定义配置指定目录，配置后也不生效； \n- 在添加新用户配置成nologin时，是无法正常使用该类用户进行访问的； \n- 添加的新用户，需要先登录一次后，方可使用该账号访问ftp; \n# SFTP服务搭建\n## 群组配置---服务端\n```bash\nsudo groupadd sftp\ncat /etc/group  # 确认组新建成功\nsudo vim /etc/group #修改 sftp:x:1002:\nsudo useradd -g sftp -s /bin/false mysftp \nsudo passwd mysftp # 设置新密码为服务器访问密码\n```\n## 共享目录---服务端\n```bash\nsudo mkdir -p /data/sftp/mysftp\nsudo usermod -d /data/sftp/mysftp mysftp\n```\n## 配置文件修改---服务端\n```bash\nsudo vim /etc/ssh/sshd_config\nSubsystem sftp /usr/libexec/openssh/sftp-server # 该行原本配置，需要手动注释掉\n并在文件最后面添加如下几行内容然后保存\nSubsystem sftp internal-sftp\nMatch Group sftp\nChrootDirectory /data/sftp/%u\nForceCommand internal-sftp\nAllowTcpForwarding no\nX11Forwarding no\n```\n## 目录授权与新建---服务端\n```bash\nsudo chown root:sftp /data/sftp/mysftp\nsudo chmod 755 /data/sftp/mysftp\nsudo mkdir /data/sftp/mysftp/upload\nsudo chown mysftp:sftp /data/sftp/mysftp/upload\nsudo chmod 755 /data/sftp/mysftp/upload\n```\n## 重启服务---服务端\n```bash\nsudo systemctl  restart sshd.service   # 重启服务时如果提示服务不存在，则先添加如下服务\nsystemctl enable ssh.service \n# 再执行：\nsudo systemctl  restart sshd.service \n```\n## 访问服务器---客户端\n进入文件管理器或我的电脑\n输入---例如sftp：//10.20.32.** （根据实际服务端IP输入，并键如账号密码，即可访问）\n# NFS服务搭建\n## 服务端\n### 工具安装\n```bash\nsudo apt-get install nfs-kernel-server # 安装 NFS服务器端\n```\n\n### 创建共享文件夹\n```bash\nsudo mkdir /home/deepin-server/nfs       # 路径可以根据自己需要设置\nsudo chmod -R 777 /home/deepin-server/nfs    # 设置共享目录权限\n```\n\n### 修改配置文件\n```vim /etc/exports```\n```bash\n配置文件虽然只有一句，但是其中还是有很多讲究； \n共享文件可执行权限有： \n      ro           只读访问 \n      rw           读写访问 \n      sync          所有数据在请求时写入共享 \n      hide          在NFS共享目录中不共享其子目录 \n      no_hide         共享NFS目录的子目录 \n      all_squash       共享文件的UID和GID映射匿名用户anonymous，适合公用目录。 \n      no_all_squash      保留共享文件的UID和GID（默认） \n      root_squash       root用户的所有请求映射成如anonymous用户一样的权限（默认） \n      no_root_squas      root用户具有根目录的完全管理访问权限 \nip配置一般需要进行限定，最好不要使用* ，不然存在安全问题，可以限定具体ip或者ip段才能挂载。 \n```\n\n### 配置文件修改如下：\n```\ndeepin-server@deepin-server-PC:~$ cat /etc/exports \n# /etc/exports: the access control list for filesystems which may be exported\n#               to NFS clients.  See exports(5).\n#\n# Example for NFSv2 and NFSv3:\n# /srv/homes       hostname1(rw,sync,no_subtree_check) hostname2(ro,sync,no_subtree_check)\n# Example for NFSv4:\n# /srv/nfs4        gss/krb5i(rw,sync,fsid=0,crossmnt,no_subtree_check)\n# /srv/nfs4/homes  gss/krb5i(rw,sync,no_subtree_check)\n/home/deepin-server/nfs  10.20.*(rw)#此处ip只做了部分限制，圆括号里面就是配置权限的。\n```\n### 启动服务\n```bash\nsystemctl start rpcbind nfs-server\n```\n\n### 查看服务状态\n```服务在running态即可\ndeepin-server@deepin-server-PC:~$ sudo systemctl status rpcbind nfs-server\n● rpcbind.service - RPC bind portmap service\n   Loaded: loaded (/lib/systemd/system/rpcbind.service; enabled; vendor preset: enabled)\n   Active: active (running) since Wed 2022-01-05 11:53:19 CST; 1h 56min ago\n     Docs: man:rpcbind(8)\n Main PID: 19304 (rpcbind)\n    Tasks: 1 (limit: 19660)\n   Memory: 608.0K\n   CGroup: /system.slice/rpcbind.service\n           └─19304 /sbin/rpcbind -f -w\n\n1月 05 11:53:19 deepin-server-PC systemd[1]: Starting RPC bind portmap service...\n1月 05 11:53:19 deepin-server-PC systemd[1]: Started RPC bind portmap service.\n\n● nfs-server.service - NFS server and services\n   Loaded: loaded (/lib/systemd/system/nfs-server.service; enabled; vendor preset: enabled)\n   Active: active (exited) since Wed 2022-01-05 11:53:21 CST; 1h 56min ago\n  Process: 19319 ExecStartPre=/usr/sbin/exportfs -r (code=exited, status=0/SUCCESS)\n  Process: 19320 ExecStart=/usr/sbin/rpc.nfsd $RPCNFSDARGS (code=exited, status=0/SUCCESS)\n Main PID: 19320 (code=exited, status=0/SUCCESS)\n\n1月 05 11:53:20 deepin-server-PC systemd[1]: Starting NFS server and services...\n1月 05 11:53:20 deepin-server-PC exportfs[19319]: exportfs: /etc/exports [1]: Neither 'subtree_check' or 'no_subtree_check' specified for export \"10.20.*:/home/deepin-server/Documents/NFS文件目录for-test\".\n1月 05 11:53:20 deepin-server-PC exportfs[19319]:   Assuming default behaviour ('no_subtree_check').\n1月 05 11:53:20 deepin-server-PC exportfs[19319]:   NOTE: this default has changed since nfs-utils version 1.0.x\n1月 05 11:53:21 deepin-server-PC systemd[1]: Started NFS server and services.\ndeepin-server@deepin-server-PC:~$ \n```\n至此服务端算是配置完成了。\n## 客户端配置\n客户端主要就是挂载操作，不过挂载nfs的时候同样需要安装客户端软件\n### 客户端安装\n```bash\nsudo apt-get install nfs-common\n```\n\n### 查看服务端nfs共享信息\n```bash\nshowmount -e 10.20.13.152\nbabyfengfjx@babyfengfjx:~$ showmount -e 10.20.13.152\nExport list for 10.20.13.152:\n/home/deepin-server/Documents/NFS文件目录for-test 10.20.*\nbabyfengfjx@babyfengfjx:~$ \n```\n### 客户端创建挂载目录\n随便在本地客户端创建一个目录作为NFS挂载目录即可\n```bash\nsudo mkdir /home/babyfengfjx/Documents/nfsfile/\n```\n\n### 客户端挂载\n将服务端的NFS共享目录，挂载到本地客户端对应目录即可\n```bash\nsudo mount -t nfs 10.20.13.152:/home/deepin-server/Documents/NFS文件目录for-test /home/babyfengfjx/Documents/nfsfile/\n```\n### 查看并传输文件\n上述操作完成后，此时就可以在客户端对应目录使用NFS存储了，上传新建文件均可以随心所欲。\n### 开机自动挂载\n写入fstab方法并不推荐，如果NFS挂载失败可能会影响设备正常启动 \n#### 写入fstab进行开机自动挂载\n```bash\necho \"10.20.13.152:/home/deepin-server/Documents/NFS文件目录for-test /home/babyfengfjx/Documents/nfsfile/ nfs4 defaults 0 0\" >> /etc/fstab\n mount -av\n```\n#### 通过配置开机自运行脚本\n**原理如下：**\n>新建 /etc/rc.local 文件\n>这种方法的原理是系统开机后会自动启动 rc-local 服务； \n>rc-local 服务启动后就会自动执行 /etc 目录下的 rc.local 脚本； \n>该方法的优点就是不存在第一种方法的三个缺点，脚本执行失败不会出现黑屏弹窗、sleep 不会造成开机黑屏以及执行脚本的用户是 root 用户。 \n\n\n**主要步骤：**\n1. 新建 /etc/rc.local 文件\n2. 粘贴以下模板\n```bash\n#!/bin/sh -e\n# rc.local\n# This script is executed at the end of each multiuser runlevel.\n# Make sure that the script will \"exit 0\" on success or any other\n# value on error.\n# In order to enable or disable this script just change the execution\n# bits.\n# By default this script does nothing.\n01.LitterScript/02.bbsmonitor/bbsmonitor.py >bbs.log 2>&1 &\n# 因为该命令本身就是会以root权限执行，所以不用加sudo\nsleep 5;mount -t nfs 10.20.13.152:/home/deepin-server/Documents/NFS文件目录for-test /home/babyfengfjx/Documents/nfsfile/\nexit 0\n```\n3. 在 exit 0 上方插入你需要自启的命令(一行一个)后保存文件\n4. 给脚本加上 755 权限\nsudo chmod +755 /etc/rc.local\n5. 调试脚本(可选)\nsudo /etc/rc.local # 使用 sudo 模拟 root 用户开机自启 /etc/rc.local 文件\n如果第 5 步模拟启动脚本没有报错，那我们就可以重启电脑看看是否可以成功实现脚本开机自启。重启进入系统后我们可以通过 systemctl status rc-local.service 查看 rc-local 的运行状态，如果结果显示的是 active (exited) 则说明你的脚本已经成功执行，反之如果结果显示 failed,那么你需要检查一下脚本是否哪里有问题。\n\n##### 这里提供可能导致脚本无法正常启动的原因：\n1、执行脚本的用户不一致\n由于 rc.local 开机自启的时候是以 root 用户执行的，这里很多人会忽略了一个问题，很多情况下你的命令是必须要普通用户执行的。比如 conky 和虚拟机(用户A建立的VBox和VM Ware虚拟机用户B无法访问)等。\n假设用户 lolimay 在终端用 VBoxHeadless -s aikuai & 后台启动了虚拟机名 aikuai，那么我们在 rc.local 文件应该用下面这种方式写：\n```su - lolimay -c \"VBoxHeadless -s aikuai &\" # 以 lolimay 用户执行该命令```\n2、多余的 sudo\n前面已经提到 rc.local 开机时是以 root 用户启动的，所以写在 rc.local 文件中命令不需要带有 sudo 前缀(实际上就算你带有了 sudo 前缀也不会产生错误)。\n3、最佳实践\n个人建议每当往 rc.local 文件中添加了一个需要自启的命令时，可以先用 sudo /etc/rc.local 命令模拟一下看看是否能够执行成功(如果执行失败也能够直观地看到出错的原因)，这样能够有效减少你重启电脑来调试的次数。\n\n","source":"_posts/03shell_xargs.md","raw":"---\ntitle: 常见网络存储服务搭建方法\ncategories: \n- linux\n- 存储服务\ntags:\n- linux\n- ftp\n- NFS\ndate: 2022-06-03 11:21:34\n---\n---\n# Samba服务搭建\n>Samba是在Linux系统上实现SMB协议的一个免费软件，由服务器及客户端程序构成。SMB（Server Messages Block，信息服务块）是一种在局域网上共享文件和打印机的一种通信协议，它为局域网内的不同计算机之间提供文件及打印机等资源的共享服务。\n## 安装服务\n```bash\nsudo apt-get install samba-common samba\n```\n## 创建共享文件夹\n```bash\nsudo mkdir /opt/share\n```\n## 编辑配置文件\n> - 关于samba配置文件，smb.conf总共分为两大部分，分别为“全局设置（GIobal Settings）”和“共享定义（Share Definitions）”。全局设置定义于Samba服务器的整体行为，例如，工作组，主机名等方面。共享定义则用于设置的具体的共享目录或者设备中。\n> - 配置文件绝对路径在：```/etc/samba/smb.conf```\n\n### 全局设置\n- workgroup用于设置在windows中显示的工作组\n- server string是Samba服务器的说明\n- workgroup和server string字段后面的内容可以随便写\n- 通常来说，将Samba服务器的编码设置为UTF-8是比较好的，也能解决显示的问题：```unix charset = UTF-8```\n- 但是这样也会存在问题，UTF-8编码的中文文件名在某些系统下面会乱码，Samba提供了dos charset这个字段。下面这条配置命令为哪些不认识的Unicode的Windows系统使用GBK编码:```dos charset = cp936```\n- security字段设置了用户登录的验证方式，share和user是最常用到的两种。share方式允许任何用户登录到系统，而不用提供用户名和口令,但是由于Samba是默认要使用验证方式的，所以这里就要讲到user方式。这种方式要求用户提供账户信息供服务器验证，但是要使用user验证，Samba的配置文件里面就应该包含这一行:```security = user```\n### 共享设置\n这个文件叫做smb.conf（位于/etc或者/etc/samba目录下面），可以用uos系统自带的文本编辑器打开，在末尾输入：\n```bash\n[share] #\"[]\" 中的文字表示共享目录名字，可以随意设置\n    comment = Linux Share　 #comment字段用于设置这个共享目录的描述\n    path = /opt/share　　　　 #share指定了共享目录的路径\n    public = yes　　　　　　 #表示在windows的“网上邻居”中可见\n    writeable = no　　　　　 #writeable表示设置目录是否可写（yes是可写的意思）\n    browseable = yes　　　 #表示在windows的“网上邻居”中可见\n    guest ok = no 　　　　　#告诉Samba服务器这个共享目录允许匿名访问\n```\n## 添加用户\n\n```bash\nsudo useradd smbuser  # 新增一个叫smbuser的用户\nsudo smbpasswd -a smbuser  # 给这个新增用户创建samb共享密码\nNew SMB password:\nRetype new SMB password:\nAdded user smbuser\n```\n后面就可以使用带-U参数的smbpasswd命令修改已经有用户的口令。如果用户希望本地修改服务器上自己的口令，可以使用-r参数。下面的命令用户修改在服务器smbserver上smbuser用户的口令了\n\n```bash\nsmbpasswd -r smbserver -U smbuser\n```\n## 赋予权限\nsmbuser对共享目录写权限,一下配置需要写成yes\n```bash\nwriteable = yes\n```\n如果只写writeable = yes是远远不够的，如果服务器上的这么目录本身对smbuser不可写的话，就需要添加以下命令：\n```bash\nsudo chown smbuser:smbuser /opt/share\n```\n## 服务启动、停止、重启\n### 启动服务：```service smbd start```\n### 停止服务：```service smbd stop```\n### 重启服务：```service smbd restart```\n### 查看服务状态：```service smbd status```\n```bash\ndeepin@wh-k8snode-70:/etc/samba$ service smbd status\n● smbd.service - Samba SMB Daemon\n   Loaded: loaded (/lib/systemd/system/smbd.service; enabled; vendor preset: enabled)\n   Active: active (running) since Mon 2022-06-20 11:50:46 CST; 1h 57min ago\n     Docs: man:smbd(8)\n           man:samba(7)\n           man:smb.conf(5)\n  Process: 20165 ExecStartPre=/usr/share/samba/update-apparmor-samba-profile (code=exited, status=0/SUCCESS)\n Main PID: 20174 (smbd)\n   Status: \"smbd: ready to serve connections...\"\n    Tasks: 6 (limit: 4915)\n   Memory: 26.7M\n   CGroup: /system.slice/smbd.service\n           ├─ 8209 /usr/sbin/smbd --foreground --no-process-group\n           ├─10619 /usr/sbin/smbd --foreground --no-process-group\n           ├─20174 /usr/sbin/smbd --foreground --no-process-group\n           ├─20176 /usr/sbin/smbd --foreground --no-process-group\n           ├─20177 /usr/sbin/smbd --foreground --no-process-group\n           └─20178 /usr/sbin/smbd --foreground --no-process-group\n\n```\n## 常见问题\n1. 修改配置文件后，服务无法启动。\n> 在实际修改配置文件过程中，可能在参数后面有一些看不见的字符，会导致服务无法正常启动，最好检查每个修改的参数后面无一些空格或者其他特殊符号。\n2. 创建了几个samba用户，想通过不同的用户来对不同的文件进行访问，但是出现了报错（内容是不允许一个用户使用一个以上用户名与服务器或者共享资源的多重连接）\n**解决：**\n> 先断开现有的samba连接：cmd命令行下执行net use * /del /X\n> 再重新选择你要使用的目录，使用对应的用户名进行登录就可以了\n\n3. 配置好samba服务器，但是测试过程中会出现以下报错：\n>主要原因是因为服务器的防火墙没有关，可以选择在文件/etc/security/limits.conf下输入*　-   nofile   16384,然后shutdown -r now 重启一下就可以了\n\n4. samba服务器已经可以让windows通过网络来访问samba，但是没有办法写入，修改，删除，只能查看,出现这样的问题可能就是我们自己在配置的时候出现问题了，如果我的用户是deepin:\n```#chmod  777 FileServer```   　--这种操作就可以让组samba里的用户进行写操作了。\n```bash\n[deepin]\n   create mode =0664\n   force create mode=0750   #文件新建的权限为750\n   directory mode=0750      　#新建文件夹的权限只有组里的用户查看，其他组里的用户都没有权限进入\n```\n# FTP服务搭建\n## vsftpd配置使用\n>vsftpd 是Linus上非常安全好用的ftp服务，只需要简单的安装后就可以搭建起ftp服务；\n>该服务主要的配置文件就是vsftpd.conf ,在deepin/uos系统中的绝对路径是：/etc/vsftpd.conf\n### 安装\n只需要简单的进行安装配置即可，前提是你开启了开发者模式我们才能通过终端安装软件\n```bash\nsudo apt install vsftpd\n```\n如果提示没有找到对应安装包，则可能是没有进行仓库的更新连接，执行如下命令即可\n```bash\nsudo apt update \n```\n### 服务的启停配置\n#### 启动服务\n```bash\nservice vsftpd start\n```\n#### 停止服务\n```bash\nservice vsftpd stop\n```\n#### 重启服务\n```bash\nservice vsftpd restart\n```\n#### 查看服务状态\n```bash\nservice vsftpd status\n#执行后结果如下：active则表示正常运行，如果失败了则可以通过提示信息查询对应问题\nbabyfengfjx@babyfengfjx:~$ service vsftpd status \n● vsftpd.service - vsftpd FTP server\n   Loaded: loaded (/lib/systemd/system/vsftpd.service; enabled; vendor preset: enabled)\n   Active: active (running) since Sat 2021-10-09 16:22:48 CST; 1s ago\n  Process: 18334 ExecStartPre=/bin/mkdir -p /var/run/vsftpd/empty (code=exited, status=0/SUCCESS)\n Main PID: 18335 (vsftpd)\n    Tasks: 1 (limit: 4915)\n   Memory: 568.0K\n   CGroup: /system.slice/vsftpd.service\n           └─18335 /usr/sbin/vsftpd /etc/vsftpd.conf\n```\n#### 配置文件展示\n在使用该服务过程中，主要就是这些配置文件该如何配置，很多同学在实际配置过程中很难一次配置成功，这里就给出一个实际可用的配置参数以供参考 \n\n配置文件路径：/etc/vsftpd.conf\n\n配置过程中尽量是将匿名登录关闭，使用本地用户登录，以确保安全。 \n```bash\n# Example config file /etc/vsftpd.conf\n#\n# The default compiled in settings are fairly paranoid. This sample file\n# loosens things up a bit, to make the ftp daemon more usable.\n# Please see vsftpd.conf.5 for all compiled in defaults.\n#\n# READ THIS: This example file is NOT an exhaustive list of vsftpd options.\n# Please read the vsftpd.conf.5 manual page to get a full idea of vsftpd's\n# capabilities.\n#\n#\n# Run standalone?  vsftpd can run either from an inetd or as a standalone\n# daemon started from an initscript.\nlisten=YES\n#\n# This directive enables listening on IPv6 sockets. By default, listening\n# on the IPv6 \"any\" address (::) will accept connections from both IPv6\n# and IPv4 clients. It is not necessary to listen on *both* IPv4 and IPv6\n# sockets. If you want that (perhaps because you want to listen on specific\n# addresses) then you must run two copies of vsftpd with two configuration\n# files.\nlisten_ipv6=NO\n#\n# Allow anonymous FTP? (Disabled by default).\nanonymous_enable=NO\n#\n# Uncomment this to allow local users to log in.\nlocal_enable=YES\n#\n# Uncomment this to enable any form of FTP write command.\nwrite_enable=YES\n#\n# Default umask for local users is 077. You may wish to change this to 022,\n# if your users expect that (022 is used by most other ftpd's)\n#local_umask=022\n#\n# Uncomment this to allow the anonymous FTP user to upload files. This only\n# has an effect if the above global write enable is activated. Also, you will\n# obviously need to create a directory writable by the FTP user.\n#anon_upload_enable=YES\n#\n# Uncomment this if you want the anonymous FTP user to be able to create\n# new directories.\n#anon_mkdir_write_enable=YES\n#\n# Activate directory messages - messages given to remote users when they\n# go into a certain directory.\ndirmessage_enable=YES\n#\n# If enabled, vsftpd will display directory listings with the time\n# in  your  local  time  zone.  The default is to display GMT. The\n# times returned by the MDTM FTP command are also affected by this\n# option.\nuse_localtime=YES\n#\n# Activate logging of uploads/downloads.\nxferlog_enable=YES\n#\n# Make sure PORT transfer connections originate from port 20 (ftp-data).\nconnect_from_port_20=YES\n#\n# If you want, you can arrange for uploaded anonymous files to be owned by\n# a different user. Note! Using \"root\" for uploaded files is not\n# recommended!\n#chown_uploads=YES\n#chown_username=whoever\n#\n# You may override where the log file goes if you like. The default is shown\n# below.\n#xferlog_file=/var/log/vsftpd.log\n#\n# If you want, you can have your log file in standard ftpd xferlog format.\n# Note that the default log file location is /var/log/xferlog in this case.\n#xferlog_std_format=YES\n#\n# You may change the default value for timing out an idle session.\n#idle_session_timeout=600\n#\n# You may change the default value for timing out a data connection.\n#data_connection_timeout=120\n#\n# It is recommended that you define on your system a unique user which the\n# ftp server can use as a totally isolated and unprivileged user.\n#nopriv_user=ftpsecure\n#\n# Enable this and the server will recognise asynchronous ABOR requests. Not\n# recommended for security (the code is non-trivial). Not enabling it,\n# however, may confuse older FTP clients.\n#async_abor_enable=YES\n#\n# By default the server will pretend to allow ASCII mode but in fact ignore\n# the request. Turn on the below options to have the server actually do ASCII\n# mangling on files when in ASCII mode.\n# Beware that on some FTP servers, ASCII support allows a denial of service\n# attack (DoS) via the command \"SIZE /big/file\" in ASCII mode. vsftpd\n# predicted this attack and has always been safe, reporting the size of the\n# raw file.\n# ASCII mangling is a horrible feature of the protocol.\n#ascii_upload_enable=YES\n#ascii_download_enable=YES\n#\n# You may fully customise the login banner string:\n#ftpd_banner=Welcome to blah FTP service.\n#\n# You may specify a file of disallowed anonymous e-mail addresses. Apparently\n# useful for combatting certain DoS attacks.\n#deny_email_enable=YES\n# (default follows)\n#banned_email_file=/etc/vsftpd.banned_emails\n#\n# You may restrict local users to their home directories.  See the FAQ for\n# the possible risks in this before using chroot_local_user or\n# chroot_list_enable below.\n# chroot_local_user=YES\n#\n# You may specify an explicit list of local users to chroot() to their home\n# directory. If chroot_local_user is YES, then this list becomes a list of\n# users to NOT chroot().\n# (Warning! chroot'ing can be very dangerous. If using chroot, make sure that\n# the user does not have write access to the top level directory within the\n# chroot)\n# chroot_local_user=YES\n# chroot_list_enable=YES\n# (default follows)\n# chroot_list_file=/etc/vsftpd.chroot_list\n#\n# You may activate the \"-R\" option to the builtin ls. This is disabled by\n# default to avoid remote users being able to cause excessive I/O on large\n# sites. However, some broken FTP clients such as \"ncftp\" and \"mirror\" assume\n# the presence of the \"-R\" option, so there is a strong case for enabling it.\n#ls_recurse_enable=YES\n#\n# Customization\n#\n# Some of vsftpd's settings don't fit the filesystem layout by\n# default.\n#\n# This option should be the name of a directory which is empty.  Also, the\n# directory should not be writable by the ftp user. This directory is used\n# as a secure chroot() jail at times vsftpd does not require filesystem\n# access.\nsecure_chroot_dir=/var/run/vsftpd/empty\n#\n# This string is the name of the PAM service vsftpd will use.\npam_service_name=vsftpd\n#\n# This option specifies the location of the RSA certificate to use for SSL\n# encrypted connections.\nrsa_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pem\nrsa_private_key_file=/etc/ssl/private/ssl-cert-snakeoil.key\nssl_enable=NO\n\n\n#\n# Uncomment this to indicate that vsftpd use a utf8 filesystem.\n#utf8_filesystem=YES\n```\n\n#### 实际开启的配置项如下：\n按照如下简单的配置就可以通过本地用户进行访问了 \n```bash\nlisten=YES\nlisten_ipv6=NO\nanonymous_enable=NO\nlocal_enable=YES\nwrite_enable=YES\ndirmessage_enable=YES\nuse_localtime=YES\nxferlog_enable=YES\nconnect_from_port_20=YES\nsecure_chroot_dir=/var/run/vsftpd/empty\npam_service_name=vsftpd\nrsa_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pem\nrsa_private_key_file=/etc/ssl/private/ssl-cert-snakeoil.key\nssl_enable=NO\n```\n#### 遇到的问题\n- 无法配置指定根目录，也就是任何本地账户登录后的目录都是根目录，无法自定义配置指定目录，配置后也不生效； \n- 在添加新用户配置成nologin时，是无法正常使用该类用户进行访问的； \n- 添加的新用户，需要先登录一次后，方可使用该账号访问ftp; \n# SFTP服务搭建\n## 群组配置---服务端\n```bash\nsudo groupadd sftp\ncat /etc/group  # 确认组新建成功\nsudo vim /etc/group #修改 sftp:x:1002:\nsudo useradd -g sftp -s /bin/false mysftp \nsudo passwd mysftp # 设置新密码为服务器访问密码\n```\n## 共享目录---服务端\n```bash\nsudo mkdir -p /data/sftp/mysftp\nsudo usermod -d /data/sftp/mysftp mysftp\n```\n## 配置文件修改---服务端\n```bash\nsudo vim /etc/ssh/sshd_config\nSubsystem sftp /usr/libexec/openssh/sftp-server # 该行原本配置，需要手动注释掉\n并在文件最后面添加如下几行内容然后保存\nSubsystem sftp internal-sftp\nMatch Group sftp\nChrootDirectory /data/sftp/%u\nForceCommand internal-sftp\nAllowTcpForwarding no\nX11Forwarding no\n```\n## 目录授权与新建---服务端\n```bash\nsudo chown root:sftp /data/sftp/mysftp\nsudo chmod 755 /data/sftp/mysftp\nsudo mkdir /data/sftp/mysftp/upload\nsudo chown mysftp:sftp /data/sftp/mysftp/upload\nsudo chmod 755 /data/sftp/mysftp/upload\n```\n## 重启服务---服务端\n```bash\nsudo systemctl  restart sshd.service   # 重启服务时如果提示服务不存在，则先添加如下服务\nsystemctl enable ssh.service \n# 再执行：\nsudo systemctl  restart sshd.service \n```\n## 访问服务器---客户端\n进入文件管理器或我的电脑\n输入---例如sftp：//10.20.32.** （根据实际服务端IP输入，并键如账号密码，即可访问）\n# NFS服务搭建\n## 服务端\n### 工具安装\n```bash\nsudo apt-get install nfs-kernel-server # 安装 NFS服务器端\n```\n\n### 创建共享文件夹\n```bash\nsudo mkdir /home/deepin-server/nfs       # 路径可以根据自己需要设置\nsudo chmod -R 777 /home/deepin-server/nfs    # 设置共享目录权限\n```\n\n### 修改配置文件\n```vim /etc/exports```\n```bash\n配置文件虽然只有一句，但是其中还是有很多讲究； \n共享文件可执行权限有： \n      ro           只读访问 \n      rw           读写访问 \n      sync          所有数据在请求时写入共享 \n      hide          在NFS共享目录中不共享其子目录 \n      no_hide         共享NFS目录的子目录 \n      all_squash       共享文件的UID和GID映射匿名用户anonymous，适合公用目录。 \n      no_all_squash      保留共享文件的UID和GID（默认） \n      root_squash       root用户的所有请求映射成如anonymous用户一样的权限（默认） \n      no_root_squas      root用户具有根目录的完全管理访问权限 \nip配置一般需要进行限定，最好不要使用* ，不然存在安全问题，可以限定具体ip或者ip段才能挂载。 \n```\n\n### 配置文件修改如下：\n```\ndeepin-server@deepin-server-PC:~$ cat /etc/exports \n# /etc/exports: the access control list for filesystems which may be exported\n#               to NFS clients.  See exports(5).\n#\n# Example for NFSv2 and NFSv3:\n# /srv/homes       hostname1(rw,sync,no_subtree_check) hostname2(ro,sync,no_subtree_check)\n# Example for NFSv4:\n# /srv/nfs4        gss/krb5i(rw,sync,fsid=0,crossmnt,no_subtree_check)\n# /srv/nfs4/homes  gss/krb5i(rw,sync,no_subtree_check)\n/home/deepin-server/nfs  10.20.*(rw)#此处ip只做了部分限制，圆括号里面就是配置权限的。\n```\n### 启动服务\n```bash\nsystemctl start rpcbind nfs-server\n```\n\n### 查看服务状态\n```服务在running态即可\ndeepin-server@deepin-server-PC:~$ sudo systemctl status rpcbind nfs-server\n● rpcbind.service - RPC bind portmap service\n   Loaded: loaded (/lib/systemd/system/rpcbind.service; enabled; vendor preset: enabled)\n   Active: active (running) since Wed 2022-01-05 11:53:19 CST; 1h 56min ago\n     Docs: man:rpcbind(8)\n Main PID: 19304 (rpcbind)\n    Tasks: 1 (limit: 19660)\n   Memory: 608.0K\n   CGroup: /system.slice/rpcbind.service\n           └─19304 /sbin/rpcbind -f -w\n\n1月 05 11:53:19 deepin-server-PC systemd[1]: Starting RPC bind portmap service...\n1月 05 11:53:19 deepin-server-PC systemd[1]: Started RPC bind portmap service.\n\n● nfs-server.service - NFS server and services\n   Loaded: loaded (/lib/systemd/system/nfs-server.service; enabled; vendor preset: enabled)\n   Active: active (exited) since Wed 2022-01-05 11:53:21 CST; 1h 56min ago\n  Process: 19319 ExecStartPre=/usr/sbin/exportfs -r (code=exited, status=0/SUCCESS)\n  Process: 19320 ExecStart=/usr/sbin/rpc.nfsd $RPCNFSDARGS (code=exited, status=0/SUCCESS)\n Main PID: 19320 (code=exited, status=0/SUCCESS)\n\n1月 05 11:53:20 deepin-server-PC systemd[1]: Starting NFS server and services...\n1月 05 11:53:20 deepin-server-PC exportfs[19319]: exportfs: /etc/exports [1]: Neither 'subtree_check' or 'no_subtree_check' specified for export \"10.20.*:/home/deepin-server/Documents/NFS文件目录for-test\".\n1月 05 11:53:20 deepin-server-PC exportfs[19319]:   Assuming default behaviour ('no_subtree_check').\n1月 05 11:53:20 deepin-server-PC exportfs[19319]:   NOTE: this default has changed since nfs-utils version 1.0.x\n1月 05 11:53:21 deepin-server-PC systemd[1]: Started NFS server and services.\ndeepin-server@deepin-server-PC:~$ \n```\n至此服务端算是配置完成了。\n## 客户端配置\n客户端主要就是挂载操作，不过挂载nfs的时候同样需要安装客户端软件\n### 客户端安装\n```bash\nsudo apt-get install nfs-common\n```\n\n### 查看服务端nfs共享信息\n```bash\nshowmount -e 10.20.13.152\nbabyfengfjx@babyfengfjx:~$ showmount -e 10.20.13.152\nExport list for 10.20.13.152:\n/home/deepin-server/Documents/NFS文件目录for-test 10.20.*\nbabyfengfjx@babyfengfjx:~$ \n```\n### 客户端创建挂载目录\n随便在本地客户端创建一个目录作为NFS挂载目录即可\n```bash\nsudo mkdir /home/babyfengfjx/Documents/nfsfile/\n```\n\n### 客户端挂载\n将服务端的NFS共享目录，挂载到本地客户端对应目录即可\n```bash\nsudo mount -t nfs 10.20.13.152:/home/deepin-server/Documents/NFS文件目录for-test /home/babyfengfjx/Documents/nfsfile/\n```\n### 查看并传输文件\n上述操作完成后，此时就可以在客户端对应目录使用NFS存储了，上传新建文件均可以随心所欲。\n### 开机自动挂载\n写入fstab方法并不推荐，如果NFS挂载失败可能会影响设备正常启动 \n#### 写入fstab进行开机自动挂载\n```bash\necho \"10.20.13.152:/home/deepin-server/Documents/NFS文件目录for-test /home/babyfengfjx/Documents/nfsfile/ nfs4 defaults 0 0\" >> /etc/fstab\n mount -av\n```\n#### 通过配置开机自运行脚本\n**原理如下：**\n>新建 /etc/rc.local 文件\n>这种方法的原理是系统开机后会自动启动 rc-local 服务； \n>rc-local 服务启动后就会自动执行 /etc 目录下的 rc.local 脚本； \n>该方法的优点就是不存在第一种方法的三个缺点，脚本执行失败不会出现黑屏弹窗、sleep 不会造成开机黑屏以及执行脚本的用户是 root 用户。 \n\n\n**主要步骤：**\n1. 新建 /etc/rc.local 文件\n2. 粘贴以下模板\n```bash\n#!/bin/sh -e\n# rc.local\n# This script is executed at the end of each multiuser runlevel.\n# Make sure that the script will \"exit 0\" on success or any other\n# value on error.\n# In order to enable or disable this script just change the execution\n# bits.\n# By default this script does nothing.\n01.LitterScript/02.bbsmonitor/bbsmonitor.py >bbs.log 2>&1 &\n# 因为该命令本身就是会以root权限执行，所以不用加sudo\nsleep 5;mount -t nfs 10.20.13.152:/home/deepin-server/Documents/NFS文件目录for-test /home/babyfengfjx/Documents/nfsfile/\nexit 0\n```\n3. 在 exit 0 上方插入你需要自启的命令(一行一个)后保存文件\n4. 给脚本加上 755 权限\nsudo chmod +755 /etc/rc.local\n5. 调试脚本(可选)\nsudo /etc/rc.local # 使用 sudo 模拟 root 用户开机自启 /etc/rc.local 文件\n如果第 5 步模拟启动脚本没有报错，那我们就可以重启电脑看看是否可以成功实现脚本开机自启。重启进入系统后我们可以通过 systemctl status rc-local.service 查看 rc-local 的运行状态，如果结果显示的是 active (exited) 则说明你的脚本已经成功执行，反之如果结果显示 failed,那么你需要检查一下脚本是否哪里有问题。\n\n##### 这里提供可能导致脚本无法正常启动的原因：\n1、执行脚本的用户不一致\n由于 rc.local 开机自启的时候是以 root 用户执行的，这里很多人会忽略了一个问题，很多情况下你的命令是必须要普通用户执行的。比如 conky 和虚拟机(用户A建立的VBox和VM Ware虚拟机用户B无法访问)等。\n假设用户 lolimay 在终端用 VBoxHeadless -s aikuai & 后台启动了虚拟机名 aikuai，那么我们在 rc.local 文件应该用下面这种方式写：\n```su - lolimay -c \"VBoxHeadless -s aikuai &\" # 以 lolimay 用户执行该命令```\n2、多余的 sudo\n前面已经提到 rc.local 开机时是以 root 用户启动的，所以写在 rc.local 文件中命令不需要带有 sudo 前缀(实际上就算你带有了 sudo 前缀也不会产生错误)。\n3、最佳实践\n个人建议每当往 rc.local 文件中添加了一个需要自启的命令时，可以先用 sudo /etc/rc.local 命令模拟一下看看是否能够执行成功(如果执行失败也能够直观地看到出错的原因)，这样能够有效减少你重启电脑来调试的次数。\n\n","slug":"03shell_xargs","published":1,"updated":"2023-01-03T06:49:04.409Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clcfvvv9o000884xh2251875o","content":"<hr>\n<h1 id=\"Samba服务搭建\"><a href=\"#Samba服务搭建\" class=\"headerlink\" title=\"Samba服务搭建\"></a>Samba服务搭建</h1><blockquote>\n<p>Samba是在Linux系统上实现SMB协议的一个免费软件，由服务器及客户端程序构成。SMB（Server Messages Block，信息服务块）是一种在局域网上共享文件和打印机的一种通信协议，它为局域网内的不同计算机之间提供文件及打印机等资源的共享服务。</p>\n</blockquote>\n<h2 id=\"安装服务\"><a href=\"#安装服务\" class=\"headerlink\" title=\"安装服务\"></a>安装服务</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get install samba-common samba</span><br></pre></td></tr></table></figure>\n<h2 id=\"创建共享文件夹\"><a href=\"#创建共享文件夹\" class=\"headerlink\" title=\"创建共享文件夹\"></a>创建共享文件夹</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo <span class=\"built_in\">mkdir</span> /opt/share</span><br></pre></td></tr></table></figure>\n<h2 id=\"编辑配置文件\"><a href=\"#编辑配置文件\" class=\"headerlink\" title=\"编辑配置文件\"></a>编辑配置文件</h2><blockquote>\n<ul>\n<li>关于samba配置文件，smb.conf总共分为两大部分，分别为“全局设置（GIobal Settings）”和“共享定义（Share Definitions）”。全局设置定义于Samba服务器的整体行为，例如，工作组，主机名等方面。共享定义则用于设置的具体的共享目录或者设备中。</li>\n<li>配置文件绝对路径在：<code>/etc/samba/smb.conf</code></li>\n</ul>\n</blockquote>\n<h3 id=\"全局设置\"><a href=\"#全局设置\" class=\"headerlink\" title=\"全局设置\"></a>全局设置</h3><ul>\n<li>workgroup用于设置在windows中显示的工作组</li>\n<li>server string是Samba服务器的说明</li>\n<li>workgroup和server string字段后面的内容可以随便写</li>\n<li>通常来说，将Samba服务器的编码设置为UTF-8是比较好的，也能解决显示的问题：<code>unix charset = UTF-8</code></li>\n<li>但是这样也会存在问题，UTF-8编码的中文文件名在某些系统下面会乱码，Samba提供了dos charset这个字段。下面这条配置命令为哪些不认识的Unicode的Windows系统使用GBK编码:<code>dos charset = cp936</code></li>\n<li>security字段设置了用户登录的验证方式，share和user是最常用到的两种。share方式允许任何用户登录到系统，而不用提供用户名和口令,但是由于Samba是默认要使用验证方式的，所以这里就要讲到user方式。这种方式要求用户提供账户信息供服务器验证，但是要使用user验证，Samba的配置文件里面就应该包含这一行:<code>security = user</code></li>\n</ul>\n<h3 id=\"共享设置\"><a href=\"#共享设置\" class=\"headerlink\" title=\"共享设置\"></a>共享设置</h3><p>这个文件叫做smb.conf（位于&#x2F;etc或者&#x2F;etc&#x2F;samba目录下面），可以用uos系统自带的文本编辑器打开，在末尾输入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[share] <span class=\"comment\">#&quot;[]&quot; 中的文字表示共享目录名字，可以随意设置</span></span><br><span class=\"line\">    comment = Linux Share　 <span class=\"comment\">#comment字段用于设置这个共享目录的描述</span></span><br><span class=\"line\">    path = /opt/share　　　　 <span class=\"comment\">#share指定了共享目录的路径</span></span><br><span class=\"line\">    public = <span class=\"built_in\">yes</span>　　　　　　 <span class=\"comment\">#表示在windows的“网上邻居”中可见</span></span><br><span class=\"line\">    writeable = no　　　　　 <span class=\"comment\">#writeable表示设置目录是否可写（yes是可写的意思）</span></span><br><span class=\"line\">    browseable = <span class=\"built_in\">yes</span>　　　 <span class=\"comment\">#表示在windows的“网上邻居”中可见</span></span><br><span class=\"line\">    guest ok = no 　　　　　<span class=\"comment\">#告诉Samba服务器这个共享目录允许匿名访问</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"添加用户\"><a href=\"#添加用户\" class=\"headerlink\" title=\"添加用户\"></a>添加用户</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo useradd smbuser  <span class=\"comment\"># 新增一个叫smbuser的用户</span></span><br><span class=\"line\">sudo smbpasswd -a smbuser  <span class=\"comment\"># 给这个新增用户创建samb共享密码</span></span><br><span class=\"line\">New SMB password:</span><br><span class=\"line\">Retype new SMB password:</span><br><span class=\"line\">Added user smbuser</span><br></pre></td></tr></table></figure>\n<p>后面就可以使用带-U参数的smbpasswd命令修改已经有用户的口令。如果用户希望本地修改服务器上自己的口令，可以使用-r参数。下面的命令用户修改在服务器smbserver上smbuser用户的口令了</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">smbpasswd -r smbserver -U smbuser</span><br></pre></td></tr></table></figure>\n<h2 id=\"赋予权限\"><a href=\"#赋予权限\" class=\"headerlink\" title=\"赋予权限\"></a>赋予权限</h2><p>smbuser对共享目录写权限,一下配置需要写成yes</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">writeable = <span class=\"built_in\">yes</span></span><br></pre></td></tr></table></figure>\n<p>如果只写writeable &#x3D; yes是远远不够的，如果服务器上的这么目录本身对smbuser不可写的话，就需要添加以下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo <span class=\"built_in\">chown</span> smbuser:smbuser /opt/share</span><br></pre></td></tr></table></figure>\n<h2 id=\"服务启动、停止、重启\"><a href=\"#服务启动、停止、重启\" class=\"headerlink\" title=\"服务启动、停止、重启\"></a>服务启动、停止、重启</h2><h3 id=\"启动服务：service-smbd-start\"><a href=\"#启动服务：service-smbd-start\" class=\"headerlink\" title=\"启动服务：service smbd start\"></a>启动服务：<code>service smbd start</code></h3><h3 id=\"停止服务：service-smbd-stop\"><a href=\"#停止服务：service-smbd-stop\" class=\"headerlink\" title=\"停止服务：service smbd stop\"></a>停止服务：<code>service smbd stop</code></h3><h3 id=\"重启服务：service-smbd-restart\"><a href=\"#重启服务：service-smbd-restart\" class=\"headerlink\" title=\"重启服务：service smbd restart\"></a>重启服务：<code>service smbd restart</code></h3><h3 id=\"查看服务状态：service-smbd-status\"><a href=\"#查看服务状态：service-smbd-status\" class=\"headerlink\" title=\"查看服务状态：service smbd status\"></a>查看服务状态：<code>service smbd status</code></h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">deepin@wh-k8snode-70:/etc/samba$ service smbd status</span><br><span class=\"line\">● smbd.service - Samba SMB Daemon</span><br><span class=\"line\">   Loaded: loaded (/lib/systemd/system/smbd.service; enabled; vendor preset: enabled)</span><br><span class=\"line\">   Active: active (running) since Mon 2022-06-20 11:50:46 CST; 1h 57min ago</span><br><span class=\"line\">     Docs: man:smbd(8)</span><br><span class=\"line\">           man:samba(7)</span><br><span class=\"line\">           man:smb.conf(5)</span><br><span class=\"line\">  Process: 20165 ExecStartPre=/usr/share/samba/update-apparmor-samba-profile (code=exited, status=0/SUCCESS)</span><br><span class=\"line\"> Main PID: 20174 (smbd)</span><br><span class=\"line\">   Status: <span class=\"string\">&quot;smbd: ready to serve connections...&quot;</span></span><br><span class=\"line\">    Tasks: 6 (<span class=\"built_in\">limit</span>: 4915)</span><br><span class=\"line\">   Memory: 26.7M</span><br><span class=\"line\">   CGroup: /system.slice/smbd.service</span><br><span class=\"line\">           ├─ 8209 /usr/sbin/smbd --foreground --no-process-group</span><br><span class=\"line\">           ├─10619 /usr/sbin/smbd --foreground --no-process-group</span><br><span class=\"line\">           ├─20174 /usr/sbin/smbd --foreground --no-process-group</span><br><span class=\"line\">           ├─20176 /usr/sbin/smbd --foreground --no-process-group</span><br><span class=\"line\">           ├─20177 /usr/sbin/smbd --foreground --no-process-group</span><br><span class=\"line\">           └─20178 /usr/sbin/smbd --foreground --no-process-group</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h2><ol>\n<li><p>修改配置文件后，服务无法启动。</p>\n<blockquote>\n<p>在实际修改配置文件过程中，可能在参数后面有一些看不见的字符，会导致服务无法正常启动，最好检查每个修改的参数后面无一些空格或者其他特殊符号。</p>\n</blockquote>\n</li>\n<li><p>创建了几个samba用户，想通过不同的用户来对不同的文件进行访问，但是出现了报错（内容是不允许一个用户使用一个以上用户名与服务器或者共享资源的多重连接）<br><strong>解决：</strong></p>\n<blockquote>\n<p>先断开现有的samba连接：cmd命令行下执行net use * &#x2F;del &#x2F;X<br>再重新选择你要使用的目录，使用对应的用户名进行登录就可以了</p>\n</blockquote>\n</li>\n<li><p>配置好samba服务器，但是测试过程中会出现以下报错：</p>\n<blockquote>\n<p>主要原因是因为服务器的防火墙没有关，可以选择在文件&#x2F;etc&#x2F;security&#x2F;limits.conf下输入*　-   nofile   16384,然后shutdown -r now 重启一下就可以了</p>\n</blockquote>\n</li>\n<li><p>samba服务器已经可以让windows通过网络来访问samba，但是没有办法写入，修改，删除，只能查看,出现这样的问题可能就是我们自己在配置的时候出现问题了，如果我的用户是deepin:</p>\n<figure class=\"highlight plaintext\"><figcaption><span>777 FileServer```   　--这种操作就可以让组samba里的用户进行写操作了。</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\">```bash</span><br><span class=\"line\">[deepin]</span><br><span class=\"line\">   create mode =0664</span><br><span class=\"line\">   force create mode=0750   #文件新建的权限为750</span><br><span class=\"line\">   directory mode=0750      　#新建文件夹的权限只有组里的用户查看，其他组里的用户都没有权限进入</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h1 id=\"FTP服务搭建\"><a href=\"#FTP服务搭建\" class=\"headerlink\" title=\"FTP服务搭建\"></a>FTP服务搭建</h1><h2 id=\"vsftpd配置使用\"><a href=\"#vsftpd配置使用\" class=\"headerlink\" title=\"vsftpd配置使用\"></a>vsftpd配置使用</h2><blockquote>\n<p>vsftpd 是Linus上非常安全好用的ftp服务，只需要简单的安装后就可以搭建起ftp服务；<br>该服务主要的配置文件就是vsftpd.conf ,在deepin&#x2F;uos系统中的绝对路径是：&#x2F;etc&#x2F;vsftpd.conf</p>\n</blockquote>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>只需要简单的进行安装配置即可，前提是你开启了开发者模式我们才能通过终端安装软件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt install vsftpd</span><br></pre></td></tr></table></figure>\n<p>如果提示没有找到对应安装包，则可能是没有进行仓库的更新连接，执行如下命令即可</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt update </span><br></pre></td></tr></table></figure>\n<h3 id=\"服务的启停配置\"><a href=\"#服务的启停配置\" class=\"headerlink\" title=\"服务的启停配置\"></a>服务的启停配置</h3><h4 id=\"启动服务\"><a href=\"#启动服务\" class=\"headerlink\" title=\"启动服务\"></a>启动服务</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">service vsftpd start</span><br></pre></td></tr></table></figure>\n<h4 id=\"停止服务\"><a href=\"#停止服务\" class=\"headerlink\" title=\"停止服务\"></a>停止服务</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">service vsftpd stop</span><br></pre></td></tr></table></figure>\n<h4 id=\"重启服务\"><a href=\"#重启服务\" class=\"headerlink\" title=\"重启服务\"></a>重启服务</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">service vsftpd restart</span><br></pre></td></tr></table></figure>\n<h4 id=\"查看服务状态\"><a href=\"#查看服务状态\" class=\"headerlink\" title=\"查看服务状态\"></a>查看服务状态</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">service vsftpd status</span><br><span class=\"line\"><span class=\"comment\">#执行后结果如下：active则表示正常运行，如果失败了则可以通过提示信息查询对应问题</span></span><br><span class=\"line\">babyfengfjx@babyfengfjx:~$ service vsftpd status </span><br><span class=\"line\">● vsftpd.service - vsftpd FTP server</span><br><span class=\"line\">   Loaded: loaded (/lib/systemd/system/vsftpd.service; enabled; vendor preset: enabled)</span><br><span class=\"line\">   Active: active (running) since Sat 2021-10-09 16:22:48 CST; 1s ago</span><br><span class=\"line\">  Process: 18334 ExecStartPre=/bin/mkdir -p /var/run/vsftpd/empty (code=exited, status=0/SUCCESS)</span><br><span class=\"line\"> Main PID: 18335 (vsftpd)</span><br><span class=\"line\">    Tasks: 1 (<span class=\"built_in\">limit</span>: 4915)</span><br><span class=\"line\">   Memory: 568.0K</span><br><span class=\"line\">   CGroup: /system.slice/vsftpd.service</span><br><span class=\"line\">           └─18335 /usr/sbin/vsftpd /etc/vsftpd.conf</span><br></pre></td></tr></table></figure>\n<h4 id=\"配置文件展示\"><a href=\"#配置文件展示\" class=\"headerlink\" title=\"配置文件展示\"></a>配置文件展示</h4><p>在使用该服务过程中，主要就是这些配置文件该如何配置，很多同学在实际配置过程中很难一次配置成功，这里就给出一个实际可用的配置参数以供参考 </p>\n<p>配置文件路径：&#x2F;etc&#x2F;vsftpd.conf</p>\n<p>配置过程中尽量是将匿名登录关闭，使用本地用户登录，以确保安全。 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Example config file /etc/vsftpd.conf</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># The default compiled in settings are fairly paranoid. This sample file</span></span><br><span class=\"line\"><span class=\"comment\"># loosens things up a bit, to make the ftp daemon more usable.</span></span><br><span class=\"line\"><span class=\"comment\"># Please see vsftpd.conf.5 for all compiled in defaults.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># READ THIS: This example file is NOT an exhaustive list of vsftpd options.</span></span><br><span class=\"line\"><span class=\"comment\"># Please read the vsftpd.conf.5 manual page to get a full idea of vsftpd&#x27;s</span></span><br><span class=\"line\"><span class=\"comment\"># capabilities.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Run standalone?  vsftpd can run either from an inetd or as a standalone</span></span><br><span class=\"line\"><span class=\"comment\"># daemon started from an initscript.</span></span><br><span class=\"line\">listen=YES</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># This directive enables listening on IPv6 sockets. By default, listening</span></span><br><span class=\"line\"><span class=\"comment\"># on the IPv6 &quot;any&quot; address (::) will accept connections from both IPv6</span></span><br><span class=\"line\"><span class=\"comment\"># and IPv4 clients. It is not necessary to listen on *both* IPv4 and IPv6</span></span><br><span class=\"line\"><span class=\"comment\"># sockets. If you want that (perhaps because you want to listen on specific</span></span><br><span class=\"line\"><span class=\"comment\"># addresses) then you must run two copies of vsftpd with two configuration</span></span><br><span class=\"line\"><span class=\"comment\"># files.</span></span><br><span class=\"line\">listen_ipv6=NO</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Allow anonymous FTP? (Disabled by default).</span></span><br><span class=\"line\">anonymous_enable=NO</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Uncomment this to allow local users to log in.</span></span><br><span class=\"line\">local_enable=YES</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Uncomment this to enable any form of FTP write command.</span></span><br><span class=\"line\">write_enable=YES</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Default umask for local users is 077. You may wish to change this to 022,</span></span><br><span class=\"line\"><span class=\"comment\"># if your users expect that (022 is used by most other ftpd&#x27;s)</span></span><br><span class=\"line\"><span class=\"comment\">#local_umask=022</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Uncomment this to allow the anonymous FTP user to upload files. This only</span></span><br><span class=\"line\"><span class=\"comment\"># has an effect if the above global write enable is activated. Also, you will</span></span><br><span class=\"line\"><span class=\"comment\"># obviously need to create a directory writable by the FTP user.</span></span><br><span class=\"line\"><span class=\"comment\">#anon_upload_enable=YES</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Uncomment this if you want the anonymous FTP user to be able to create</span></span><br><span class=\"line\"><span class=\"comment\"># new directories.</span></span><br><span class=\"line\"><span class=\"comment\">#anon_mkdir_write_enable=YES</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Activate directory messages - messages given to remote users when they</span></span><br><span class=\"line\"><span class=\"comment\"># go into a certain directory.</span></span><br><span class=\"line\">dirmessage_enable=YES</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># If enabled, vsftpd will display directory listings with the time</span></span><br><span class=\"line\"><span class=\"comment\"># in  your  local  time  zone.  The default is to display GMT. The</span></span><br><span class=\"line\"><span class=\"comment\"># times returned by the MDTM FTP command are also affected by this</span></span><br><span class=\"line\"><span class=\"comment\"># option.</span></span><br><span class=\"line\">use_localtime=YES</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Activate logging of uploads/downloads.</span></span><br><span class=\"line\">xferlog_enable=YES</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Make sure PORT transfer connections originate from port 20 (ftp-data).</span></span><br><span class=\"line\">connect_from_port_20=YES</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># If you want, you can arrange for uploaded anonymous files to be owned by</span></span><br><span class=\"line\"><span class=\"comment\"># a different user. Note! Using &quot;root&quot; for uploaded files is not</span></span><br><span class=\"line\"><span class=\"comment\"># recommended!</span></span><br><span class=\"line\"><span class=\"comment\">#chown_uploads=YES</span></span><br><span class=\"line\"><span class=\"comment\">#chown_username=whoever</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># You may override where the log file goes if you like. The default is shown</span></span><br><span class=\"line\"><span class=\"comment\"># below.</span></span><br><span class=\"line\"><span class=\"comment\">#xferlog_file=/var/log/vsftpd.log</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># If you want, you can have your log file in standard ftpd xferlog format.</span></span><br><span class=\"line\"><span class=\"comment\"># Note that the default log file location is /var/log/xferlog in this case.</span></span><br><span class=\"line\"><span class=\"comment\">#xferlog_std_format=YES</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># You may change the default value for timing out an idle session.</span></span><br><span class=\"line\"><span class=\"comment\">#idle_session_timeout=600</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># You may change the default value for timing out a data connection.</span></span><br><span class=\"line\"><span class=\"comment\">#data_connection_timeout=120</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># It is recommended that you define on your system a unique user which the</span></span><br><span class=\"line\"><span class=\"comment\"># ftp server can use as a totally isolated and unprivileged user.</span></span><br><span class=\"line\"><span class=\"comment\">#nopriv_user=ftpsecure</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Enable this and the server will recognise asynchronous ABOR requests. Not</span></span><br><span class=\"line\"><span class=\"comment\"># recommended for security (the code is non-trivial). Not enabling it,</span></span><br><span class=\"line\"><span class=\"comment\"># however, may confuse older FTP clients.</span></span><br><span class=\"line\"><span class=\"comment\">#async_abor_enable=YES</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># By default the server will pretend to allow ASCII mode but in fact ignore</span></span><br><span class=\"line\"><span class=\"comment\"># the request. Turn on the below options to have the server actually do ASCII</span></span><br><span class=\"line\"><span class=\"comment\"># mangling on files when in ASCII mode.</span></span><br><span class=\"line\"><span class=\"comment\"># Beware that on some FTP servers, ASCII support allows a denial of service</span></span><br><span class=\"line\"><span class=\"comment\"># attack (DoS) via the command &quot;SIZE /big/file&quot; in ASCII mode. vsftpd</span></span><br><span class=\"line\"><span class=\"comment\"># predicted this attack and has always been safe, reporting the size of the</span></span><br><span class=\"line\"><span class=\"comment\"># raw file.</span></span><br><span class=\"line\"><span class=\"comment\"># ASCII mangling is a horrible feature of the protocol.</span></span><br><span class=\"line\"><span class=\"comment\">#ascii_upload_enable=YES</span></span><br><span class=\"line\"><span class=\"comment\">#ascii_download_enable=YES</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># You may fully customise the login banner string:</span></span><br><span class=\"line\"><span class=\"comment\">#ftpd_banner=Welcome to blah FTP service.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># You may specify a file of disallowed anonymous e-mail addresses. Apparently</span></span><br><span class=\"line\"><span class=\"comment\"># useful for combatting certain DoS attacks.</span></span><br><span class=\"line\"><span class=\"comment\">#deny_email_enable=YES</span></span><br><span class=\"line\"><span class=\"comment\"># (default follows)</span></span><br><span class=\"line\"><span class=\"comment\">#banned_email_file=/etc/vsftpd.banned_emails</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># You may restrict local users to their home directories.  See the FAQ for</span></span><br><span class=\"line\"><span class=\"comment\"># the possible risks in this before using chroot_local_user or</span></span><br><span class=\"line\"><span class=\"comment\"># chroot_list_enable below.</span></span><br><span class=\"line\"><span class=\"comment\"># chroot_local_user=YES</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># You may specify an explicit list of local users to chroot() to their home</span></span><br><span class=\"line\"><span class=\"comment\"># directory. If chroot_local_user is YES, then this list becomes a list of</span></span><br><span class=\"line\"><span class=\"comment\"># users to NOT chroot().</span></span><br><span class=\"line\"><span class=\"comment\"># (Warning! chroot&#x27;ing can be very dangerous. If using chroot, make sure that</span></span><br><span class=\"line\"><span class=\"comment\"># the user does not have write access to the top level directory within the</span></span><br><span class=\"line\"><span class=\"comment\"># chroot)</span></span><br><span class=\"line\"><span class=\"comment\"># chroot_local_user=YES</span></span><br><span class=\"line\"><span class=\"comment\"># chroot_list_enable=YES</span></span><br><span class=\"line\"><span class=\"comment\"># (default follows)</span></span><br><span class=\"line\"><span class=\"comment\"># chroot_list_file=/etc/vsftpd.chroot_list</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># You may activate the &quot;-R&quot; option to the builtin ls. This is disabled by</span></span><br><span class=\"line\"><span class=\"comment\"># default to avoid remote users being able to cause excessive I/O on large</span></span><br><span class=\"line\"><span class=\"comment\"># sites. However, some broken FTP clients such as &quot;ncftp&quot; and &quot;mirror&quot; assume</span></span><br><span class=\"line\"><span class=\"comment\"># the presence of the &quot;-R&quot; option, so there is a strong case for enabling it.</span></span><br><span class=\"line\"><span class=\"comment\">#ls_recurse_enable=YES</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Customization</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Some of vsftpd&#x27;s settings don&#x27;t fit the filesystem layout by</span></span><br><span class=\"line\"><span class=\"comment\"># default.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># This option should be the name of a directory which is empty.  Also, the</span></span><br><span class=\"line\"><span class=\"comment\"># directory should not be writable by the ftp user. This directory is used</span></span><br><span class=\"line\"><span class=\"comment\"># as a secure chroot() jail at times vsftpd does not require filesystem</span></span><br><span class=\"line\"><span class=\"comment\"># access.</span></span><br><span class=\"line\">secure_chroot_dir=/var/run/vsftpd/empty</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># This string is the name of the PAM service vsftpd will use.</span></span><br><span class=\"line\">pam_service_name=vsftpd</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># This option specifies the location of the RSA certificate to use for SSL</span></span><br><span class=\"line\"><span class=\"comment\"># encrypted connections.</span></span><br><span class=\"line\">rsa_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pem</span><br><span class=\"line\">rsa_private_key_file=/etc/ssl/private/ssl-cert-snakeoil.key</span><br><span class=\"line\">ssl_enable=NO</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Uncomment this to indicate that vsftpd use a utf8 filesystem.</span></span><br><span class=\"line\"><span class=\"comment\">#utf8_filesystem=YES</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"实际开启的配置项如下：\"><a href=\"#实际开启的配置项如下：\" class=\"headerlink\" title=\"实际开启的配置项如下：\"></a>实际开启的配置项如下：</h4><p>按照如下简单的配置就可以通过本地用户进行访问了 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">listen=YES</span><br><span class=\"line\">listen_ipv6=NO</span><br><span class=\"line\">anonymous_enable=NO</span><br><span class=\"line\">local_enable=YES</span><br><span class=\"line\">write_enable=YES</span><br><span class=\"line\">dirmessage_enable=YES</span><br><span class=\"line\">use_localtime=YES</span><br><span class=\"line\">xferlog_enable=YES</span><br><span class=\"line\">connect_from_port_20=YES</span><br><span class=\"line\">secure_chroot_dir=/var/run/vsftpd/empty</span><br><span class=\"line\">pam_service_name=vsftpd</span><br><span class=\"line\">rsa_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pem</span><br><span class=\"line\">rsa_private_key_file=/etc/ssl/private/ssl-cert-snakeoil.key</span><br><span class=\"line\">ssl_enable=NO</span><br></pre></td></tr></table></figure>\n<h4 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h4><ul>\n<li>无法配置指定根目录，也就是任何本地账户登录后的目录都是根目录，无法自定义配置指定目录，配置后也不生效； </li>\n<li>在添加新用户配置成nologin时，是无法正常使用该类用户进行访问的； </li>\n<li>添加的新用户，需要先登录一次后，方可使用该账号访问ftp;</li>\n</ul>\n<h1 id=\"SFTP服务搭建\"><a href=\"#SFTP服务搭建\" class=\"headerlink\" title=\"SFTP服务搭建\"></a>SFTP服务搭建</h1><h2 id=\"群组配置—服务端\"><a href=\"#群组配置—服务端\" class=\"headerlink\" title=\"群组配置—服务端\"></a>群组配置—服务端</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo groupadd sftp</span><br><span class=\"line\"><span class=\"built_in\">cat</span> /etc/group  <span class=\"comment\"># 确认组新建成功</span></span><br><span class=\"line\">sudo vim /etc/group <span class=\"comment\">#修改 sftp:x:1002:</span></span><br><span class=\"line\">sudo useradd -g sftp -s /bin/false mysftp </span><br><span class=\"line\">sudo passwd mysftp <span class=\"comment\"># 设置新密码为服务器访问密码</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"共享目录—服务端\"><a href=\"#共享目录—服务端\" class=\"headerlink\" title=\"共享目录—服务端\"></a>共享目录—服务端</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo <span class=\"built_in\">mkdir</span> -p /data/sftp/mysftp</span><br><span class=\"line\">sudo usermod -d /data/sftp/mysftp mysftp</span><br></pre></td></tr></table></figure>\n<h2 id=\"配置文件修改—服务端\"><a href=\"#配置文件修改—服务端\" class=\"headerlink\" title=\"配置文件修改—服务端\"></a>配置文件修改—服务端</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/ssh/sshd_config</span><br><span class=\"line\">Subsystem sftp /usr/libexec/openssh/sftp-server <span class=\"comment\"># 该行原本配置，需要手动注释掉</span></span><br><span class=\"line\">并在文件最后面添加如下几行内容然后保存</span><br><span class=\"line\">Subsystem sftp internal-sftp</span><br><span class=\"line\">Match Group sftp</span><br><span class=\"line\">ChrootDirectory /data/sftp/%u</span><br><span class=\"line\">ForceCommand internal-sftp</span><br><span class=\"line\">AllowTcpForwarding no</span><br><span class=\"line\">X11Forwarding no</span><br></pre></td></tr></table></figure>\n<h2 id=\"目录授权与新建—服务端\"><a href=\"#目录授权与新建—服务端\" class=\"headerlink\" title=\"目录授权与新建—服务端\"></a>目录授权与新建—服务端</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo <span class=\"built_in\">chown</span> root:sftp /data/sftp/mysftp</span><br><span class=\"line\">sudo <span class=\"built_in\">chmod</span> 755 /data/sftp/mysftp</span><br><span class=\"line\">sudo <span class=\"built_in\">mkdir</span> /data/sftp/mysftp/upload</span><br><span class=\"line\">sudo <span class=\"built_in\">chown</span> mysftp:sftp /data/sftp/mysftp/upload</span><br><span class=\"line\">sudo <span class=\"built_in\">chmod</span> 755 /data/sftp/mysftp/upload</span><br></pre></td></tr></table></figure>\n<h2 id=\"重启服务—服务端\"><a href=\"#重启服务—服务端\" class=\"headerlink\" title=\"重启服务—服务端\"></a>重启服务—服务端</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo systemctl  restart sshd.service   <span class=\"comment\"># 重启服务时如果提示服务不存在，则先添加如下服务</span></span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> ssh.service </span><br><span class=\"line\"><span class=\"comment\"># 再执行：</span></span><br><span class=\"line\">sudo systemctl  restart sshd.service </span><br></pre></td></tr></table></figure>\n<h2 id=\"访问服务器—客户端\"><a href=\"#访问服务器—客户端\" class=\"headerlink\" title=\"访问服务器—客户端\"></a>访问服务器—客户端</h2><p>进入文件管理器或我的电脑<br>输入—例如sftp：&#x2F;&#x2F;10.20.32.** （根据实际服务端IP输入，并键如账号密码，即可访问）</p>\n<h1 id=\"NFS服务搭建\"><a href=\"#NFS服务搭建\" class=\"headerlink\" title=\"NFS服务搭建\"></a>NFS服务搭建</h1><h2 id=\"服务端\"><a href=\"#服务端\" class=\"headerlink\" title=\"服务端\"></a>服务端</h2><h3 id=\"工具安装\"><a href=\"#工具安装\" class=\"headerlink\" title=\"工具安装\"></a>工具安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get install nfs-kernel-server <span class=\"comment\"># 安装 NFS服务器端</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建共享文件夹-1\"><a href=\"#创建共享文件夹-1\" class=\"headerlink\" title=\"创建共享文件夹\"></a>创建共享文件夹</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo <span class=\"built_in\">mkdir</span> /home/deepin-server/nfs       <span class=\"comment\"># 路径可以根据自己需要设置</span></span><br><span class=\"line\">sudo <span class=\"built_in\">chmod</span> -R 777 /home/deepin-server/nfs    <span class=\"comment\"># 设置共享目录权限</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"修改配置文件\"><a href=\"#修改配置文件\" class=\"headerlink\" title=\"修改配置文件\"></a>修改配置文件</h3><p><code>vim /etc/exports</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">配置文件虽然只有一句，但是其中还是有很多讲究； </span><br><span class=\"line\">共享文件可执行权限有： </span><br><span class=\"line\">      ro           只读访问 </span><br><span class=\"line\">      rw           读写访问 </span><br><span class=\"line\">      <span class=\"built_in\">sync</span>          所有数据在请求时写入共享 </span><br><span class=\"line\">      hide          在NFS共享目录中不共享其子目录 </span><br><span class=\"line\">      no_hide         共享NFS目录的子目录 </span><br><span class=\"line\">      all_squash       共享文件的UID和GID映射匿名用户anonymous，适合公用目录。 </span><br><span class=\"line\">      no_all_squash      保留共享文件的UID和GID（默认） </span><br><span class=\"line\">      root_squash       root用户的所有请求映射成如anonymous用户一样的权限（默认） </span><br><span class=\"line\">      no_root_squas      root用户具有根目录的完全管理访问权限 </span><br><span class=\"line\">ip配置一般需要进行限定，最好不要使用* ，不然存在安全问题，可以限定具体ip或者ip段才能挂载。 </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置文件修改如下：\"><a href=\"#配置文件修改如下：\" class=\"headerlink\" title=\"配置文件修改如下：\"></a>配置文件修改如下：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">deepin-server@deepin-server-PC:~$ cat /etc/exports </span><br><span class=\"line\"># /etc/exports: the access control list for filesystems which may be exported</span><br><span class=\"line\">#               to NFS clients.  See exports(5).</span><br><span class=\"line\">#</span><br><span class=\"line\"># Example for NFSv2 and NFSv3:</span><br><span class=\"line\"># /srv/homes       hostname1(rw,sync,no_subtree_check) hostname2(ro,sync,no_subtree_check)</span><br><span class=\"line\"># Example for NFSv4:</span><br><span class=\"line\"># /srv/nfs4        gss/krb5i(rw,sync,fsid=0,crossmnt,no_subtree_check)</span><br><span class=\"line\"># /srv/nfs4/homes  gss/krb5i(rw,sync,no_subtree_check)</span><br><span class=\"line\">/home/deepin-server/nfs  10.20.*(rw)#此处ip只做了部分限制，圆括号里面就是配置权限的。</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动服务-1\"><a href=\"#启动服务-1\" class=\"headerlink\" title=\"启动服务\"></a>启动服务</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">systemctl start rpcbind nfs-server</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查看服务状态-1\"><a href=\"#查看服务状态-1\" class=\"headerlink\" title=\"查看服务状态\"></a>查看服务状态</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">deepin-server@deepin-server-PC:~$ sudo systemctl status rpcbind nfs-server</span><br><span class=\"line\">● rpcbind.service - RPC bind portmap service</span><br><span class=\"line\">   Loaded: loaded (/lib/systemd/system/rpcbind.service; enabled; vendor preset: enabled)</span><br><span class=\"line\">   Active: active (running) since Wed 2022-01-05 11:53:19 CST; 1h 56min ago</span><br><span class=\"line\">     Docs: man:rpcbind(8)</span><br><span class=\"line\"> Main PID: 19304 (rpcbind)</span><br><span class=\"line\">    Tasks: 1 (limit: 19660)</span><br><span class=\"line\">   Memory: 608.0K</span><br><span class=\"line\">   CGroup: /system.slice/rpcbind.service</span><br><span class=\"line\">           └─19304 /sbin/rpcbind -f -w</span><br><span class=\"line\"></span><br><span class=\"line\">1月 05 11:53:19 deepin-server-PC systemd[1]: Starting RPC bind portmap service...</span><br><span class=\"line\">1月 05 11:53:19 deepin-server-PC systemd[1]: Started RPC bind portmap service.</span><br><span class=\"line\"></span><br><span class=\"line\">● nfs-server.service - NFS server and services</span><br><span class=\"line\">   Loaded: loaded (/lib/systemd/system/nfs-server.service; enabled; vendor preset: enabled)</span><br><span class=\"line\">   Active: active (exited) since Wed 2022-01-05 11:53:21 CST; 1h 56min ago</span><br><span class=\"line\">  Process: 19319 ExecStartPre=/usr/sbin/exportfs -r (code=exited, status=0/SUCCESS)</span><br><span class=\"line\">  Process: 19320 ExecStart=/usr/sbin/rpc.nfsd $RPCNFSDARGS (code=exited, status=0/SUCCESS)</span><br><span class=\"line\"> Main PID: 19320 (code=exited, status=0/SUCCESS)</span><br><span class=\"line\"></span><br><span class=\"line\">1月 05 11:53:20 deepin-server-PC systemd[1]: Starting NFS server and services...</span><br><span class=\"line\">1月 05 11:53:20 deepin-server-PC exportfs[19319]: exportfs: /etc/exports [1]: Neither &#x27;subtree_check&#x27; or &#x27;no_subtree_check&#x27; specified for export &quot;10.20.*:/home/deepin-server/Documents/NFS文件目录for-test&quot;.</span><br><span class=\"line\">1月 05 11:53:20 deepin-server-PC exportfs[19319]:   Assuming default behaviour (&#x27;no_subtree_check&#x27;).</span><br><span class=\"line\">1月 05 11:53:20 deepin-server-PC exportfs[19319]:   NOTE: this default has changed since nfs-utils version 1.0.x</span><br><span class=\"line\">1月 05 11:53:21 deepin-server-PC systemd[1]: Started NFS server and services.</span><br><span class=\"line\">deepin-server@deepin-server-PC:~$ </span><br></pre></td></tr></table></figure>\n<p>至此服务端算是配置完成了。</p>\n<h2 id=\"客户端配置\"><a href=\"#客户端配置\" class=\"headerlink\" title=\"客户端配置\"></a>客户端配置</h2><p>客户端主要就是挂载操作，不过挂载nfs的时候同样需要安装客户端软件</p>\n<h3 id=\"客户端安装\"><a href=\"#客户端安装\" class=\"headerlink\" title=\"客户端安装\"></a>客户端安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get install nfs-common</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查看服务端nfs共享信息\"><a href=\"#查看服务端nfs共享信息\" class=\"headerlink\" title=\"查看服务端nfs共享信息\"></a>查看服务端nfs共享信息</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">showmount -e 10.20.13.152</span><br><span class=\"line\">babyfengfjx@babyfengfjx:~$ showmount -e 10.20.13.152</span><br><span class=\"line\">Export list <span class=\"keyword\">for</span> 10.20.13.152:</span><br><span class=\"line\">/home/deepin-server/Documents/NFS文件目录for-test 10.20.*</span><br><span class=\"line\">babyfengfjx@babyfengfjx:~$ </span><br></pre></td></tr></table></figure>\n<h3 id=\"客户端创建挂载目录\"><a href=\"#客户端创建挂载目录\" class=\"headerlink\" title=\"客户端创建挂载目录\"></a>客户端创建挂载目录</h3><p>随便在本地客户端创建一个目录作为NFS挂载目录即可</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo <span class=\"built_in\">mkdir</span> /home/babyfengfjx/Documents/nfsfile/</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"客户端挂载\"><a href=\"#客户端挂载\" class=\"headerlink\" title=\"客户端挂载\"></a>客户端挂载</h3><p>将服务端的NFS共享目录，挂载到本地客户端对应目录即可</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo mount -t nfs 10.20.13.152:/home/deepin-server/Documents/NFS文件目录for-test /home/babyfengfjx/Documents/nfsfile/</span><br></pre></td></tr></table></figure>\n<h3 id=\"查看并传输文件\"><a href=\"#查看并传输文件\" class=\"headerlink\" title=\"查看并传输文件\"></a>查看并传输文件</h3><p>上述操作完成后，此时就可以在客户端对应目录使用NFS存储了，上传新建文件均可以随心所欲。</p>\n<h3 id=\"开机自动挂载\"><a href=\"#开机自动挂载\" class=\"headerlink\" title=\"开机自动挂载\"></a>开机自动挂载</h3><p>写入fstab方法并不推荐，如果NFS挂载失败可能会影响设备正常启动 </p>\n<h4 id=\"写入fstab进行开机自动挂载\"><a href=\"#写入fstab进行开机自动挂载\" class=\"headerlink\" title=\"写入fstab进行开机自动挂载\"></a>写入fstab进行开机自动挂载</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;10.20.13.152:/home/deepin-server/Documents/NFS文件目录for-test /home/babyfengfjx/Documents/nfsfile/ nfs4 defaults 0 0&quot;</span> &gt;&gt; /etc/fstab</span><br><span class=\"line\"> mount -av</span><br></pre></td></tr></table></figure>\n<h4 id=\"通过配置开机自运行脚本\"><a href=\"#通过配置开机自运行脚本\" class=\"headerlink\" title=\"通过配置开机自运行脚本\"></a>通过配置开机自运行脚本</h4><p><strong>原理如下：</strong></p>\n<blockquote>\n<p>新建 &#x2F;etc&#x2F;rc.local 文件<br>这种方法的原理是系统开机后会自动启动 rc-local 服务；<br>rc-local 服务启动后就会自动执行 &#x2F;etc 目录下的 rc.local 脚本；<br>该方法的优点就是不存在第一种方法的三个缺点，脚本执行失败不会出现黑屏弹窗、sleep 不会造成开机黑屏以及执行脚本的用户是 root 用户。 </p>\n</blockquote>\n<p><strong>主要步骤：</strong></p>\n<ol>\n<li>新建 &#x2F;etc&#x2F;rc.local 文件</li>\n<li>粘贴以下模板<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/sh -e</span></span><br><span class=\"line\"><span class=\"comment\"># rc.local</span></span><br><span class=\"line\"><span class=\"comment\"># This script is executed at the end of each multiuser runlevel.</span></span><br><span class=\"line\"><span class=\"comment\"># Make sure that the script will &quot;exit 0&quot; on success or any other</span></span><br><span class=\"line\"><span class=\"comment\"># value on error.</span></span><br><span class=\"line\"><span class=\"comment\"># In order to enable or disable this script just change the execution</span></span><br><span class=\"line\"><span class=\"comment\"># bits.</span></span><br><span class=\"line\"><span class=\"comment\"># By default this script does nothing.</span></span><br><span class=\"line\">01.LitterScript/02.bbsmonitor/bbsmonitor.py &gt;bbs.log 2&gt;&amp;1 &amp;</span><br><span class=\"line\"><span class=\"comment\"># 因为该命令本身就是会以root权限执行，所以不用加sudo</span></span><br><span class=\"line\"><span class=\"built_in\">sleep</span> 5;mount -t nfs 10.20.13.152:/home/deepin-server/Documents/NFS文件目录for-test /home/babyfengfjx/Documents/nfsfile/</span><br><span class=\"line\"><span class=\"built_in\">exit</span> 0</span><br></pre></td></tr></table></figure></li>\n<li>在 exit 0 上方插入你需要自启的命令(一行一个)后保存文件</li>\n<li>给脚本加上 755 权限<br>sudo chmod +755 &#x2F;etc&#x2F;rc.local</li>\n<li>调试脚本(可选)<br>sudo &#x2F;etc&#x2F;rc.local # 使用 sudo 模拟 root 用户开机自启 &#x2F;etc&#x2F;rc.local 文件<br>如果第 5 步模拟启动脚本没有报错，那我们就可以重启电脑看看是否可以成功实现脚本开机自启。重启进入系统后我们可以通过 systemctl status rc-local.service 查看 rc-local 的运行状态，如果结果显示的是 active (exited) 则说明你的脚本已经成功执行，反之如果结果显示 failed,那么你需要检查一下脚本是否哪里有问题。</li>\n</ol>\n<h5 id=\"这里提供可能导致脚本无法正常启动的原因：\"><a href=\"#这里提供可能导致脚本无法正常启动的原因：\" class=\"headerlink\" title=\"这里提供可能导致脚本无法正常启动的原因：\"></a>这里提供可能导致脚本无法正常启动的原因：</h5><p>1、执行脚本的用户不一致<br>由于 rc.local 开机自启的时候是以 root 用户执行的，这里很多人会忽略了一个问题，很多情况下你的命令是必须要普通用户执行的。比如 conky 和虚拟机(用户A建立的VBox和VM Ware虚拟机用户B无法访问)等。<br>假设用户 lolimay 在终端用 VBoxHeadless -s aikuai &amp; 后台启动了虚拟机名 aikuai，那么我们在 rc.local 文件应该用下面这种方式写：<br><code>su - lolimay -c &quot;VBoxHeadless -s aikuai &amp;&quot; # 以 lolimay 用户执行该命令</code><br>2、多余的 sudo<br>前面已经提到 rc.local 开机时是以 root 用户启动的，所以写在 rc.local 文件中命令不需要带有 sudo 前缀(实际上就算你带有了 sudo 前缀也不会产生错误)。<br>3、最佳实践<br>个人建议每当往 rc.local 文件中添加了一个需要自启的命令时，可以先用 sudo &#x2F;etc&#x2F;rc.local 命令模拟一下看看是否能够执行成功(如果执行失败也能够直观地看到出错的原因)，这样能够有效减少你重启电脑来调试的次数。</p>\n","site":{"data":{}},"excerpt":"","more":"<hr>\n<h1 id=\"Samba服务搭建\"><a href=\"#Samba服务搭建\" class=\"headerlink\" title=\"Samba服务搭建\"></a>Samba服务搭建</h1><blockquote>\n<p>Samba是在Linux系统上实现SMB协议的一个免费软件，由服务器及客户端程序构成。SMB（Server Messages Block，信息服务块）是一种在局域网上共享文件和打印机的一种通信协议，它为局域网内的不同计算机之间提供文件及打印机等资源的共享服务。</p>\n</blockquote>\n<h2 id=\"安装服务\"><a href=\"#安装服务\" class=\"headerlink\" title=\"安装服务\"></a>安装服务</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get install samba-common samba</span><br></pre></td></tr></table></figure>\n<h2 id=\"创建共享文件夹\"><a href=\"#创建共享文件夹\" class=\"headerlink\" title=\"创建共享文件夹\"></a>创建共享文件夹</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo <span class=\"built_in\">mkdir</span> /opt/share</span><br></pre></td></tr></table></figure>\n<h2 id=\"编辑配置文件\"><a href=\"#编辑配置文件\" class=\"headerlink\" title=\"编辑配置文件\"></a>编辑配置文件</h2><blockquote>\n<ul>\n<li>关于samba配置文件，smb.conf总共分为两大部分，分别为“全局设置（GIobal Settings）”和“共享定义（Share Definitions）”。全局设置定义于Samba服务器的整体行为，例如，工作组，主机名等方面。共享定义则用于设置的具体的共享目录或者设备中。</li>\n<li>配置文件绝对路径在：<code>/etc/samba/smb.conf</code></li>\n</ul>\n</blockquote>\n<h3 id=\"全局设置\"><a href=\"#全局设置\" class=\"headerlink\" title=\"全局设置\"></a>全局设置</h3><ul>\n<li>workgroup用于设置在windows中显示的工作组</li>\n<li>server string是Samba服务器的说明</li>\n<li>workgroup和server string字段后面的内容可以随便写</li>\n<li>通常来说，将Samba服务器的编码设置为UTF-8是比较好的，也能解决显示的问题：<code>unix charset = UTF-8</code></li>\n<li>但是这样也会存在问题，UTF-8编码的中文文件名在某些系统下面会乱码，Samba提供了dos charset这个字段。下面这条配置命令为哪些不认识的Unicode的Windows系统使用GBK编码:<code>dos charset = cp936</code></li>\n<li>security字段设置了用户登录的验证方式，share和user是最常用到的两种。share方式允许任何用户登录到系统，而不用提供用户名和口令,但是由于Samba是默认要使用验证方式的，所以这里就要讲到user方式。这种方式要求用户提供账户信息供服务器验证，但是要使用user验证，Samba的配置文件里面就应该包含这一行:<code>security = user</code></li>\n</ul>\n<h3 id=\"共享设置\"><a href=\"#共享设置\" class=\"headerlink\" title=\"共享设置\"></a>共享设置</h3><p>这个文件叫做smb.conf（位于&#x2F;etc或者&#x2F;etc&#x2F;samba目录下面），可以用uos系统自带的文本编辑器打开，在末尾输入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[share] <span class=\"comment\">#&quot;[]&quot; 中的文字表示共享目录名字，可以随意设置</span></span><br><span class=\"line\">    comment = Linux Share　 <span class=\"comment\">#comment字段用于设置这个共享目录的描述</span></span><br><span class=\"line\">    path = /opt/share　　　　 <span class=\"comment\">#share指定了共享目录的路径</span></span><br><span class=\"line\">    public = <span class=\"built_in\">yes</span>　　　　　　 <span class=\"comment\">#表示在windows的“网上邻居”中可见</span></span><br><span class=\"line\">    writeable = no　　　　　 <span class=\"comment\">#writeable表示设置目录是否可写（yes是可写的意思）</span></span><br><span class=\"line\">    browseable = <span class=\"built_in\">yes</span>　　　 <span class=\"comment\">#表示在windows的“网上邻居”中可见</span></span><br><span class=\"line\">    guest ok = no 　　　　　<span class=\"comment\">#告诉Samba服务器这个共享目录允许匿名访问</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"添加用户\"><a href=\"#添加用户\" class=\"headerlink\" title=\"添加用户\"></a>添加用户</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo useradd smbuser  <span class=\"comment\"># 新增一个叫smbuser的用户</span></span><br><span class=\"line\">sudo smbpasswd -a smbuser  <span class=\"comment\"># 给这个新增用户创建samb共享密码</span></span><br><span class=\"line\">New SMB password:</span><br><span class=\"line\">Retype new SMB password:</span><br><span class=\"line\">Added user smbuser</span><br></pre></td></tr></table></figure>\n<p>后面就可以使用带-U参数的smbpasswd命令修改已经有用户的口令。如果用户希望本地修改服务器上自己的口令，可以使用-r参数。下面的命令用户修改在服务器smbserver上smbuser用户的口令了</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">smbpasswd -r smbserver -U smbuser</span><br></pre></td></tr></table></figure>\n<h2 id=\"赋予权限\"><a href=\"#赋予权限\" class=\"headerlink\" title=\"赋予权限\"></a>赋予权限</h2><p>smbuser对共享目录写权限,一下配置需要写成yes</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">writeable = <span class=\"built_in\">yes</span></span><br></pre></td></tr></table></figure>\n<p>如果只写writeable &#x3D; yes是远远不够的，如果服务器上的这么目录本身对smbuser不可写的话，就需要添加以下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo <span class=\"built_in\">chown</span> smbuser:smbuser /opt/share</span><br></pre></td></tr></table></figure>\n<h2 id=\"服务启动、停止、重启\"><a href=\"#服务启动、停止、重启\" class=\"headerlink\" title=\"服务启动、停止、重启\"></a>服务启动、停止、重启</h2><h3 id=\"启动服务：service-smbd-start\"><a href=\"#启动服务：service-smbd-start\" class=\"headerlink\" title=\"启动服务：service smbd start\"></a>启动服务：<code>service smbd start</code></h3><h3 id=\"停止服务：service-smbd-stop\"><a href=\"#停止服务：service-smbd-stop\" class=\"headerlink\" title=\"停止服务：service smbd stop\"></a>停止服务：<code>service smbd stop</code></h3><h3 id=\"重启服务：service-smbd-restart\"><a href=\"#重启服务：service-smbd-restart\" class=\"headerlink\" title=\"重启服务：service smbd restart\"></a>重启服务：<code>service smbd restart</code></h3><h3 id=\"查看服务状态：service-smbd-status\"><a href=\"#查看服务状态：service-smbd-status\" class=\"headerlink\" title=\"查看服务状态：service smbd status\"></a>查看服务状态：<code>service smbd status</code></h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">deepin@wh-k8snode-70:/etc/samba$ service smbd status</span><br><span class=\"line\">● smbd.service - Samba SMB Daemon</span><br><span class=\"line\">   Loaded: loaded (/lib/systemd/system/smbd.service; enabled; vendor preset: enabled)</span><br><span class=\"line\">   Active: active (running) since Mon 2022-06-20 11:50:46 CST; 1h 57min ago</span><br><span class=\"line\">     Docs: man:smbd(8)</span><br><span class=\"line\">           man:samba(7)</span><br><span class=\"line\">           man:smb.conf(5)</span><br><span class=\"line\">  Process: 20165 ExecStartPre=/usr/share/samba/update-apparmor-samba-profile (code=exited, status=0/SUCCESS)</span><br><span class=\"line\"> Main PID: 20174 (smbd)</span><br><span class=\"line\">   Status: <span class=\"string\">&quot;smbd: ready to serve connections...&quot;</span></span><br><span class=\"line\">    Tasks: 6 (<span class=\"built_in\">limit</span>: 4915)</span><br><span class=\"line\">   Memory: 26.7M</span><br><span class=\"line\">   CGroup: /system.slice/smbd.service</span><br><span class=\"line\">           ├─ 8209 /usr/sbin/smbd --foreground --no-process-group</span><br><span class=\"line\">           ├─10619 /usr/sbin/smbd --foreground --no-process-group</span><br><span class=\"line\">           ├─20174 /usr/sbin/smbd --foreground --no-process-group</span><br><span class=\"line\">           ├─20176 /usr/sbin/smbd --foreground --no-process-group</span><br><span class=\"line\">           ├─20177 /usr/sbin/smbd --foreground --no-process-group</span><br><span class=\"line\">           └─20178 /usr/sbin/smbd --foreground --no-process-group</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h2><ol>\n<li><p>修改配置文件后，服务无法启动。</p>\n<blockquote>\n<p>在实际修改配置文件过程中，可能在参数后面有一些看不见的字符，会导致服务无法正常启动，最好检查每个修改的参数后面无一些空格或者其他特殊符号。</p>\n</blockquote>\n</li>\n<li><p>创建了几个samba用户，想通过不同的用户来对不同的文件进行访问，但是出现了报错（内容是不允许一个用户使用一个以上用户名与服务器或者共享资源的多重连接）<br><strong>解决：</strong></p>\n<blockquote>\n<p>先断开现有的samba连接：cmd命令行下执行net use * &#x2F;del &#x2F;X<br>再重新选择你要使用的目录，使用对应的用户名进行登录就可以了</p>\n</blockquote>\n</li>\n<li><p>配置好samba服务器，但是测试过程中会出现以下报错：</p>\n<blockquote>\n<p>主要原因是因为服务器的防火墙没有关，可以选择在文件&#x2F;etc&#x2F;security&#x2F;limits.conf下输入*　-   nofile   16384,然后shutdown -r now 重启一下就可以了</p>\n</blockquote>\n</li>\n<li><p>samba服务器已经可以让windows通过网络来访问samba，但是没有办法写入，修改，删除，只能查看,出现这样的问题可能就是我们自己在配置的时候出现问题了，如果我的用户是deepin:</p>\n<figure class=\"highlight plaintext\"><figcaption><span>777 FileServer```   　--这种操作就可以让组samba里的用户进行写操作了。</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\">```bash</span><br><span class=\"line\">[deepin]</span><br><span class=\"line\">   create mode =0664</span><br><span class=\"line\">   force create mode=0750   #文件新建的权限为750</span><br><span class=\"line\">   directory mode=0750      　#新建文件夹的权限只有组里的用户查看，其他组里的用户都没有权限进入</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h1 id=\"FTP服务搭建\"><a href=\"#FTP服务搭建\" class=\"headerlink\" title=\"FTP服务搭建\"></a>FTP服务搭建</h1><h2 id=\"vsftpd配置使用\"><a href=\"#vsftpd配置使用\" class=\"headerlink\" title=\"vsftpd配置使用\"></a>vsftpd配置使用</h2><blockquote>\n<p>vsftpd 是Linus上非常安全好用的ftp服务，只需要简单的安装后就可以搭建起ftp服务；<br>该服务主要的配置文件就是vsftpd.conf ,在deepin&#x2F;uos系统中的绝对路径是：&#x2F;etc&#x2F;vsftpd.conf</p>\n</blockquote>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>只需要简单的进行安装配置即可，前提是你开启了开发者模式我们才能通过终端安装软件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt install vsftpd</span><br></pre></td></tr></table></figure>\n<p>如果提示没有找到对应安装包，则可能是没有进行仓库的更新连接，执行如下命令即可</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt update </span><br></pre></td></tr></table></figure>\n<h3 id=\"服务的启停配置\"><a href=\"#服务的启停配置\" class=\"headerlink\" title=\"服务的启停配置\"></a>服务的启停配置</h3><h4 id=\"启动服务\"><a href=\"#启动服务\" class=\"headerlink\" title=\"启动服务\"></a>启动服务</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">service vsftpd start</span><br></pre></td></tr></table></figure>\n<h4 id=\"停止服务\"><a href=\"#停止服务\" class=\"headerlink\" title=\"停止服务\"></a>停止服务</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">service vsftpd stop</span><br></pre></td></tr></table></figure>\n<h4 id=\"重启服务\"><a href=\"#重启服务\" class=\"headerlink\" title=\"重启服务\"></a>重启服务</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">service vsftpd restart</span><br></pre></td></tr></table></figure>\n<h4 id=\"查看服务状态\"><a href=\"#查看服务状态\" class=\"headerlink\" title=\"查看服务状态\"></a>查看服务状态</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">service vsftpd status</span><br><span class=\"line\"><span class=\"comment\">#执行后结果如下：active则表示正常运行，如果失败了则可以通过提示信息查询对应问题</span></span><br><span class=\"line\">babyfengfjx@babyfengfjx:~$ service vsftpd status </span><br><span class=\"line\">● vsftpd.service - vsftpd FTP server</span><br><span class=\"line\">   Loaded: loaded (/lib/systemd/system/vsftpd.service; enabled; vendor preset: enabled)</span><br><span class=\"line\">   Active: active (running) since Sat 2021-10-09 16:22:48 CST; 1s ago</span><br><span class=\"line\">  Process: 18334 ExecStartPre=/bin/mkdir -p /var/run/vsftpd/empty (code=exited, status=0/SUCCESS)</span><br><span class=\"line\"> Main PID: 18335 (vsftpd)</span><br><span class=\"line\">    Tasks: 1 (<span class=\"built_in\">limit</span>: 4915)</span><br><span class=\"line\">   Memory: 568.0K</span><br><span class=\"line\">   CGroup: /system.slice/vsftpd.service</span><br><span class=\"line\">           └─18335 /usr/sbin/vsftpd /etc/vsftpd.conf</span><br></pre></td></tr></table></figure>\n<h4 id=\"配置文件展示\"><a href=\"#配置文件展示\" class=\"headerlink\" title=\"配置文件展示\"></a>配置文件展示</h4><p>在使用该服务过程中，主要就是这些配置文件该如何配置，很多同学在实际配置过程中很难一次配置成功，这里就给出一个实际可用的配置参数以供参考 </p>\n<p>配置文件路径：&#x2F;etc&#x2F;vsftpd.conf</p>\n<p>配置过程中尽量是将匿名登录关闭，使用本地用户登录，以确保安全。 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Example config file /etc/vsftpd.conf</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># The default compiled in settings are fairly paranoid. This sample file</span></span><br><span class=\"line\"><span class=\"comment\"># loosens things up a bit, to make the ftp daemon more usable.</span></span><br><span class=\"line\"><span class=\"comment\"># Please see vsftpd.conf.5 for all compiled in defaults.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># READ THIS: This example file is NOT an exhaustive list of vsftpd options.</span></span><br><span class=\"line\"><span class=\"comment\"># Please read the vsftpd.conf.5 manual page to get a full idea of vsftpd&#x27;s</span></span><br><span class=\"line\"><span class=\"comment\"># capabilities.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Run standalone?  vsftpd can run either from an inetd or as a standalone</span></span><br><span class=\"line\"><span class=\"comment\"># daemon started from an initscript.</span></span><br><span class=\"line\">listen=YES</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># This directive enables listening on IPv6 sockets. By default, listening</span></span><br><span class=\"line\"><span class=\"comment\"># on the IPv6 &quot;any&quot; address (::) will accept connections from both IPv6</span></span><br><span class=\"line\"><span class=\"comment\"># and IPv4 clients. It is not necessary to listen on *both* IPv4 and IPv6</span></span><br><span class=\"line\"><span class=\"comment\"># sockets. If you want that (perhaps because you want to listen on specific</span></span><br><span class=\"line\"><span class=\"comment\"># addresses) then you must run two copies of vsftpd with two configuration</span></span><br><span class=\"line\"><span class=\"comment\"># files.</span></span><br><span class=\"line\">listen_ipv6=NO</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Allow anonymous FTP? (Disabled by default).</span></span><br><span class=\"line\">anonymous_enable=NO</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Uncomment this to allow local users to log in.</span></span><br><span class=\"line\">local_enable=YES</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Uncomment this to enable any form of FTP write command.</span></span><br><span class=\"line\">write_enable=YES</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Default umask for local users is 077. You may wish to change this to 022,</span></span><br><span class=\"line\"><span class=\"comment\"># if your users expect that (022 is used by most other ftpd&#x27;s)</span></span><br><span class=\"line\"><span class=\"comment\">#local_umask=022</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Uncomment this to allow the anonymous FTP user to upload files. This only</span></span><br><span class=\"line\"><span class=\"comment\"># has an effect if the above global write enable is activated. Also, you will</span></span><br><span class=\"line\"><span class=\"comment\"># obviously need to create a directory writable by the FTP user.</span></span><br><span class=\"line\"><span class=\"comment\">#anon_upload_enable=YES</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Uncomment this if you want the anonymous FTP user to be able to create</span></span><br><span class=\"line\"><span class=\"comment\"># new directories.</span></span><br><span class=\"line\"><span class=\"comment\">#anon_mkdir_write_enable=YES</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Activate directory messages - messages given to remote users when they</span></span><br><span class=\"line\"><span class=\"comment\"># go into a certain directory.</span></span><br><span class=\"line\">dirmessage_enable=YES</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># If enabled, vsftpd will display directory listings with the time</span></span><br><span class=\"line\"><span class=\"comment\"># in  your  local  time  zone.  The default is to display GMT. The</span></span><br><span class=\"line\"><span class=\"comment\"># times returned by the MDTM FTP command are also affected by this</span></span><br><span class=\"line\"><span class=\"comment\"># option.</span></span><br><span class=\"line\">use_localtime=YES</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Activate logging of uploads/downloads.</span></span><br><span class=\"line\">xferlog_enable=YES</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Make sure PORT transfer connections originate from port 20 (ftp-data).</span></span><br><span class=\"line\">connect_from_port_20=YES</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># If you want, you can arrange for uploaded anonymous files to be owned by</span></span><br><span class=\"line\"><span class=\"comment\"># a different user. Note! Using &quot;root&quot; for uploaded files is not</span></span><br><span class=\"line\"><span class=\"comment\"># recommended!</span></span><br><span class=\"line\"><span class=\"comment\">#chown_uploads=YES</span></span><br><span class=\"line\"><span class=\"comment\">#chown_username=whoever</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># You may override where the log file goes if you like. The default is shown</span></span><br><span class=\"line\"><span class=\"comment\"># below.</span></span><br><span class=\"line\"><span class=\"comment\">#xferlog_file=/var/log/vsftpd.log</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># If you want, you can have your log file in standard ftpd xferlog format.</span></span><br><span class=\"line\"><span class=\"comment\"># Note that the default log file location is /var/log/xferlog in this case.</span></span><br><span class=\"line\"><span class=\"comment\">#xferlog_std_format=YES</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># You may change the default value for timing out an idle session.</span></span><br><span class=\"line\"><span class=\"comment\">#idle_session_timeout=600</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># You may change the default value for timing out a data connection.</span></span><br><span class=\"line\"><span class=\"comment\">#data_connection_timeout=120</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># It is recommended that you define on your system a unique user which the</span></span><br><span class=\"line\"><span class=\"comment\"># ftp server can use as a totally isolated and unprivileged user.</span></span><br><span class=\"line\"><span class=\"comment\">#nopriv_user=ftpsecure</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Enable this and the server will recognise asynchronous ABOR requests. Not</span></span><br><span class=\"line\"><span class=\"comment\"># recommended for security (the code is non-trivial). Not enabling it,</span></span><br><span class=\"line\"><span class=\"comment\"># however, may confuse older FTP clients.</span></span><br><span class=\"line\"><span class=\"comment\">#async_abor_enable=YES</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># By default the server will pretend to allow ASCII mode but in fact ignore</span></span><br><span class=\"line\"><span class=\"comment\"># the request. Turn on the below options to have the server actually do ASCII</span></span><br><span class=\"line\"><span class=\"comment\"># mangling on files when in ASCII mode.</span></span><br><span class=\"line\"><span class=\"comment\"># Beware that on some FTP servers, ASCII support allows a denial of service</span></span><br><span class=\"line\"><span class=\"comment\"># attack (DoS) via the command &quot;SIZE /big/file&quot; in ASCII mode. vsftpd</span></span><br><span class=\"line\"><span class=\"comment\"># predicted this attack and has always been safe, reporting the size of the</span></span><br><span class=\"line\"><span class=\"comment\"># raw file.</span></span><br><span class=\"line\"><span class=\"comment\"># ASCII mangling is a horrible feature of the protocol.</span></span><br><span class=\"line\"><span class=\"comment\">#ascii_upload_enable=YES</span></span><br><span class=\"line\"><span class=\"comment\">#ascii_download_enable=YES</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># You may fully customise the login banner string:</span></span><br><span class=\"line\"><span class=\"comment\">#ftpd_banner=Welcome to blah FTP service.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># You may specify a file of disallowed anonymous e-mail addresses. Apparently</span></span><br><span class=\"line\"><span class=\"comment\"># useful for combatting certain DoS attacks.</span></span><br><span class=\"line\"><span class=\"comment\">#deny_email_enable=YES</span></span><br><span class=\"line\"><span class=\"comment\"># (default follows)</span></span><br><span class=\"line\"><span class=\"comment\">#banned_email_file=/etc/vsftpd.banned_emails</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># You may restrict local users to their home directories.  See the FAQ for</span></span><br><span class=\"line\"><span class=\"comment\"># the possible risks in this before using chroot_local_user or</span></span><br><span class=\"line\"><span class=\"comment\"># chroot_list_enable below.</span></span><br><span class=\"line\"><span class=\"comment\"># chroot_local_user=YES</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># You may specify an explicit list of local users to chroot() to their home</span></span><br><span class=\"line\"><span class=\"comment\"># directory. If chroot_local_user is YES, then this list becomes a list of</span></span><br><span class=\"line\"><span class=\"comment\"># users to NOT chroot().</span></span><br><span class=\"line\"><span class=\"comment\"># (Warning! chroot&#x27;ing can be very dangerous. If using chroot, make sure that</span></span><br><span class=\"line\"><span class=\"comment\"># the user does not have write access to the top level directory within the</span></span><br><span class=\"line\"><span class=\"comment\"># chroot)</span></span><br><span class=\"line\"><span class=\"comment\"># chroot_local_user=YES</span></span><br><span class=\"line\"><span class=\"comment\"># chroot_list_enable=YES</span></span><br><span class=\"line\"><span class=\"comment\"># (default follows)</span></span><br><span class=\"line\"><span class=\"comment\"># chroot_list_file=/etc/vsftpd.chroot_list</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># You may activate the &quot;-R&quot; option to the builtin ls. This is disabled by</span></span><br><span class=\"line\"><span class=\"comment\"># default to avoid remote users being able to cause excessive I/O on large</span></span><br><span class=\"line\"><span class=\"comment\"># sites. However, some broken FTP clients such as &quot;ncftp&quot; and &quot;mirror&quot; assume</span></span><br><span class=\"line\"><span class=\"comment\"># the presence of the &quot;-R&quot; option, so there is a strong case for enabling it.</span></span><br><span class=\"line\"><span class=\"comment\">#ls_recurse_enable=YES</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Customization</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Some of vsftpd&#x27;s settings don&#x27;t fit the filesystem layout by</span></span><br><span class=\"line\"><span class=\"comment\"># default.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># This option should be the name of a directory which is empty.  Also, the</span></span><br><span class=\"line\"><span class=\"comment\"># directory should not be writable by the ftp user. This directory is used</span></span><br><span class=\"line\"><span class=\"comment\"># as a secure chroot() jail at times vsftpd does not require filesystem</span></span><br><span class=\"line\"><span class=\"comment\"># access.</span></span><br><span class=\"line\">secure_chroot_dir=/var/run/vsftpd/empty</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># This string is the name of the PAM service vsftpd will use.</span></span><br><span class=\"line\">pam_service_name=vsftpd</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># This option specifies the location of the RSA certificate to use for SSL</span></span><br><span class=\"line\"><span class=\"comment\"># encrypted connections.</span></span><br><span class=\"line\">rsa_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pem</span><br><span class=\"line\">rsa_private_key_file=/etc/ssl/private/ssl-cert-snakeoil.key</span><br><span class=\"line\">ssl_enable=NO</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Uncomment this to indicate that vsftpd use a utf8 filesystem.</span></span><br><span class=\"line\"><span class=\"comment\">#utf8_filesystem=YES</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"实际开启的配置项如下：\"><a href=\"#实际开启的配置项如下：\" class=\"headerlink\" title=\"实际开启的配置项如下：\"></a>实际开启的配置项如下：</h4><p>按照如下简单的配置就可以通过本地用户进行访问了 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">listen=YES</span><br><span class=\"line\">listen_ipv6=NO</span><br><span class=\"line\">anonymous_enable=NO</span><br><span class=\"line\">local_enable=YES</span><br><span class=\"line\">write_enable=YES</span><br><span class=\"line\">dirmessage_enable=YES</span><br><span class=\"line\">use_localtime=YES</span><br><span class=\"line\">xferlog_enable=YES</span><br><span class=\"line\">connect_from_port_20=YES</span><br><span class=\"line\">secure_chroot_dir=/var/run/vsftpd/empty</span><br><span class=\"line\">pam_service_name=vsftpd</span><br><span class=\"line\">rsa_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pem</span><br><span class=\"line\">rsa_private_key_file=/etc/ssl/private/ssl-cert-snakeoil.key</span><br><span class=\"line\">ssl_enable=NO</span><br></pre></td></tr></table></figure>\n<h4 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h4><ul>\n<li>无法配置指定根目录，也就是任何本地账户登录后的目录都是根目录，无法自定义配置指定目录，配置后也不生效； </li>\n<li>在添加新用户配置成nologin时，是无法正常使用该类用户进行访问的； </li>\n<li>添加的新用户，需要先登录一次后，方可使用该账号访问ftp;</li>\n</ul>\n<h1 id=\"SFTP服务搭建\"><a href=\"#SFTP服务搭建\" class=\"headerlink\" title=\"SFTP服务搭建\"></a>SFTP服务搭建</h1><h2 id=\"群组配置—服务端\"><a href=\"#群组配置—服务端\" class=\"headerlink\" title=\"群组配置—服务端\"></a>群组配置—服务端</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo groupadd sftp</span><br><span class=\"line\"><span class=\"built_in\">cat</span> /etc/group  <span class=\"comment\"># 确认组新建成功</span></span><br><span class=\"line\">sudo vim /etc/group <span class=\"comment\">#修改 sftp:x:1002:</span></span><br><span class=\"line\">sudo useradd -g sftp -s /bin/false mysftp </span><br><span class=\"line\">sudo passwd mysftp <span class=\"comment\"># 设置新密码为服务器访问密码</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"共享目录—服务端\"><a href=\"#共享目录—服务端\" class=\"headerlink\" title=\"共享目录—服务端\"></a>共享目录—服务端</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo <span class=\"built_in\">mkdir</span> -p /data/sftp/mysftp</span><br><span class=\"line\">sudo usermod -d /data/sftp/mysftp mysftp</span><br></pre></td></tr></table></figure>\n<h2 id=\"配置文件修改—服务端\"><a href=\"#配置文件修改—服务端\" class=\"headerlink\" title=\"配置文件修改—服务端\"></a>配置文件修改—服务端</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/ssh/sshd_config</span><br><span class=\"line\">Subsystem sftp /usr/libexec/openssh/sftp-server <span class=\"comment\"># 该行原本配置，需要手动注释掉</span></span><br><span class=\"line\">并在文件最后面添加如下几行内容然后保存</span><br><span class=\"line\">Subsystem sftp internal-sftp</span><br><span class=\"line\">Match Group sftp</span><br><span class=\"line\">ChrootDirectory /data/sftp/%u</span><br><span class=\"line\">ForceCommand internal-sftp</span><br><span class=\"line\">AllowTcpForwarding no</span><br><span class=\"line\">X11Forwarding no</span><br></pre></td></tr></table></figure>\n<h2 id=\"目录授权与新建—服务端\"><a href=\"#目录授权与新建—服务端\" class=\"headerlink\" title=\"目录授权与新建—服务端\"></a>目录授权与新建—服务端</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo <span class=\"built_in\">chown</span> root:sftp /data/sftp/mysftp</span><br><span class=\"line\">sudo <span class=\"built_in\">chmod</span> 755 /data/sftp/mysftp</span><br><span class=\"line\">sudo <span class=\"built_in\">mkdir</span> /data/sftp/mysftp/upload</span><br><span class=\"line\">sudo <span class=\"built_in\">chown</span> mysftp:sftp /data/sftp/mysftp/upload</span><br><span class=\"line\">sudo <span class=\"built_in\">chmod</span> 755 /data/sftp/mysftp/upload</span><br></pre></td></tr></table></figure>\n<h2 id=\"重启服务—服务端\"><a href=\"#重启服务—服务端\" class=\"headerlink\" title=\"重启服务—服务端\"></a>重启服务—服务端</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo systemctl  restart sshd.service   <span class=\"comment\"># 重启服务时如果提示服务不存在，则先添加如下服务</span></span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> ssh.service </span><br><span class=\"line\"><span class=\"comment\"># 再执行：</span></span><br><span class=\"line\">sudo systemctl  restart sshd.service </span><br></pre></td></tr></table></figure>\n<h2 id=\"访问服务器—客户端\"><a href=\"#访问服务器—客户端\" class=\"headerlink\" title=\"访问服务器—客户端\"></a>访问服务器—客户端</h2><p>进入文件管理器或我的电脑<br>输入—例如sftp：&#x2F;&#x2F;10.20.32.** （根据实际服务端IP输入，并键如账号密码，即可访问）</p>\n<h1 id=\"NFS服务搭建\"><a href=\"#NFS服务搭建\" class=\"headerlink\" title=\"NFS服务搭建\"></a>NFS服务搭建</h1><h2 id=\"服务端\"><a href=\"#服务端\" class=\"headerlink\" title=\"服务端\"></a>服务端</h2><h3 id=\"工具安装\"><a href=\"#工具安装\" class=\"headerlink\" title=\"工具安装\"></a>工具安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get install nfs-kernel-server <span class=\"comment\"># 安装 NFS服务器端</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建共享文件夹-1\"><a href=\"#创建共享文件夹-1\" class=\"headerlink\" title=\"创建共享文件夹\"></a>创建共享文件夹</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo <span class=\"built_in\">mkdir</span> /home/deepin-server/nfs       <span class=\"comment\"># 路径可以根据自己需要设置</span></span><br><span class=\"line\">sudo <span class=\"built_in\">chmod</span> -R 777 /home/deepin-server/nfs    <span class=\"comment\"># 设置共享目录权限</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"修改配置文件\"><a href=\"#修改配置文件\" class=\"headerlink\" title=\"修改配置文件\"></a>修改配置文件</h3><p><code>vim /etc/exports</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">配置文件虽然只有一句，但是其中还是有很多讲究； </span><br><span class=\"line\">共享文件可执行权限有： </span><br><span class=\"line\">      ro           只读访问 </span><br><span class=\"line\">      rw           读写访问 </span><br><span class=\"line\">      <span class=\"built_in\">sync</span>          所有数据在请求时写入共享 </span><br><span class=\"line\">      hide          在NFS共享目录中不共享其子目录 </span><br><span class=\"line\">      no_hide         共享NFS目录的子目录 </span><br><span class=\"line\">      all_squash       共享文件的UID和GID映射匿名用户anonymous，适合公用目录。 </span><br><span class=\"line\">      no_all_squash      保留共享文件的UID和GID（默认） </span><br><span class=\"line\">      root_squash       root用户的所有请求映射成如anonymous用户一样的权限（默认） </span><br><span class=\"line\">      no_root_squas      root用户具有根目录的完全管理访问权限 </span><br><span class=\"line\">ip配置一般需要进行限定，最好不要使用* ，不然存在安全问题，可以限定具体ip或者ip段才能挂载。 </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置文件修改如下：\"><a href=\"#配置文件修改如下：\" class=\"headerlink\" title=\"配置文件修改如下：\"></a>配置文件修改如下：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">deepin-server@deepin-server-PC:~$ cat /etc/exports </span><br><span class=\"line\"># /etc/exports: the access control list for filesystems which may be exported</span><br><span class=\"line\">#               to NFS clients.  See exports(5).</span><br><span class=\"line\">#</span><br><span class=\"line\"># Example for NFSv2 and NFSv3:</span><br><span class=\"line\"># /srv/homes       hostname1(rw,sync,no_subtree_check) hostname2(ro,sync,no_subtree_check)</span><br><span class=\"line\"># Example for NFSv4:</span><br><span class=\"line\"># /srv/nfs4        gss/krb5i(rw,sync,fsid=0,crossmnt,no_subtree_check)</span><br><span class=\"line\"># /srv/nfs4/homes  gss/krb5i(rw,sync,no_subtree_check)</span><br><span class=\"line\">/home/deepin-server/nfs  10.20.*(rw)#此处ip只做了部分限制，圆括号里面就是配置权限的。</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动服务-1\"><a href=\"#启动服务-1\" class=\"headerlink\" title=\"启动服务\"></a>启动服务</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">systemctl start rpcbind nfs-server</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查看服务状态-1\"><a href=\"#查看服务状态-1\" class=\"headerlink\" title=\"查看服务状态\"></a>查看服务状态</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">deepin-server@deepin-server-PC:~$ sudo systemctl status rpcbind nfs-server</span><br><span class=\"line\">● rpcbind.service - RPC bind portmap service</span><br><span class=\"line\">   Loaded: loaded (/lib/systemd/system/rpcbind.service; enabled; vendor preset: enabled)</span><br><span class=\"line\">   Active: active (running) since Wed 2022-01-05 11:53:19 CST; 1h 56min ago</span><br><span class=\"line\">     Docs: man:rpcbind(8)</span><br><span class=\"line\"> Main PID: 19304 (rpcbind)</span><br><span class=\"line\">    Tasks: 1 (limit: 19660)</span><br><span class=\"line\">   Memory: 608.0K</span><br><span class=\"line\">   CGroup: /system.slice/rpcbind.service</span><br><span class=\"line\">           └─19304 /sbin/rpcbind -f -w</span><br><span class=\"line\"></span><br><span class=\"line\">1月 05 11:53:19 deepin-server-PC systemd[1]: Starting RPC bind portmap service...</span><br><span class=\"line\">1月 05 11:53:19 deepin-server-PC systemd[1]: Started RPC bind portmap service.</span><br><span class=\"line\"></span><br><span class=\"line\">● nfs-server.service - NFS server and services</span><br><span class=\"line\">   Loaded: loaded (/lib/systemd/system/nfs-server.service; enabled; vendor preset: enabled)</span><br><span class=\"line\">   Active: active (exited) since Wed 2022-01-05 11:53:21 CST; 1h 56min ago</span><br><span class=\"line\">  Process: 19319 ExecStartPre=/usr/sbin/exportfs -r (code=exited, status=0/SUCCESS)</span><br><span class=\"line\">  Process: 19320 ExecStart=/usr/sbin/rpc.nfsd $RPCNFSDARGS (code=exited, status=0/SUCCESS)</span><br><span class=\"line\"> Main PID: 19320 (code=exited, status=0/SUCCESS)</span><br><span class=\"line\"></span><br><span class=\"line\">1月 05 11:53:20 deepin-server-PC systemd[1]: Starting NFS server and services...</span><br><span class=\"line\">1月 05 11:53:20 deepin-server-PC exportfs[19319]: exportfs: /etc/exports [1]: Neither &#x27;subtree_check&#x27; or &#x27;no_subtree_check&#x27; specified for export &quot;10.20.*:/home/deepin-server/Documents/NFS文件目录for-test&quot;.</span><br><span class=\"line\">1月 05 11:53:20 deepin-server-PC exportfs[19319]:   Assuming default behaviour (&#x27;no_subtree_check&#x27;).</span><br><span class=\"line\">1月 05 11:53:20 deepin-server-PC exportfs[19319]:   NOTE: this default has changed since nfs-utils version 1.0.x</span><br><span class=\"line\">1月 05 11:53:21 deepin-server-PC systemd[1]: Started NFS server and services.</span><br><span class=\"line\">deepin-server@deepin-server-PC:~$ </span><br></pre></td></tr></table></figure>\n<p>至此服务端算是配置完成了。</p>\n<h2 id=\"客户端配置\"><a href=\"#客户端配置\" class=\"headerlink\" title=\"客户端配置\"></a>客户端配置</h2><p>客户端主要就是挂载操作，不过挂载nfs的时候同样需要安装客户端软件</p>\n<h3 id=\"客户端安装\"><a href=\"#客户端安装\" class=\"headerlink\" title=\"客户端安装\"></a>客户端安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get install nfs-common</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查看服务端nfs共享信息\"><a href=\"#查看服务端nfs共享信息\" class=\"headerlink\" title=\"查看服务端nfs共享信息\"></a>查看服务端nfs共享信息</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">showmount -e 10.20.13.152</span><br><span class=\"line\">babyfengfjx@babyfengfjx:~$ showmount -e 10.20.13.152</span><br><span class=\"line\">Export list <span class=\"keyword\">for</span> 10.20.13.152:</span><br><span class=\"line\">/home/deepin-server/Documents/NFS文件目录for-test 10.20.*</span><br><span class=\"line\">babyfengfjx@babyfengfjx:~$ </span><br></pre></td></tr></table></figure>\n<h3 id=\"客户端创建挂载目录\"><a href=\"#客户端创建挂载目录\" class=\"headerlink\" title=\"客户端创建挂载目录\"></a>客户端创建挂载目录</h3><p>随便在本地客户端创建一个目录作为NFS挂载目录即可</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo <span class=\"built_in\">mkdir</span> /home/babyfengfjx/Documents/nfsfile/</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"客户端挂载\"><a href=\"#客户端挂载\" class=\"headerlink\" title=\"客户端挂载\"></a>客户端挂载</h3><p>将服务端的NFS共享目录，挂载到本地客户端对应目录即可</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo mount -t nfs 10.20.13.152:/home/deepin-server/Documents/NFS文件目录for-test /home/babyfengfjx/Documents/nfsfile/</span><br></pre></td></tr></table></figure>\n<h3 id=\"查看并传输文件\"><a href=\"#查看并传输文件\" class=\"headerlink\" title=\"查看并传输文件\"></a>查看并传输文件</h3><p>上述操作完成后，此时就可以在客户端对应目录使用NFS存储了，上传新建文件均可以随心所欲。</p>\n<h3 id=\"开机自动挂载\"><a href=\"#开机自动挂载\" class=\"headerlink\" title=\"开机自动挂载\"></a>开机自动挂载</h3><p>写入fstab方法并不推荐，如果NFS挂载失败可能会影响设备正常启动 </p>\n<h4 id=\"写入fstab进行开机自动挂载\"><a href=\"#写入fstab进行开机自动挂载\" class=\"headerlink\" title=\"写入fstab进行开机自动挂载\"></a>写入fstab进行开机自动挂载</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;10.20.13.152:/home/deepin-server/Documents/NFS文件目录for-test /home/babyfengfjx/Documents/nfsfile/ nfs4 defaults 0 0&quot;</span> &gt;&gt; /etc/fstab</span><br><span class=\"line\"> mount -av</span><br></pre></td></tr></table></figure>\n<h4 id=\"通过配置开机自运行脚本\"><a href=\"#通过配置开机自运行脚本\" class=\"headerlink\" title=\"通过配置开机自运行脚本\"></a>通过配置开机自运行脚本</h4><p><strong>原理如下：</strong></p>\n<blockquote>\n<p>新建 &#x2F;etc&#x2F;rc.local 文件<br>这种方法的原理是系统开机后会自动启动 rc-local 服务；<br>rc-local 服务启动后就会自动执行 &#x2F;etc 目录下的 rc.local 脚本；<br>该方法的优点就是不存在第一种方法的三个缺点，脚本执行失败不会出现黑屏弹窗、sleep 不会造成开机黑屏以及执行脚本的用户是 root 用户。 </p>\n</blockquote>\n<p><strong>主要步骤：</strong></p>\n<ol>\n<li>新建 &#x2F;etc&#x2F;rc.local 文件</li>\n<li>粘贴以下模板<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/sh -e</span></span><br><span class=\"line\"><span class=\"comment\"># rc.local</span></span><br><span class=\"line\"><span class=\"comment\"># This script is executed at the end of each multiuser runlevel.</span></span><br><span class=\"line\"><span class=\"comment\"># Make sure that the script will &quot;exit 0&quot; on success or any other</span></span><br><span class=\"line\"><span class=\"comment\"># value on error.</span></span><br><span class=\"line\"><span class=\"comment\"># In order to enable or disable this script just change the execution</span></span><br><span class=\"line\"><span class=\"comment\"># bits.</span></span><br><span class=\"line\"><span class=\"comment\"># By default this script does nothing.</span></span><br><span class=\"line\">01.LitterScript/02.bbsmonitor/bbsmonitor.py &gt;bbs.log 2&gt;&amp;1 &amp;</span><br><span class=\"line\"><span class=\"comment\"># 因为该命令本身就是会以root权限执行，所以不用加sudo</span></span><br><span class=\"line\"><span class=\"built_in\">sleep</span> 5;mount -t nfs 10.20.13.152:/home/deepin-server/Documents/NFS文件目录for-test /home/babyfengfjx/Documents/nfsfile/</span><br><span class=\"line\"><span class=\"built_in\">exit</span> 0</span><br></pre></td></tr></table></figure></li>\n<li>在 exit 0 上方插入你需要自启的命令(一行一个)后保存文件</li>\n<li>给脚本加上 755 权限<br>sudo chmod +755 &#x2F;etc&#x2F;rc.local</li>\n<li>调试脚本(可选)<br>sudo &#x2F;etc&#x2F;rc.local # 使用 sudo 模拟 root 用户开机自启 &#x2F;etc&#x2F;rc.local 文件<br>如果第 5 步模拟启动脚本没有报错，那我们就可以重启电脑看看是否可以成功实现脚本开机自启。重启进入系统后我们可以通过 systemctl status rc-local.service 查看 rc-local 的运行状态，如果结果显示的是 active (exited) 则说明你的脚本已经成功执行，反之如果结果显示 failed,那么你需要检查一下脚本是否哪里有问题。</li>\n</ol>\n<h5 id=\"这里提供可能导致脚本无法正常启动的原因：\"><a href=\"#这里提供可能导致脚本无法正常启动的原因：\" class=\"headerlink\" title=\"这里提供可能导致脚本无法正常启动的原因：\"></a>这里提供可能导致脚本无法正常启动的原因：</h5><p>1、执行脚本的用户不一致<br>由于 rc.local 开机自启的时候是以 root 用户执行的，这里很多人会忽略了一个问题，很多情况下你的命令是必须要普通用户执行的。比如 conky 和虚拟机(用户A建立的VBox和VM Ware虚拟机用户B无法访问)等。<br>假设用户 lolimay 在终端用 VBoxHeadless -s aikuai &amp; 后台启动了虚拟机名 aikuai，那么我们在 rc.local 文件应该用下面这种方式写：<br><code>su - lolimay -c &quot;VBoxHeadless -s aikuai &amp;&quot; # 以 lolimay 用户执行该命令</code><br>2、多余的 sudo<br>前面已经提到 rc.local 开机时是以 root 用户启动的，所以写在 rc.local 文件中命令不需要带有 sudo 前缀(实际上就算你带有了 sudo 前缀也不会产生错误)。<br>3、最佳实践<br>个人建议每当往 rc.local 文件中添加了一个需要自启的命令时，可以先用 sudo &#x2F;etc&#x2F;rc.local 命令模拟一下看看是否能够执行成功(如果执行失败也能够直观地看到出错的原因)，这样能够有效减少你重启电脑来调试的次数。</p>\n"},{"title":"验收测试E2E分析方法","date":"2021-08-20T03:11:34.000Z","_content":"\n\n## 前言\n\n对于验收测试工程师来说，编写验收测试分析和测试用例是一项必须且重要的工作内容，但大多数同学在做验收测试分析及用例编写时，仍旧陷入到传统的分析及用例编写思维中，与内部测试团队所输出的内容并无差异，虽然大家在讲述验收工程师职责或者测试分析思路时，都知道说要编写用户场景用例，可实战过程中仍旧是任性的走老套路，犟的很！ \n\n究其原因，还是没有摆脱传统的测试思维，更多的关注点仍旧在文档中罗列的基本需求点，除了字面上描述出来的东西，很难将自己放在用户角色上去想象体验手头的产品，在验收时，又本着任务的压力，只能优先去完成流程上的一些基本任务：验收测试分析、验收测试用例编写、各种会议评审、输出各类报告…… \n\n上述每一个具体事项实际都只是我们工作实施的一个产物体现，并不是最终的目的，也就是说不仅仅为了去完成一篇分析或者用例的编写，就匆匆忙忙开干，在没有深入理解需求，了解用户痛点，及项目意义的情况下，所有的忙碌都不会产生太高价值，看起来长篇大论的文字表格一堆，但其中蕴含的思维和测试覆盖点却很难达到我们的预期，往往后期需要花费大量的精力去查漏补缺，进行各种优化，算算总投入成本那是极不划算的，而且还觉得自己特忙。\n\n对于团队中每一个同学来讲，每个人都有自己的特长和优势，但也会存在部分同学的确存在以上描述的若干问题，所以也就有了此篇文档，作为个人理解的内容，想要起到抛砖引玉的效果，希望在某些方面能够对大家有所帮助，也许能够通过思维的碰撞产生更加适合当前团队的执行方法和流程。\n\n本文会以通俗易懂偏口语化的风格进行阐述，尽量结合当前项目的实际内容来阐述具体思想，文中所有举例只是为了阐述某种思维方式，请读者不要钻牛角尖，而应该深入扩展理解思维背后的原理，内化成自己的经验和做事方法。\n\n## 导读\n\n本文总体文字比较多，且讲述的内容非常基础，可能都是在各位平常工作中已经在实施的部分，只是做了一个系统的呈现，如果看的过程确有共鸣，则可以快速跳过熟知内容，直接查看“精加工生产E2E验收用例”部分内容； \n\n如果前文中部分内容平常未涉及到，则可以细致去想一下描述中的各问题及思维过程，最好是能转化成自己独特的思维逻辑；\n\n如果文章通篇读起来觉得索然无味，也可以私下进行一些深入的交流（排除语文功底因素），这是我极其希望遇到的场景。\n## 我可以怎么做\n\n- 如果你是一位新同学，或者是从传统测试转做验收测试的，下面的几点内容或许对你有所帮助；\n- 当然如果你是老司机，那也可以看看是否有其他更好的点子可以帮到大家。\n\n\n1. 作为验收工程师，首要任务是先把自己以前的思维做一个冻结，把杯子倒空，忘掉过往的所有荣耀与成就，重新出发；**--调整心态**\n2. 清晰认识自己的职责和责任，做的所有事情都不仅仅只是为了完成上级下达的任务，而是为了某一个目标; **--清晰自己工作的价值**\n>  比如XX项目经过你的验收后，可以拍着胸脯对他人说，已经验收通过没有问题，大胆发布，让用户拿去用吧!\n  或者是经过验收后，发现XX模块有风险，具体风险是XX，可能造成XX影响，建议提前采取XX行动，规避方案是XX，提前告知关注者项目的实际情况，即便是发布后真出现了问题，也做到了未雨绸缪。\n\n3. 接触任何一个项目时，首先是要弄清楚该项目的需求背景，直接接口人就是产品经理，从产品经理这里可以获取到项目的最原始信息，包括项目使用者，使用者的一些特点，此项目能够解决他们什么问题，核心价值具体体现在哪里，产品最差做到什么程度用户也能够接受（逐步剥离可以提炼到核心需求）？所有的这些只为弄清楚背景与用户痛点；\n4. 在了解项目的背景与用户痛点后，接下来的工作就需要始终将这些信息放到制高点，任何的思考行为都为这两点服务，你的模块分析是为了更好的保证用户能够流畅满意的使用，你的用例是为了能更全面的覆盖用户的操作行为，你的执行动作就是将自己当做用户来操作使用这个产品；\n5. 通过上述的信息输入后，就可以开展实际的验收测试分析，这里还是推荐使用思维导图的方式来开展此项工作；\n6. 在思维导图分析完成后，接下来就是用例的转化写作了，转化过程只需要抓住一个核心：思维导图中辛苦分析出来的验证点不要漏掉；\n7. 验收执行阶段工作主要是执行用例，在执行每条用例时，同样需要思考用例编写的本意是要验证什么点，切记无脑执行，往往能够发现用例可优化的地方，或者可扩展验证场景。\n\n## 正题\n\n前面的内容主要是一些铺垫，也就是大家说的鸡汤软文，下文主要从上面列出的几个步骤来描述一下个人理解的验收测试用例的生产过程，用例输出绝对不是直接上来就干的事儿，拿到项目一上来就直接干用例的行为那都是莽夫行为，测试最高价值体现就是你的思维，而对思维的加工最终输出的产物才是思维导图、测试用例这些实际的文档，下面会针对每个步骤进行详细的阐述，希望对大家有所帮助。\n### 下文整体思路会以下图思路开展\n\n![](pictures/e2e_analysis/01FJX.png)\n\n## 用例生产过程\n\n### 所需要的原料\n\n - 此部分内容，主要是列出我们在做一个项目的时候，最好弄清楚我们所需要的输入；\n - 包括我们需要具备的一些能力或者了解的知识点；\n - 当然不是所有列出的东西都一定需要具备或者精通，当前不具备的就可以针对性的去提升学习，以便能在工作中能够轻松应对。\n\n**实物原料：**- 项目需求文档；--必选（哪怕是一句话需求）\n\n- 需求原型；--可选\n\n- 研发概要设计文档；--可选\n- 研发详细设计文档；--可选\n- 项目demo；--可选\n- ……\n\n**思想原料：**- 熟悉软件研发流程；\n> 熟悉软件测试基本理论知识:\n1. 黑盒测试基本方法（等价类、边界值、正交、状态迁移、判定表、错误猜测、……）； \n2. 接口测试、安全测试、性能测试、网络基本知识的了解； \n3. 测试思维导图分析方法； \n4. 用例编写的基本原则，测试用例的八大要素；\n\n### 加工流程\n\n> 通过对上述或者更多的原料进行有序加工，我们的思维产物最终会以具体的思维导图、测试用例体现出来。\n\n#### Step1 深入理解项目背景、用户痛点\n\n**实操步骤**\n\n首先我们在接触到一个新项目时,首要的就是拿到该项目的需求文档,如果没有需求文档就直接找产品经理或者一线人员,甚至是直接用户进行沟通,主要目的就是弄清楚如下几个问题: \n\n1. 这个项目产生的原因是什么?--为什么要做这个项目,有钱任性?做着玩? 主要是为了解决用户什么问题,用户在当前碰到了什么难题需要我们来解围?\n2. 不做这个项目行不行?--市面上有没有现成的解决方案?为什么要我们做这个?我们这个项目的优势在哪里?我们能为用户提供什么核心价值?\n3. 我们的核心用户都是哪些人?都是一些什么样的人?这些人有些什么习惯或者特点?在产品使用上会不会有些特殊癖好或者要求?\n4. 我们是怎么解决用户遇到的这个难题的,当前的需求内容是否能够达到解决用户痛点的目的?\n\n经过上述几个问题的自问或者问他人,你一定会获得一些有用的信息,经过对这些信息的消化和理解,你基本上就具备了与产品经理或者用户等位思考的状态,在此状态下,再结合产品经理编写的现成的背景和痛点问题描述,基本上就真正理解了项目的背景了；\n\n如何确定自己已经理解了当前项目背景呢？\n\n**Check点**\n把这个项目介绍给其他人，能够流畅的按照上述几个问题维度来讲解清楚的话，就说明已经达到要求了。\n\n#### Step2 梳理、挖掘基本需求点\n\n> 这一部分内容大家最熟悉，也是一般人上来就开搞的一步，每个人都能整出一篇“丰满”的思维导图出来，全部展开的时候看起来内容丰富，但很多同学的思维导图内容细看后发现缺乏逻辑，有时候会很全，有时候会遗漏一些内容，实际上就是缺乏一些系统的思维。\n\n实际上我们在做项目或者模块分析时还是有套路可以耍的： 1\n\n首先就是把我们软件质量模型这张牌掏出来，如果能熟练的掌握质量模型的6大特性（功能性、可靠性、易用性、效率、可维护性、可移植性），27个子特性，那你做测试分析可能遗漏的几率是很小的。\n实际上很少人能全部掌握，但你需要做到的是6大特性一定要掌握，每个特性大概对应的是哪些维度要非常清楚，质量模型中的维度需要逐项去做分析覆盖，功能性这块基本是个测试都能做到，但如何把功能性做全做深就又是一个挑战；\n\n**功能特性分析：**\n\n1. 功能特性分析基本占据了80%以上的内容，也是我们需要花费80%精力去做好的部分，看起来最简单的部分，也是最难的部分;\n2. 你需要深入理解项目背景和用户痛点，需要了解需求文档中提及的每一个模块功能，以及模块与模块之间的联系；\n3. 需要在没有原型的基础上在脑海里自己勾勒出产品界面的雏形，想象各个功能模块之间的跳转逻辑以及依赖关系；\n4. 通过对SE/开发编写的概要设计、详细设计的仔细研读，了解每个模块的具体后台实现，来挖掘隐藏的测试点和逻辑联系；--这一步至少50%的测试人员做不到，很多人无法理解开发的后台实现逻辑，也就不可能知道该实现可能存在的问题，自然就不可能挖掘出这种隐藏的测试点，往往代码的缺陷就来自于这里，因为开发编码实际上就是把他的思维以代码的方式去呈现出来，那开发自己的想法都可能有问题，我们做测试的不去识别他的想法缺陷，再到后面去弥补，你肯定已经想到这个地方的成本有多高。所以能够落地去做的事情就是仔细研读开发编写的详细设计文档，技术这块不懂的就去查资料去问开发，直到理解他的实现逻辑是什么，在这个过程中你就会找到很多隐藏的测试点，从而能够丰富你的功能分析点。\n5. 对于解决方案类产品（B/S架构），B/S类架构项目都是分前后台的，往往测试分析的时候大家只会去关注前台的显示，文案，按钮这些基本肉眼可见的东西，对于后台数据库的内容往往“视而不见”，在理解开发详细设计时，就要同时清楚他们的数据表设计内容，了解表与表之间的关联关系，字段的具体含义，前端数据获取的地方，以此就非常容易识别前台代码是否写死，是否是按照约定的逻辑来处理加工数据的，也就能提早发现一些设计、实现上不合理的地方。\n\n**思维导图的输出**\n\n>  通过上面的思路分析后，我们就能输出80%的思维导图分析内容，也就抓住了这个项目的80%的测试点。\n\n此时你完成的思维导图大概应该是这个样子：\n![](pictures/e2e_analysis/022FJX.png)\n\n 完成80%内容后，剩下的把其他五大特性的内容进行完善即可，具体每个特性所体现的内容请大家自行学习，并转化成项目中可实施的测试点 此部分完成后思维导图大致会是下面的结构，能够确保质量模型维度的全覆盖，那测试点的梳理基本就完成95%了。\n\n![](pictures/e2e_analysis/03FJX.png)\n\n完成上述测试分析后，实际上我们还有一个很重要的维度容易忽略，那就是异常场景，当然很多同学也容易特立独行，在上面的分析过程中就投入大量精力去搞异常场景，显得自己考虑问题的角度比较深入或者独特。\n\n想法是好的，但这个不是我们主要发力的点，你基本业务流都没整明白，直接到这种容易“钻牛角尖”的胡同里，很容易走火入魔。 \n\n建议上来说，在完成上面的所有分析后，再把自己脱离出来，去思考一些异常场景的补充，此时你的角色就变换成一个“破坏”者，以你能想到的，在日常使用过程中可能发生的一些“可怕”场景都用上来，如果符合当前项目的操作入口，那么就是你异常场景的突破口。\n\n**打比方（也不知道比方会不会怪我老打他）**： \n\n  1. 使用过程中，直接关闭程序（数据都没保存呢……）--程序是否能再次正常启动，数据是否可以恢复到之前打开的状态；\n  2. 直接暴力切断电源，系统重启后，程序是否正常运行，数据是否恢复之前状态；\n  3. 直接关闭浏览器，提交的数据是否能下次恢复，程序是否能拦截并给出提示还有数据未保存；\n  4. 服务器直接断电，被手动关闭，重启服务器后，服务是否能正常拉起，恢复后台服务能力，数据是否均正常；\n  5. 对于存在输入的地方，我们可做的骚操作很多，这里边界值的上点和外点、非等价类的输入就是我们做异常测试的发力点，会不会因为我们的一些上点、内点、非等价类输入，或者特殊字符输入，或者SQL注入的内容输入造成程序崩溃，或者安全漏洞等等；\n  6. 对于图谋不轨的人，我们还需要考虑安全问题，是否存在明文传输（密码全程是否加密），通过浏览器F12调试模式查看接口的传参过程，通过后台数据库查看具体的密码存储形式，通过后台日志查看敏感信息是否脱敏处理……\n  7. 数据传输过程中，直接断开网络，程序下次是否能正常重新处理数据；\n  8. 上传非法格式，非法超大文件前台是否能正常校验拦截，通过接口直接上传，后台是否能正常拦截；\n  9. 程序提供的配置，逻辑上是否有做依赖控制，是否存在前后冲突的配置可以设置，导致部分配置不生效；\n  10. 数据的多次重复提交是否会存在异常；\n  11. 数据的新建=》删除=》再建，是否能正常处理；\n  12. 数据的提交更改后，下次进入展示，回显是否正确；\n  13. 存在数据记忆的场景，是否能够正常记忆；\n  14. 存在回退的场景，数据是否能够正常回滚无残留；\n  15. 存在数据迁移的场景，数据是否能够正常迁移，且兼容新版本的展示结构；\n  16. 存在数据结构升级的场景，是否能向下兼容老旧数据，或者正常转换旧数据结构，从而正常展示在前端；\n  17. 存在可以向后台提交数据的按钮时，是否可以快速频繁的点击提交，可能导致数据异常；\n  18. 存在单选、复选、全选、全不选的场景时，频繁的选择状态切换，选择逻辑是否处理正确，选择数据对象是否准确；\n  19. 存在批量新建、上传、删除等场景时，对于单条数据的批量操作，多条数据的批量操作，是否能正确处理；\n  20. 存在大数据量场景时，需要重点关注接口数据的处理准确性，在实现规格内，提交的大数据请求处理，是否能准确且高效的完成。\n\n此时你的思维导图大概是这个样子：\n\n![](pictures/e2e_analysis/04FJX.png)\n\n#### Step3 精加工生产E2E验收用例\n\n> - 通过上面的生产加工后，想必大家觉得分析工作已经完成了，可以说作为内部测试在完成上面工作后，测试分析工作的确可以告一段落，我也可以打包票说只要你能按照上面提到的维度，每个维度都做出了深入的思考与分析，那你的测试分析是比较完善的；\n> - 但作为验收工程师，最核心的部分还没开始，那就是E2E场景，也就是说，到现在为止，验收工程师的核心工作才刚刚开始……\n\n实际上前面的工作都已经做的比较全了，剩下的部分只需要结合部分思维来串联一下就可以完成，此刻你就变身为一个串珠的人儿了，把你精心准备好的“珍珠”按照某种方式串起来，做成一条条“项链”，这些“项链”就是我们验收的E2E场景用例，其主要会涉及到如下方面内容：\n\n1. 理解何为用户场景？\n> 用户日常使用时，使用产品的操作路径，可能进行的操作流。\n\n2. 写这些E2E场景的意义是什么？ \n尽可能全的模拟覆盖用户日常会操作的路径，提前发现可能存在的问题，确认产品是否能够满足用户日常使用，弥补在模块测试中对模块之间的关联性测试覆盖不足的问题。\n\n3. 用户场景的来源有哪些？ \n- 通过功能点分析，站在用户角度采用状态机思路编写E2E场景用例--你就是用户； \n- 通过分析一线人员提供的问题信息，获得用户使用的场景信息--真实使用者的反馈； \n- 通过一线人员提供的用户群体特征，使用产品的场景等信息，通过关联分析构建用户场景信息--对真实使用者的模拟分析，有时候用户自己都不知道自己需要的是什么，那我们就需要替用户去思考这个问题，如同乔布斯说的：在我发布苹果手机的时候，用户才知道这就是他们想要的。\n\n4. 什么叫做端到端（E2E）场景用例？ \n不同于传统测试过程中仅针对某一个功能点进行深入验证的用例，而是尽可能将多个功能点通过某种思路（如状态机）有目的设计成一连串的操作流，形成的一种用例形式。\n\n5. 场景用例的编写粒度该如何把控？ \n\t在编写这类用例时，很多同学会陷入两难境地，在测试步骤中，不知道编写粒度该控制到哪个层次，写太细了跟传统用例没区别，写太粗了又担心不具备可执行性； \n\t- 实际上这个问题很难按照某种要求去规定，主要把握几个原则： \n\t1.  场景用例编写的前提，一定是内部测试已经有非常详尽的功能用例，覆盖每个功能点，确保了基本功能是没有问题的；--如果担心这个地方有遗漏，说明我们内部测试需要改进，并且在测试执行阶段，验收工程师也需要有能力进行适当发散，做事不能眉毛胡子一把抓，每个阶段的重点核心不同，该放的时候要放，该收的地方得收。 \n\t2. 基于上述前提，就知道我们的场景用例不会写的太细，更多的是一种操作行为流的描述，可以做的是，在每一个操作行为后，预期结果我们尽可能的描述全面； \n\t3. 每一条用例都需要有一个核心目的，要想清楚该用例的核心是为了验证或者保证什么功能，那么用例的步骤描述都需要围绕这个核心去开展，避免一条用例中混杂不同的场景和行为路径，会导致用例缺乏目标，也容易产生冗余用例内容； \n\t4. 用例粒度确保能够清晰引导执行者完成步骤描述内容，在存在依赖的部分交代清楚依赖获取的方式，预期结果明确无歧义； \n\t5. 在编写过程中发现用例步骤太多（超过十几步）,那就需要针对该路径做分离处理，可以分成多条用例来覆盖，避免单条用例步骤过于复杂，可能对后续的执行带来不必要的麻烦；\n\t\n6. 我该如何知道E2E用例步骤该从哪里开始又从哪里结束？ \n\t- 此行为实际上也没有固定的公式可以参考，仍旧是结合部分经验来完成： \n\t1. 把握一个核心目的，场景用例内容必须包含我们前面分析的所有功能点；--如果没有包含在内，则问自己前面的分析是否有必要，如果觉得没必要就裁剪前面的分析； \n\t2. 用例开始起点一般可以采取某个功能模块的入口； \n\t3. 用例的结束就不一定会有唯一的结束点，因为从起点开始后，可能有多个分支均会走向结束，此时则可以分成多条用例来覆盖（对于前面覆盖的步骤则可以作为前置条件，以此精简其他分支的用例内容）； \n\t4. 有些分支走下去发现是一个死循环，无法有效闭环，那此时我们至少需要覆盖以此完整的循环，保证各个状态之间的转换路径均需要覆盖（下文会采用状态机的方式做阐述）\n\n我们先来了解一个概念：\"状态机\"，这个将对我们编写E2E用例有较大帮助，场景用例编写的总体思路我们将采用状态机的套路来进行，所以我们需要先了解这个概念： \n\n#### 状态机含义\n\n> 状态机就是有限状态自动机的简称，是现实事物运行规则抽象而成的一个数学模型 状态机有4 个要素: 现态、条件、动作、次态。 这样的归纳，主要是出于对状态机的内在因果关系的考虑: \n- “现态”和 “条件” 是因，\n> - “动作”和 “次态” 是果。\n\n1. 现态：是指当前所处的状态。\n2. 条件：又称为 “事件”，当一个条件被满足，将会触发一个动作，或者执行一次状态的迁移。\n3. 动作：条件满足后执行的动作。动作执行完毕后，可以迁移到新的状态，也可以仍旧保持原状态。动作不是必需的，当条件满足后，也可以不执任何动作，直接迁移到新状态。\n4. 次态：条件满足后要迁往的新状态。“次态”是相对于 “现态” 而言的，“次态”一旦被激活，就转变成新的 “现态” 了。\n\n**转换状态示意图：**\n下面就是对水在不同状态之间的转换示意图 - 假如水蒸气是现态，在施加降温这个条件后，会发生凝结动作，从而变成次态的液态水；\n> - 当前液态水是现态，在施加降温这个条件后，会发生凝固动作，从而变成次态的冰；\n> - 相反在施加加温这个条件后，冰又能变成液态水，在继续加温后，又能变成水蒸气。\n\n![image-20210903095132477](pictures/e2e_analysis/05FJX.png)\n\n- 说人话呢这个东西就是某物体、某程序功能，会被不同的条件动作触发产生变化，从而形成一种新的状态或者结果（也可能保持不变）；\n- 一般来说程序中的这些变化的状态，肯定是有限的，所以我们也叫有限状态机，正因为是有限的我们才有分析的可能性；\n- 既然是有限的状态，那我们就可以将任何程序采用此思想，将其抽象出一个个的状态；\n- 然后提炼出触发的各种条件，通过在不同状态之间施加不同的触发条件，就能让这些状态不断变化，从而完成我们对程序的不同路径的覆盖；\n- 通过上面的示意图我们也是能很容易去理解这个点的，之所以E2E用例的编写需要去采用这种思维呢，主要就是模拟用户日常可能会触发的各种点，只要我们能触碰到他们会触发的各种操作行为，了解到他们企图达到的最终状态，那我们的验收用例就是有意义的。\n\n> 将上面水的状态变化类比到我们软件产品中来，就是这么个意思：\n- 拿到某个功能模块时，可以选择一个最基础的入口作为起点（现态）；\n> - 确定起点后，可以分析有哪些条件可以来施加，也就是从这个起点开始，有哪些后续的功能按钮可以操作？\n> - 分别操作这些功能按钮后，会跳转到哪个模块或者页面（次态）？\n> - 依照上述思路，针对这些次态继续分析可以施加的条件（可点击的功能按钮），继续往下发觉后续的状态；\n> - 当分析到最后发现已经没有新的状态可以产生了，那就说明这条路径已经走到头，此时就可以结束了；\n> - 如果发现不同状态之间会存在循环，那么我们可以保证完成一次循环即可（比如：固态=》液态=》气态=》液态=》固态）；\n> - 如果发现在某一个次态时，会产生多分支时，那么就需要单独分析每个分支，直到每个分支都走到头才结束；\n> - 针对不同的分支我们就可以梳理出不同的场景用例来。\n\n#### 从一线人员获取灵感\n\n> 大多数同学可能觉得到这里任务就该结束了，实际上上面的所有行为都是我们自己通过功能分析构造的一些场景，仍旧会存在遗漏点，每个人的思维都是存在局限性的，如果条件允许的话，我们可以进一步与一线人员甚至直接用户进行交流，来获取其真实日常是如何开展的，从而获取到最为真实客观的使用场景信息。\n\n- 获取一线用户的真实场景信息并不是所有项目都具备的条件，但条件具备时就一定要充分利用起来；\n- 如果没有此条件，我们也可以主动创造，可以主动申请出差客户现场，进行有效信息的获取；\n- 与一线人员、产品经理进行日常有效交流，从交谈中挖掘有效信息，都是可以帮助到我们丰富场景的；\n- 通过上述各种途径获取到的信息，则可以转化成用例，作为有效的覆盖条件。\n\n#### 过程验收&amp;抽验的遗漏补充\n\n> 怎么还没完没了了？\n到此还没结束？\n当然，因为前期我们的所有行为都是纸上谈兵（做的策略分析），老话说的好，纸上得来终觉浅，绝知此事要躬行，事情还得自己“弯着腰”去做啊…… \n\n在验收的整个生命周期中，我们的时间跨度是非常大的，在前期用例全部编写完成后，还有很长一段时间，此期间伴随着迭代版本的提测，内部测试的测试，验收的抽验，等等过程，\n\n此阶段我们是有机会接触真实的产品形态，也能够去实践之前的策略性动作，在这个过程中，是能够发现一些遗漏点，或者过程性不完善的地方。\n\n- 在过程验收或者抽验阶段，发现的一些遗漏点，需要及时的补充到场景用例中；\n- 发现的一些不合理的地方，需要及时优化调整用例的执行步骤等内容；\n- 对于内部测试发现的BUG分布较多，已经识别风险较大的模块，则需要针对性的增加用例密度，提高用例覆盖粒度，做出针对性预防；--BUG都是集中产生的，容易长虫子的地方，他就会成批成批的长，不用去怀疑这个规律；\n- 过程中发现内部测试狙击不足的模块或者方向，也需要我们针对性的提高预防措施，增加用例密度，明知道前面的兄弟没守住，已经有鬼子进村了，还不做好彻底的预防，那是我们的失职；\n- 上述的策略都是在实战中逐步调整完善，进一步巩固我们的武器装备，布好天罗地网，从而在验收阶段真正做到胸有成竹。\n\n此时思维导图框架大概是这么个样子：\n\n![](pictures/e2e_analysis/06FJX.png)\n#### 转换成用例\n\n实际上在上面过程中就有可能已经完成了用例的转换，所以此阶段并不一定是在最后，我们对于用例的补充和思维导图的维护应该是同步的，避免用例有更新，思维导图有缺失，真正在后续去评审和讲解时都是拿思维导图来展示，用例很难逐条去评审，拿用例评审是无法有效知道是否有遗漏，只能评审用例的规范与否，但思维导图则可以方便点 的查看是否针对某个模块有遗漏的场景。\n\n如何编写转换成最终的用例则不在此文中做讲解，针对用例的编写可以单独进行分享，此文默认大家都能够有效的转换编写用例。\n## 质检\n\n> 在实际生产过程中，都有一个质检环节，我们的工作也不例外，此环节与各位的职位级别、能力无关，再牛皮的人都有出错的时候，那么质检的这个动作我们一定要实施。\n\n- 实际上就是我们的评审过程，当局者迷，有时候就会迷在自己的思维中，而其他评审角色就能够从一些意想不到的角度提出遗漏和不足的地方，以便帮助我们进一步完善分析和用例内容；\n- 永远不要迷恋自己的想法，不要相信自己的分析是完善的，在分析过程中，永远多敲一个回车，预留待填写的空间……\n- 有效的评审能够避免后期的不足，重视此过程是对我们对项目的负责。\n\n## 收工\n此次故事就讲到这里~ \n如果你已经睡着了，我会感到很抱歉，没有吸引到你~ \n如果你感觉有收获，我会感到很欣慰，我真的可以帮助到你~ \n如果你有好的建议提交给我，我会感到很高兴，你可以帮助我进一步成长~ \n如果你有更好的思维与我分享，我会感到兴奋，我想与你把酒言欢~\n\n\n\n\n\n\n\n","source":"_posts/e2e_analysis.md","raw":"---\ntitle: 验收测试E2E分析方法\ncategories: \n- 测试理论\ntags:\n- 测试理论\n- 验收测试\ndate: 2021-08-20 11:11:34\n---\n\n\n## 前言\n\n对于验收测试工程师来说，编写验收测试分析和测试用例是一项必须且重要的工作内容，但大多数同学在做验收测试分析及用例编写时，仍旧陷入到传统的分析及用例编写思维中，与内部测试团队所输出的内容并无差异，虽然大家在讲述验收工程师职责或者测试分析思路时，都知道说要编写用户场景用例，可实战过程中仍旧是任性的走老套路，犟的很！ \n\n究其原因，还是没有摆脱传统的测试思维，更多的关注点仍旧在文档中罗列的基本需求点，除了字面上描述出来的东西，很难将自己放在用户角色上去想象体验手头的产品，在验收时，又本着任务的压力，只能优先去完成流程上的一些基本任务：验收测试分析、验收测试用例编写、各种会议评审、输出各类报告…… \n\n上述每一个具体事项实际都只是我们工作实施的一个产物体现，并不是最终的目的，也就是说不仅仅为了去完成一篇分析或者用例的编写，就匆匆忙忙开干，在没有深入理解需求，了解用户痛点，及项目意义的情况下，所有的忙碌都不会产生太高价值，看起来长篇大论的文字表格一堆，但其中蕴含的思维和测试覆盖点却很难达到我们的预期，往往后期需要花费大量的精力去查漏补缺，进行各种优化，算算总投入成本那是极不划算的，而且还觉得自己特忙。\n\n对于团队中每一个同学来讲，每个人都有自己的特长和优势，但也会存在部分同学的确存在以上描述的若干问题，所以也就有了此篇文档，作为个人理解的内容，想要起到抛砖引玉的效果，希望在某些方面能够对大家有所帮助，也许能够通过思维的碰撞产生更加适合当前团队的执行方法和流程。\n\n本文会以通俗易懂偏口语化的风格进行阐述，尽量结合当前项目的实际内容来阐述具体思想，文中所有举例只是为了阐述某种思维方式，请读者不要钻牛角尖，而应该深入扩展理解思维背后的原理，内化成自己的经验和做事方法。\n\n## 导读\n\n本文总体文字比较多，且讲述的内容非常基础，可能都是在各位平常工作中已经在实施的部分，只是做了一个系统的呈现，如果看的过程确有共鸣，则可以快速跳过熟知内容，直接查看“精加工生产E2E验收用例”部分内容； \n\n如果前文中部分内容平常未涉及到，则可以细致去想一下描述中的各问题及思维过程，最好是能转化成自己独特的思维逻辑；\n\n如果文章通篇读起来觉得索然无味，也可以私下进行一些深入的交流（排除语文功底因素），这是我极其希望遇到的场景。\n## 我可以怎么做\n\n- 如果你是一位新同学，或者是从传统测试转做验收测试的，下面的几点内容或许对你有所帮助；\n- 当然如果你是老司机，那也可以看看是否有其他更好的点子可以帮到大家。\n\n\n1. 作为验收工程师，首要任务是先把自己以前的思维做一个冻结，把杯子倒空，忘掉过往的所有荣耀与成就，重新出发；**--调整心态**\n2. 清晰认识自己的职责和责任，做的所有事情都不仅仅只是为了完成上级下达的任务，而是为了某一个目标; **--清晰自己工作的价值**\n>  比如XX项目经过你的验收后，可以拍着胸脯对他人说，已经验收通过没有问题，大胆发布，让用户拿去用吧!\n  或者是经过验收后，发现XX模块有风险，具体风险是XX，可能造成XX影响，建议提前采取XX行动，规避方案是XX，提前告知关注者项目的实际情况，即便是发布后真出现了问题，也做到了未雨绸缪。\n\n3. 接触任何一个项目时，首先是要弄清楚该项目的需求背景，直接接口人就是产品经理，从产品经理这里可以获取到项目的最原始信息，包括项目使用者，使用者的一些特点，此项目能够解决他们什么问题，核心价值具体体现在哪里，产品最差做到什么程度用户也能够接受（逐步剥离可以提炼到核心需求）？所有的这些只为弄清楚背景与用户痛点；\n4. 在了解项目的背景与用户痛点后，接下来的工作就需要始终将这些信息放到制高点，任何的思考行为都为这两点服务，你的模块分析是为了更好的保证用户能够流畅满意的使用，你的用例是为了能更全面的覆盖用户的操作行为，你的执行动作就是将自己当做用户来操作使用这个产品；\n5. 通过上述的信息输入后，就可以开展实际的验收测试分析，这里还是推荐使用思维导图的方式来开展此项工作；\n6. 在思维导图分析完成后，接下来就是用例的转化写作了，转化过程只需要抓住一个核心：思维导图中辛苦分析出来的验证点不要漏掉；\n7. 验收执行阶段工作主要是执行用例，在执行每条用例时，同样需要思考用例编写的本意是要验证什么点，切记无脑执行，往往能够发现用例可优化的地方，或者可扩展验证场景。\n\n## 正题\n\n前面的内容主要是一些铺垫，也就是大家说的鸡汤软文，下文主要从上面列出的几个步骤来描述一下个人理解的验收测试用例的生产过程，用例输出绝对不是直接上来就干的事儿，拿到项目一上来就直接干用例的行为那都是莽夫行为，测试最高价值体现就是你的思维，而对思维的加工最终输出的产物才是思维导图、测试用例这些实际的文档，下面会针对每个步骤进行详细的阐述，希望对大家有所帮助。\n### 下文整体思路会以下图思路开展\n\n![](pictures/e2e_analysis/01FJX.png)\n\n## 用例生产过程\n\n### 所需要的原料\n\n - 此部分内容，主要是列出我们在做一个项目的时候，最好弄清楚我们所需要的输入；\n - 包括我们需要具备的一些能力或者了解的知识点；\n - 当然不是所有列出的东西都一定需要具备或者精通，当前不具备的就可以针对性的去提升学习，以便能在工作中能够轻松应对。\n\n**实物原料：**- 项目需求文档；--必选（哪怕是一句话需求）\n\n- 需求原型；--可选\n\n- 研发概要设计文档；--可选\n- 研发详细设计文档；--可选\n- 项目demo；--可选\n- ……\n\n**思想原料：**- 熟悉软件研发流程；\n> 熟悉软件测试基本理论知识:\n1. 黑盒测试基本方法（等价类、边界值、正交、状态迁移、判定表、错误猜测、……）； \n2. 接口测试、安全测试、性能测试、网络基本知识的了解； \n3. 测试思维导图分析方法； \n4. 用例编写的基本原则，测试用例的八大要素；\n\n### 加工流程\n\n> 通过对上述或者更多的原料进行有序加工，我们的思维产物最终会以具体的思维导图、测试用例体现出来。\n\n#### Step1 深入理解项目背景、用户痛点\n\n**实操步骤**\n\n首先我们在接触到一个新项目时,首要的就是拿到该项目的需求文档,如果没有需求文档就直接找产品经理或者一线人员,甚至是直接用户进行沟通,主要目的就是弄清楚如下几个问题: \n\n1. 这个项目产生的原因是什么?--为什么要做这个项目,有钱任性?做着玩? 主要是为了解决用户什么问题,用户在当前碰到了什么难题需要我们来解围?\n2. 不做这个项目行不行?--市面上有没有现成的解决方案?为什么要我们做这个?我们这个项目的优势在哪里?我们能为用户提供什么核心价值?\n3. 我们的核心用户都是哪些人?都是一些什么样的人?这些人有些什么习惯或者特点?在产品使用上会不会有些特殊癖好或者要求?\n4. 我们是怎么解决用户遇到的这个难题的,当前的需求内容是否能够达到解决用户痛点的目的?\n\n经过上述几个问题的自问或者问他人,你一定会获得一些有用的信息,经过对这些信息的消化和理解,你基本上就具备了与产品经理或者用户等位思考的状态,在此状态下,再结合产品经理编写的现成的背景和痛点问题描述,基本上就真正理解了项目的背景了；\n\n如何确定自己已经理解了当前项目背景呢？\n\n**Check点**\n把这个项目介绍给其他人，能够流畅的按照上述几个问题维度来讲解清楚的话，就说明已经达到要求了。\n\n#### Step2 梳理、挖掘基本需求点\n\n> 这一部分内容大家最熟悉，也是一般人上来就开搞的一步，每个人都能整出一篇“丰满”的思维导图出来，全部展开的时候看起来内容丰富，但很多同学的思维导图内容细看后发现缺乏逻辑，有时候会很全，有时候会遗漏一些内容，实际上就是缺乏一些系统的思维。\n\n实际上我们在做项目或者模块分析时还是有套路可以耍的： 1\n\n首先就是把我们软件质量模型这张牌掏出来，如果能熟练的掌握质量模型的6大特性（功能性、可靠性、易用性、效率、可维护性、可移植性），27个子特性，那你做测试分析可能遗漏的几率是很小的。\n实际上很少人能全部掌握，但你需要做到的是6大特性一定要掌握，每个特性大概对应的是哪些维度要非常清楚，质量模型中的维度需要逐项去做分析覆盖，功能性这块基本是个测试都能做到，但如何把功能性做全做深就又是一个挑战；\n\n**功能特性分析：**\n\n1. 功能特性分析基本占据了80%以上的内容，也是我们需要花费80%精力去做好的部分，看起来最简单的部分，也是最难的部分;\n2. 你需要深入理解项目背景和用户痛点，需要了解需求文档中提及的每一个模块功能，以及模块与模块之间的联系；\n3. 需要在没有原型的基础上在脑海里自己勾勒出产品界面的雏形，想象各个功能模块之间的跳转逻辑以及依赖关系；\n4. 通过对SE/开发编写的概要设计、详细设计的仔细研读，了解每个模块的具体后台实现，来挖掘隐藏的测试点和逻辑联系；--这一步至少50%的测试人员做不到，很多人无法理解开发的后台实现逻辑，也就不可能知道该实现可能存在的问题，自然就不可能挖掘出这种隐藏的测试点，往往代码的缺陷就来自于这里，因为开发编码实际上就是把他的思维以代码的方式去呈现出来，那开发自己的想法都可能有问题，我们做测试的不去识别他的想法缺陷，再到后面去弥补，你肯定已经想到这个地方的成本有多高。所以能够落地去做的事情就是仔细研读开发编写的详细设计文档，技术这块不懂的就去查资料去问开发，直到理解他的实现逻辑是什么，在这个过程中你就会找到很多隐藏的测试点，从而能够丰富你的功能分析点。\n5. 对于解决方案类产品（B/S架构），B/S类架构项目都是分前后台的，往往测试分析的时候大家只会去关注前台的显示，文案，按钮这些基本肉眼可见的东西，对于后台数据库的内容往往“视而不见”，在理解开发详细设计时，就要同时清楚他们的数据表设计内容，了解表与表之间的关联关系，字段的具体含义，前端数据获取的地方，以此就非常容易识别前台代码是否写死，是否是按照约定的逻辑来处理加工数据的，也就能提早发现一些设计、实现上不合理的地方。\n\n**思维导图的输出**\n\n>  通过上面的思路分析后，我们就能输出80%的思维导图分析内容，也就抓住了这个项目的80%的测试点。\n\n此时你完成的思维导图大概应该是这个样子：\n![](pictures/e2e_analysis/022FJX.png)\n\n 完成80%内容后，剩下的把其他五大特性的内容进行完善即可，具体每个特性所体现的内容请大家自行学习，并转化成项目中可实施的测试点 此部分完成后思维导图大致会是下面的结构，能够确保质量模型维度的全覆盖，那测试点的梳理基本就完成95%了。\n\n![](pictures/e2e_analysis/03FJX.png)\n\n完成上述测试分析后，实际上我们还有一个很重要的维度容易忽略，那就是异常场景，当然很多同学也容易特立独行，在上面的分析过程中就投入大量精力去搞异常场景，显得自己考虑问题的角度比较深入或者独特。\n\n想法是好的，但这个不是我们主要发力的点，你基本业务流都没整明白，直接到这种容易“钻牛角尖”的胡同里，很容易走火入魔。 \n\n建议上来说，在完成上面的所有分析后，再把自己脱离出来，去思考一些异常场景的补充，此时你的角色就变换成一个“破坏”者，以你能想到的，在日常使用过程中可能发生的一些“可怕”场景都用上来，如果符合当前项目的操作入口，那么就是你异常场景的突破口。\n\n**打比方（也不知道比方会不会怪我老打他）**： \n\n  1. 使用过程中，直接关闭程序（数据都没保存呢……）--程序是否能再次正常启动，数据是否可以恢复到之前打开的状态；\n  2. 直接暴力切断电源，系统重启后，程序是否正常运行，数据是否恢复之前状态；\n  3. 直接关闭浏览器，提交的数据是否能下次恢复，程序是否能拦截并给出提示还有数据未保存；\n  4. 服务器直接断电，被手动关闭，重启服务器后，服务是否能正常拉起，恢复后台服务能力，数据是否均正常；\n  5. 对于存在输入的地方，我们可做的骚操作很多，这里边界值的上点和外点、非等价类的输入就是我们做异常测试的发力点，会不会因为我们的一些上点、内点、非等价类输入，或者特殊字符输入，或者SQL注入的内容输入造成程序崩溃，或者安全漏洞等等；\n  6. 对于图谋不轨的人，我们还需要考虑安全问题，是否存在明文传输（密码全程是否加密），通过浏览器F12调试模式查看接口的传参过程，通过后台数据库查看具体的密码存储形式，通过后台日志查看敏感信息是否脱敏处理……\n  7. 数据传输过程中，直接断开网络，程序下次是否能正常重新处理数据；\n  8. 上传非法格式，非法超大文件前台是否能正常校验拦截，通过接口直接上传，后台是否能正常拦截；\n  9. 程序提供的配置，逻辑上是否有做依赖控制，是否存在前后冲突的配置可以设置，导致部分配置不生效；\n  10. 数据的多次重复提交是否会存在异常；\n  11. 数据的新建=》删除=》再建，是否能正常处理；\n  12. 数据的提交更改后，下次进入展示，回显是否正确；\n  13. 存在数据记忆的场景，是否能够正常记忆；\n  14. 存在回退的场景，数据是否能够正常回滚无残留；\n  15. 存在数据迁移的场景，数据是否能够正常迁移，且兼容新版本的展示结构；\n  16. 存在数据结构升级的场景，是否能向下兼容老旧数据，或者正常转换旧数据结构，从而正常展示在前端；\n  17. 存在可以向后台提交数据的按钮时，是否可以快速频繁的点击提交，可能导致数据异常；\n  18. 存在单选、复选、全选、全不选的场景时，频繁的选择状态切换，选择逻辑是否处理正确，选择数据对象是否准确；\n  19. 存在批量新建、上传、删除等场景时，对于单条数据的批量操作，多条数据的批量操作，是否能正确处理；\n  20. 存在大数据量场景时，需要重点关注接口数据的处理准确性，在实现规格内，提交的大数据请求处理，是否能准确且高效的完成。\n\n此时你的思维导图大概是这个样子：\n\n![](pictures/e2e_analysis/04FJX.png)\n\n#### Step3 精加工生产E2E验收用例\n\n> - 通过上面的生产加工后，想必大家觉得分析工作已经完成了，可以说作为内部测试在完成上面工作后，测试分析工作的确可以告一段落，我也可以打包票说只要你能按照上面提到的维度，每个维度都做出了深入的思考与分析，那你的测试分析是比较完善的；\n> - 但作为验收工程师，最核心的部分还没开始，那就是E2E场景，也就是说，到现在为止，验收工程师的核心工作才刚刚开始……\n\n实际上前面的工作都已经做的比较全了，剩下的部分只需要结合部分思维来串联一下就可以完成，此刻你就变身为一个串珠的人儿了，把你精心准备好的“珍珠”按照某种方式串起来，做成一条条“项链”，这些“项链”就是我们验收的E2E场景用例，其主要会涉及到如下方面内容：\n\n1. 理解何为用户场景？\n> 用户日常使用时，使用产品的操作路径，可能进行的操作流。\n\n2. 写这些E2E场景的意义是什么？ \n尽可能全的模拟覆盖用户日常会操作的路径，提前发现可能存在的问题，确认产品是否能够满足用户日常使用，弥补在模块测试中对模块之间的关联性测试覆盖不足的问题。\n\n3. 用户场景的来源有哪些？ \n- 通过功能点分析，站在用户角度采用状态机思路编写E2E场景用例--你就是用户； \n- 通过分析一线人员提供的问题信息，获得用户使用的场景信息--真实使用者的反馈； \n- 通过一线人员提供的用户群体特征，使用产品的场景等信息，通过关联分析构建用户场景信息--对真实使用者的模拟分析，有时候用户自己都不知道自己需要的是什么，那我们就需要替用户去思考这个问题，如同乔布斯说的：在我发布苹果手机的时候，用户才知道这就是他们想要的。\n\n4. 什么叫做端到端（E2E）场景用例？ \n不同于传统测试过程中仅针对某一个功能点进行深入验证的用例，而是尽可能将多个功能点通过某种思路（如状态机）有目的设计成一连串的操作流，形成的一种用例形式。\n\n5. 场景用例的编写粒度该如何把控？ \n\t在编写这类用例时，很多同学会陷入两难境地，在测试步骤中，不知道编写粒度该控制到哪个层次，写太细了跟传统用例没区别，写太粗了又担心不具备可执行性； \n\t- 实际上这个问题很难按照某种要求去规定，主要把握几个原则： \n\t1.  场景用例编写的前提，一定是内部测试已经有非常详尽的功能用例，覆盖每个功能点，确保了基本功能是没有问题的；--如果担心这个地方有遗漏，说明我们内部测试需要改进，并且在测试执行阶段，验收工程师也需要有能力进行适当发散，做事不能眉毛胡子一把抓，每个阶段的重点核心不同，该放的时候要放，该收的地方得收。 \n\t2. 基于上述前提，就知道我们的场景用例不会写的太细，更多的是一种操作行为流的描述，可以做的是，在每一个操作行为后，预期结果我们尽可能的描述全面； \n\t3. 每一条用例都需要有一个核心目的，要想清楚该用例的核心是为了验证或者保证什么功能，那么用例的步骤描述都需要围绕这个核心去开展，避免一条用例中混杂不同的场景和行为路径，会导致用例缺乏目标，也容易产生冗余用例内容； \n\t4. 用例粒度确保能够清晰引导执行者完成步骤描述内容，在存在依赖的部分交代清楚依赖获取的方式，预期结果明确无歧义； \n\t5. 在编写过程中发现用例步骤太多（超过十几步）,那就需要针对该路径做分离处理，可以分成多条用例来覆盖，避免单条用例步骤过于复杂，可能对后续的执行带来不必要的麻烦；\n\t\n6. 我该如何知道E2E用例步骤该从哪里开始又从哪里结束？ \n\t- 此行为实际上也没有固定的公式可以参考，仍旧是结合部分经验来完成： \n\t1. 把握一个核心目的，场景用例内容必须包含我们前面分析的所有功能点；--如果没有包含在内，则问自己前面的分析是否有必要，如果觉得没必要就裁剪前面的分析； \n\t2. 用例开始起点一般可以采取某个功能模块的入口； \n\t3. 用例的结束就不一定会有唯一的结束点，因为从起点开始后，可能有多个分支均会走向结束，此时则可以分成多条用例来覆盖（对于前面覆盖的步骤则可以作为前置条件，以此精简其他分支的用例内容）； \n\t4. 有些分支走下去发现是一个死循环，无法有效闭环，那此时我们至少需要覆盖以此完整的循环，保证各个状态之间的转换路径均需要覆盖（下文会采用状态机的方式做阐述）\n\n我们先来了解一个概念：\"状态机\"，这个将对我们编写E2E用例有较大帮助，场景用例编写的总体思路我们将采用状态机的套路来进行，所以我们需要先了解这个概念： \n\n#### 状态机含义\n\n> 状态机就是有限状态自动机的简称，是现实事物运行规则抽象而成的一个数学模型 状态机有4 个要素: 现态、条件、动作、次态。 这样的归纳，主要是出于对状态机的内在因果关系的考虑: \n- “现态”和 “条件” 是因，\n> - “动作”和 “次态” 是果。\n\n1. 现态：是指当前所处的状态。\n2. 条件：又称为 “事件”，当一个条件被满足，将会触发一个动作，或者执行一次状态的迁移。\n3. 动作：条件满足后执行的动作。动作执行完毕后，可以迁移到新的状态，也可以仍旧保持原状态。动作不是必需的，当条件满足后，也可以不执任何动作，直接迁移到新状态。\n4. 次态：条件满足后要迁往的新状态。“次态”是相对于 “现态” 而言的，“次态”一旦被激活，就转变成新的 “现态” 了。\n\n**转换状态示意图：**\n下面就是对水在不同状态之间的转换示意图 - 假如水蒸气是现态，在施加降温这个条件后，会发生凝结动作，从而变成次态的液态水；\n> - 当前液态水是现态，在施加降温这个条件后，会发生凝固动作，从而变成次态的冰；\n> - 相反在施加加温这个条件后，冰又能变成液态水，在继续加温后，又能变成水蒸气。\n\n![image-20210903095132477](pictures/e2e_analysis/05FJX.png)\n\n- 说人话呢这个东西就是某物体、某程序功能，会被不同的条件动作触发产生变化，从而形成一种新的状态或者结果（也可能保持不变）；\n- 一般来说程序中的这些变化的状态，肯定是有限的，所以我们也叫有限状态机，正因为是有限的我们才有分析的可能性；\n- 既然是有限的状态，那我们就可以将任何程序采用此思想，将其抽象出一个个的状态；\n- 然后提炼出触发的各种条件，通过在不同状态之间施加不同的触发条件，就能让这些状态不断变化，从而完成我们对程序的不同路径的覆盖；\n- 通过上面的示意图我们也是能很容易去理解这个点的，之所以E2E用例的编写需要去采用这种思维呢，主要就是模拟用户日常可能会触发的各种点，只要我们能触碰到他们会触发的各种操作行为，了解到他们企图达到的最终状态，那我们的验收用例就是有意义的。\n\n> 将上面水的状态变化类比到我们软件产品中来，就是这么个意思：\n- 拿到某个功能模块时，可以选择一个最基础的入口作为起点（现态）；\n> - 确定起点后，可以分析有哪些条件可以来施加，也就是从这个起点开始，有哪些后续的功能按钮可以操作？\n> - 分别操作这些功能按钮后，会跳转到哪个模块或者页面（次态）？\n> - 依照上述思路，针对这些次态继续分析可以施加的条件（可点击的功能按钮），继续往下发觉后续的状态；\n> - 当分析到最后发现已经没有新的状态可以产生了，那就说明这条路径已经走到头，此时就可以结束了；\n> - 如果发现不同状态之间会存在循环，那么我们可以保证完成一次循环即可（比如：固态=》液态=》气态=》液态=》固态）；\n> - 如果发现在某一个次态时，会产生多分支时，那么就需要单独分析每个分支，直到每个分支都走到头才结束；\n> - 针对不同的分支我们就可以梳理出不同的场景用例来。\n\n#### 从一线人员获取灵感\n\n> 大多数同学可能觉得到这里任务就该结束了，实际上上面的所有行为都是我们自己通过功能分析构造的一些场景，仍旧会存在遗漏点，每个人的思维都是存在局限性的，如果条件允许的话，我们可以进一步与一线人员甚至直接用户进行交流，来获取其真实日常是如何开展的，从而获取到最为真实客观的使用场景信息。\n\n- 获取一线用户的真实场景信息并不是所有项目都具备的条件，但条件具备时就一定要充分利用起来；\n- 如果没有此条件，我们也可以主动创造，可以主动申请出差客户现场，进行有效信息的获取；\n- 与一线人员、产品经理进行日常有效交流，从交谈中挖掘有效信息，都是可以帮助到我们丰富场景的；\n- 通过上述各种途径获取到的信息，则可以转化成用例，作为有效的覆盖条件。\n\n#### 过程验收&amp;抽验的遗漏补充\n\n> 怎么还没完没了了？\n到此还没结束？\n当然，因为前期我们的所有行为都是纸上谈兵（做的策略分析），老话说的好，纸上得来终觉浅，绝知此事要躬行，事情还得自己“弯着腰”去做啊…… \n\n在验收的整个生命周期中，我们的时间跨度是非常大的，在前期用例全部编写完成后，还有很长一段时间，此期间伴随着迭代版本的提测，内部测试的测试，验收的抽验，等等过程，\n\n此阶段我们是有机会接触真实的产品形态，也能够去实践之前的策略性动作，在这个过程中，是能够发现一些遗漏点，或者过程性不完善的地方。\n\n- 在过程验收或者抽验阶段，发现的一些遗漏点，需要及时的补充到场景用例中；\n- 发现的一些不合理的地方，需要及时优化调整用例的执行步骤等内容；\n- 对于内部测试发现的BUG分布较多，已经识别风险较大的模块，则需要针对性的增加用例密度，提高用例覆盖粒度，做出针对性预防；--BUG都是集中产生的，容易长虫子的地方，他就会成批成批的长，不用去怀疑这个规律；\n- 过程中发现内部测试狙击不足的模块或者方向，也需要我们针对性的提高预防措施，增加用例密度，明知道前面的兄弟没守住，已经有鬼子进村了，还不做好彻底的预防，那是我们的失职；\n- 上述的策略都是在实战中逐步调整完善，进一步巩固我们的武器装备，布好天罗地网，从而在验收阶段真正做到胸有成竹。\n\n此时思维导图框架大概是这么个样子：\n\n![](pictures/e2e_analysis/06FJX.png)\n#### 转换成用例\n\n实际上在上面过程中就有可能已经完成了用例的转换，所以此阶段并不一定是在最后，我们对于用例的补充和思维导图的维护应该是同步的，避免用例有更新，思维导图有缺失，真正在后续去评审和讲解时都是拿思维导图来展示，用例很难逐条去评审，拿用例评审是无法有效知道是否有遗漏，只能评审用例的规范与否，但思维导图则可以方便点 的查看是否针对某个模块有遗漏的场景。\n\n如何编写转换成最终的用例则不在此文中做讲解，针对用例的编写可以单独进行分享，此文默认大家都能够有效的转换编写用例。\n## 质检\n\n> 在实际生产过程中，都有一个质检环节，我们的工作也不例外，此环节与各位的职位级别、能力无关，再牛皮的人都有出错的时候，那么质检的这个动作我们一定要实施。\n\n- 实际上就是我们的评审过程，当局者迷，有时候就会迷在自己的思维中，而其他评审角色就能够从一些意想不到的角度提出遗漏和不足的地方，以便帮助我们进一步完善分析和用例内容；\n- 永远不要迷恋自己的想法，不要相信自己的分析是完善的，在分析过程中，永远多敲一个回车，预留待填写的空间……\n- 有效的评审能够避免后期的不足，重视此过程是对我们对项目的负责。\n\n## 收工\n此次故事就讲到这里~ \n如果你已经睡着了，我会感到很抱歉，没有吸引到你~ \n如果你感觉有收获，我会感到很欣慰，我真的可以帮助到你~ \n如果你有好的建议提交给我，我会感到很高兴，你可以帮助我进一步成长~ \n如果你有更好的思维与我分享，我会感到兴奋，我想与你把酒言欢~\n\n\n\n\n\n\n\n","slug":"e2e_analysis","published":1,"updated":"2022-12-31T04:20:26.296Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clcfvvv9p000984xh6u82678q","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>对于验收测试工程师来说，编写验收测试分析和测试用例是一项必须且重要的工作内容，但大多数同学在做验收测试分析及用例编写时，仍旧陷入到传统的分析及用例编写思维中，与内部测试团队所输出的内容并无差异，虽然大家在讲述验收工程师职责或者测试分析思路时，都知道说要编写用户场景用例，可实战过程中仍旧是任性的走老套路，犟的很！ </p>\n<p>究其原因，还是没有摆脱传统的测试思维，更多的关注点仍旧在文档中罗列的基本需求点，除了字面上描述出来的东西，很难将自己放在用户角色上去想象体验手头的产品，在验收时，又本着任务的压力，只能优先去完成流程上的一些基本任务：验收测试分析、验收测试用例编写、各种会议评审、输出各类报告…… </p>\n<p>上述每一个具体事项实际都只是我们工作实施的一个产物体现，并不是最终的目的，也就是说不仅仅为了去完成一篇分析或者用例的编写，就匆匆忙忙开干，在没有深入理解需求，了解用户痛点，及项目意义的情况下，所有的忙碌都不会产生太高价值，看起来长篇大论的文字表格一堆，但其中蕴含的思维和测试覆盖点却很难达到我们的预期，往往后期需要花费大量的精力去查漏补缺，进行各种优化，算算总投入成本那是极不划算的，而且还觉得自己特忙。</p>\n<p>对于团队中每一个同学来讲，每个人都有自己的特长和优势，但也会存在部分同学的确存在以上描述的若干问题，所以也就有了此篇文档，作为个人理解的内容，想要起到抛砖引玉的效果，希望在某些方面能够对大家有所帮助，也许能够通过思维的碰撞产生更加适合当前团队的执行方法和流程。</p>\n<p>本文会以通俗易懂偏口语化的风格进行阐述，尽量结合当前项目的实际内容来阐述具体思想，文中所有举例只是为了阐述某种思维方式，请读者不要钻牛角尖，而应该深入扩展理解思维背后的原理，内化成自己的经验和做事方法。</p>\n<h2 id=\"导读\"><a href=\"#导读\" class=\"headerlink\" title=\"导读\"></a>导读</h2><p>本文总体文字比较多，且讲述的内容非常基础，可能都是在各位平常工作中已经在实施的部分，只是做了一个系统的呈现，如果看的过程确有共鸣，则可以快速跳过熟知内容，直接查看“精加工生产E2E验收用例”部分内容； </p>\n<p>如果前文中部分内容平常未涉及到，则可以细致去想一下描述中的各问题及思维过程，最好是能转化成自己独特的思维逻辑；</p>\n<p>如果文章通篇读起来觉得索然无味，也可以私下进行一些深入的交流（排除语文功底因素），这是我极其希望遇到的场景。</p>\n<h2 id=\"我可以怎么做\"><a href=\"#我可以怎么做\" class=\"headerlink\" title=\"我可以怎么做\"></a>我可以怎么做</h2><ul>\n<li>如果你是一位新同学，或者是从传统测试转做验收测试的，下面的几点内容或许对你有所帮助；</li>\n<li>当然如果你是老司机，那也可以看看是否有其他更好的点子可以帮到大家。</li>\n</ul>\n<ol>\n<li><p>作为验收工程师，首要任务是先把自己以前的思维做一个冻结，把杯子倒空，忘掉过往的所有荣耀与成就，重新出发；**–调整心态**</p>\n</li>\n<li><p>清晰认识自己的职责和责任，做的所有事情都不仅仅只是为了完成上级下达的任务，而是为了某一个目标; <strong>–清晰自己工作的价值</strong></p>\n<blockquote>\n<p> 比如XX项目经过你的验收后，可以拍着胸脯对他人说，已经验收通过没有问题，大胆发布，让用户拿去用吧!<br>  或者是经过验收后，发现XX模块有风险，具体风险是XX，可能造成XX影响，建议提前采取XX行动，规避方案是XX，提前告知关注者项目的实际情况，即便是发布后真出现了问题，也做到了未雨绸缪。</p>\n</blockquote>\n</li>\n<li><p>接触任何一个项目时，首先是要弄清楚该项目的需求背景，直接接口人就是产品经理，从产品经理这里可以获取到项目的最原始信息，包括项目使用者，使用者的一些特点，此项目能够解决他们什么问题，核心价值具体体现在哪里，产品最差做到什么程度用户也能够接受（逐步剥离可以提炼到核心需求）？所有的这些只为弄清楚背景与用户痛点；</p>\n</li>\n<li><p>在了解项目的背景与用户痛点后，接下来的工作就需要始终将这些信息放到制高点，任何的思考行为都为这两点服务，你的模块分析是为了更好的保证用户能够流畅满意的使用，你的用例是为了能更全面的覆盖用户的操作行为，你的执行动作就是将自己当做用户来操作使用这个产品；</p>\n</li>\n<li><p>通过上述的信息输入后，就可以开展实际的验收测试分析，这里还是推荐使用思维导图的方式来开展此项工作；</p>\n</li>\n<li><p>在思维导图分析完成后，接下来就是用例的转化写作了，转化过程只需要抓住一个核心：思维导图中辛苦分析出来的验证点不要漏掉；</p>\n</li>\n<li><p>验收执行阶段工作主要是执行用例，在执行每条用例时，同样需要思考用例编写的本意是要验证什么点，切记无脑执行，往往能够发现用例可优化的地方，或者可扩展验证场景。</p>\n</li>\n</ol>\n<h2 id=\"正题\"><a href=\"#正题\" class=\"headerlink\" title=\"正题\"></a>正题</h2><p>前面的内容主要是一些铺垫，也就是大家说的鸡汤软文，下文主要从上面列出的几个步骤来描述一下个人理解的验收测试用例的生产过程，用例输出绝对不是直接上来就干的事儿，拿到项目一上来就直接干用例的行为那都是莽夫行为，测试最高价值体现就是你的思维，而对思维的加工最终输出的产物才是思维导图、测试用例这些实际的文档，下面会针对每个步骤进行详细的阐述，希望对大家有所帮助。</p>\n<h3 id=\"下文整体思路会以下图思路开展\"><a href=\"#下文整体思路会以下图思路开展\" class=\"headerlink\" title=\"下文整体思路会以下图思路开展\"></a>下文整体思路会以下图思路开展</h3><p><img src=\"/pictures/e2e_analysis/01FJX.png\"></p>\n<h2 id=\"用例生产过程\"><a href=\"#用例生产过程\" class=\"headerlink\" title=\"用例生产过程\"></a>用例生产过程</h2><h3 id=\"所需要的原料\"><a href=\"#所需要的原料\" class=\"headerlink\" title=\"所需要的原料\"></a>所需要的原料</h3><ul>\n<li>此部分内容，主要是列出我们在做一个项目的时候，最好弄清楚我们所需要的输入；</li>\n<li>包括我们需要具备的一些能力或者了解的知识点；</li>\n<li>当然不是所有列出的东西都一定需要具备或者精通，当前不具备的就可以针对性的去提升学习，以便能在工作中能够轻松应对。</li>\n</ul>\n<p><strong>实物原料：</strong>- 项目需求文档；–必选（哪怕是一句话需求）</p>\n<ul>\n<li><p>需求原型；–可选</p>\n</li>\n<li><p>研发概要设计文档；–可选</p>\n</li>\n<li><p>研发详细设计文档；–可选</p>\n</li>\n<li><p>项目demo；–可选</p>\n</li>\n<li><p>……</p>\n</li>\n</ul>\n<p><strong>思想原料：</strong>- 熟悉软件研发流程；</p>\n<blockquote>\n<p>熟悉软件测试基本理论知识:</p>\n</blockquote>\n<ol>\n<li>黑盒测试基本方法（等价类、边界值、正交、状态迁移、判定表、错误猜测、……）； </li>\n<li>接口测试、安全测试、性能测试、网络基本知识的了解； </li>\n<li>测试思维导图分析方法； </li>\n<li>用例编写的基本原则，测试用例的八大要素；</li>\n</ol>\n<h3 id=\"加工流程\"><a href=\"#加工流程\" class=\"headerlink\" title=\"加工流程\"></a>加工流程</h3><blockquote>\n<p>通过对上述或者更多的原料进行有序加工，我们的思维产物最终会以具体的思维导图、测试用例体现出来。</p>\n</blockquote>\n<h4 id=\"Step1-深入理解项目背景、用户痛点\"><a href=\"#Step1-深入理解项目背景、用户痛点\" class=\"headerlink\" title=\"Step1 深入理解项目背景、用户痛点\"></a>Step1 深入理解项目背景、用户痛点</h4><p><strong>实操步骤</strong></p>\n<p>首先我们在接触到一个新项目时,首要的就是拿到该项目的需求文档,如果没有需求文档就直接找产品经理或者一线人员,甚至是直接用户进行沟通,主要目的就是弄清楚如下几个问题: </p>\n<ol>\n<li>这个项目产生的原因是什么?–为什么要做这个项目,有钱任性?做着玩? 主要是为了解决用户什么问题,用户在当前碰到了什么难题需要我们来解围?</li>\n<li>不做这个项目行不行?–市面上有没有现成的解决方案?为什么要我们做这个?我们这个项目的优势在哪里?我们能为用户提供什么核心价值?</li>\n<li>我们的核心用户都是哪些人?都是一些什么样的人?这些人有些什么习惯或者特点?在产品使用上会不会有些特殊癖好或者要求?</li>\n<li>我们是怎么解决用户遇到的这个难题的,当前的需求内容是否能够达到解决用户痛点的目的?</li>\n</ol>\n<p>经过上述几个问题的自问或者问他人,你一定会获得一些有用的信息,经过对这些信息的消化和理解,你基本上就具备了与产品经理或者用户等位思考的状态,在此状态下,再结合产品经理编写的现成的背景和痛点问题描述,基本上就真正理解了项目的背景了；</p>\n<p>如何确定自己已经理解了当前项目背景呢？</p>\n<p><strong>Check点</strong><br>把这个项目介绍给其他人，能够流畅的按照上述几个问题维度来讲解清楚的话，就说明已经达到要求了。</p>\n<h4 id=\"Step2-梳理、挖掘基本需求点\"><a href=\"#Step2-梳理、挖掘基本需求点\" class=\"headerlink\" title=\"Step2 梳理、挖掘基本需求点\"></a>Step2 梳理、挖掘基本需求点</h4><blockquote>\n<p>这一部分内容大家最熟悉，也是一般人上来就开搞的一步，每个人都能整出一篇“丰满”的思维导图出来，全部展开的时候看起来内容丰富，但很多同学的思维导图内容细看后发现缺乏逻辑，有时候会很全，有时候会遗漏一些内容，实际上就是缺乏一些系统的思维。</p>\n</blockquote>\n<p>实际上我们在做项目或者模块分析时还是有套路可以耍的： 1</p>\n<p>首先就是把我们软件质量模型这张牌掏出来，如果能熟练的掌握质量模型的6大特性（功能性、可靠性、易用性、效率、可维护性、可移植性），27个子特性，那你做测试分析可能遗漏的几率是很小的。<br>实际上很少人能全部掌握，但你需要做到的是6大特性一定要掌握，每个特性大概对应的是哪些维度要非常清楚，质量模型中的维度需要逐项去做分析覆盖，功能性这块基本是个测试都能做到，但如何把功能性做全做深就又是一个挑战；</p>\n<p><strong>功能特性分析：</strong></p>\n<ol>\n<li>功能特性分析基本占据了80%以上的内容，也是我们需要花费80%精力去做好的部分，看起来最简单的部分，也是最难的部分;</li>\n<li>你需要深入理解项目背景和用户痛点，需要了解需求文档中提及的每一个模块功能，以及模块与模块之间的联系；</li>\n<li>需要在没有原型的基础上在脑海里自己勾勒出产品界面的雏形，想象各个功能模块之间的跳转逻辑以及依赖关系；</li>\n<li>通过对SE&#x2F;开发编写的概要设计、详细设计的仔细研读，了解每个模块的具体后台实现，来挖掘隐藏的测试点和逻辑联系；–这一步至少50%的测试人员做不到，很多人无法理解开发的后台实现逻辑，也就不可能知道该实现可能存在的问题，自然就不可能挖掘出这种隐藏的测试点，往往代码的缺陷就来自于这里，因为开发编码实际上就是把他的思维以代码的方式去呈现出来，那开发自己的想法都可能有问题，我们做测试的不去识别他的想法缺陷，再到后面去弥补，你肯定已经想到这个地方的成本有多高。所以能够落地去做的事情就是仔细研读开发编写的详细设计文档，技术这块不懂的就去查资料去问开发，直到理解他的实现逻辑是什么，在这个过程中你就会找到很多隐藏的测试点，从而能够丰富你的功能分析点。</li>\n<li>对于解决方案类产品（B&#x2F;S架构），B&#x2F;S类架构项目都是分前后台的，往往测试分析的时候大家只会去关注前台的显示，文案，按钮这些基本肉眼可见的东西，对于后台数据库的内容往往“视而不见”，在理解开发详细设计时，就要同时清楚他们的数据表设计内容，了解表与表之间的关联关系，字段的具体含义，前端数据获取的地方，以此就非常容易识别前台代码是否写死，是否是按照约定的逻辑来处理加工数据的，也就能提早发现一些设计、实现上不合理的地方。</li>\n</ol>\n<p><strong>思维导图的输出</strong></p>\n<blockquote>\n<p> 通过上面的思路分析后，我们就能输出80%的思维导图分析内容，也就抓住了这个项目的80%的测试点。</p>\n</blockquote>\n<p>此时你完成的思维导图大概应该是这个样子：<br><img src=\"/pictures/e2e_analysis/022FJX.png\"></p>\n<p> 完成80%内容后，剩下的把其他五大特性的内容进行完善即可，具体每个特性所体现的内容请大家自行学习，并转化成项目中可实施的测试点 此部分完成后思维导图大致会是下面的结构，能够确保质量模型维度的全覆盖，那测试点的梳理基本就完成95%了。</p>\n<p><img src=\"/pictures/e2e_analysis/03FJX.png\"></p>\n<p>完成上述测试分析后，实际上我们还有一个很重要的维度容易忽略，那就是异常场景，当然很多同学也容易特立独行，在上面的分析过程中就投入大量精力去搞异常场景，显得自己考虑问题的角度比较深入或者独特。</p>\n<p>想法是好的，但这个不是我们主要发力的点，你基本业务流都没整明白，直接到这种容易“钻牛角尖”的胡同里，很容易走火入魔。 </p>\n<p>建议上来说，在完成上面的所有分析后，再把自己脱离出来，去思考一些异常场景的补充，此时你的角色就变换成一个“破坏”者，以你能想到的，在日常使用过程中可能发生的一些“可怕”场景都用上来，如果符合当前项目的操作入口，那么就是你异常场景的突破口。</p>\n<p><strong>打比方（也不知道比方会不会怪我老打他）</strong>： </p>\n<ol>\n<li>使用过程中，直接关闭程序（数据都没保存呢……）–程序是否能再次正常启动，数据是否可以恢复到之前打开的状态；</li>\n<li>直接暴力切断电源，系统重启后，程序是否正常运行，数据是否恢复之前状态；</li>\n<li>直接关闭浏览器，提交的数据是否能下次恢复，程序是否能拦截并给出提示还有数据未保存；</li>\n<li>服务器直接断电，被手动关闭，重启服务器后，服务是否能正常拉起，恢复后台服务能力，数据是否均正常；</li>\n<li>对于存在输入的地方，我们可做的骚操作很多，这里边界值的上点和外点、非等价类的输入就是我们做异常测试的发力点，会不会因为我们的一些上点、内点、非等价类输入，或者特殊字符输入，或者SQL注入的内容输入造成程序崩溃，或者安全漏洞等等；</li>\n<li>对于图谋不轨的人，我们还需要考虑安全问题，是否存在明文传输（密码全程是否加密），通过浏览器F12调试模式查看接口的传参过程，通过后台数据库查看具体的密码存储形式，通过后台日志查看敏感信息是否脱敏处理……</li>\n<li>数据传输过程中，直接断开网络，程序下次是否能正常重新处理数据；</li>\n<li>上传非法格式，非法超大文件前台是否能正常校验拦截，通过接口直接上传，后台是否能正常拦截；</li>\n<li>程序提供的配置，逻辑上是否有做依赖控制，是否存在前后冲突的配置可以设置，导致部分配置不生效；</li>\n<li>数据的多次重复提交是否会存在异常；</li>\n<li>数据的新建&#x3D;》删除&#x3D;》再建，是否能正常处理；</li>\n<li>数据的提交更改后，下次进入展示，回显是否正确；</li>\n<li>存在数据记忆的场景，是否能够正常记忆；</li>\n<li>存在回退的场景，数据是否能够正常回滚无残留；</li>\n<li>存在数据迁移的场景，数据是否能够正常迁移，且兼容新版本的展示结构；</li>\n<li>存在数据结构升级的场景，是否能向下兼容老旧数据，或者正常转换旧数据结构，从而正常展示在前端；</li>\n<li>存在可以向后台提交数据的按钮时，是否可以快速频繁的点击提交，可能导致数据异常；</li>\n<li>存在单选、复选、全选、全不选的场景时，频繁的选择状态切换，选择逻辑是否处理正确，选择数据对象是否准确；</li>\n<li>存在批量新建、上传、删除等场景时，对于单条数据的批量操作，多条数据的批量操作，是否能正确处理；</li>\n<li>存在大数据量场景时，需要重点关注接口数据的处理准确性，在实现规格内，提交的大数据请求处理，是否能准确且高效的完成。</li>\n</ol>\n<p>此时你的思维导图大概是这个样子：</p>\n<p><img src=\"/pictures/e2e_analysis/04FJX.png\"></p>\n<h4 id=\"Step3-精加工生产E2E验收用例\"><a href=\"#Step3-精加工生产E2E验收用例\" class=\"headerlink\" title=\"Step3 精加工生产E2E验收用例\"></a>Step3 精加工生产E2E验收用例</h4><blockquote>\n<ul>\n<li>通过上面的生产加工后，想必大家觉得分析工作已经完成了，可以说作为内部测试在完成上面工作后，测试分析工作的确可以告一段落，我也可以打包票说只要你能按照上面提到的维度，每个维度都做出了深入的思考与分析，那你的测试分析是比较完善的；</li>\n<li>但作为验收工程师，最核心的部分还没开始，那就是E2E场景，也就是说，到现在为止，验收工程师的核心工作才刚刚开始……</li>\n</ul>\n</blockquote>\n<p>实际上前面的工作都已经做的比较全了，剩下的部分只需要结合部分思维来串联一下就可以完成，此刻你就变身为一个串珠的人儿了，把你精心准备好的“珍珠”按照某种方式串起来，做成一条条“项链”，这些“项链”就是我们验收的E2E场景用例，其主要会涉及到如下方面内容：</p>\n<ol>\n<li><p>理解何为用户场景？</p>\n<blockquote>\n<p>用户日常使用时，使用产品的操作路径，可能进行的操作流。</p>\n</blockquote>\n</li>\n<li><p>写这些E2E场景的意义是什么？<br>尽可能全的模拟覆盖用户日常会操作的路径，提前发现可能存在的问题，确认产品是否能够满足用户日常使用，弥补在模块测试中对模块之间的关联性测试覆盖不足的问题。</p>\n</li>\n<li><p>用户场景的来源有哪些？</p>\n</li>\n</ol>\n<ul>\n<li>通过功能点分析，站在用户角度采用状态机思路编写E2E场景用例–你就是用户； </li>\n<li>通过分析一线人员提供的问题信息，获得用户使用的场景信息–真实使用者的反馈； </li>\n<li>通过一线人员提供的用户群体特征，使用产品的场景等信息，通过关联分析构建用户场景信息–对真实使用者的模拟分析，有时候用户自己都不知道自己需要的是什么，那我们就需要替用户去思考这个问题，如同乔布斯说的：在我发布苹果手机的时候，用户才知道这就是他们想要的。</li>\n</ul>\n<ol start=\"4\">\n<li><p>什么叫做端到端（E2E）场景用例？<br>不同于传统测试过程中仅针对某一个功能点进行深入验证的用例，而是尽可能将多个功能点通过某种思路（如状态机）有目的设计成一连串的操作流，形成的一种用例形式。</p>\n</li>\n<li><p>场景用例的编写粒度该如何把控？<br> 在编写这类用例时，很多同学会陷入两难境地，在测试步骤中，不知道编写粒度该控制到哪个层次，写太细了跟传统用例没区别，写太粗了又担心不具备可执行性； </p>\n<ul>\n<li>实际上这个问题很难按照某种要求去规定，主要把握几个原则：</li>\n</ul>\n<ol>\n<li>场景用例编写的前提，一定是内部测试已经有非常详尽的功能用例，覆盖每个功能点，确保了基本功能是没有问题的；–如果担心这个地方有遗漏，说明我们内部测试需要改进，并且在测试执行阶段，验收工程师也需要有能力进行适当发散，做事不能眉毛胡子一把抓，每个阶段的重点核心不同，该放的时候要放，该收的地方得收。 </li>\n<li>基于上述前提，就知道我们的场景用例不会写的太细，更多的是一种操作行为流的描述，可以做的是，在每一个操作行为后，预期结果我们尽可能的描述全面； </li>\n<li>每一条用例都需要有一个核心目的，要想清楚该用例的核心是为了验证或者保证什么功能，那么用例的步骤描述都需要围绕这个核心去开展，避免一条用例中混杂不同的场景和行为路径，会导致用例缺乏目标，也容易产生冗余用例内容； </li>\n<li>用例粒度确保能够清晰引导执行者完成步骤描述内容，在存在依赖的部分交代清楚依赖获取的方式，预期结果明确无歧义； </li>\n<li>在编写过程中发现用例步骤太多（超过十几步）,那就需要针对该路径做分离处理，可以分成多条用例来覆盖，避免单条用例步骤过于复杂，可能对后续的执行带来不必要的麻烦；</li>\n</ol>\n</li>\n<li><p>我该如何知道E2E用例步骤该从哪里开始又从哪里结束？ </p>\n<ul>\n<li>此行为实际上也没有固定的公式可以参考，仍旧是结合部分经验来完成：</li>\n</ul>\n<ol>\n<li>把握一个核心目的，场景用例内容必须包含我们前面分析的所有功能点；–如果没有包含在内，则问自己前面的分析是否有必要，如果觉得没必要就裁剪前面的分析； </li>\n<li>用例开始起点一般可以采取某个功能模块的入口； </li>\n<li>用例的结束就不一定会有唯一的结束点，因为从起点开始后，可能有多个分支均会走向结束，此时则可以分成多条用例来覆盖（对于前面覆盖的步骤则可以作为前置条件，以此精简其他分支的用例内容）； </li>\n<li>有些分支走下去发现是一个死循环，无法有效闭环，那此时我们至少需要覆盖以此完整的循环，保证各个状态之间的转换路径均需要覆盖（下文会采用状态机的方式做阐述）</li>\n</ol>\n</li>\n</ol>\n<p>我们先来了解一个概念：”状态机”，这个将对我们编写E2E用例有较大帮助，场景用例编写的总体思路我们将采用状态机的套路来进行，所以我们需要先了解这个概念： </p>\n<h4 id=\"状态机含义\"><a href=\"#状态机含义\" class=\"headerlink\" title=\"状态机含义\"></a>状态机含义</h4><blockquote>\n<p>状态机就是有限状态自动机的简称，是现实事物运行规则抽象而成的一个数学模型 状态机有4 个要素: 现态、条件、动作、次态。 这样的归纳，主要是出于对状态机的内在因果关系的考虑: </p>\n</blockquote>\n<ul>\n<li>“现态”和 “条件” 是因，<blockquote>\n<ul>\n<li>“动作”和 “次态” 是果。</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<ol>\n<li>现态：是指当前所处的状态。</li>\n<li>条件：又称为 “事件”，当一个条件被满足，将会触发一个动作，或者执行一次状态的迁移。</li>\n<li>动作：条件满足后执行的动作。动作执行完毕后，可以迁移到新的状态，也可以仍旧保持原状态。动作不是必需的，当条件满足后，也可以不执任何动作，直接迁移到新状态。</li>\n<li>次态：条件满足后要迁往的新状态。“次态”是相对于 “现态” 而言的，“次态”一旦被激活，就转变成新的 “现态” 了。</li>\n</ol>\n<p><strong>转换状态示意图：</strong><br>下面就是对水在不同状态之间的转换示意图 - 假如水蒸气是现态，在施加降温这个条件后，会发生凝结动作，从而变成次态的液态水；</p>\n<blockquote>\n<ul>\n<li>当前液态水是现态，在施加降温这个条件后，会发生凝固动作，从而变成次态的冰；</li>\n<li>相反在施加加温这个条件后，冰又能变成液态水，在继续加温后，又能变成水蒸气。</li>\n</ul>\n</blockquote>\n<p><img src=\"/pictures/e2e_analysis/05FJX.png\" alt=\"image-20210903095132477\"></p>\n<ul>\n<li>说人话呢这个东西就是某物体、某程序功能，会被不同的条件动作触发产生变化，从而形成一种新的状态或者结果（也可能保持不变）；</li>\n<li>一般来说程序中的这些变化的状态，肯定是有限的，所以我们也叫有限状态机，正因为是有限的我们才有分析的可能性；</li>\n<li>既然是有限的状态，那我们就可以将任何程序采用此思想，将其抽象出一个个的状态；</li>\n<li>然后提炼出触发的各种条件，通过在不同状态之间施加不同的触发条件，就能让这些状态不断变化，从而完成我们对程序的不同路径的覆盖；</li>\n<li>通过上面的示意图我们也是能很容易去理解这个点的，之所以E2E用例的编写需要去采用这种思维呢，主要就是模拟用户日常可能会触发的各种点，只要我们能触碰到他们会触发的各种操作行为，了解到他们企图达到的最终状态，那我们的验收用例就是有意义的。</li>\n</ul>\n<blockquote>\n<p>将上面水的状态变化类比到我们软件产品中来，就是这么个意思：</p>\n</blockquote>\n<ul>\n<li>拿到某个功能模块时，可以选择一个最基础的入口作为起点（现态）；<blockquote>\n<ul>\n<li>确定起点后，可以分析有哪些条件可以来施加，也就是从这个起点开始，有哪些后续的功能按钮可以操作？</li>\n<li>分别操作这些功能按钮后，会跳转到哪个模块或者页面（次态）？</li>\n<li>依照上述思路，针对这些次态继续分析可以施加的条件（可点击的功能按钮），继续往下发觉后续的状态；</li>\n<li>当分析到最后发现已经没有新的状态可以产生了，那就说明这条路径已经走到头，此时就可以结束了；</li>\n<li>如果发现不同状态之间会存在循环，那么我们可以保证完成一次循环即可（比如：固态&#x3D;》液态&#x3D;》气态&#x3D;》液态&#x3D;》固态）；</li>\n<li>如果发现在某一个次态时，会产生多分支时，那么就需要单独分析每个分支，直到每个分支都走到头才结束；</li>\n<li>针对不同的分支我们就可以梳理出不同的场景用例来。</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"从一线人员获取灵感\"><a href=\"#从一线人员获取灵感\" class=\"headerlink\" title=\"从一线人员获取灵感\"></a>从一线人员获取灵感</h4><blockquote>\n<p>大多数同学可能觉得到这里任务就该结束了，实际上上面的所有行为都是我们自己通过功能分析构造的一些场景，仍旧会存在遗漏点，每个人的思维都是存在局限性的，如果条件允许的话，我们可以进一步与一线人员甚至直接用户进行交流，来获取其真实日常是如何开展的，从而获取到最为真实客观的使用场景信息。</p>\n</blockquote>\n<ul>\n<li>获取一线用户的真实场景信息并不是所有项目都具备的条件，但条件具备时就一定要充分利用起来；</li>\n<li>如果没有此条件，我们也可以主动创造，可以主动申请出差客户现场，进行有效信息的获取；</li>\n<li>与一线人员、产品经理进行日常有效交流，从交谈中挖掘有效信息，都是可以帮助到我们丰富场景的；</li>\n<li>通过上述各种途径获取到的信息，则可以转化成用例，作为有效的覆盖条件。</li>\n</ul>\n<h4 id=\"过程验收-amp-抽验的遗漏补充\"><a href=\"#过程验收-amp-抽验的遗漏补充\" class=\"headerlink\" title=\"过程验收&amp;抽验的遗漏补充\"></a>过程验收&amp;抽验的遗漏补充</h4><blockquote>\n<p>怎么还没完没了了？<br>到此还没结束？<br>当然，因为前期我们的所有行为都是纸上谈兵（做的策略分析），老话说的好，纸上得来终觉浅，绝知此事要躬行，事情还得自己“弯着腰”去做啊…… </p>\n</blockquote>\n<p>在验收的整个生命周期中，我们的时间跨度是非常大的，在前期用例全部编写完成后，还有很长一段时间，此期间伴随着迭代版本的提测，内部测试的测试，验收的抽验，等等过程，</p>\n<p>此阶段我们是有机会接触真实的产品形态，也能够去实践之前的策略性动作，在这个过程中，是能够发现一些遗漏点，或者过程性不完善的地方。</p>\n<ul>\n<li>在过程验收或者抽验阶段，发现的一些遗漏点，需要及时的补充到场景用例中；</li>\n<li>发现的一些不合理的地方，需要及时优化调整用例的执行步骤等内容；</li>\n<li>对于内部测试发现的BUG分布较多，已经识别风险较大的模块，则需要针对性的增加用例密度，提高用例覆盖粒度，做出针对性预防；–BUG都是集中产生的，容易长虫子的地方，他就会成批成批的长，不用去怀疑这个规律；</li>\n<li>过程中发现内部测试狙击不足的模块或者方向，也需要我们针对性的提高预防措施，增加用例密度，明知道前面的兄弟没守住，已经有鬼子进村了，还不做好彻底的预防，那是我们的失职；</li>\n<li>上述的策略都是在实战中逐步调整完善，进一步巩固我们的武器装备，布好天罗地网，从而在验收阶段真正做到胸有成竹。</li>\n</ul>\n<p>此时思维导图框架大概是这么个样子：</p>\n<p><img src=\"/pictures/e2e_analysis/06FJX.png\"></p>\n<h4 id=\"转换成用例\"><a href=\"#转换成用例\" class=\"headerlink\" title=\"转换成用例\"></a>转换成用例</h4><p>实际上在上面过程中就有可能已经完成了用例的转换，所以此阶段并不一定是在最后，我们对于用例的补充和思维导图的维护应该是同步的，避免用例有更新，思维导图有缺失，真正在后续去评审和讲解时都是拿思维导图来展示，用例很难逐条去评审，拿用例评审是无法有效知道是否有遗漏，只能评审用例的规范与否，但思维导图则可以方便点 的查看是否针对某个模块有遗漏的场景。</p>\n<p>如何编写转换成最终的用例则不在此文中做讲解，针对用例的编写可以单独进行分享，此文默认大家都能够有效的转换编写用例。</p>\n<h2 id=\"质检\"><a href=\"#质检\" class=\"headerlink\" title=\"质检\"></a>质检</h2><blockquote>\n<p>在实际生产过程中，都有一个质检环节，我们的工作也不例外，此环节与各位的职位级别、能力无关，再牛皮的人都有出错的时候，那么质检的这个动作我们一定要实施。</p>\n</blockquote>\n<ul>\n<li>实际上就是我们的评审过程，当局者迷，有时候就会迷在自己的思维中，而其他评审角色就能够从一些意想不到的角度提出遗漏和不足的地方，以便帮助我们进一步完善分析和用例内容；</li>\n<li>永远不要迷恋自己的想法，不要相信自己的分析是完善的，在分析过程中，永远多敲一个回车，预留待填写的空间……</li>\n<li>有效的评审能够避免后期的不足，重视此过程是对我们对项目的负责。</li>\n</ul>\n<h2 id=\"收工\"><a href=\"#收工\" class=\"headerlink\" title=\"收工\"></a>收工</h2><p>此次故事就讲到这里~<br>如果你已经睡着了，我会感到很抱歉，没有吸引到你~<br>如果你感觉有收获，我会感到很欣慰，我真的可以帮助到你~<br>如果你有好的建议提交给我，我会感到很高兴，你可以帮助我进一步成长~<br>如果你有更好的思维与我分享，我会感到兴奋，我想与你把酒言欢~</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>对于验收测试工程师来说，编写验收测试分析和测试用例是一项必须且重要的工作内容，但大多数同学在做验收测试分析及用例编写时，仍旧陷入到传统的分析及用例编写思维中，与内部测试团队所输出的内容并无差异，虽然大家在讲述验收工程师职责或者测试分析思路时，都知道说要编写用户场景用例，可实战过程中仍旧是任性的走老套路，犟的很！ </p>\n<p>究其原因，还是没有摆脱传统的测试思维，更多的关注点仍旧在文档中罗列的基本需求点，除了字面上描述出来的东西，很难将自己放在用户角色上去想象体验手头的产品，在验收时，又本着任务的压力，只能优先去完成流程上的一些基本任务：验收测试分析、验收测试用例编写、各种会议评审、输出各类报告…… </p>\n<p>上述每一个具体事项实际都只是我们工作实施的一个产物体现，并不是最终的目的，也就是说不仅仅为了去完成一篇分析或者用例的编写，就匆匆忙忙开干，在没有深入理解需求，了解用户痛点，及项目意义的情况下，所有的忙碌都不会产生太高价值，看起来长篇大论的文字表格一堆，但其中蕴含的思维和测试覆盖点却很难达到我们的预期，往往后期需要花费大量的精力去查漏补缺，进行各种优化，算算总投入成本那是极不划算的，而且还觉得自己特忙。</p>\n<p>对于团队中每一个同学来讲，每个人都有自己的特长和优势，但也会存在部分同学的确存在以上描述的若干问题，所以也就有了此篇文档，作为个人理解的内容，想要起到抛砖引玉的效果，希望在某些方面能够对大家有所帮助，也许能够通过思维的碰撞产生更加适合当前团队的执行方法和流程。</p>\n<p>本文会以通俗易懂偏口语化的风格进行阐述，尽量结合当前项目的实际内容来阐述具体思想，文中所有举例只是为了阐述某种思维方式，请读者不要钻牛角尖，而应该深入扩展理解思维背后的原理，内化成自己的经验和做事方法。</p>\n<h2 id=\"导读\"><a href=\"#导读\" class=\"headerlink\" title=\"导读\"></a>导读</h2><p>本文总体文字比较多，且讲述的内容非常基础，可能都是在各位平常工作中已经在实施的部分，只是做了一个系统的呈现，如果看的过程确有共鸣，则可以快速跳过熟知内容，直接查看“精加工生产E2E验收用例”部分内容； </p>\n<p>如果前文中部分内容平常未涉及到，则可以细致去想一下描述中的各问题及思维过程，最好是能转化成自己独特的思维逻辑；</p>\n<p>如果文章通篇读起来觉得索然无味，也可以私下进行一些深入的交流（排除语文功底因素），这是我极其希望遇到的场景。</p>\n<h2 id=\"我可以怎么做\"><a href=\"#我可以怎么做\" class=\"headerlink\" title=\"我可以怎么做\"></a>我可以怎么做</h2><ul>\n<li>如果你是一位新同学，或者是从传统测试转做验收测试的，下面的几点内容或许对你有所帮助；</li>\n<li>当然如果你是老司机，那也可以看看是否有其他更好的点子可以帮到大家。</li>\n</ul>\n<ol>\n<li><p>作为验收工程师，首要任务是先把自己以前的思维做一个冻结，把杯子倒空，忘掉过往的所有荣耀与成就，重新出发；**–调整心态**</p>\n</li>\n<li><p>清晰认识自己的职责和责任，做的所有事情都不仅仅只是为了完成上级下达的任务，而是为了某一个目标; <strong>–清晰自己工作的价值</strong></p>\n<blockquote>\n<p> 比如XX项目经过你的验收后，可以拍着胸脯对他人说，已经验收通过没有问题，大胆发布，让用户拿去用吧!<br>  或者是经过验收后，发现XX模块有风险，具体风险是XX，可能造成XX影响，建议提前采取XX行动，规避方案是XX，提前告知关注者项目的实际情况，即便是发布后真出现了问题，也做到了未雨绸缪。</p>\n</blockquote>\n</li>\n<li><p>接触任何一个项目时，首先是要弄清楚该项目的需求背景，直接接口人就是产品经理，从产品经理这里可以获取到项目的最原始信息，包括项目使用者，使用者的一些特点，此项目能够解决他们什么问题，核心价值具体体现在哪里，产品最差做到什么程度用户也能够接受（逐步剥离可以提炼到核心需求）？所有的这些只为弄清楚背景与用户痛点；</p>\n</li>\n<li><p>在了解项目的背景与用户痛点后，接下来的工作就需要始终将这些信息放到制高点，任何的思考行为都为这两点服务，你的模块分析是为了更好的保证用户能够流畅满意的使用，你的用例是为了能更全面的覆盖用户的操作行为，你的执行动作就是将自己当做用户来操作使用这个产品；</p>\n</li>\n<li><p>通过上述的信息输入后，就可以开展实际的验收测试分析，这里还是推荐使用思维导图的方式来开展此项工作；</p>\n</li>\n<li><p>在思维导图分析完成后，接下来就是用例的转化写作了，转化过程只需要抓住一个核心：思维导图中辛苦分析出来的验证点不要漏掉；</p>\n</li>\n<li><p>验收执行阶段工作主要是执行用例，在执行每条用例时，同样需要思考用例编写的本意是要验证什么点，切记无脑执行，往往能够发现用例可优化的地方，或者可扩展验证场景。</p>\n</li>\n</ol>\n<h2 id=\"正题\"><a href=\"#正题\" class=\"headerlink\" title=\"正题\"></a>正题</h2><p>前面的内容主要是一些铺垫，也就是大家说的鸡汤软文，下文主要从上面列出的几个步骤来描述一下个人理解的验收测试用例的生产过程，用例输出绝对不是直接上来就干的事儿，拿到项目一上来就直接干用例的行为那都是莽夫行为，测试最高价值体现就是你的思维，而对思维的加工最终输出的产物才是思维导图、测试用例这些实际的文档，下面会针对每个步骤进行详细的阐述，希望对大家有所帮助。</p>\n<h3 id=\"下文整体思路会以下图思路开展\"><a href=\"#下文整体思路会以下图思路开展\" class=\"headerlink\" title=\"下文整体思路会以下图思路开展\"></a>下文整体思路会以下图思路开展</h3><p><img src=\"/pictures/e2e_analysis/01FJX.png\"></p>\n<h2 id=\"用例生产过程\"><a href=\"#用例生产过程\" class=\"headerlink\" title=\"用例生产过程\"></a>用例生产过程</h2><h3 id=\"所需要的原料\"><a href=\"#所需要的原料\" class=\"headerlink\" title=\"所需要的原料\"></a>所需要的原料</h3><ul>\n<li>此部分内容，主要是列出我们在做一个项目的时候，最好弄清楚我们所需要的输入；</li>\n<li>包括我们需要具备的一些能力或者了解的知识点；</li>\n<li>当然不是所有列出的东西都一定需要具备或者精通，当前不具备的就可以针对性的去提升学习，以便能在工作中能够轻松应对。</li>\n</ul>\n<p><strong>实物原料：</strong>- 项目需求文档；–必选（哪怕是一句话需求）</p>\n<ul>\n<li><p>需求原型；–可选</p>\n</li>\n<li><p>研发概要设计文档；–可选</p>\n</li>\n<li><p>研发详细设计文档；–可选</p>\n</li>\n<li><p>项目demo；–可选</p>\n</li>\n<li><p>……</p>\n</li>\n</ul>\n<p><strong>思想原料：</strong>- 熟悉软件研发流程；</p>\n<blockquote>\n<p>熟悉软件测试基本理论知识:</p>\n</blockquote>\n<ol>\n<li>黑盒测试基本方法（等价类、边界值、正交、状态迁移、判定表、错误猜测、……）； </li>\n<li>接口测试、安全测试、性能测试、网络基本知识的了解； </li>\n<li>测试思维导图分析方法； </li>\n<li>用例编写的基本原则，测试用例的八大要素；</li>\n</ol>\n<h3 id=\"加工流程\"><a href=\"#加工流程\" class=\"headerlink\" title=\"加工流程\"></a>加工流程</h3><blockquote>\n<p>通过对上述或者更多的原料进行有序加工，我们的思维产物最终会以具体的思维导图、测试用例体现出来。</p>\n</blockquote>\n<h4 id=\"Step1-深入理解项目背景、用户痛点\"><a href=\"#Step1-深入理解项目背景、用户痛点\" class=\"headerlink\" title=\"Step1 深入理解项目背景、用户痛点\"></a>Step1 深入理解项目背景、用户痛点</h4><p><strong>实操步骤</strong></p>\n<p>首先我们在接触到一个新项目时,首要的就是拿到该项目的需求文档,如果没有需求文档就直接找产品经理或者一线人员,甚至是直接用户进行沟通,主要目的就是弄清楚如下几个问题: </p>\n<ol>\n<li>这个项目产生的原因是什么?–为什么要做这个项目,有钱任性?做着玩? 主要是为了解决用户什么问题,用户在当前碰到了什么难题需要我们来解围?</li>\n<li>不做这个项目行不行?–市面上有没有现成的解决方案?为什么要我们做这个?我们这个项目的优势在哪里?我们能为用户提供什么核心价值?</li>\n<li>我们的核心用户都是哪些人?都是一些什么样的人?这些人有些什么习惯或者特点?在产品使用上会不会有些特殊癖好或者要求?</li>\n<li>我们是怎么解决用户遇到的这个难题的,当前的需求内容是否能够达到解决用户痛点的目的?</li>\n</ol>\n<p>经过上述几个问题的自问或者问他人,你一定会获得一些有用的信息,经过对这些信息的消化和理解,你基本上就具备了与产品经理或者用户等位思考的状态,在此状态下,再结合产品经理编写的现成的背景和痛点问题描述,基本上就真正理解了项目的背景了；</p>\n<p>如何确定自己已经理解了当前项目背景呢？</p>\n<p><strong>Check点</strong><br>把这个项目介绍给其他人，能够流畅的按照上述几个问题维度来讲解清楚的话，就说明已经达到要求了。</p>\n<h4 id=\"Step2-梳理、挖掘基本需求点\"><a href=\"#Step2-梳理、挖掘基本需求点\" class=\"headerlink\" title=\"Step2 梳理、挖掘基本需求点\"></a>Step2 梳理、挖掘基本需求点</h4><blockquote>\n<p>这一部分内容大家最熟悉，也是一般人上来就开搞的一步，每个人都能整出一篇“丰满”的思维导图出来，全部展开的时候看起来内容丰富，但很多同学的思维导图内容细看后发现缺乏逻辑，有时候会很全，有时候会遗漏一些内容，实际上就是缺乏一些系统的思维。</p>\n</blockquote>\n<p>实际上我们在做项目或者模块分析时还是有套路可以耍的： 1</p>\n<p>首先就是把我们软件质量模型这张牌掏出来，如果能熟练的掌握质量模型的6大特性（功能性、可靠性、易用性、效率、可维护性、可移植性），27个子特性，那你做测试分析可能遗漏的几率是很小的。<br>实际上很少人能全部掌握，但你需要做到的是6大特性一定要掌握，每个特性大概对应的是哪些维度要非常清楚，质量模型中的维度需要逐项去做分析覆盖，功能性这块基本是个测试都能做到，但如何把功能性做全做深就又是一个挑战；</p>\n<p><strong>功能特性分析：</strong></p>\n<ol>\n<li>功能特性分析基本占据了80%以上的内容，也是我们需要花费80%精力去做好的部分，看起来最简单的部分，也是最难的部分;</li>\n<li>你需要深入理解项目背景和用户痛点，需要了解需求文档中提及的每一个模块功能，以及模块与模块之间的联系；</li>\n<li>需要在没有原型的基础上在脑海里自己勾勒出产品界面的雏形，想象各个功能模块之间的跳转逻辑以及依赖关系；</li>\n<li>通过对SE&#x2F;开发编写的概要设计、详细设计的仔细研读，了解每个模块的具体后台实现，来挖掘隐藏的测试点和逻辑联系；–这一步至少50%的测试人员做不到，很多人无法理解开发的后台实现逻辑，也就不可能知道该实现可能存在的问题，自然就不可能挖掘出这种隐藏的测试点，往往代码的缺陷就来自于这里，因为开发编码实际上就是把他的思维以代码的方式去呈现出来，那开发自己的想法都可能有问题，我们做测试的不去识别他的想法缺陷，再到后面去弥补，你肯定已经想到这个地方的成本有多高。所以能够落地去做的事情就是仔细研读开发编写的详细设计文档，技术这块不懂的就去查资料去问开发，直到理解他的实现逻辑是什么，在这个过程中你就会找到很多隐藏的测试点，从而能够丰富你的功能分析点。</li>\n<li>对于解决方案类产品（B&#x2F;S架构），B&#x2F;S类架构项目都是分前后台的，往往测试分析的时候大家只会去关注前台的显示，文案，按钮这些基本肉眼可见的东西，对于后台数据库的内容往往“视而不见”，在理解开发详细设计时，就要同时清楚他们的数据表设计内容，了解表与表之间的关联关系，字段的具体含义，前端数据获取的地方，以此就非常容易识别前台代码是否写死，是否是按照约定的逻辑来处理加工数据的，也就能提早发现一些设计、实现上不合理的地方。</li>\n</ol>\n<p><strong>思维导图的输出</strong></p>\n<blockquote>\n<p> 通过上面的思路分析后，我们就能输出80%的思维导图分析内容，也就抓住了这个项目的80%的测试点。</p>\n</blockquote>\n<p>此时你完成的思维导图大概应该是这个样子：<br><img src=\"/pictures/e2e_analysis/022FJX.png\"></p>\n<p> 完成80%内容后，剩下的把其他五大特性的内容进行完善即可，具体每个特性所体现的内容请大家自行学习，并转化成项目中可实施的测试点 此部分完成后思维导图大致会是下面的结构，能够确保质量模型维度的全覆盖，那测试点的梳理基本就完成95%了。</p>\n<p><img src=\"/pictures/e2e_analysis/03FJX.png\"></p>\n<p>完成上述测试分析后，实际上我们还有一个很重要的维度容易忽略，那就是异常场景，当然很多同学也容易特立独行，在上面的分析过程中就投入大量精力去搞异常场景，显得自己考虑问题的角度比较深入或者独特。</p>\n<p>想法是好的，但这个不是我们主要发力的点，你基本业务流都没整明白，直接到这种容易“钻牛角尖”的胡同里，很容易走火入魔。 </p>\n<p>建议上来说，在完成上面的所有分析后，再把自己脱离出来，去思考一些异常场景的补充，此时你的角色就变换成一个“破坏”者，以你能想到的，在日常使用过程中可能发生的一些“可怕”场景都用上来，如果符合当前项目的操作入口，那么就是你异常场景的突破口。</p>\n<p><strong>打比方（也不知道比方会不会怪我老打他）</strong>： </p>\n<ol>\n<li>使用过程中，直接关闭程序（数据都没保存呢……）–程序是否能再次正常启动，数据是否可以恢复到之前打开的状态；</li>\n<li>直接暴力切断电源，系统重启后，程序是否正常运行，数据是否恢复之前状态；</li>\n<li>直接关闭浏览器，提交的数据是否能下次恢复，程序是否能拦截并给出提示还有数据未保存；</li>\n<li>服务器直接断电，被手动关闭，重启服务器后，服务是否能正常拉起，恢复后台服务能力，数据是否均正常；</li>\n<li>对于存在输入的地方，我们可做的骚操作很多，这里边界值的上点和外点、非等价类的输入就是我们做异常测试的发力点，会不会因为我们的一些上点、内点、非等价类输入，或者特殊字符输入，或者SQL注入的内容输入造成程序崩溃，或者安全漏洞等等；</li>\n<li>对于图谋不轨的人，我们还需要考虑安全问题，是否存在明文传输（密码全程是否加密），通过浏览器F12调试模式查看接口的传参过程，通过后台数据库查看具体的密码存储形式，通过后台日志查看敏感信息是否脱敏处理……</li>\n<li>数据传输过程中，直接断开网络，程序下次是否能正常重新处理数据；</li>\n<li>上传非法格式，非法超大文件前台是否能正常校验拦截，通过接口直接上传，后台是否能正常拦截；</li>\n<li>程序提供的配置，逻辑上是否有做依赖控制，是否存在前后冲突的配置可以设置，导致部分配置不生效；</li>\n<li>数据的多次重复提交是否会存在异常；</li>\n<li>数据的新建&#x3D;》删除&#x3D;》再建，是否能正常处理；</li>\n<li>数据的提交更改后，下次进入展示，回显是否正确；</li>\n<li>存在数据记忆的场景，是否能够正常记忆；</li>\n<li>存在回退的场景，数据是否能够正常回滚无残留；</li>\n<li>存在数据迁移的场景，数据是否能够正常迁移，且兼容新版本的展示结构；</li>\n<li>存在数据结构升级的场景，是否能向下兼容老旧数据，或者正常转换旧数据结构，从而正常展示在前端；</li>\n<li>存在可以向后台提交数据的按钮时，是否可以快速频繁的点击提交，可能导致数据异常；</li>\n<li>存在单选、复选、全选、全不选的场景时，频繁的选择状态切换，选择逻辑是否处理正确，选择数据对象是否准确；</li>\n<li>存在批量新建、上传、删除等场景时，对于单条数据的批量操作，多条数据的批量操作，是否能正确处理；</li>\n<li>存在大数据量场景时，需要重点关注接口数据的处理准确性，在实现规格内，提交的大数据请求处理，是否能准确且高效的完成。</li>\n</ol>\n<p>此时你的思维导图大概是这个样子：</p>\n<p><img src=\"/pictures/e2e_analysis/04FJX.png\"></p>\n<h4 id=\"Step3-精加工生产E2E验收用例\"><a href=\"#Step3-精加工生产E2E验收用例\" class=\"headerlink\" title=\"Step3 精加工生产E2E验收用例\"></a>Step3 精加工生产E2E验收用例</h4><blockquote>\n<ul>\n<li>通过上面的生产加工后，想必大家觉得分析工作已经完成了，可以说作为内部测试在完成上面工作后，测试分析工作的确可以告一段落，我也可以打包票说只要你能按照上面提到的维度，每个维度都做出了深入的思考与分析，那你的测试分析是比较完善的；</li>\n<li>但作为验收工程师，最核心的部分还没开始，那就是E2E场景，也就是说，到现在为止，验收工程师的核心工作才刚刚开始……</li>\n</ul>\n</blockquote>\n<p>实际上前面的工作都已经做的比较全了，剩下的部分只需要结合部分思维来串联一下就可以完成，此刻你就变身为一个串珠的人儿了，把你精心准备好的“珍珠”按照某种方式串起来，做成一条条“项链”，这些“项链”就是我们验收的E2E场景用例，其主要会涉及到如下方面内容：</p>\n<ol>\n<li><p>理解何为用户场景？</p>\n<blockquote>\n<p>用户日常使用时，使用产品的操作路径，可能进行的操作流。</p>\n</blockquote>\n</li>\n<li><p>写这些E2E场景的意义是什么？<br>尽可能全的模拟覆盖用户日常会操作的路径，提前发现可能存在的问题，确认产品是否能够满足用户日常使用，弥补在模块测试中对模块之间的关联性测试覆盖不足的问题。</p>\n</li>\n<li><p>用户场景的来源有哪些？</p>\n</li>\n</ol>\n<ul>\n<li>通过功能点分析，站在用户角度采用状态机思路编写E2E场景用例–你就是用户； </li>\n<li>通过分析一线人员提供的问题信息，获得用户使用的场景信息–真实使用者的反馈； </li>\n<li>通过一线人员提供的用户群体特征，使用产品的场景等信息，通过关联分析构建用户场景信息–对真实使用者的模拟分析，有时候用户自己都不知道自己需要的是什么，那我们就需要替用户去思考这个问题，如同乔布斯说的：在我发布苹果手机的时候，用户才知道这就是他们想要的。</li>\n</ul>\n<ol start=\"4\">\n<li><p>什么叫做端到端（E2E）场景用例？<br>不同于传统测试过程中仅针对某一个功能点进行深入验证的用例，而是尽可能将多个功能点通过某种思路（如状态机）有目的设计成一连串的操作流，形成的一种用例形式。</p>\n</li>\n<li><p>场景用例的编写粒度该如何把控？<br> 在编写这类用例时，很多同学会陷入两难境地，在测试步骤中，不知道编写粒度该控制到哪个层次，写太细了跟传统用例没区别，写太粗了又担心不具备可执行性； </p>\n<ul>\n<li>实际上这个问题很难按照某种要求去规定，主要把握几个原则：</li>\n</ul>\n<ol>\n<li>场景用例编写的前提，一定是内部测试已经有非常详尽的功能用例，覆盖每个功能点，确保了基本功能是没有问题的；–如果担心这个地方有遗漏，说明我们内部测试需要改进，并且在测试执行阶段，验收工程师也需要有能力进行适当发散，做事不能眉毛胡子一把抓，每个阶段的重点核心不同，该放的时候要放，该收的地方得收。 </li>\n<li>基于上述前提，就知道我们的场景用例不会写的太细，更多的是一种操作行为流的描述，可以做的是，在每一个操作行为后，预期结果我们尽可能的描述全面； </li>\n<li>每一条用例都需要有一个核心目的，要想清楚该用例的核心是为了验证或者保证什么功能，那么用例的步骤描述都需要围绕这个核心去开展，避免一条用例中混杂不同的场景和行为路径，会导致用例缺乏目标，也容易产生冗余用例内容； </li>\n<li>用例粒度确保能够清晰引导执行者完成步骤描述内容，在存在依赖的部分交代清楚依赖获取的方式，预期结果明确无歧义； </li>\n<li>在编写过程中发现用例步骤太多（超过十几步）,那就需要针对该路径做分离处理，可以分成多条用例来覆盖，避免单条用例步骤过于复杂，可能对后续的执行带来不必要的麻烦；</li>\n</ol>\n</li>\n<li><p>我该如何知道E2E用例步骤该从哪里开始又从哪里结束？ </p>\n<ul>\n<li>此行为实际上也没有固定的公式可以参考，仍旧是结合部分经验来完成：</li>\n</ul>\n<ol>\n<li>把握一个核心目的，场景用例内容必须包含我们前面分析的所有功能点；–如果没有包含在内，则问自己前面的分析是否有必要，如果觉得没必要就裁剪前面的分析； </li>\n<li>用例开始起点一般可以采取某个功能模块的入口； </li>\n<li>用例的结束就不一定会有唯一的结束点，因为从起点开始后，可能有多个分支均会走向结束，此时则可以分成多条用例来覆盖（对于前面覆盖的步骤则可以作为前置条件，以此精简其他分支的用例内容）； </li>\n<li>有些分支走下去发现是一个死循环，无法有效闭环，那此时我们至少需要覆盖以此完整的循环，保证各个状态之间的转换路径均需要覆盖（下文会采用状态机的方式做阐述）</li>\n</ol>\n</li>\n</ol>\n<p>我们先来了解一个概念：”状态机”，这个将对我们编写E2E用例有较大帮助，场景用例编写的总体思路我们将采用状态机的套路来进行，所以我们需要先了解这个概念： </p>\n<h4 id=\"状态机含义\"><a href=\"#状态机含义\" class=\"headerlink\" title=\"状态机含义\"></a>状态机含义</h4><blockquote>\n<p>状态机就是有限状态自动机的简称，是现实事物运行规则抽象而成的一个数学模型 状态机有4 个要素: 现态、条件、动作、次态。 这样的归纳，主要是出于对状态机的内在因果关系的考虑: </p>\n</blockquote>\n<ul>\n<li>“现态”和 “条件” 是因，<blockquote>\n<ul>\n<li>“动作”和 “次态” 是果。</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<ol>\n<li>现态：是指当前所处的状态。</li>\n<li>条件：又称为 “事件”，当一个条件被满足，将会触发一个动作，或者执行一次状态的迁移。</li>\n<li>动作：条件满足后执行的动作。动作执行完毕后，可以迁移到新的状态，也可以仍旧保持原状态。动作不是必需的，当条件满足后，也可以不执任何动作，直接迁移到新状态。</li>\n<li>次态：条件满足后要迁往的新状态。“次态”是相对于 “现态” 而言的，“次态”一旦被激活，就转变成新的 “现态” 了。</li>\n</ol>\n<p><strong>转换状态示意图：</strong><br>下面就是对水在不同状态之间的转换示意图 - 假如水蒸气是现态，在施加降温这个条件后，会发生凝结动作，从而变成次态的液态水；</p>\n<blockquote>\n<ul>\n<li>当前液态水是现态，在施加降温这个条件后，会发生凝固动作，从而变成次态的冰；</li>\n<li>相反在施加加温这个条件后，冰又能变成液态水，在继续加温后，又能变成水蒸气。</li>\n</ul>\n</blockquote>\n<p><img src=\"/pictures/e2e_analysis/05FJX.png\" alt=\"image-20210903095132477\"></p>\n<ul>\n<li>说人话呢这个东西就是某物体、某程序功能，会被不同的条件动作触发产生变化，从而形成一种新的状态或者结果（也可能保持不变）；</li>\n<li>一般来说程序中的这些变化的状态，肯定是有限的，所以我们也叫有限状态机，正因为是有限的我们才有分析的可能性；</li>\n<li>既然是有限的状态，那我们就可以将任何程序采用此思想，将其抽象出一个个的状态；</li>\n<li>然后提炼出触发的各种条件，通过在不同状态之间施加不同的触发条件，就能让这些状态不断变化，从而完成我们对程序的不同路径的覆盖；</li>\n<li>通过上面的示意图我们也是能很容易去理解这个点的，之所以E2E用例的编写需要去采用这种思维呢，主要就是模拟用户日常可能会触发的各种点，只要我们能触碰到他们会触发的各种操作行为，了解到他们企图达到的最终状态，那我们的验收用例就是有意义的。</li>\n</ul>\n<blockquote>\n<p>将上面水的状态变化类比到我们软件产品中来，就是这么个意思：</p>\n</blockquote>\n<ul>\n<li>拿到某个功能模块时，可以选择一个最基础的入口作为起点（现态）；<blockquote>\n<ul>\n<li>确定起点后，可以分析有哪些条件可以来施加，也就是从这个起点开始，有哪些后续的功能按钮可以操作？</li>\n<li>分别操作这些功能按钮后，会跳转到哪个模块或者页面（次态）？</li>\n<li>依照上述思路，针对这些次态继续分析可以施加的条件（可点击的功能按钮），继续往下发觉后续的状态；</li>\n<li>当分析到最后发现已经没有新的状态可以产生了，那就说明这条路径已经走到头，此时就可以结束了；</li>\n<li>如果发现不同状态之间会存在循环，那么我们可以保证完成一次循环即可（比如：固态&#x3D;》液态&#x3D;》气态&#x3D;》液态&#x3D;》固态）；</li>\n<li>如果发现在某一个次态时，会产生多分支时，那么就需要单独分析每个分支，直到每个分支都走到头才结束；</li>\n<li>针对不同的分支我们就可以梳理出不同的场景用例来。</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"从一线人员获取灵感\"><a href=\"#从一线人员获取灵感\" class=\"headerlink\" title=\"从一线人员获取灵感\"></a>从一线人员获取灵感</h4><blockquote>\n<p>大多数同学可能觉得到这里任务就该结束了，实际上上面的所有行为都是我们自己通过功能分析构造的一些场景，仍旧会存在遗漏点，每个人的思维都是存在局限性的，如果条件允许的话，我们可以进一步与一线人员甚至直接用户进行交流，来获取其真实日常是如何开展的，从而获取到最为真实客观的使用场景信息。</p>\n</blockquote>\n<ul>\n<li>获取一线用户的真实场景信息并不是所有项目都具备的条件，但条件具备时就一定要充分利用起来；</li>\n<li>如果没有此条件，我们也可以主动创造，可以主动申请出差客户现场，进行有效信息的获取；</li>\n<li>与一线人员、产品经理进行日常有效交流，从交谈中挖掘有效信息，都是可以帮助到我们丰富场景的；</li>\n<li>通过上述各种途径获取到的信息，则可以转化成用例，作为有效的覆盖条件。</li>\n</ul>\n<h4 id=\"过程验收-amp-抽验的遗漏补充\"><a href=\"#过程验收-amp-抽验的遗漏补充\" class=\"headerlink\" title=\"过程验收&amp;抽验的遗漏补充\"></a>过程验收&amp;抽验的遗漏补充</h4><blockquote>\n<p>怎么还没完没了了？<br>到此还没结束？<br>当然，因为前期我们的所有行为都是纸上谈兵（做的策略分析），老话说的好，纸上得来终觉浅，绝知此事要躬行，事情还得自己“弯着腰”去做啊…… </p>\n</blockquote>\n<p>在验收的整个生命周期中，我们的时间跨度是非常大的，在前期用例全部编写完成后，还有很长一段时间，此期间伴随着迭代版本的提测，内部测试的测试，验收的抽验，等等过程，</p>\n<p>此阶段我们是有机会接触真实的产品形态，也能够去实践之前的策略性动作，在这个过程中，是能够发现一些遗漏点，或者过程性不完善的地方。</p>\n<ul>\n<li>在过程验收或者抽验阶段，发现的一些遗漏点，需要及时的补充到场景用例中；</li>\n<li>发现的一些不合理的地方，需要及时优化调整用例的执行步骤等内容；</li>\n<li>对于内部测试发现的BUG分布较多，已经识别风险较大的模块，则需要针对性的增加用例密度，提高用例覆盖粒度，做出针对性预防；–BUG都是集中产生的，容易长虫子的地方，他就会成批成批的长，不用去怀疑这个规律；</li>\n<li>过程中发现内部测试狙击不足的模块或者方向，也需要我们针对性的提高预防措施，增加用例密度，明知道前面的兄弟没守住，已经有鬼子进村了，还不做好彻底的预防，那是我们的失职；</li>\n<li>上述的策略都是在实战中逐步调整完善，进一步巩固我们的武器装备，布好天罗地网，从而在验收阶段真正做到胸有成竹。</li>\n</ul>\n<p>此时思维导图框架大概是这么个样子：</p>\n<p><img src=\"/pictures/e2e_analysis/06FJX.png\"></p>\n<h4 id=\"转换成用例\"><a href=\"#转换成用例\" class=\"headerlink\" title=\"转换成用例\"></a>转换成用例</h4><p>实际上在上面过程中就有可能已经完成了用例的转换，所以此阶段并不一定是在最后，我们对于用例的补充和思维导图的维护应该是同步的，避免用例有更新，思维导图有缺失，真正在后续去评审和讲解时都是拿思维导图来展示，用例很难逐条去评审，拿用例评审是无法有效知道是否有遗漏，只能评审用例的规范与否，但思维导图则可以方便点 的查看是否针对某个模块有遗漏的场景。</p>\n<p>如何编写转换成最终的用例则不在此文中做讲解，针对用例的编写可以单独进行分享，此文默认大家都能够有效的转换编写用例。</p>\n<h2 id=\"质检\"><a href=\"#质检\" class=\"headerlink\" title=\"质检\"></a>质检</h2><blockquote>\n<p>在实际生产过程中，都有一个质检环节，我们的工作也不例外，此环节与各位的职位级别、能力无关，再牛皮的人都有出错的时候，那么质检的这个动作我们一定要实施。</p>\n</blockquote>\n<ul>\n<li>实际上就是我们的评审过程，当局者迷，有时候就会迷在自己的思维中，而其他评审角色就能够从一些意想不到的角度提出遗漏和不足的地方，以便帮助我们进一步完善分析和用例内容；</li>\n<li>永远不要迷恋自己的想法，不要相信自己的分析是完善的，在分析过程中，永远多敲一个回车，预留待填写的空间……</li>\n<li>有效的评审能够避免后期的不足，重视此过程是对我们对项目的负责。</li>\n</ul>\n<h2 id=\"收工\"><a href=\"#收工\" class=\"headerlink\" title=\"收工\"></a>收工</h2><p>此次故事就讲到这里~<br>如果你已经睡着了，我会感到很抱歉，没有吸引到你~<br>如果你感觉有收获，我会感到很欣慰，我真的可以帮助到你~<br>如果你有好的建议提交给我，我会感到很高兴，你可以帮助我进一步成长~<br>如果你有更好的思维与我分享，我会感到兴奋，我想与你把酒言欢~</p>\n"},{"title":"hexo配置algolia搜索服务","date":"2023-01-03T03:30:34.000Z","_content":"## 遇到的问题\n\n我在配置搜索服务时，遇到的问题是在执行``` hexo algolia```命令时报如下信息，好像我没有安装插件一样，但实际我是安装了的，最后折腾才发现，我安装该搜索服务时，是没有在我博客根目录执行安装命令，而是随便在其他目录下安装执行的，也不知道为何有这个问题，随后在根目录下再次安装就好了。\n\n```bash\nbabyfengfjx@babyfengfjx:~/Documents/typora_documents/github/workdata/myblog$ hexo algolia\nINFO  Validating config\nUsage: hexo <command>\n\nCommands:\n  clean     Remove generated files and cache.\n  config    Get or set configurations.\n  deploy    Deploy your website.\n  generate  Generate static files.\n  help      Get help on a command.\n  init      Create a new Hexo folder.\n  list      List the information of the site\n  migrate   Migrate your site from other system to Hexo.\n  new       Create a new post.\n  publish   Moves a draft post from _drafts to _posts folder.\n  render    Render files with renderer plugins.\n  server    Start the server.\n  version   Display version information.\n\nGlobal Options:\n  --config  Specify config file instead of using _config.yml\n  --cwd     Specify the CWD\n  --debug   Display all verbose messages in the terminal\n  --draft   Display draft posts\n  --safe    Disable all plugins and scripts\n  --silent  Hide output on console\n\nFor more help, you can use 'hexo help [command]' for the detailed information\nor you can check the docs: http://hexo.io/docs/\n```\n\n# 配置步骤\n\n## Step1:注册algolia\n\n[访问此处进行注册登录](https://www.algolia.com/)\n\n## Step2:创建索引数据库\n\n> 按照如下图进行索引实例创建即可，这里的索引名称后面会用到，自行创建记住即可。\n\n![image-20230103113149791](pictures/hexo_config_algolia/image-20230103113149791.png)\n\n## Step3：查看API信息\n\n> 可能很多人不知道具体在哪里看，当前可以查看的路径可以看如下截图。\n\n![image-20230103113426783](pictures/hexo_config_algolia/image-20230103113426783.png)\n\n![image-20230103113505830](pictures/hexo_config_algolia/image-20230103113505830.png)\n\n![image-20230103113638126](pictures/hexo_config_algolia/image-20230103113638126.png)\n\n## Step4:安装插件配置本地文件\n\n- 先进入自己博客项目的根目录，然后安装插件：``` npm install --save hexo-algolia```;\n\n- 然后在hexo根目录下的主配置文件```_config.yml```添加如下内容（具体值按照自己实际注册的内容填写即可）:\n\n  ```bash\n  algolia:\n    applicationID: 'RPHOC0xxxx'\n    apiKey: '723903e5de5899f6cc4ad96fc509xxxx'\n    adminApiKey: 'fe4c456ceeaea4f264f0d242b5fexxxx'\n    indexName: 'hexo_blog'\n    chunkSize: 5000\n  ```\n\n- 再在你的主题配置文件中开启相关功能配置：\n\n  ```bash\n  algolia_search:\n    enable: true # or false\n    hits:\n      per_page: 10 # the number of search results per page\n    labels:\n      input_placeholder: Search for Posts\n      hits_empty: \"We didn't find any results for the search: ${query}\" # if there are no result\n      hits_stats: \"${hits} results found in ${time} ms\"\n  ```\n\n## Step5：更新数据到algolia服务器\n\n在 hexo 站点根目录下执行`hexo algolia` 来搜集数据更新到我们刚创建的 Index 中\n\n此时执行上述命令一般会报如下错误：(这里就是上面说的我们还有一个本地环境变量没配置)\n\n```bash\nbabyfengfjx@babyfengfjx:~/Documents/typora_documents/github/workdata/myblog$ hexo algolia\nINFO  Validating config\nERROR [hexo-algolia] Please set an `HEXO_ALGOLIA_INDEXING_KEY` environment variable to enable content indexing.\nERROR >> Read https://npmjs.com/hexo-algolia#api-key for more informations.\n```\n\n直接执行一下如下命令：```export HEXO_ALGOLIA_INDEXING_KEY=fe4c456ceeaea4f264f0d242b5fexxxx``` 其中这个key就是Admin api key，添加完环境变量后，再次执行上述命令即可。\n\n## Step6：重新部署即可\n\n```bash\nhexo clean\nhexo g\nhexo d\n```\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/hexo_config_algolia.md","raw":"---\ntitle: hexo配置algolia搜索服务\ncategories: \n- hexo\ntags:\n- hexo\ndate: 2023-01-03 11:30:34\n---\n## 遇到的问题\n\n我在配置搜索服务时，遇到的问题是在执行``` hexo algolia```命令时报如下信息，好像我没有安装插件一样，但实际我是安装了的，最后折腾才发现，我安装该搜索服务时，是没有在我博客根目录执行安装命令，而是随便在其他目录下安装执行的，也不知道为何有这个问题，随后在根目录下再次安装就好了。\n\n```bash\nbabyfengfjx@babyfengfjx:~/Documents/typora_documents/github/workdata/myblog$ hexo algolia\nINFO  Validating config\nUsage: hexo <command>\n\nCommands:\n  clean     Remove generated files and cache.\n  config    Get or set configurations.\n  deploy    Deploy your website.\n  generate  Generate static files.\n  help      Get help on a command.\n  init      Create a new Hexo folder.\n  list      List the information of the site\n  migrate   Migrate your site from other system to Hexo.\n  new       Create a new post.\n  publish   Moves a draft post from _drafts to _posts folder.\n  render    Render files with renderer plugins.\n  server    Start the server.\n  version   Display version information.\n\nGlobal Options:\n  --config  Specify config file instead of using _config.yml\n  --cwd     Specify the CWD\n  --debug   Display all verbose messages in the terminal\n  --draft   Display draft posts\n  --safe    Disable all plugins and scripts\n  --silent  Hide output on console\n\nFor more help, you can use 'hexo help [command]' for the detailed information\nor you can check the docs: http://hexo.io/docs/\n```\n\n# 配置步骤\n\n## Step1:注册algolia\n\n[访问此处进行注册登录](https://www.algolia.com/)\n\n## Step2:创建索引数据库\n\n> 按照如下图进行索引实例创建即可，这里的索引名称后面会用到，自行创建记住即可。\n\n![image-20230103113149791](pictures/hexo_config_algolia/image-20230103113149791.png)\n\n## Step3：查看API信息\n\n> 可能很多人不知道具体在哪里看，当前可以查看的路径可以看如下截图。\n\n![image-20230103113426783](pictures/hexo_config_algolia/image-20230103113426783.png)\n\n![image-20230103113505830](pictures/hexo_config_algolia/image-20230103113505830.png)\n\n![image-20230103113638126](pictures/hexo_config_algolia/image-20230103113638126.png)\n\n## Step4:安装插件配置本地文件\n\n- 先进入自己博客项目的根目录，然后安装插件：``` npm install --save hexo-algolia```;\n\n- 然后在hexo根目录下的主配置文件```_config.yml```添加如下内容（具体值按照自己实际注册的内容填写即可）:\n\n  ```bash\n  algolia:\n    applicationID: 'RPHOC0xxxx'\n    apiKey: '723903e5de5899f6cc4ad96fc509xxxx'\n    adminApiKey: 'fe4c456ceeaea4f264f0d242b5fexxxx'\n    indexName: 'hexo_blog'\n    chunkSize: 5000\n  ```\n\n- 再在你的主题配置文件中开启相关功能配置：\n\n  ```bash\n  algolia_search:\n    enable: true # or false\n    hits:\n      per_page: 10 # the number of search results per page\n    labels:\n      input_placeholder: Search for Posts\n      hits_empty: \"We didn't find any results for the search: ${query}\" # if there are no result\n      hits_stats: \"${hits} results found in ${time} ms\"\n  ```\n\n## Step5：更新数据到algolia服务器\n\n在 hexo 站点根目录下执行`hexo algolia` 来搜集数据更新到我们刚创建的 Index 中\n\n此时执行上述命令一般会报如下错误：(这里就是上面说的我们还有一个本地环境变量没配置)\n\n```bash\nbabyfengfjx@babyfengfjx:~/Documents/typora_documents/github/workdata/myblog$ hexo algolia\nINFO  Validating config\nERROR [hexo-algolia] Please set an `HEXO_ALGOLIA_INDEXING_KEY` environment variable to enable content indexing.\nERROR >> Read https://npmjs.com/hexo-algolia#api-key for more informations.\n```\n\n直接执行一下如下命令：```export HEXO_ALGOLIA_INDEXING_KEY=fe4c456ceeaea4f264f0d242b5fexxxx``` 其中这个key就是Admin api key，添加完环境变量后，再次执行上述命令即可。\n\n## Step6：重新部署即可\n\n```bash\nhexo clean\nhexo g\nhexo d\n```\n\n\n\n\n\n\n\n\n\n\n\n","slug":"hexo_config_algolia","published":1,"updated":"2023-01-03T03:50:01.621Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clcfvvv9r000d84xhbyrw4f7z","content":"<h2 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h2><p>我在配置搜索服务时，遇到的问题是在执行<code> hexo algolia</code>命令时报如下信息，好像我没有安装插件一样，但实际我是安装了的，最后折腾才发现，我安装该搜索服务时，是没有在我博客根目录执行安装命令，而是随便在其他目录下安装执行的，也不知道为何有这个问题，随后在根目录下再次安装就好了。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">babyfengfjx@babyfengfjx:~/Documents/typora_documents/github/workdata/myblog$ hexo algolia</span><br><span class=\"line\">INFO  Validating config</span><br><span class=\"line\">Usage: hexo &lt;<span class=\"built_in\">command</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">Commands:</span><br><span class=\"line\">  clean     Remove generated files and cache.</span><br><span class=\"line\">  config    Get or <span class=\"built_in\">set</span> configurations.</span><br><span class=\"line\">  deploy    Deploy your website.</span><br><span class=\"line\">  generate  Generate static files.</span><br><span class=\"line\">  <span class=\"built_in\">help</span>      Get <span class=\"built_in\">help</span> on a <span class=\"built_in\">command</span>.</span><br><span class=\"line\">  init      Create a new Hexo folder.</span><br><span class=\"line\">  list      List the information of the site</span><br><span class=\"line\">  migrate   Migrate your site from other system to Hexo.</span><br><span class=\"line\">  new       Create a new post.</span><br><span class=\"line\">  publish   Moves a draft post from _drafts to _posts folder.</span><br><span class=\"line\">  render    Render files with renderer plugins.</span><br><span class=\"line\">  server    Start the server.</span><br><span class=\"line\">  version   Display version information.</span><br><span class=\"line\"></span><br><span class=\"line\">Global Options:</span><br><span class=\"line\">  --config  Specify config file instead of using _config.yml</span><br><span class=\"line\">  --cwd     Specify the CWD</span><br><span class=\"line\">  --debug   Display all verbose messages <span class=\"keyword\">in</span> the terminal</span><br><span class=\"line\">  --draft   Display draft posts</span><br><span class=\"line\">  --safe    Disable all plugins and scripts</span><br><span class=\"line\">  --silent  Hide output on console</span><br><span class=\"line\"></span><br><span class=\"line\">For more <span class=\"built_in\">help</span>, you can use <span class=\"string\">&#x27;hexo help [command]&#x27;</span> <span class=\"keyword\">for</span> the detailed information</span><br><span class=\"line\">or you can check the docs: http://hexo.io/docs/</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"配置步骤\"><a href=\"#配置步骤\" class=\"headerlink\" title=\"配置步骤\"></a>配置步骤</h1><h2 id=\"Step1-注册algolia\"><a href=\"#Step1-注册algolia\" class=\"headerlink\" title=\"Step1:注册algolia\"></a>Step1:注册algolia</h2><p><a href=\"https://www.algolia.com/\">访问此处进行注册登录</a></p>\n<h2 id=\"Step2-创建索引数据库\"><a href=\"#Step2-创建索引数据库\" class=\"headerlink\" title=\"Step2:创建索引数据库\"></a>Step2:创建索引数据库</h2><blockquote>\n<p>按照如下图进行索引实例创建即可，这里的索引名称后面会用到，自行创建记住即可。</p>\n</blockquote>\n<p><img src=\"/pictures/hexo_config_algolia/image-20230103113149791.png\" alt=\"image-20230103113149791\"></p>\n<h2 id=\"Step3：查看API信息\"><a href=\"#Step3：查看API信息\" class=\"headerlink\" title=\"Step3：查看API信息\"></a>Step3：查看API信息</h2><blockquote>\n<p>可能很多人不知道具体在哪里看，当前可以查看的路径可以看如下截图。</p>\n</blockquote>\n<p><img src=\"/pictures/hexo_config_algolia/image-20230103113426783.png\" alt=\"image-20230103113426783\"></p>\n<p><img src=\"/pictures/hexo_config_algolia/image-20230103113505830.png\" alt=\"image-20230103113505830\"></p>\n<p><img src=\"/pictures/hexo_config_algolia/image-20230103113638126.png\" alt=\"image-20230103113638126\"></p>\n<h2 id=\"Step4-安装插件配置本地文件\"><a href=\"#Step4-安装插件配置本地文件\" class=\"headerlink\" title=\"Step4:安装插件配置本地文件\"></a>Step4:安装插件配置本地文件</h2><ul>\n<li><p>先进入自己博客项目的根目录，然后安装插件：<code> npm install --save hexo-algolia</code>;</p>\n</li>\n<li><p>然后在hexo根目录下的主配置文件<code>_config.yml</code>添加如下内容（具体值按照自己实际注册的内容填写即可）:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">algolia:</span><br><span class=\"line\">  applicationID: <span class=\"string\">&#x27;RPHOC0xxxx&#x27;</span></span><br><span class=\"line\">  apiKey: <span class=\"string\">&#x27;723903e5de5899f6cc4ad96fc509xxxx&#x27;</span></span><br><span class=\"line\">  adminApiKey: <span class=\"string\">&#x27;fe4c456ceeaea4f264f0d242b5fexxxx&#x27;</span></span><br><span class=\"line\">  indexName: <span class=\"string\">&#x27;hexo_blog&#x27;</span></span><br><span class=\"line\">  chunkSize: 5000</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>再在你的主题配置文件中开启相关功能配置：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">algolia_search:</span><br><span class=\"line\">  <span class=\"built_in\">enable</span>: <span class=\"literal\">true</span> <span class=\"comment\"># or false</span></span><br><span class=\"line\">  hits:</span><br><span class=\"line\">    per_page: 10 <span class=\"comment\"># the number of search results per page</span></span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    input_placeholder: Search <span class=\"keyword\">for</span> Posts</span><br><span class=\"line\">    hits_empty: <span class=\"string\">&quot;We didn&#x27;t find any results for the search: <span class=\"variable\">$&#123;query&#125;</span>&quot;</span> <span class=\"comment\"># if there are no result</span></span><br><span class=\"line\">    hits_stats: <span class=\"string\">&quot;<span class=\"variable\">$&#123;hits&#125;</span> results found in <span class=\"variable\">$&#123;time&#125;</span> ms&quot;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"Step5：更新数据到algolia服务器\"><a href=\"#Step5：更新数据到algolia服务器\" class=\"headerlink\" title=\"Step5：更新数据到algolia服务器\"></a>Step5：更新数据到algolia服务器</h2><p>在 hexo 站点根目录下执行<code>hexo algolia</code> 来搜集数据更新到我们刚创建的 Index 中</p>\n<p>此时执行上述命令一般会报如下错误：(这里就是上面说的我们还有一个本地环境变量没配置)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">babyfengfjx@babyfengfjx:~/Documents/typora_documents/github/workdata/myblog$ hexo algolia</span><br><span class=\"line\">INFO  Validating config</span><br><span class=\"line\">ERROR [hexo-algolia] Please <span class=\"built_in\">set</span> an `HEXO_ALGOLIA_INDEXING_KEY` environment variable to <span class=\"built_in\">enable</span> content indexing.</span><br><span class=\"line\">ERROR &gt;&gt; Read https://npmjs.com/hexo-algolia<span class=\"comment\">#api-key for more informations.</span></span><br></pre></td></tr></table></figure>\n\n<p>直接执行一下如下命令：<code>export HEXO_ALGOLIA_INDEXING_KEY=fe4c456ceeaea4f264f0d242b5fexxxx</code> 其中这个key就是Admin api key，添加完环境变量后，再次执行上述命令即可。</p>\n<h2 id=\"Step6：重新部署即可\"><a href=\"#Step6：重新部署即可\" class=\"headerlink\" title=\"Step6：重新部署即可\"></a>Step6：重新部署即可</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br><span class=\"line\">hexo g</span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h2><p>我在配置搜索服务时，遇到的问题是在执行<code> hexo algolia</code>命令时报如下信息，好像我没有安装插件一样，但实际我是安装了的，最后折腾才发现，我安装该搜索服务时，是没有在我博客根目录执行安装命令，而是随便在其他目录下安装执行的，也不知道为何有这个问题，随后在根目录下再次安装就好了。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">babyfengfjx@babyfengfjx:~/Documents/typora_documents/github/workdata/myblog$ hexo algolia</span><br><span class=\"line\">INFO  Validating config</span><br><span class=\"line\">Usage: hexo &lt;<span class=\"built_in\">command</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">Commands:</span><br><span class=\"line\">  clean     Remove generated files and cache.</span><br><span class=\"line\">  config    Get or <span class=\"built_in\">set</span> configurations.</span><br><span class=\"line\">  deploy    Deploy your website.</span><br><span class=\"line\">  generate  Generate static files.</span><br><span class=\"line\">  <span class=\"built_in\">help</span>      Get <span class=\"built_in\">help</span> on a <span class=\"built_in\">command</span>.</span><br><span class=\"line\">  init      Create a new Hexo folder.</span><br><span class=\"line\">  list      List the information of the site</span><br><span class=\"line\">  migrate   Migrate your site from other system to Hexo.</span><br><span class=\"line\">  new       Create a new post.</span><br><span class=\"line\">  publish   Moves a draft post from _drafts to _posts folder.</span><br><span class=\"line\">  render    Render files with renderer plugins.</span><br><span class=\"line\">  server    Start the server.</span><br><span class=\"line\">  version   Display version information.</span><br><span class=\"line\"></span><br><span class=\"line\">Global Options:</span><br><span class=\"line\">  --config  Specify config file instead of using _config.yml</span><br><span class=\"line\">  --cwd     Specify the CWD</span><br><span class=\"line\">  --debug   Display all verbose messages <span class=\"keyword\">in</span> the terminal</span><br><span class=\"line\">  --draft   Display draft posts</span><br><span class=\"line\">  --safe    Disable all plugins and scripts</span><br><span class=\"line\">  --silent  Hide output on console</span><br><span class=\"line\"></span><br><span class=\"line\">For more <span class=\"built_in\">help</span>, you can use <span class=\"string\">&#x27;hexo help [command]&#x27;</span> <span class=\"keyword\">for</span> the detailed information</span><br><span class=\"line\">or you can check the docs: http://hexo.io/docs/</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"配置步骤\"><a href=\"#配置步骤\" class=\"headerlink\" title=\"配置步骤\"></a>配置步骤</h1><h2 id=\"Step1-注册algolia\"><a href=\"#Step1-注册algolia\" class=\"headerlink\" title=\"Step1:注册algolia\"></a>Step1:注册algolia</h2><p><a href=\"https://www.algolia.com/\">访问此处进行注册登录</a></p>\n<h2 id=\"Step2-创建索引数据库\"><a href=\"#Step2-创建索引数据库\" class=\"headerlink\" title=\"Step2:创建索引数据库\"></a>Step2:创建索引数据库</h2><blockquote>\n<p>按照如下图进行索引实例创建即可，这里的索引名称后面会用到，自行创建记住即可。</p>\n</blockquote>\n<p><img src=\"/pictures/hexo_config_algolia/image-20230103113149791.png\" alt=\"image-20230103113149791\"></p>\n<h2 id=\"Step3：查看API信息\"><a href=\"#Step3：查看API信息\" class=\"headerlink\" title=\"Step3：查看API信息\"></a>Step3：查看API信息</h2><blockquote>\n<p>可能很多人不知道具体在哪里看，当前可以查看的路径可以看如下截图。</p>\n</blockquote>\n<p><img src=\"/pictures/hexo_config_algolia/image-20230103113426783.png\" alt=\"image-20230103113426783\"></p>\n<p><img src=\"/pictures/hexo_config_algolia/image-20230103113505830.png\" alt=\"image-20230103113505830\"></p>\n<p><img src=\"/pictures/hexo_config_algolia/image-20230103113638126.png\" alt=\"image-20230103113638126\"></p>\n<h2 id=\"Step4-安装插件配置本地文件\"><a href=\"#Step4-安装插件配置本地文件\" class=\"headerlink\" title=\"Step4:安装插件配置本地文件\"></a>Step4:安装插件配置本地文件</h2><ul>\n<li><p>先进入自己博客项目的根目录，然后安装插件：<code> npm install --save hexo-algolia</code>;</p>\n</li>\n<li><p>然后在hexo根目录下的主配置文件<code>_config.yml</code>添加如下内容（具体值按照自己实际注册的内容填写即可）:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">algolia:</span><br><span class=\"line\">  applicationID: <span class=\"string\">&#x27;RPHOC0xxxx&#x27;</span></span><br><span class=\"line\">  apiKey: <span class=\"string\">&#x27;723903e5de5899f6cc4ad96fc509xxxx&#x27;</span></span><br><span class=\"line\">  adminApiKey: <span class=\"string\">&#x27;fe4c456ceeaea4f264f0d242b5fexxxx&#x27;</span></span><br><span class=\"line\">  indexName: <span class=\"string\">&#x27;hexo_blog&#x27;</span></span><br><span class=\"line\">  chunkSize: 5000</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>再在你的主题配置文件中开启相关功能配置：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">algolia_search:</span><br><span class=\"line\">  <span class=\"built_in\">enable</span>: <span class=\"literal\">true</span> <span class=\"comment\"># or false</span></span><br><span class=\"line\">  hits:</span><br><span class=\"line\">    per_page: 10 <span class=\"comment\"># the number of search results per page</span></span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    input_placeholder: Search <span class=\"keyword\">for</span> Posts</span><br><span class=\"line\">    hits_empty: <span class=\"string\">&quot;We didn&#x27;t find any results for the search: <span class=\"variable\">$&#123;query&#125;</span>&quot;</span> <span class=\"comment\"># if there are no result</span></span><br><span class=\"line\">    hits_stats: <span class=\"string\">&quot;<span class=\"variable\">$&#123;hits&#125;</span> results found in <span class=\"variable\">$&#123;time&#125;</span> ms&quot;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"Step5：更新数据到algolia服务器\"><a href=\"#Step5：更新数据到algolia服务器\" class=\"headerlink\" title=\"Step5：更新数据到algolia服务器\"></a>Step5：更新数据到algolia服务器</h2><p>在 hexo 站点根目录下执行<code>hexo algolia</code> 来搜集数据更新到我们刚创建的 Index 中</p>\n<p>此时执行上述命令一般会报如下错误：(这里就是上面说的我们还有一个本地环境变量没配置)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">babyfengfjx@babyfengfjx:~/Documents/typora_documents/github/workdata/myblog$ hexo algolia</span><br><span class=\"line\">INFO  Validating config</span><br><span class=\"line\">ERROR [hexo-algolia] Please <span class=\"built_in\">set</span> an `HEXO_ALGOLIA_INDEXING_KEY` environment variable to <span class=\"built_in\">enable</span> content indexing.</span><br><span class=\"line\">ERROR &gt;&gt; Read https://npmjs.com/hexo-algolia<span class=\"comment\">#api-key for more informations.</span></span><br></pre></td></tr></table></figure>\n\n<p>直接执行一下如下命令：<code>export HEXO_ALGOLIA_INDEXING_KEY=fe4c456ceeaea4f264f0d242b5fexxxx</code> 其中这个key就是Admin api key，添加完环境变量后，再次执行上述命令即可。</p>\n<h2 id=\"Step6：重新部署即可\"><a href=\"#Step6：重新部署即可\" class=\"headerlink\" title=\"Step6：重新部署即可\"></a>Step6：重新部署即可</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br><span class=\"line\">hexo g</span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n"},{"title":"通过live系统修改linux的密码","date":"2022-01-06T02:11:34.000Z","_content":"> 核心思想就是通过live系统进入一个临时系统，然后通过chroot到物理系统的根目录，进行相关密码重置工作。\n\n# Step One:进入live系统\n\n![1.gif](https://storage.deepin.org/thread/202205201618318171_1.gif)\n**很多人可能还不知道如何进入deepin的live系统，可以看上面动图的操作，也是非常简单：**\n\n1. 首先准备好一个装有deepin镜像的启动U盘（推荐使用ventoy）；\n2. 直接走装镜像的路子,启动到系统安装界面；\n3. 唯一区别是在grub安装界面的时候，不要选择任何选项，而是按一下键盘上的 **“E”** 按键（如果是非EFI启动，可能需要按TAB键）；\n4. 按过之后就会出现下图的编辑界面，通过上下左右按键移动到下方红框标识处，删除 **“cd-installer”** 内容；\n\n   ![2.png](https://storage.deepin.org/thread/20220520162047272_2.png)\n5. 然后直接按键盘上F10按键，接下来就会直接进入live系统界面了。\n6. 进入live系统后是如下界面的样子（下图是V20.6的镜像）：\n\n> 特别提醒：在live系统下长时间也会自动锁屏了，如果你也遇到了锁屏发现没有密码无法进入系统，可能你需要重新来一次，此时可以直接通过ctrl+alt+F2 进入TTY，然后在TTY界面设置密码即可：``sudo passwd uos``,然后再切回来用设置的密码登录即可。\n\n![3.png](https://storage.deepin.org/thread/202205201621386209_3.png)\n\n# Step Two:切换chroot目录\n\n1. 在live系统中打开文件管理器；\n2. 找到根目录所在分区（如我这里的Roota）;\n3. 进入目录后，右键点击空白处，打开终端；\n4. 然后输入 ``sudo chroot ./``;\n5. 回车后，我们就切换到原系统的根目录了。\n\n![qiehuanchroot.gif](https://storage.deepin.org/thread/202206011317339861_qiehuanchroot.gif)\n\n# Step Three:修改用户密码\n\n1. 确认你要修改密码的用户名，比如我这里要修改 ‘babyfengfjx’ 用户的密码；\n2. 在上面的终端里，接着执行：``passwd babyfengfjx``    -- 这里记得换成自己的用户名；\n3. 按照提示设置新的密码即可。\n\n![genghuanmima.gif](https://storage.deepin.org/thread/202206011319569555_genghuanmima.gif)\n\n# Step Four:重启系统，使用新的密码登录\n\n完成上述操作后，即可重启系统，使用刚设置的新密码进行登录了。","source":"_posts/linuxmodifypasswd.md","raw":"title: 通过live系统修改linux的密码\ncategories:\n  - linux\ntags:\n  - linux\ndate: 2022-01-06 10:11:34\n---\n> 核心思想就是通过live系统进入一个临时系统，然后通过chroot到物理系统的根目录，进行相关密码重置工作。\n\n# Step One:进入live系统\n\n![1.gif](https://storage.deepin.org/thread/202205201618318171_1.gif)\n**很多人可能还不知道如何进入deepin的live系统，可以看上面动图的操作，也是非常简单：**\n\n1. 首先准备好一个装有deepin镜像的启动U盘（推荐使用ventoy）；\n2. 直接走装镜像的路子,启动到系统安装界面；\n3. 唯一区别是在grub安装界面的时候，不要选择任何选项，而是按一下键盘上的 **“E”** 按键（如果是非EFI启动，可能需要按TAB键）；\n4. 按过之后就会出现下图的编辑界面，通过上下左右按键移动到下方红框标识处，删除 **“cd-installer”** 内容；\n\n   ![2.png](https://storage.deepin.org/thread/20220520162047272_2.png)\n5. 然后直接按键盘上F10按键，接下来就会直接进入live系统界面了。\n6. 进入live系统后是如下界面的样子（下图是V20.6的镜像）：\n\n> 特别提醒：在live系统下长时间也会自动锁屏了，如果你也遇到了锁屏发现没有密码无法进入系统，可能你需要重新来一次，此时可以直接通过ctrl+alt+F2 进入TTY，然后在TTY界面设置密码即可：``sudo passwd uos``,然后再切回来用设置的密码登录即可。\n\n![3.png](https://storage.deepin.org/thread/202205201621386209_3.png)\n\n# Step Two:切换chroot目录\n\n1. 在live系统中打开文件管理器；\n2. 找到根目录所在分区（如我这里的Roota）;\n3. 进入目录后，右键点击空白处，打开终端；\n4. 然后输入 ``sudo chroot ./``;\n5. 回车后，我们就切换到原系统的根目录了。\n\n![qiehuanchroot.gif](https://storage.deepin.org/thread/202206011317339861_qiehuanchroot.gif)\n\n# Step Three:修改用户密码\n\n1. 确认你要修改密码的用户名，比如我这里要修改 ‘babyfengfjx’ 用户的密码；\n2. 在上面的终端里，接着执行：``passwd babyfengfjx``    -- 这里记得换成自己的用户名；\n3. 按照提示设置新的密码即可。\n\n![genghuanmima.gif](https://storage.deepin.org/thread/202206011319569555_genghuanmima.gif)\n\n# Step Four:重启系统，使用新的密码登录\n\n完成上述操作后，即可重启系统，使用刚设置的新密码进行登录了。","slug":"linuxmodifypasswd","published":1,"updated":"2022-12-31T04:23:39.861Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clcfvvv9r000e84xh899ib93z","content":"<blockquote>\n<p>核心思想就是通过live系统进入一个临时系统，然后通过chroot到物理系统的根目录，进行相关密码重置工作。</p>\n</blockquote>\n<h1 id=\"Step-One-进入live系统\"><a href=\"#Step-One-进入live系统\" class=\"headerlink\" title=\"Step One:进入live系统\"></a>Step One:进入live系统</h1><p><img src=\"https://storage.deepin.org/thread/202205201618318171_1.gif\" alt=\"1.gif\"><br><strong>很多人可能还不知道如何进入deepin的live系统，可以看上面动图的操作，也是非常简单：</strong></p>\n<ol>\n<li><p>首先准备好一个装有deepin镜像的启动U盘（推荐使用ventoy）；</p>\n</li>\n<li><p>直接走装镜像的路子,启动到系统安装界面；</p>\n</li>\n<li><p>唯一区别是在grub安装界面的时候，不要选择任何选项，而是按一下键盘上的 <strong>“E”</strong> 按键（如果是非EFI启动，可能需要按TAB键）；</p>\n</li>\n<li><p>按过之后就会出现下图的编辑界面，通过上下左右按键移动到下方红框标识处，删除 <strong>“cd-installer”</strong> 内容；</p>\n<p><img src=\"https://storage.deepin.org/thread/20220520162047272_2.png\" alt=\"2.png\"></p>\n</li>\n<li><p>然后直接按键盘上F10按键，接下来就会直接进入live系统界面了。</p>\n</li>\n<li><p>进入live系统后是如下界面的样子（下图是V20.6的镜像）：</p>\n</li>\n</ol>\n<blockquote>\n<p>特别提醒：在live系统下长时间也会自动锁屏了，如果你也遇到了锁屏发现没有密码无法进入系统，可能你需要重新来一次，此时可以直接通过ctrl+alt+F2 进入TTY，然后在TTY界面设置密码即可：<code>sudo passwd uos</code>,然后再切回来用设置的密码登录即可。</p>\n</blockquote>\n<p><img src=\"https://storage.deepin.org/thread/202205201621386209_3.png\" alt=\"3.png\"></p>\n<h1 id=\"Step-Two-切换chroot目录\"><a href=\"#Step-Two-切换chroot目录\" class=\"headerlink\" title=\"Step Two:切换chroot目录\"></a>Step Two:切换chroot目录</h1><ol>\n<li>在live系统中打开文件管理器；</li>\n<li>找到根目录所在分区（如我这里的Roota）;</li>\n<li>进入目录后，右键点击空白处，打开终端；</li>\n<li>然后输入 <code>sudo chroot ./</code>;</li>\n<li>回车后，我们就切换到原系统的根目录了。</li>\n</ol>\n<p><img src=\"https://storage.deepin.org/thread/202206011317339861_qiehuanchroot.gif\" alt=\"qiehuanchroot.gif\"></p>\n<h1 id=\"Step-Three-修改用户密码\"><a href=\"#Step-Three-修改用户密码\" class=\"headerlink\" title=\"Step Three:修改用户密码\"></a>Step Three:修改用户密码</h1><ol>\n<li>确认你要修改密码的用户名，比如我这里要修改 ‘babyfengfjx’ 用户的密码；</li>\n<li>在上面的终端里，接着执行：<code>passwd babyfengfjx</code>    – 这里记得换成自己的用户名；</li>\n<li>按照提示设置新的密码即可。</li>\n</ol>\n<p><img src=\"https://storage.deepin.org/thread/202206011319569555_genghuanmima.gif\" alt=\"genghuanmima.gif\"></p>\n<h1 id=\"Step-Four-重启系统，使用新的密码登录\"><a href=\"#Step-Four-重启系统，使用新的密码登录\" class=\"headerlink\" title=\"Step Four:重启系统，使用新的密码登录\"></a>Step Four:重启系统，使用新的密码登录</h1><p>完成上述操作后，即可重启系统，使用刚设置的新密码进行登录了。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>核心思想就是通过live系统进入一个临时系统，然后通过chroot到物理系统的根目录，进行相关密码重置工作。</p>\n</blockquote>\n<h1 id=\"Step-One-进入live系统\"><a href=\"#Step-One-进入live系统\" class=\"headerlink\" title=\"Step One:进入live系统\"></a>Step One:进入live系统</h1><p><img src=\"https://storage.deepin.org/thread/202205201618318171_1.gif\" alt=\"1.gif\"><br><strong>很多人可能还不知道如何进入deepin的live系统，可以看上面动图的操作，也是非常简单：</strong></p>\n<ol>\n<li><p>首先准备好一个装有deepin镜像的启动U盘（推荐使用ventoy）；</p>\n</li>\n<li><p>直接走装镜像的路子,启动到系统安装界面；</p>\n</li>\n<li><p>唯一区别是在grub安装界面的时候，不要选择任何选项，而是按一下键盘上的 <strong>“E”</strong> 按键（如果是非EFI启动，可能需要按TAB键）；</p>\n</li>\n<li><p>按过之后就会出现下图的编辑界面，通过上下左右按键移动到下方红框标识处，删除 <strong>“cd-installer”</strong> 内容；</p>\n<p><img src=\"https://storage.deepin.org/thread/20220520162047272_2.png\" alt=\"2.png\"></p>\n</li>\n<li><p>然后直接按键盘上F10按键，接下来就会直接进入live系统界面了。</p>\n</li>\n<li><p>进入live系统后是如下界面的样子（下图是V20.6的镜像）：</p>\n</li>\n</ol>\n<blockquote>\n<p>特别提醒：在live系统下长时间也会自动锁屏了，如果你也遇到了锁屏发现没有密码无法进入系统，可能你需要重新来一次，此时可以直接通过ctrl+alt+F2 进入TTY，然后在TTY界面设置密码即可：<code>sudo passwd uos</code>,然后再切回来用设置的密码登录即可。</p>\n</blockquote>\n<p><img src=\"https://storage.deepin.org/thread/202205201621386209_3.png\" alt=\"3.png\"></p>\n<h1 id=\"Step-Two-切换chroot目录\"><a href=\"#Step-Two-切换chroot目录\" class=\"headerlink\" title=\"Step Two:切换chroot目录\"></a>Step Two:切换chroot目录</h1><ol>\n<li>在live系统中打开文件管理器；</li>\n<li>找到根目录所在分区（如我这里的Roota）;</li>\n<li>进入目录后，右键点击空白处，打开终端；</li>\n<li>然后输入 <code>sudo chroot ./</code>;</li>\n<li>回车后，我们就切换到原系统的根目录了。</li>\n</ol>\n<p><img src=\"https://storage.deepin.org/thread/202206011317339861_qiehuanchroot.gif\" alt=\"qiehuanchroot.gif\"></p>\n<h1 id=\"Step-Three-修改用户密码\"><a href=\"#Step-Three-修改用户密码\" class=\"headerlink\" title=\"Step Three:修改用户密码\"></a>Step Three:修改用户密码</h1><ol>\n<li>确认你要修改密码的用户名，比如我这里要修改 ‘babyfengfjx’ 用户的密码；</li>\n<li>在上面的终端里，接着执行：<code>passwd babyfengfjx</code>    – 这里记得换成自己的用户名；</li>\n<li>按照提示设置新的密码即可。</li>\n</ol>\n<p><img src=\"https://storage.deepin.org/thread/202206011319569555_genghuanmima.gif\" alt=\"genghuanmima.gif\"></p>\n<h1 id=\"Step-Four-重启系统，使用新的密码登录\"><a href=\"#Step-Four-重启系统，使用新的密码登录\" class=\"headerlink\" title=\"Step Four:重启系统，使用新的密码登录\"></a>Step Four:重启系统，使用新的密码登录</h1><p>完成上述操作后，即可重启系统，使用刚设置的新密码进行登录了。</p>\n"},{"title":"python调度框架APScheduler使用详解（非阻塞模式)","date":"2022-01-20T03:11:34.000Z","_content":"\n## 定时任务设置：\n\n定时任务，有阻塞和非阻塞方式两种，这个部分需要取分清楚:\n\n- ```from apscheduler.schedulers.background import BackgroundScheduler``` 这个是非阻塞的；\n\n- ```from apscheduler.schedulers.blocking import BlockingScheduler``` 这个是阻塞的，在没有其他主程序时，就需要用阻塞的方式，不然代码执行完主程序就结束了。\n\n\n\n```Python\n# coding=utf-8\n\"\"\"\nDemonstrates how to use the background scheduler to schedule a job that executes on 3 second\nintervals.\n\"\"\"\n \nfrom datetime import datetime\nimport time\nimport os\n \nfrom apscheduler.schedulers.background import BackgroundScheduler\n \n \ndef tick():\n    print('Tick! The time is: %s' % datetime.now())\n \n \nif __name__ == '__main__':\n    scheduler = BackgroundScheduler()\n    scheduler.add_job(tick, 'interval', seconds=3)　　#间隔3秒钟执行一次\n    scheduler.start()    #这里的调度任务是独立的一个线程\n    print('Press Ctrl+{0} to exit'.format('Break' if os.name == 'nt' else 'C'))\n \n    try:\n        # This is here to simulate application activity (which keeps the main thread alive).\n        while True:\n            time.sleep(2)    #其他任务是独立的线程执行\n            print('sleep!')\n    except (KeyboardInterrupt, SystemExit):\n        # Not strictly necessary if daemonic mode is enabled but should be done if possible\n        scheduler.shutdown()\n        print('Exit The Job!')\n```\n\n# 非阻塞调度，在指定的时间执行一次\n\n```Python\n# coding=utf-8\n\"\"\"\nDemonstrates how to use the background scheduler to schedule a job that executes on 3 second\nintervals.\n\"\"\"\n \nfrom datetime import datetime\nimport time\nimport os\n \nfrom apscheduler.schedulers.background import BackgroundScheduler\n \n \ndef tick():\n    print('Tick! The time is: %s' % datetime.now())\n \n \nif __name__ == '__main__':\n    scheduler = BackgroundScheduler()\n    #scheduler.add_job(tick, 'interval', seconds=3)\n    scheduler.add_job(tick, 'date', run_date='2016-02-14 15:01:05')　　#在指定的时间，只执行一次\n    scheduler.start()    #这里的调度任务是独立的一个线程\n    print('Press Ctrl+{0} to exit'.format('Break' if os.name == 'nt' else 'C'))\n \n    try:\n        # This is here to simulate application activity (which keeps the main thread alive).\n        while True:\n            time.sleep(2)    #其他任务是独立的线程执行\n            print('sleep!')\n    except (KeyboardInterrupt, SystemExit):\n        # Not strictly necessary if daemonic mode is enabled but should be done if possible\n        scheduler.shutdown()\n        print('Exit The Job!')\n```\n\n# 非阻塞的方式，采用cron的方式执行\n\n```Python\n# coding=utf-8\n\"\"\"\nDemonstrates how to use the background scheduler to schedule a job that executes on 3 second\nintervals.\n\"\"\"\n \nfrom datetime import datetime\nimport time\nimport os\n \nfrom apscheduler.schedulers.background import BackgroundScheduler\n \n \ndef tick():\n    print('Tick! The time is: %s' % datetime.now())\n \n \nif __name__ == '__main__':\n    scheduler = BackgroundScheduler()\n    #scheduler.add_job(tick, 'interval', seconds=3)\n    #scheduler.add_job(tick, 'date', run_date='2016-02-14 15:01:05')\n    scheduler.add_job(tick, 'cron', day_of_week='6', second='*/5')\n    '''\n        year (int|str) – 4-digit year\n        month (int|str) – month (1-12)\n        day (int|str) – day of the (1-31)\n        week (int|str) – ISO week (1-53)\n        day_of_week (int|str) – number or name of weekday (0-6 or mon,tue,wed,thu,fri,sat,sun)\n        hour (int|str) – hour (0-23)\n        minute (int|str) – minute (0-59)\n        second (int|str) – second (0-59)\n        \n        start_date (datetime|str) – earliest possible date/time to trigger on (inclusive)\n        end_date (datetime|str) – latest possible date/time to trigger on (inclusive)\n        timezone (datetime.tzinfo|str) – time zone to use for the date/time calculations (defaults to scheduler timezone)\n    \n        *    any    Fire on every value\n        */a    any    Fire every a values, starting from the minimum\n        a-b    any    Fire on any value within the a-b range (a must be smaller than b)\n        a-b/c    any    Fire every c values within the a-b range\n        xth y    day    Fire on the x -th occurrence of weekday y within the month\n        last x    day    Fire on the last occurrence of weekday x within the month\n        last    day    Fire on the last day within the month\n        x,y,z    any    Fire on any matching expression; can combine any number of any of the above expressions\n    '''\n    scheduler.start()    #这里的调度任务是独立的一个线程\n    print('Press Ctrl+{0} to exit'.format('Break' if os.name == 'nt' else 'C'))\n \n    try:\n        # This is here to simulate application activity (which keeps the main thread alive).\n        while True:\n            time.sleep(2)    #其他任务是独立的线程执行\n            print('sleep!')\n    except (KeyboardInterruptSystemExit):\n        # Not strictly necessary if daemonic mode is enabled but should be done if possible\n        scheduler.shutdown()\n        print('Exit The Job!')\n```\n\n# 阻塞的方式，间隔3秒执行一次\n\n```Python\n# coding=utf-8\n\"\"\"\nDemonstrates how to use the background scheduler to schedule a job that executes on 3 second\nintervals.\n\"\"\"\n \nfrom datetime import datetime\nimport os\n \nfrom apscheduler.schedulers.blocking import BlockingScheduler\n \n \ndef tick():\n    print('Tick! The time is: %s' % datetime.now())\n \n \nif __name__ == '__main__':\n    scheduler = BlockingScheduler()\n    scheduler.add_job(tick, 'interval', seconds=3)\n    \n    print('Press Ctrl+{0} to exit'.format('Break' if os.name == 'nt' else 'C'))\n \n    try:\n        scheduler.start()    #采用的是阻塞的方式，只有一个线程专职做调度的任务\n    except (KeyboardInterrupt, SystemExit):\n        # Not strictly necessary if daemonic mode is enabled but should be done if possible\n        scheduler.shutdown()\n        print('Exit The Job!')\n```\n\n# 采用阻塞的方法，只执行一次\n\n```Python\n# coding=utf-8\n\"\"\"\nDemonstrates how to use the background scheduler to schedule a job that executes on 3 second\nintervals.\n\"\"\"\n \nfrom datetime import datetime\nimport os\n \nfrom apscheduler.schedulers.blocking import BlockingScheduler\n \n \ndef tick():\n    print('Tick! The time is: %s' % datetime.now())\n \n \nif __name__ == '__main__':\n    scheduler = BlockingScheduler()\n    scheduler.add_job(tick, 'date', run_date='2016-02-14 15:23:05')\n    \n    print('Press Ctrl+{0} to exit'.format('Break' if os.name == 'nt' else 'C'))\n \n    try:\n        scheduler.start()    #采用的是阻塞的方式，只有一个线程专职做调度的任务\n    except (KeyboardInterrupt, SystemExit):\n        # Not strictly necessary if daemonic mode is enabled but should be done if possible\n        scheduler.shutdown()\n        print('Exit The Job!')\n```\n\n# 采用阻塞的方式，使用cron的调度方法\n\n```Python\n# coding=utf-8\n\"\"\"\nDemonstrates how to use the background scheduler to schedule a job that executes on 3 second\nintervals.\n\"\"\"\n \nfrom datetime import datetime\nimport os\n \nfrom apscheduler.schedulers.blocking import BlockingScheduler\n \n \ndef tick():\n    print('Tick! The time is: %s' % datetime.now())\n \n \nif __name__ == '__main__':\n    scheduler = BlockingScheduler()\n    scheduler.add_job(tick, 'cron', day_of_week='6', second='*/5')\n    '''\n        year (int|str) – 4-digit year\n        month (int|str) – month (1-12)\n        day (int|str) – day of the (1-31)\n        week (int|str) – ISO week (1-53)\n        day_of_week (int|str) – number or name of weekday (0-6 or mon,tue,wed,thu,fri,sat,sun)\n        hour (int|str) – hour (0-23)\n        minute (int|str) – minute (0-59)\n        second (int|str) – second (0-59)\n        \n        start_date (datetime|str) – earliest possible date/time to trigger on (inclusive)\n        end_date (datetime|str) – latest possible date/time to trigger on (inclusive)\n        timezone (datetime.tzinfo|str) – time zone to use for the date/time calculations (defaults to scheduler timezone)\n    \n        *    any    Fire on every value\n        */a    any    Fire every a values, starting from the minimum\n        a-b    any    Fire on any value within the a-b range (a must be smaller than b)\n        a-b/c    any    Fire every c values within the a-b range\n        xth y    day    Fire on the x -th occurrence of weekday y within the month\n        last x    day    Fire on the last occurrence of weekday x within the month\n        last    day    Fire on the last day within the month\n        x,y,z    any    Fire on any matching expression; can combine any number of any of the above expressions\n    '''\n    \n    print('Press Ctrl+{0} to exit'.format('Break' if os.name == 'nt' else 'C'))\n \n    try:\n        scheduler.start()    #采用的是阻塞的方式，只有一个线程专职做调度的任务\n    except (KeyboardInterrupt, SystemExit):\n        # Not strictly necessary if daemonic mode is enabled but should be done if possible\n        scheduler.shutdown()\n        print('Exit The Job!')\n```\n\n[转自此链接](https://www.cnblogs.com/cangqinglang/p/14338220.html)\n","source":"_posts/python调度框架APScheduler使用详解（非阻塞模式）.md","raw":"---\ntitle: python调度框架APScheduler使用详解（非阻塞模式)\ncategories: \n- python\ntags:\n- python\n- 任务调度\ndate: 2022-01-20 11:11:34\n---\n\n## 定时任务设置：\n\n定时任务，有阻塞和非阻塞方式两种，这个部分需要取分清楚:\n\n- ```from apscheduler.schedulers.background import BackgroundScheduler``` 这个是非阻塞的；\n\n- ```from apscheduler.schedulers.blocking import BlockingScheduler``` 这个是阻塞的，在没有其他主程序时，就需要用阻塞的方式，不然代码执行完主程序就结束了。\n\n\n\n```Python\n# coding=utf-8\n\"\"\"\nDemonstrates how to use the background scheduler to schedule a job that executes on 3 second\nintervals.\n\"\"\"\n \nfrom datetime import datetime\nimport time\nimport os\n \nfrom apscheduler.schedulers.background import BackgroundScheduler\n \n \ndef tick():\n    print('Tick! The time is: %s' % datetime.now())\n \n \nif __name__ == '__main__':\n    scheduler = BackgroundScheduler()\n    scheduler.add_job(tick, 'interval', seconds=3)　　#间隔3秒钟执行一次\n    scheduler.start()    #这里的调度任务是独立的一个线程\n    print('Press Ctrl+{0} to exit'.format('Break' if os.name == 'nt' else 'C'))\n \n    try:\n        # This is here to simulate application activity (which keeps the main thread alive).\n        while True:\n            time.sleep(2)    #其他任务是独立的线程执行\n            print('sleep!')\n    except (KeyboardInterrupt, SystemExit):\n        # Not strictly necessary if daemonic mode is enabled but should be done if possible\n        scheduler.shutdown()\n        print('Exit The Job!')\n```\n\n# 非阻塞调度，在指定的时间执行一次\n\n```Python\n# coding=utf-8\n\"\"\"\nDemonstrates how to use the background scheduler to schedule a job that executes on 3 second\nintervals.\n\"\"\"\n \nfrom datetime import datetime\nimport time\nimport os\n \nfrom apscheduler.schedulers.background import BackgroundScheduler\n \n \ndef tick():\n    print('Tick! The time is: %s' % datetime.now())\n \n \nif __name__ == '__main__':\n    scheduler = BackgroundScheduler()\n    #scheduler.add_job(tick, 'interval', seconds=3)\n    scheduler.add_job(tick, 'date', run_date='2016-02-14 15:01:05')　　#在指定的时间，只执行一次\n    scheduler.start()    #这里的调度任务是独立的一个线程\n    print('Press Ctrl+{0} to exit'.format('Break' if os.name == 'nt' else 'C'))\n \n    try:\n        # This is here to simulate application activity (which keeps the main thread alive).\n        while True:\n            time.sleep(2)    #其他任务是独立的线程执行\n            print('sleep!')\n    except (KeyboardInterrupt, SystemExit):\n        # Not strictly necessary if daemonic mode is enabled but should be done if possible\n        scheduler.shutdown()\n        print('Exit The Job!')\n```\n\n# 非阻塞的方式，采用cron的方式执行\n\n```Python\n# coding=utf-8\n\"\"\"\nDemonstrates how to use the background scheduler to schedule a job that executes on 3 second\nintervals.\n\"\"\"\n \nfrom datetime import datetime\nimport time\nimport os\n \nfrom apscheduler.schedulers.background import BackgroundScheduler\n \n \ndef tick():\n    print('Tick! The time is: %s' % datetime.now())\n \n \nif __name__ == '__main__':\n    scheduler = BackgroundScheduler()\n    #scheduler.add_job(tick, 'interval', seconds=3)\n    #scheduler.add_job(tick, 'date', run_date='2016-02-14 15:01:05')\n    scheduler.add_job(tick, 'cron', day_of_week='6', second='*/5')\n    '''\n        year (int|str) – 4-digit year\n        month (int|str) – month (1-12)\n        day (int|str) – day of the (1-31)\n        week (int|str) – ISO week (1-53)\n        day_of_week (int|str) – number or name of weekday (0-6 or mon,tue,wed,thu,fri,sat,sun)\n        hour (int|str) – hour (0-23)\n        minute (int|str) – minute (0-59)\n        second (int|str) – second (0-59)\n        \n        start_date (datetime|str) – earliest possible date/time to trigger on (inclusive)\n        end_date (datetime|str) – latest possible date/time to trigger on (inclusive)\n        timezone (datetime.tzinfo|str) – time zone to use for the date/time calculations (defaults to scheduler timezone)\n    \n        *    any    Fire on every value\n        */a    any    Fire every a values, starting from the minimum\n        a-b    any    Fire on any value within the a-b range (a must be smaller than b)\n        a-b/c    any    Fire every c values within the a-b range\n        xth y    day    Fire on the x -th occurrence of weekday y within the month\n        last x    day    Fire on the last occurrence of weekday x within the month\n        last    day    Fire on the last day within the month\n        x,y,z    any    Fire on any matching expression; can combine any number of any of the above expressions\n    '''\n    scheduler.start()    #这里的调度任务是独立的一个线程\n    print('Press Ctrl+{0} to exit'.format('Break' if os.name == 'nt' else 'C'))\n \n    try:\n        # This is here to simulate application activity (which keeps the main thread alive).\n        while True:\n            time.sleep(2)    #其他任务是独立的线程执行\n            print('sleep!')\n    except (KeyboardInterruptSystemExit):\n        # Not strictly necessary if daemonic mode is enabled but should be done if possible\n        scheduler.shutdown()\n        print('Exit The Job!')\n```\n\n# 阻塞的方式，间隔3秒执行一次\n\n```Python\n# coding=utf-8\n\"\"\"\nDemonstrates how to use the background scheduler to schedule a job that executes on 3 second\nintervals.\n\"\"\"\n \nfrom datetime import datetime\nimport os\n \nfrom apscheduler.schedulers.blocking import BlockingScheduler\n \n \ndef tick():\n    print('Tick! The time is: %s' % datetime.now())\n \n \nif __name__ == '__main__':\n    scheduler = BlockingScheduler()\n    scheduler.add_job(tick, 'interval', seconds=3)\n    \n    print('Press Ctrl+{0} to exit'.format('Break' if os.name == 'nt' else 'C'))\n \n    try:\n        scheduler.start()    #采用的是阻塞的方式，只有一个线程专职做调度的任务\n    except (KeyboardInterrupt, SystemExit):\n        # Not strictly necessary if daemonic mode is enabled but should be done if possible\n        scheduler.shutdown()\n        print('Exit The Job!')\n```\n\n# 采用阻塞的方法，只执行一次\n\n```Python\n# coding=utf-8\n\"\"\"\nDemonstrates how to use the background scheduler to schedule a job that executes on 3 second\nintervals.\n\"\"\"\n \nfrom datetime import datetime\nimport os\n \nfrom apscheduler.schedulers.blocking import BlockingScheduler\n \n \ndef tick():\n    print('Tick! The time is: %s' % datetime.now())\n \n \nif __name__ == '__main__':\n    scheduler = BlockingScheduler()\n    scheduler.add_job(tick, 'date', run_date='2016-02-14 15:23:05')\n    \n    print('Press Ctrl+{0} to exit'.format('Break' if os.name == 'nt' else 'C'))\n \n    try:\n        scheduler.start()    #采用的是阻塞的方式，只有一个线程专职做调度的任务\n    except (KeyboardInterrupt, SystemExit):\n        # Not strictly necessary if daemonic mode is enabled but should be done if possible\n        scheduler.shutdown()\n        print('Exit The Job!')\n```\n\n# 采用阻塞的方式，使用cron的调度方法\n\n```Python\n# coding=utf-8\n\"\"\"\nDemonstrates how to use the background scheduler to schedule a job that executes on 3 second\nintervals.\n\"\"\"\n \nfrom datetime import datetime\nimport os\n \nfrom apscheduler.schedulers.blocking import BlockingScheduler\n \n \ndef tick():\n    print('Tick! The time is: %s' % datetime.now())\n \n \nif __name__ == '__main__':\n    scheduler = BlockingScheduler()\n    scheduler.add_job(tick, 'cron', day_of_week='6', second='*/5')\n    '''\n        year (int|str) – 4-digit year\n        month (int|str) – month (1-12)\n        day (int|str) – day of the (1-31)\n        week (int|str) – ISO week (1-53)\n        day_of_week (int|str) – number or name of weekday (0-6 or mon,tue,wed,thu,fri,sat,sun)\n        hour (int|str) – hour (0-23)\n        minute (int|str) – minute (0-59)\n        second (int|str) – second (0-59)\n        \n        start_date (datetime|str) – earliest possible date/time to trigger on (inclusive)\n        end_date (datetime|str) – latest possible date/time to trigger on (inclusive)\n        timezone (datetime.tzinfo|str) – time zone to use for the date/time calculations (defaults to scheduler timezone)\n    \n        *    any    Fire on every value\n        */a    any    Fire every a values, starting from the minimum\n        a-b    any    Fire on any value within the a-b range (a must be smaller than b)\n        a-b/c    any    Fire every c values within the a-b range\n        xth y    day    Fire on the x -th occurrence of weekday y within the month\n        last x    day    Fire on the last occurrence of weekday x within the month\n        last    day    Fire on the last day within the month\n        x,y,z    any    Fire on any matching expression; can combine any number of any of the above expressions\n    '''\n    \n    print('Press Ctrl+{0} to exit'.format('Break' if os.name == 'nt' else 'C'))\n \n    try:\n        scheduler.start()    #采用的是阻塞的方式，只有一个线程专职做调度的任务\n    except (KeyboardInterrupt, SystemExit):\n        # Not strictly necessary if daemonic mode is enabled but should be done if possible\n        scheduler.shutdown()\n        print('Exit The Job!')\n```\n\n[转自此链接](https://www.cnblogs.com/cangqinglang/p/14338220.html)\n","slug":"python调度框架APScheduler使用详解（非阻塞模式）","published":1,"updated":"2022-12-31T04:20:44.395Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clcfvvv9y001i84xh3yjla7tj","content":"<h2 id=\"定时任务设置：\"><a href=\"#定时任务设置：\" class=\"headerlink\" title=\"定时任务设置：\"></a>定时任务设置：</h2><p>定时任务，有阻塞和非阻塞方式两种，这个部分需要取分清楚:</p>\n<ul>\n<li><p><code>from apscheduler.schedulers.background import BackgroundScheduler</code> 这个是非阻塞的；</p>\n</li>\n<li><p><code>from apscheduler.schedulers.blocking import BlockingScheduler</code> 这个是阻塞的，在没有其他主程序时，就需要用阻塞的方式，不然代码执行完主程序就结束了。</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># coding=utf-8</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">Demonstrates how to use the background scheduler to schedule a job that executes on 3 second</span></span><br><span class=\"line\"><span class=\"string\">intervals.</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">from</span> datetime <span class=\"keyword\">import</span> datetime</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">from</span> apscheduler.schedulers.background <span class=\"keyword\">import</span> BackgroundScheduler</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">tick</span>():</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Tick! The time is: %s&#x27;</span> % datetime.now())</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    scheduler = BackgroundScheduler()</span><br><span class=\"line\">    scheduler.add_job(tick, <span class=\"string\">&#x27;interval&#x27;</span>, seconds=<span class=\"number\">3</span>)　　<span class=\"comment\">#间隔3秒钟执行一次</span></span><br><span class=\"line\">    scheduler.start()    <span class=\"comment\">#这里的调度任务是独立的一个线程</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Press Ctrl+&#123;0&#125; to exit&#x27;</span>.<span class=\"built_in\">format</span>(<span class=\"string\">&#x27;Break&#x27;</span> <span class=\"keyword\">if</span> os.name == <span class=\"string\">&#x27;nt&#x27;</span> <span class=\"keyword\">else</span> <span class=\"string\">&#x27;C&#x27;</span>))</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"comment\"># This is here to simulate application activity (which keeps the main thread alive).</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">            time.sleep(<span class=\"number\">2</span>)    <span class=\"comment\">#其他任务是独立的线程执行</span></span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;sleep!&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> (KeyboardInterrupt, SystemExit):</span><br><span class=\"line\">        <span class=\"comment\"># Not strictly necessary if daemonic mode is enabled but should be done if possible</span></span><br><span class=\"line\">        scheduler.shutdown()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Exit The Job!&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"非阻塞调度，在指定的时间执行一次\"><a href=\"#非阻塞调度，在指定的时间执行一次\" class=\"headerlink\" title=\"非阻塞调度，在指定的时间执行一次\"></a>非阻塞调度，在指定的时间执行一次</h1><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># coding=utf-8</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">Demonstrates how to use the background scheduler to schedule a job that executes on 3 second</span></span><br><span class=\"line\"><span class=\"string\">intervals.</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">from</span> datetime <span class=\"keyword\">import</span> datetime</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">from</span> apscheduler.schedulers.background <span class=\"keyword\">import</span> BackgroundScheduler</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">tick</span>():</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Tick! The time is: %s&#x27;</span> % datetime.now())</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    scheduler = BackgroundScheduler()</span><br><span class=\"line\">    <span class=\"comment\">#scheduler.add_job(tick, &#x27;interval&#x27;, seconds=3)</span></span><br><span class=\"line\">    scheduler.add_job(tick, <span class=\"string\">&#x27;date&#x27;</span>, run_date=<span class=\"string\">&#x27;2016-02-14 15:01:05&#x27;</span>)　　<span class=\"comment\">#在指定的时间，只执行一次</span></span><br><span class=\"line\">    scheduler.start()    <span class=\"comment\">#这里的调度任务是独立的一个线程</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Press Ctrl+&#123;0&#125; to exit&#x27;</span>.<span class=\"built_in\">format</span>(<span class=\"string\">&#x27;Break&#x27;</span> <span class=\"keyword\">if</span> os.name == <span class=\"string\">&#x27;nt&#x27;</span> <span class=\"keyword\">else</span> <span class=\"string\">&#x27;C&#x27;</span>))</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"comment\"># This is here to simulate application activity (which keeps the main thread alive).</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">            time.sleep(<span class=\"number\">2</span>)    <span class=\"comment\">#其他任务是独立的线程执行</span></span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;sleep!&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> (KeyboardInterrupt, SystemExit):</span><br><span class=\"line\">        <span class=\"comment\"># Not strictly necessary if daemonic mode is enabled but should be done if possible</span></span><br><span class=\"line\">        scheduler.shutdown()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Exit The Job!&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"非阻塞的方式，采用cron的方式执行\"><a href=\"#非阻塞的方式，采用cron的方式执行\" class=\"headerlink\" title=\"非阻塞的方式，采用cron的方式执行\"></a>非阻塞的方式，采用cron的方式执行</h1><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># coding=utf-8</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">Demonstrates how to use the background scheduler to schedule a job that executes on 3 second</span></span><br><span class=\"line\"><span class=\"string\">intervals.</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">from</span> datetime <span class=\"keyword\">import</span> datetime</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">from</span> apscheduler.schedulers.background <span class=\"keyword\">import</span> BackgroundScheduler</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">tick</span>():</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Tick! The time is: %s&#x27;</span> % datetime.now())</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    scheduler = BackgroundScheduler()</span><br><span class=\"line\">    <span class=\"comment\">#scheduler.add_job(tick, &#x27;interval&#x27;, seconds=3)</span></span><br><span class=\"line\">    <span class=\"comment\">#scheduler.add_job(tick, &#x27;date&#x27;, run_date=&#x27;2016-02-14 15:01:05&#x27;)</span></span><br><span class=\"line\">    scheduler.add_job(tick, <span class=\"string\">&#x27;cron&#x27;</span>, day_of_week=<span class=\"string\">&#x27;6&#x27;</span>, second=<span class=\"string\">&#x27;*/5&#x27;</span>)</span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">        year (int|str) – 4-digit year</span></span><br><span class=\"line\"><span class=\"string\">        month (int|str) – month (1-12)</span></span><br><span class=\"line\"><span class=\"string\">        day (int|str) – day of the (1-31)</span></span><br><span class=\"line\"><span class=\"string\">        week (int|str) – ISO week (1-53)</span></span><br><span class=\"line\"><span class=\"string\">        day_of_week (int|str) – number or name of weekday (0-6 or mon,tue,wed,thu,fri,sat,sun)</span></span><br><span class=\"line\"><span class=\"string\">        hour (int|str) – hour (0-23)</span></span><br><span class=\"line\"><span class=\"string\">        minute (int|str) – minute (0-59)</span></span><br><span class=\"line\"><span class=\"string\">        second (int|str) – second (0-59)</span></span><br><span class=\"line\"><span class=\"string\">        </span></span><br><span class=\"line\"><span class=\"string\">        start_date (datetime|str) – earliest possible date/time to trigger on (inclusive)</span></span><br><span class=\"line\"><span class=\"string\">        end_date (datetime|str) – latest possible date/time to trigger on (inclusive)</span></span><br><span class=\"line\"><span class=\"string\">        timezone (datetime.tzinfo|str) – time zone to use for the date/time calculations (defaults to scheduler timezone)</span></span><br><span class=\"line\"><span class=\"string\">    </span></span><br><span class=\"line\"><span class=\"string\">        *    any    Fire on every value</span></span><br><span class=\"line\"><span class=\"string\">        */a    any    Fire every a values, starting from the minimum</span></span><br><span class=\"line\"><span class=\"string\">        a-b    any    Fire on any value within the a-b range (a must be smaller than b)</span></span><br><span class=\"line\"><span class=\"string\">        a-b/c    any    Fire every c values within the a-b range</span></span><br><span class=\"line\"><span class=\"string\">        xth y    day    Fire on the x -th occurrence of weekday y within the month</span></span><br><span class=\"line\"><span class=\"string\">        last x    day    Fire on the last occurrence of weekday x within the month</span></span><br><span class=\"line\"><span class=\"string\">        last    day    Fire on the last day within the month</span></span><br><span class=\"line\"><span class=\"string\">        x,y,z    any    Fire on any matching expression; can combine any number of any of the above expressions</span></span><br><span class=\"line\"><span class=\"string\">    &#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    scheduler.start()    <span class=\"comment\">#这里的调度任务是独立的一个线程</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Press Ctrl+&#123;0&#125; to exit&#x27;</span>.<span class=\"built_in\">format</span>(<span class=\"string\">&#x27;Break&#x27;</span> <span class=\"keyword\">if</span> os.name == <span class=\"string\">&#x27;nt&#x27;</span> <span class=\"keyword\">else</span> <span class=\"string\">&#x27;C&#x27;</span>))</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"comment\"># This is here to simulate application activity (which keeps the main thread alive).</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">            time.sleep(<span class=\"number\">2</span>)    <span class=\"comment\">#其他任务是独立的线程执行</span></span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;sleep!&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> (KeyboardInterruptSystemExit):</span><br><span class=\"line\">        <span class=\"comment\"># Not strictly necessary if daemonic mode is enabled but should be done if possible</span></span><br><span class=\"line\">        scheduler.shutdown()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Exit The Job!&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"阻塞的方式，间隔3秒执行一次\"><a href=\"#阻塞的方式，间隔3秒执行一次\" class=\"headerlink\" title=\"阻塞的方式，间隔3秒执行一次\"></a>阻塞的方式，间隔3秒执行一次</h1><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># coding=utf-8</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">Demonstrates how to use the background scheduler to schedule a job that executes on 3 second</span></span><br><span class=\"line\"><span class=\"string\">intervals.</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">from</span> datetime <span class=\"keyword\">import</span> datetime</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">from</span> apscheduler.schedulers.blocking <span class=\"keyword\">import</span> BlockingScheduler</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">tick</span>():</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Tick! The time is: %s&#x27;</span> % datetime.now())</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    scheduler = BlockingScheduler()</span><br><span class=\"line\">    scheduler.add_job(tick, <span class=\"string\">&#x27;interval&#x27;</span>, seconds=<span class=\"number\">3</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Press Ctrl+&#123;0&#125; to exit&#x27;</span>.<span class=\"built_in\">format</span>(<span class=\"string\">&#x27;Break&#x27;</span> <span class=\"keyword\">if</span> os.name == <span class=\"string\">&#x27;nt&#x27;</span> <span class=\"keyword\">else</span> <span class=\"string\">&#x27;C&#x27;</span>))</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        scheduler.start()    <span class=\"comment\">#采用的是阻塞的方式，只有一个线程专职做调度的任务</span></span><br><span class=\"line\">    <span class=\"keyword\">except</span> (KeyboardInterrupt, SystemExit):</span><br><span class=\"line\">        <span class=\"comment\"># Not strictly necessary if daemonic mode is enabled but should be done if possible</span></span><br><span class=\"line\">        scheduler.shutdown()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Exit The Job!&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"采用阻塞的方法，只执行一次\"><a href=\"#采用阻塞的方法，只执行一次\" class=\"headerlink\" title=\"采用阻塞的方法，只执行一次\"></a>采用阻塞的方法，只执行一次</h1><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># coding=utf-8</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">Demonstrates how to use the background scheduler to schedule a job that executes on 3 second</span></span><br><span class=\"line\"><span class=\"string\">intervals.</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">from</span> datetime <span class=\"keyword\">import</span> datetime</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">from</span> apscheduler.schedulers.blocking <span class=\"keyword\">import</span> BlockingScheduler</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">tick</span>():</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Tick! The time is: %s&#x27;</span> % datetime.now())</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    scheduler = BlockingScheduler()</span><br><span class=\"line\">    scheduler.add_job(tick, <span class=\"string\">&#x27;date&#x27;</span>, run_date=<span class=\"string\">&#x27;2016-02-14 15:23:05&#x27;</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Press Ctrl+&#123;0&#125; to exit&#x27;</span>.<span class=\"built_in\">format</span>(<span class=\"string\">&#x27;Break&#x27;</span> <span class=\"keyword\">if</span> os.name == <span class=\"string\">&#x27;nt&#x27;</span> <span class=\"keyword\">else</span> <span class=\"string\">&#x27;C&#x27;</span>))</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        scheduler.start()    <span class=\"comment\">#采用的是阻塞的方式，只有一个线程专职做调度的任务</span></span><br><span class=\"line\">    <span class=\"keyword\">except</span> (KeyboardInterrupt, SystemExit):</span><br><span class=\"line\">        <span class=\"comment\"># Not strictly necessary if daemonic mode is enabled but should be done if possible</span></span><br><span class=\"line\">        scheduler.shutdown()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Exit The Job!&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"采用阻塞的方式，使用cron的调度方法\"><a href=\"#采用阻塞的方式，使用cron的调度方法\" class=\"headerlink\" title=\"采用阻塞的方式，使用cron的调度方法\"></a>采用阻塞的方式，使用cron的调度方法</h1><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># coding=utf-8</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">Demonstrates how to use the background scheduler to schedule a job that executes on 3 second</span></span><br><span class=\"line\"><span class=\"string\">intervals.</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">from</span> datetime <span class=\"keyword\">import</span> datetime</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">from</span> apscheduler.schedulers.blocking <span class=\"keyword\">import</span> BlockingScheduler</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">tick</span>():</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Tick! The time is: %s&#x27;</span> % datetime.now())</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    scheduler = BlockingScheduler()</span><br><span class=\"line\">    scheduler.add_job(tick, <span class=\"string\">&#x27;cron&#x27;</span>, day_of_week=<span class=\"string\">&#x27;6&#x27;</span>, second=<span class=\"string\">&#x27;*/5&#x27;</span>)</span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">        year (int|str) – 4-digit year</span></span><br><span class=\"line\"><span class=\"string\">        month (int|str) – month (1-12)</span></span><br><span class=\"line\"><span class=\"string\">        day (int|str) – day of the (1-31)</span></span><br><span class=\"line\"><span class=\"string\">        week (int|str) – ISO week (1-53)</span></span><br><span class=\"line\"><span class=\"string\">        day_of_week (int|str) – number or name of weekday (0-6 or mon,tue,wed,thu,fri,sat,sun)</span></span><br><span class=\"line\"><span class=\"string\">        hour (int|str) – hour (0-23)</span></span><br><span class=\"line\"><span class=\"string\">        minute (int|str) – minute (0-59)</span></span><br><span class=\"line\"><span class=\"string\">        second (int|str) – second (0-59)</span></span><br><span class=\"line\"><span class=\"string\">        </span></span><br><span class=\"line\"><span class=\"string\">        start_date (datetime|str) – earliest possible date/time to trigger on (inclusive)</span></span><br><span class=\"line\"><span class=\"string\">        end_date (datetime|str) – latest possible date/time to trigger on (inclusive)</span></span><br><span class=\"line\"><span class=\"string\">        timezone (datetime.tzinfo|str) – time zone to use for the date/time calculations (defaults to scheduler timezone)</span></span><br><span class=\"line\"><span class=\"string\">    </span></span><br><span class=\"line\"><span class=\"string\">        *    any    Fire on every value</span></span><br><span class=\"line\"><span class=\"string\">        */a    any    Fire every a values, starting from the minimum</span></span><br><span class=\"line\"><span class=\"string\">        a-b    any    Fire on any value within the a-b range (a must be smaller than b)</span></span><br><span class=\"line\"><span class=\"string\">        a-b/c    any    Fire every c values within the a-b range</span></span><br><span class=\"line\"><span class=\"string\">        xth y    day    Fire on the x -th occurrence of weekday y within the month</span></span><br><span class=\"line\"><span class=\"string\">        last x    day    Fire on the last occurrence of weekday x within the month</span></span><br><span class=\"line\"><span class=\"string\">        last    day    Fire on the last day within the month</span></span><br><span class=\"line\"><span class=\"string\">        x,y,z    any    Fire on any matching expression; can combine any number of any of the above expressions</span></span><br><span class=\"line\"><span class=\"string\">    &#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Press Ctrl+&#123;0&#125; to exit&#x27;</span>.<span class=\"built_in\">format</span>(<span class=\"string\">&#x27;Break&#x27;</span> <span class=\"keyword\">if</span> os.name == <span class=\"string\">&#x27;nt&#x27;</span> <span class=\"keyword\">else</span> <span class=\"string\">&#x27;C&#x27;</span>))</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        scheduler.start()    <span class=\"comment\">#采用的是阻塞的方式，只有一个线程专职做调度的任务</span></span><br><span class=\"line\">    <span class=\"keyword\">except</span> (KeyboardInterrupt, SystemExit):</span><br><span class=\"line\">        <span class=\"comment\"># Not strictly necessary if daemonic mode is enabled but should be done if possible</span></span><br><span class=\"line\">        scheduler.shutdown()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Exit The Job!&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://www.cnblogs.com/cangqinglang/p/14338220.html\">转自此链接</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"定时任务设置：\"><a href=\"#定时任务设置：\" class=\"headerlink\" title=\"定时任务设置：\"></a>定时任务设置：</h2><p>定时任务，有阻塞和非阻塞方式两种，这个部分需要取分清楚:</p>\n<ul>\n<li><p><code>from apscheduler.schedulers.background import BackgroundScheduler</code> 这个是非阻塞的；</p>\n</li>\n<li><p><code>from apscheduler.schedulers.blocking import BlockingScheduler</code> 这个是阻塞的，在没有其他主程序时，就需要用阻塞的方式，不然代码执行完主程序就结束了。</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># coding=utf-8</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">Demonstrates how to use the background scheduler to schedule a job that executes on 3 second</span></span><br><span class=\"line\"><span class=\"string\">intervals.</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">from</span> datetime <span class=\"keyword\">import</span> datetime</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">from</span> apscheduler.schedulers.background <span class=\"keyword\">import</span> BackgroundScheduler</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">tick</span>():</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Tick! The time is: %s&#x27;</span> % datetime.now())</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    scheduler = BackgroundScheduler()</span><br><span class=\"line\">    scheduler.add_job(tick, <span class=\"string\">&#x27;interval&#x27;</span>, seconds=<span class=\"number\">3</span>)　　<span class=\"comment\">#间隔3秒钟执行一次</span></span><br><span class=\"line\">    scheduler.start()    <span class=\"comment\">#这里的调度任务是独立的一个线程</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Press Ctrl+&#123;0&#125; to exit&#x27;</span>.<span class=\"built_in\">format</span>(<span class=\"string\">&#x27;Break&#x27;</span> <span class=\"keyword\">if</span> os.name == <span class=\"string\">&#x27;nt&#x27;</span> <span class=\"keyword\">else</span> <span class=\"string\">&#x27;C&#x27;</span>))</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"comment\"># This is here to simulate application activity (which keeps the main thread alive).</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">            time.sleep(<span class=\"number\">2</span>)    <span class=\"comment\">#其他任务是独立的线程执行</span></span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;sleep!&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> (KeyboardInterrupt, SystemExit):</span><br><span class=\"line\">        <span class=\"comment\"># Not strictly necessary if daemonic mode is enabled but should be done if possible</span></span><br><span class=\"line\">        scheduler.shutdown()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Exit The Job!&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"非阻塞调度，在指定的时间执行一次\"><a href=\"#非阻塞调度，在指定的时间执行一次\" class=\"headerlink\" title=\"非阻塞调度，在指定的时间执行一次\"></a>非阻塞调度，在指定的时间执行一次</h1><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># coding=utf-8</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">Demonstrates how to use the background scheduler to schedule a job that executes on 3 second</span></span><br><span class=\"line\"><span class=\"string\">intervals.</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">from</span> datetime <span class=\"keyword\">import</span> datetime</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">from</span> apscheduler.schedulers.background <span class=\"keyword\">import</span> BackgroundScheduler</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">tick</span>():</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Tick! The time is: %s&#x27;</span> % datetime.now())</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    scheduler = BackgroundScheduler()</span><br><span class=\"line\">    <span class=\"comment\">#scheduler.add_job(tick, &#x27;interval&#x27;, seconds=3)</span></span><br><span class=\"line\">    scheduler.add_job(tick, <span class=\"string\">&#x27;date&#x27;</span>, run_date=<span class=\"string\">&#x27;2016-02-14 15:01:05&#x27;</span>)　　<span class=\"comment\">#在指定的时间，只执行一次</span></span><br><span class=\"line\">    scheduler.start()    <span class=\"comment\">#这里的调度任务是独立的一个线程</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Press Ctrl+&#123;0&#125; to exit&#x27;</span>.<span class=\"built_in\">format</span>(<span class=\"string\">&#x27;Break&#x27;</span> <span class=\"keyword\">if</span> os.name == <span class=\"string\">&#x27;nt&#x27;</span> <span class=\"keyword\">else</span> <span class=\"string\">&#x27;C&#x27;</span>))</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"comment\"># This is here to simulate application activity (which keeps the main thread alive).</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">            time.sleep(<span class=\"number\">2</span>)    <span class=\"comment\">#其他任务是独立的线程执行</span></span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;sleep!&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> (KeyboardInterrupt, SystemExit):</span><br><span class=\"line\">        <span class=\"comment\"># Not strictly necessary if daemonic mode is enabled but should be done if possible</span></span><br><span class=\"line\">        scheduler.shutdown()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Exit The Job!&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"非阻塞的方式，采用cron的方式执行\"><a href=\"#非阻塞的方式，采用cron的方式执行\" class=\"headerlink\" title=\"非阻塞的方式，采用cron的方式执行\"></a>非阻塞的方式，采用cron的方式执行</h1><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># coding=utf-8</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">Demonstrates how to use the background scheduler to schedule a job that executes on 3 second</span></span><br><span class=\"line\"><span class=\"string\">intervals.</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">from</span> datetime <span class=\"keyword\">import</span> datetime</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">from</span> apscheduler.schedulers.background <span class=\"keyword\">import</span> BackgroundScheduler</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">tick</span>():</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Tick! The time is: %s&#x27;</span> % datetime.now())</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    scheduler = BackgroundScheduler()</span><br><span class=\"line\">    <span class=\"comment\">#scheduler.add_job(tick, &#x27;interval&#x27;, seconds=3)</span></span><br><span class=\"line\">    <span class=\"comment\">#scheduler.add_job(tick, &#x27;date&#x27;, run_date=&#x27;2016-02-14 15:01:05&#x27;)</span></span><br><span class=\"line\">    scheduler.add_job(tick, <span class=\"string\">&#x27;cron&#x27;</span>, day_of_week=<span class=\"string\">&#x27;6&#x27;</span>, second=<span class=\"string\">&#x27;*/5&#x27;</span>)</span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">        year (int|str) – 4-digit year</span></span><br><span class=\"line\"><span class=\"string\">        month (int|str) – month (1-12)</span></span><br><span class=\"line\"><span class=\"string\">        day (int|str) – day of the (1-31)</span></span><br><span class=\"line\"><span class=\"string\">        week (int|str) – ISO week (1-53)</span></span><br><span class=\"line\"><span class=\"string\">        day_of_week (int|str) – number or name of weekday (0-6 or mon,tue,wed,thu,fri,sat,sun)</span></span><br><span class=\"line\"><span class=\"string\">        hour (int|str) – hour (0-23)</span></span><br><span class=\"line\"><span class=\"string\">        minute (int|str) – minute (0-59)</span></span><br><span class=\"line\"><span class=\"string\">        second (int|str) – second (0-59)</span></span><br><span class=\"line\"><span class=\"string\">        </span></span><br><span class=\"line\"><span class=\"string\">        start_date (datetime|str) – earliest possible date/time to trigger on (inclusive)</span></span><br><span class=\"line\"><span class=\"string\">        end_date (datetime|str) – latest possible date/time to trigger on (inclusive)</span></span><br><span class=\"line\"><span class=\"string\">        timezone (datetime.tzinfo|str) – time zone to use for the date/time calculations (defaults to scheduler timezone)</span></span><br><span class=\"line\"><span class=\"string\">    </span></span><br><span class=\"line\"><span class=\"string\">        *    any    Fire on every value</span></span><br><span class=\"line\"><span class=\"string\">        */a    any    Fire every a values, starting from the minimum</span></span><br><span class=\"line\"><span class=\"string\">        a-b    any    Fire on any value within the a-b range (a must be smaller than b)</span></span><br><span class=\"line\"><span class=\"string\">        a-b/c    any    Fire every c values within the a-b range</span></span><br><span class=\"line\"><span class=\"string\">        xth y    day    Fire on the x -th occurrence of weekday y within the month</span></span><br><span class=\"line\"><span class=\"string\">        last x    day    Fire on the last occurrence of weekday x within the month</span></span><br><span class=\"line\"><span class=\"string\">        last    day    Fire on the last day within the month</span></span><br><span class=\"line\"><span class=\"string\">        x,y,z    any    Fire on any matching expression; can combine any number of any of the above expressions</span></span><br><span class=\"line\"><span class=\"string\">    &#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    scheduler.start()    <span class=\"comment\">#这里的调度任务是独立的一个线程</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Press Ctrl+&#123;0&#125; to exit&#x27;</span>.<span class=\"built_in\">format</span>(<span class=\"string\">&#x27;Break&#x27;</span> <span class=\"keyword\">if</span> os.name == <span class=\"string\">&#x27;nt&#x27;</span> <span class=\"keyword\">else</span> <span class=\"string\">&#x27;C&#x27;</span>))</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"comment\"># This is here to simulate application activity (which keeps the main thread alive).</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">            time.sleep(<span class=\"number\">2</span>)    <span class=\"comment\">#其他任务是独立的线程执行</span></span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;sleep!&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> (KeyboardInterruptSystemExit):</span><br><span class=\"line\">        <span class=\"comment\"># Not strictly necessary if daemonic mode is enabled but should be done if possible</span></span><br><span class=\"line\">        scheduler.shutdown()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Exit The Job!&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"阻塞的方式，间隔3秒执行一次\"><a href=\"#阻塞的方式，间隔3秒执行一次\" class=\"headerlink\" title=\"阻塞的方式，间隔3秒执行一次\"></a>阻塞的方式，间隔3秒执行一次</h1><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># coding=utf-8</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">Demonstrates how to use the background scheduler to schedule a job that executes on 3 second</span></span><br><span class=\"line\"><span class=\"string\">intervals.</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">from</span> datetime <span class=\"keyword\">import</span> datetime</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">from</span> apscheduler.schedulers.blocking <span class=\"keyword\">import</span> BlockingScheduler</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">tick</span>():</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Tick! The time is: %s&#x27;</span> % datetime.now())</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    scheduler = BlockingScheduler()</span><br><span class=\"line\">    scheduler.add_job(tick, <span class=\"string\">&#x27;interval&#x27;</span>, seconds=<span class=\"number\">3</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Press Ctrl+&#123;0&#125; to exit&#x27;</span>.<span class=\"built_in\">format</span>(<span class=\"string\">&#x27;Break&#x27;</span> <span class=\"keyword\">if</span> os.name == <span class=\"string\">&#x27;nt&#x27;</span> <span class=\"keyword\">else</span> <span class=\"string\">&#x27;C&#x27;</span>))</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        scheduler.start()    <span class=\"comment\">#采用的是阻塞的方式，只有一个线程专职做调度的任务</span></span><br><span class=\"line\">    <span class=\"keyword\">except</span> (KeyboardInterrupt, SystemExit):</span><br><span class=\"line\">        <span class=\"comment\"># Not strictly necessary if daemonic mode is enabled but should be done if possible</span></span><br><span class=\"line\">        scheduler.shutdown()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Exit The Job!&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"采用阻塞的方法，只执行一次\"><a href=\"#采用阻塞的方法，只执行一次\" class=\"headerlink\" title=\"采用阻塞的方法，只执行一次\"></a>采用阻塞的方法，只执行一次</h1><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># coding=utf-8</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">Demonstrates how to use the background scheduler to schedule a job that executes on 3 second</span></span><br><span class=\"line\"><span class=\"string\">intervals.</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">from</span> datetime <span class=\"keyword\">import</span> datetime</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">from</span> apscheduler.schedulers.blocking <span class=\"keyword\">import</span> BlockingScheduler</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">tick</span>():</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Tick! The time is: %s&#x27;</span> % datetime.now())</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    scheduler = BlockingScheduler()</span><br><span class=\"line\">    scheduler.add_job(tick, <span class=\"string\">&#x27;date&#x27;</span>, run_date=<span class=\"string\">&#x27;2016-02-14 15:23:05&#x27;</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Press Ctrl+&#123;0&#125; to exit&#x27;</span>.<span class=\"built_in\">format</span>(<span class=\"string\">&#x27;Break&#x27;</span> <span class=\"keyword\">if</span> os.name == <span class=\"string\">&#x27;nt&#x27;</span> <span class=\"keyword\">else</span> <span class=\"string\">&#x27;C&#x27;</span>))</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        scheduler.start()    <span class=\"comment\">#采用的是阻塞的方式，只有一个线程专职做调度的任务</span></span><br><span class=\"line\">    <span class=\"keyword\">except</span> (KeyboardInterrupt, SystemExit):</span><br><span class=\"line\">        <span class=\"comment\"># Not strictly necessary if daemonic mode is enabled but should be done if possible</span></span><br><span class=\"line\">        scheduler.shutdown()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Exit The Job!&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"采用阻塞的方式，使用cron的调度方法\"><a href=\"#采用阻塞的方式，使用cron的调度方法\" class=\"headerlink\" title=\"采用阻塞的方式，使用cron的调度方法\"></a>采用阻塞的方式，使用cron的调度方法</h1><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># coding=utf-8</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">Demonstrates how to use the background scheduler to schedule a job that executes on 3 second</span></span><br><span class=\"line\"><span class=\"string\">intervals.</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">from</span> datetime <span class=\"keyword\">import</span> datetime</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">from</span> apscheduler.schedulers.blocking <span class=\"keyword\">import</span> BlockingScheduler</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">tick</span>():</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Tick! The time is: %s&#x27;</span> % datetime.now())</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    scheduler = BlockingScheduler()</span><br><span class=\"line\">    scheduler.add_job(tick, <span class=\"string\">&#x27;cron&#x27;</span>, day_of_week=<span class=\"string\">&#x27;6&#x27;</span>, second=<span class=\"string\">&#x27;*/5&#x27;</span>)</span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">        year (int|str) – 4-digit year</span></span><br><span class=\"line\"><span class=\"string\">        month (int|str) – month (1-12)</span></span><br><span class=\"line\"><span class=\"string\">        day (int|str) – day of the (1-31)</span></span><br><span class=\"line\"><span class=\"string\">        week (int|str) – ISO week (1-53)</span></span><br><span class=\"line\"><span class=\"string\">        day_of_week (int|str) – number or name of weekday (0-6 or mon,tue,wed,thu,fri,sat,sun)</span></span><br><span class=\"line\"><span class=\"string\">        hour (int|str) – hour (0-23)</span></span><br><span class=\"line\"><span class=\"string\">        minute (int|str) – minute (0-59)</span></span><br><span class=\"line\"><span class=\"string\">        second (int|str) – second (0-59)</span></span><br><span class=\"line\"><span class=\"string\">        </span></span><br><span class=\"line\"><span class=\"string\">        start_date (datetime|str) – earliest possible date/time to trigger on (inclusive)</span></span><br><span class=\"line\"><span class=\"string\">        end_date (datetime|str) – latest possible date/time to trigger on (inclusive)</span></span><br><span class=\"line\"><span class=\"string\">        timezone (datetime.tzinfo|str) – time zone to use for the date/time calculations (defaults to scheduler timezone)</span></span><br><span class=\"line\"><span class=\"string\">    </span></span><br><span class=\"line\"><span class=\"string\">        *    any    Fire on every value</span></span><br><span class=\"line\"><span class=\"string\">        */a    any    Fire every a values, starting from the minimum</span></span><br><span class=\"line\"><span class=\"string\">        a-b    any    Fire on any value within the a-b range (a must be smaller than b)</span></span><br><span class=\"line\"><span class=\"string\">        a-b/c    any    Fire every c values within the a-b range</span></span><br><span class=\"line\"><span class=\"string\">        xth y    day    Fire on the x -th occurrence of weekday y within the month</span></span><br><span class=\"line\"><span class=\"string\">        last x    day    Fire on the last occurrence of weekday x within the month</span></span><br><span class=\"line\"><span class=\"string\">        last    day    Fire on the last day within the month</span></span><br><span class=\"line\"><span class=\"string\">        x,y,z    any    Fire on any matching expression; can combine any number of any of the above expressions</span></span><br><span class=\"line\"><span class=\"string\">    &#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Press Ctrl+&#123;0&#125; to exit&#x27;</span>.<span class=\"built_in\">format</span>(<span class=\"string\">&#x27;Break&#x27;</span> <span class=\"keyword\">if</span> os.name == <span class=\"string\">&#x27;nt&#x27;</span> <span class=\"keyword\">else</span> <span class=\"string\">&#x27;C&#x27;</span>))</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        scheduler.start()    <span class=\"comment\">#采用的是阻塞的方式，只有一个线程专职做调度的任务</span></span><br><span class=\"line\">    <span class=\"keyword\">except</span> (KeyboardInterrupt, SystemExit):</span><br><span class=\"line\">        <span class=\"comment\"># Not strictly necessary if daemonic mode is enabled but should be done if possible</span></span><br><span class=\"line\">        scheduler.shutdown()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Exit The Job!&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://www.cnblogs.com/cangqinglang/p/14338220.html\">转自此链接</a></p>\n"},{"title":"requests发送post请求返回405的处理方法","date":"2022-07-20T03:11:34.000Z","_content":"## Requests 请求返回405\n\n> 主要是因为API请求方式要求是json,但我们在分析不清楚的接口时，一般都按照惯性在传递参数的时候是以data方式，所以在使用requests时，不仅要用data=  xxx  ，还要看json= xxx  这种场景。\n\n下面这个代码当时使用请求时，是使用的是：res_data = requests.post(apiurl,**data=**body,headers=headers)   这里你的data= 并不是网站所需要的，其需要的是json,所以改成json= 就可以了。\n\n```Python\ndef get_cookie():\n    \"\"\"\n    从明道云拉取cookie信息\n    \"\"\"\n    apiurl = 'https://cooperation.xxx.com:443/api/v2/open/worksheet/getFilterRows'\n    headers = {\"User-Agent\": \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/101.0.4951.54 Safari/537.36 Edg/101.0.1210.39\"}\n    body = {\n              \"appKey\": \"f7b8e6816d39a931\",\n              \"sign\": \"ODlkNTVhNDdjZDhjNmYwODhjYjExZTU4NGFmODFkZDQzZjRlNGMzMzJlODdhNzhmNTVjYmQ4ZTA1MzAzNzc3Mw==\",\n              \"worksheetId\": \"hxggzjxx\",\n              \"viewId\": \"634509562b5b0f8d7a182f39\",\n              \"pageSize\": 5000,\n              \"pageIndex\": 1,\n              \"filters\":[\n              {\n                \"controlId\": \"leibie\",\n                \"dataType\": 2,\n                \"spliceType\": 1,\n                \"filterType\": 2,\n                \"values\": [\"应用商店审核平台\"]}   ]\n                }\n\n    res_data = requests.post(apiurl, json=body, headers=headers)  # 关键就是这里的传参方式改成json\n    print(res_data)\n\nget_cookie()\n```","source":"_posts/request发送请求405.md","raw":"title: requests发送post请求返回405的处理方法\ncategories:\n\n  - python\n  - 爬虫\ntags:\n  - python\n  - 爬虫\n  - requests\ndate: 2022-07-20 11:11:34\n---\n## Requests 请求返回405\n\n> 主要是因为API请求方式要求是json,但我们在分析不清楚的接口时，一般都按照惯性在传递参数的时候是以data方式，所以在使用requests时，不仅要用data=  xxx  ，还要看json= xxx  这种场景。\n\n下面这个代码当时使用请求时，是使用的是：res_data = requests.post(apiurl,**data=**body,headers=headers)   这里你的data= 并不是网站所需要的，其需要的是json,所以改成json= 就可以了。\n\n```Python\ndef get_cookie():\n    \"\"\"\n    从明道云拉取cookie信息\n    \"\"\"\n    apiurl = 'https://cooperation.xxx.com:443/api/v2/open/worksheet/getFilterRows'\n    headers = {\"User-Agent\": \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/101.0.4951.54 Safari/537.36 Edg/101.0.1210.39\"}\n    body = {\n              \"appKey\": \"f7b8e6816d39a931\",\n              \"sign\": \"ODlkNTVhNDdjZDhjNmYwODhjYjExZTU4NGFmODFkZDQzZjRlNGMzMzJlODdhNzhmNTVjYmQ4ZTA1MzAzNzc3Mw==\",\n              \"worksheetId\": \"hxggzjxx\",\n              \"viewId\": \"634509562b5b0f8d7a182f39\",\n              \"pageSize\": 5000,\n              \"pageIndex\": 1,\n              \"filters\":[\n              {\n                \"controlId\": \"leibie\",\n                \"dataType\": 2,\n                \"spliceType\": 1,\n                \"filterType\": 2,\n                \"values\": [\"应用商店审核平台\"]}   ]\n                }\n\n    res_data = requests.post(apiurl, json=body, headers=headers)  # 关键就是这里的传参方式改成json\n    print(res_data)\n\nget_cookie()\n```","slug":"request发送请求405","published":1,"updated":"2022-12-31T04:20:04.888Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clcfvvv9y001j84xhh22u0pjp","content":"<h2 id=\"Requests-请求返回405\"><a href=\"#Requests-请求返回405\" class=\"headerlink\" title=\"Requests 请求返回405\"></a>Requests 请求返回405</h2><blockquote>\n<p>主要是因为API请求方式要求是json,但我们在分析不清楚的接口时，一般都按照惯性在传递参数的时候是以data方式，所以在使用requests时，不仅要用data&#x3D;  xxx  ，还要看json&#x3D; xxx  这种场景。</p>\n</blockquote>\n<p>下面这个代码当时使用请求时，是使用的是：res_data &#x3D; requests.post(apiurl,**data&#x3D;**body,headers&#x3D;headers)   这里你的data&#x3D; 并不是网站所需要的，其需要的是json,所以改成json&#x3D; 就可以了。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_cookie</span>():</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    从明道云拉取cookie信息</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    apiurl = <span class=\"string\">&#x27;https://cooperation.xxx.com:443/api/v2/open/worksheet/getFilterRows&#x27;</span></span><br><span class=\"line\">    headers = &#123;<span class=\"string\">&quot;User-Agent&quot;</span>: <span class=\"string\">&quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/101.0.4951.54 Safari/537.36 Edg/101.0.1210.39&quot;</span>&#125;</span><br><span class=\"line\">    body = &#123;</span><br><span class=\"line\">              <span class=\"string\">&quot;appKey&quot;</span>: <span class=\"string\">&quot;f7b8e6816d39a931&quot;</span>,</span><br><span class=\"line\">              <span class=\"string\">&quot;sign&quot;</span>: <span class=\"string\">&quot;ODlkNTVhNDdjZDhjNmYwODhjYjExZTU4NGFmODFkZDQzZjRlNGMzMzJlODdhNzhmNTVjYmQ4ZTA1MzAzNzc3Mw==&quot;</span>,</span><br><span class=\"line\">              <span class=\"string\">&quot;worksheetId&quot;</span>: <span class=\"string\">&quot;hxggzjxx&quot;</span>,</span><br><span class=\"line\">              <span class=\"string\">&quot;viewId&quot;</span>: <span class=\"string\">&quot;634509562b5b0f8d7a182f39&quot;</span>,</span><br><span class=\"line\">              <span class=\"string\">&quot;pageSize&quot;</span>: <span class=\"number\">5000</span>,</span><br><span class=\"line\">              <span class=\"string\">&quot;pageIndex&quot;</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">              <span class=\"string\">&quot;filters&quot;</span>:[</span><br><span class=\"line\">              &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;controlId&quot;</span>: <span class=\"string\">&quot;leibie&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;dataType&quot;</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;spliceType&quot;</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;filterType&quot;</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;values&quot;</span>: [<span class=\"string\">&quot;应用商店审核平台&quot;</span>]&#125;   ]</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    res_data = requests.post(apiurl, json=body, headers=headers)  <span class=\"comment\"># 关键就是这里的传参方式改成json</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(res_data)</span><br><span class=\"line\"></span><br><span class=\"line\">get_cookie()</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Requests-请求返回405\"><a href=\"#Requests-请求返回405\" class=\"headerlink\" title=\"Requests 请求返回405\"></a>Requests 请求返回405</h2><blockquote>\n<p>主要是因为API请求方式要求是json,但我们在分析不清楚的接口时，一般都按照惯性在传递参数的时候是以data方式，所以在使用requests时，不仅要用data&#x3D;  xxx  ，还要看json&#x3D; xxx  这种场景。</p>\n</blockquote>\n<p>下面这个代码当时使用请求时，是使用的是：res_data &#x3D; requests.post(apiurl,**data&#x3D;**body,headers&#x3D;headers)   这里你的data&#x3D; 并不是网站所需要的，其需要的是json,所以改成json&#x3D; 就可以了。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_cookie</span>():</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    从明道云拉取cookie信息</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    apiurl = <span class=\"string\">&#x27;https://cooperation.xxx.com:443/api/v2/open/worksheet/getFilterRows&#x27;</span></span><br><span class=\"line\">    headers = &#123;<span class=\"string\">&quot;User-Agent&quot;</span>: <span class=\"string\">&quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/101.0.4951.54 Safari/537.36 Edg/101.0.1210.39&quot;</span>&#125;</span><br><span class=\"line\">    body = &#123;</span><br><span class=\"line\">              <span class=\"string\">&quot;appKey&quot;</span>: <span class=\"string\">&quot;f7b8e6816d39a931&quot;</span>,</span><br><span class=\"line\">              <span class=\"string\">&quot;sign&quot;</span>: <span class=\"string\">&quot;ODlkNTVhNDdjZDhjNmYwODhjYjExZTU4NGFmODFkZDQzZjRlNGMzMzJlODdhNzhmNTVjYmQ4ZTA1MzAzNzc3Mw==&quot;</span>,</span><br><span class=\"line\">              <span class=\"string\">&quot;worksheetId&quot;</span>: <span class=\"string\">&quot;hxggzjxx&quot;</span>,</span><br><span class=\"line\">              <span class=\"string\">&quot;viewId&quot;</span>: <span class=\"string\">&quot;634509562b5b0f8d7a182f39&quot;</span>,</span><br><span class=\"line\">              <span class=\"string\">&quot;pageSize&quot;</span>: <span class=\"number\">5000</span>,</span><br><span class=\"line\">              <span class=\"string\">&quot;pageIndex&quot;</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">              <span class=\"string\">&quot;filters&quot;</span>:[</span><br><span class=\"line\">              &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;controlId&quot;</span>: <span class=\"string\">&quot;leibie&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;dataType&quot;</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;spliceType&quot;</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;filterType&quot;</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;values&quot;</span>: [<span class=\"string\">&quot;应用商店审核平台&quot;</span>]&#125;   ]</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    res_data = requests.post(apiurl, json=body, headers=headers)  <span class=\"comment\"># 关键就是这里的传参方式改成json</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(res_data)</span><br><span class=\"line\"></span><br><span class=\"line\">get_cookie()</span><br></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[{"post_id":"clcfvvv9r000e84xh899ib93z","category_id":"clcfvvv9m000484xh9v726ebr","_id":"clcfvvv9t000k84xh8gct1sk2"},{"post_id":"clcfvvv9o000884xh2251875o","category_id":"clcfvvv9m000484xh9v726ebr","_id":"clcfvvv9t000p84xhg3idhyhn"},{"post_id":"clcfvvv9o000884xh2251875o","category_id":"clcfvvv9s000i84xh78apbvjg","_id":"clcfvvv9u000s84xh9kua2egi"},{"post_id":"clcfvvv9j000184xh3fgmbegp","category_id":"clcfvvv9m000484xh9v726ebr","_id":"clcfvvv9u000t84xhg5zk67we"},{"post_id":"clcfvvv9j000184xh3fgmbegp","category_id":"clcfvvv9t000n84xh3q0g8qv5","_id":"clcfvvv9u000w84xhgmezdwhj"},{"post_id":"clcfvvv9p000984xh6u82678q","category_id":"clcfvvv9t000q84xh0k4g3cjl","_id":"clcfvvv9u000z84xh5lh27gpf"},{"post_id":"clcfvvv9r000d84xhbyrw4f7z","category_id":"clcfvvv9u000u84xhcn6q8n2x","_id":"clcfvvv9v001484xhcpq12qky"},{"post_id":"clcfvvv9l000384xhfif1a3fn","category_id":"clcfvvv9m000484xh9v726ebr","_id":"clcfvvv9w001984xh4bvkcdaq"},{"post_id":"clcfvvv9l000384xhfif1a3fn","category_id":"clcfvvv9u001184xhezjsh5gv","_id":"clcfvvv9w001b84xh3lk50mq6"},{"post_id":"clcfvvv9o000784xh2fckdxq1","category_id":"clcfvvv9m000484xh9v726ebr","_id":"clcfvvv9w001c84xh7nn68fnn"},{"post_id":"clcfvvv9o000784xh2fckdxq1","category_id":"clcfvvv9s000i84xh78apbvjg","_id":"clcfvvv9w001f84xh3wwi30ro"},{"post_id":"clcfvvv9y001i84xh3yjla7tj","category_id":"clcfvvv9z001k84xh7dfy1qhc","_id":"clcfvvv9z001o84xh3rcahrbj"},{"post_id":"clcfvvv9y001j84xhh22u0pjp","category_id":"clcfvvv9z001k84xh7dfy1qhc","_id":"clcfvvva0001v84xh7q1zb247"},{"post_id":"clcfvvv9y001j84xhh22u0pjp","category_id":"clcfvvva0001q84xhhd7c643k","_id":"clcfvvva0001w84xh7if8als8"}],"PostTag":[{"post_id":"clcfvvv9j000184xh3fgmbegp","tag_id":"clcfvvv9n000584xhhwyr8or3","_id":"clcfvvv9q000c84xh8jt2ee3m"},{"post_id":"clcfvvv9r000e84xh899ib93z","tag_id":"clcfvvv9n000584xhhwyr8or3","_id":"clcfvvv9s000h84xh91l4h5v2"},{"post_id":"clcfvvv9l000384xhfif1a3fn","tag_id":"clcfvvv9n000584xhhwyr8or3","_id":"clcfvvv9t000l84xhgc6796wz"},{"post_id":"clcfvvv9l000384xhfif1a3fn","tag_id":"clcfvvv9s000g84xh8t7ga99v","_id":"clcfvvv9t000m84xhawkg2pn2"},{"post_id":"clcfvvv9o000784xh2fckdxq1","tag_id":"clcfvvv9n000584xhhwyr8or3","_id":"clcfvvv9u000x84xh6x9f9tuu"},{"post_id":"clcfvvv9o000784xh2fckdxq1","tag_id":"clcfvvv9t000o84xh62vtegq2","_id":"clcfvvv9u000y84xhcnr73utc"},{"post_id":"clcfvvv9o000784xh2fckdxq1","tag_id":"clcfvvv9t000r84xh2sryhztr","_id":"clcfvvv9v001284xh5r7n3249"},{"post_id":"clcfvvv9o000884xh2251875o","tag_id":"clcfvvv9n000584xhhwyr8or3","_id":"clcfvvv9v001684xh3fph8f32"},{"post_id":"clcfvvv9o000884xh2251875o","tag_id":"clcfvvv9t000o84xh62vtegq2","_id":"clcfvvv9v001784xh67qb86ch"},{"post_id":"clcfvvv9o000884xh2251875o","tag_id":"clcfvvv9t000r84xh2sryhztr","_id":"clcfvvv9w001a84xhdy25hu23"},{"post_id":"clcfvvv9p000984xh6u82678q","tag_id":"clcfvvv9v001384xh1zvq7ark","_id":"clcfvvv9w001e84xh1d38hqyy"},{"post_id":"clcfvvv9p000984xh6u82678q","tag_id":"clcfvvv9w001884xh8xyxcldd","_id":"clcfvvv9w001g84xh8qwz6vgu"},{"post_id":"clcfvvv9r000d84xhbyrw4f7z","tag_id":"clcfvvv9w001d84xh6bmp99xk","_id":"clcfvvv9w001h84xh7d6s10zo"},{"post_id":"clcfvvv9y001i84xh3yjla7tj","tag_id":"clcfvvv9z001l84xh31ochi9v","_id":"clcfvvva0001r84xhf3b53zfd"},{"post_id":"clcfvvv9y001i84xh3yjla7tj","tag_id":"clcfvvv9z001n84xhenmm562q","_id":"clcfvvva0001s84xh02b571ii"},{"post_id":"clcfvvv9y001j84xhh22u0pjp","tag_id":"clcfvvv9z001l84xh31ochi9v","_id":"clcfvvva0001x84xhcfjz0wry"},{"post_id":"clcfvvv9y001j84xhh22u0pjp","tag_id":"clcfvvva0001t84xhgz6n49d1","_id":"clcfvvva0001y84xh4j9o70qe"},{"post_id":"clcfvvv9y001j84xhh22u0pjp","tag_id":"clcfvvva0001u84xhcuefgwdd","_id":"clcfvvva0001z84xhcibjfn12"}],"Tag":[{"name":"linux","_id":"clcfvvv9n000584xhhwyr8or3"},{"name":"shell","_id":"clcfvvv9s000g84xh8t7ga99v"},{"name":"ftp","_id":"clcfvvv9t000o84xh62vtegq2"},{"name":"NFS","_id":"clcfvvv9t000r84xh2sryhztr"},{"name":"测试理论","_id":"clcfvvv9v001384xh1zvq7ark"},{"name":"验收测试","_id":"clcfvvv9w001884xh8xyxcldd"},{"name":"hexo","_id":"clcfvvv9w001d84xh6bmp99xk"},{"name":"python","_id":"clcfvvv9z001l84xh31ochi9v"},{"name":"任务调度","_id":"clcfvvv9z001n84xhenmm562q"},{"name":"爬虫","_id":"clcfvvva0001t84xhgz6n49d1"},{"name":"requests","_id":"clcfvvva0001u84xhcuefgwdd"}]}}