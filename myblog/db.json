{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-melody/source/melody-favicon.ico","path":"melody-favicon.ico","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-melody/source/css/404.styl","path":"css/404.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-melody/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-melody/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-melody/source/img/algolia.svg","path":"img/algolia.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-melody/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-melody/source/js/copy.js","path":"js/copy.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-melody/source/js/fancybox.js","path":"js/fancybox.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-melody/source/js/fireworks.js","path":"js/fireworks.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-melody/source/js/head.js","path":"js/head.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-melody/source/js/hexo-theme-melody.js","path":"js/hexo-theme-melody.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-melody/source/js/katex.js","path":"js/katex.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-melody/source/js/scroll.js","path":"js/scroll.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-melody/source/js/sidebar.js","path":"js/sidebar.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-melody/source/js/transition.js","path":"js/transition.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-melody/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-melody/source/js/search/algolia.js","path":"js/search/algolia.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-melody/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-melody/source/js/third-party/anime.min.js","path":"js/third-party/anime.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-melody/source/js/third-party/canvas-ribbon.js","path":"js/third-party/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-melody/source/js/third-party/jquery.fancybox.min.js","path":"js/third-party/jquery.fancybox.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-melody/source/js/third-party/jquery.min.js","path":"js/third-party/jquery.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-melody/source/js/third-party/velocity.min.js","path":"js/third-party/velocity.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-melody/source/js/third-party/velocity.ui.min.js","path":"js/third-party/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-melody/source/js/third-party/reveal/head.min.js","path":"js/third-party/reveal/head.min.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/404/index.md","hash":"3be35a66794a9de82ca96b5918f96f58ef7e4ac5","modified":1672306509000},{"_id":"source/_posts/e2e_analysis.md","hash":"0c6018397b0200be0340c41f78dfa835c4a42e18","modified":1672411533846},{"_id":"source/_posts/linuxmodifypasswd.md","hash":"555ff7c9fbef5195d8275e9e29c6aecb04ea6e87","modified":1672458430178},{"_id":"source/_posts/python调度框架APScheduler使用详解（非阻塞模式）.md","hash":"9a2076dfbbe08e5317e441be46c412a87e06ac0f","modified":1672412178565},{"_id":"source/_posts/request发送请求405.md","hash":"afb6480b25621dff53929ac04faa66f902d79b49","modified":1672459121300},{"_id":"source/_posts/vsftpd的配置.md","hash":"b2441a32ccfaff9829f501d89ff05bc5b1c516f8","modified":1672411506407},{"_id":"source/categories/index.md","hash":"9d564aac6cb74b206beecbe1fe338fa1ed620f9a","modified":1672305884000},{"_id":"source/tags/index.md","hash":"cec1dd78cc8c8b5fc0bc03e117211daf7e9c1e09","modified":1672305778000},{"_id":"source/_posts/pictures/avatar/avatar.jpg","hash":"e8a9c2e581b618aec332ff4a9b49fa58c36e9be6","modified":1672393889000},{"_id":"source/_posts/pictures/e2e_analysis/01FJX.png","hash":"3f6d8601117f308d91f74e13d552646d5d778b48","modified":1672389289091},{"_id":"source/_posts/pictures/e2e_analysis/05FJX.png","hash":"1c2729ed8365a48aa72a1e7e895cf7238de202d9","modified":1672389304167},{"_id":"source/_posts/pictures/e2e_analysis/022FJX.png","hash":"4167d4aa6fae5ce25df205a3f49fc4f2524f182e","modified":1672389296047},{"_id":"node_modules/hexo-theme-melody/scripts/hexo-plugins.txt","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/js/hexo-theme-melody.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/includes/gallery/script.pug","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/.travis.demo.yml","hash":"4482d40a58a035ef96888dfc4ed96c861b8f78a5","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/CHANGELOG.md","hash":"a3fdc0bf95738aa013b0de6dcd1c6523512dcddf","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/FAQ.md","hash":"5984dd5335f8ead64f14d3885de5cc5ef09dfff8","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/LICENSE","hash":"dbbc2e6e42affa5ac962826f01bffa8c7aecd6b8","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/README.md","hash":"f0197363be56ef95b40854c4115bac4c8bbe93e8","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/_config.yml","hash":"5efa43b59d4112bacb83f2a23c50fc20948d57cf","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/package.json","hash":"7ec07ad0717da8ca91fb04d264902edbd2a550c0","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/languages/default.yml","hash":"2af19daf22ec99daf2482af9dac5c3ff641497c4","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/languages/en.yml","hash":"2af19daf22ec99daf2482af9dac5c3ff641497c4","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/languages/zh-Hans.yml","hash":"68c5794ec57227daec2e3afe2c5d502fa0a7092a","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/404.pug","hash":"0ad5d251ba70edad5c04a45d13ca6a8db3bf7b42","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/archive.pug","hash":"2133e9f369dac19b9f843fc956521f864ace7567","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/category.pug","hash":"ea5f82d69e586f293f428f3b237c17bf873b4f03","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/gallery.pug","hash":"c083a7bbf5f46305daed74632aef3403b7d94dc7","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/index.pug","hash":"5e969c09fa5902829ad0b14c0af8d432bd4c7078","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/page.pug","hash":"09c1c7c4ffff114c886b097ec82e046399ab79e1","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/post.pug","hash":"436bb1b7d14e29cba8010d3ea14df19681fbb5fe","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/slides.pug","hash":"1e84a92d5b854dd233e0b511d59c1cd7c8d647a1","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/tag.pug","hash":"ca333911bc97bc9d3eba6e1bc05e96b209ecedfb","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/scripts/gallery-tag.js","hash":"74e2e95f8daec619578f4b7dd1ed77cd5907f37e","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/scripts/replace-config.js","hash":"a8e9a18b2798d3c694a3efa8036f82046c3eb037","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/melody-favicon.ico","hash":"e33c804e570eb238fe095ed28346dd1b3a0666ae","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/includes/additional-js.pug","hash":"c4ca62466684758d5a26e5866f9ed87b5c9401b8","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/includes/config.pug","hash":"66e384b1cfe58a57b80f7dff0388bf00bb8bfdf8","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/includes/footer.pug","hash":"0e9f1778f021f1c205f0b1be83014fba576797af","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/includes/head.pug","hash":"bf287d6440011cb17d15dbaf5945517d36918800","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/includes/header.pug","hash":"f440a9741eeacfa62f0a0e7ef470a104f1cb510c","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/includes/layout.pug","hash":"58856b5048fb64e7dab75a6ae32cc2a0ad94de4f","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/includes/nav.pug","hash":"3f1fe059784df45f923587b81cc972659ed22e01","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/includes/pagination.pug","hash":"fe33a94d90836b767c42654ccc4c4de7d7f227fc","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/includes/recent-posts.pug","hash":"128c448f5bab71f59912516edff9d476ff6b8afe","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/includes/sidebar.pug","hash":"211b8ecfdb7b5dd836c87436def410a52dfa5ecd","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/css/404.styl","hash":"b7a0f8b23cb137b1a6c4fa0f9a35e06e93065b2c","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/css/index.styl","hash":"2053ba56db707e7a03796ba59f77103765b02353","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/css/var.styl","hash":"259feee66bf9c326e781bb63a177627dbe3eb539","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/img/algolia.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/img/avatar.png","hash":"a44601fac9a81dd7e392d05ea5ddc65c96b051df","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/js/copy.js","hash":"ce7f8601c7c75ced79e2e9851beec37299d49fd1","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/js/fancybox.js","hash":"2d3eaa654b2524c41dc5aba1d5e2e7cc9aaefd26","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/js/fireworks.js","hash":"4b6428da34535f0e8fe5a11976b8d89c48736500","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/js/head.js","hash":"555e9caa046d5a174af8d20c75e9e89c25aabb6c","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/js/katex.js","hash":"a5a999b357c0fd9aeacae721bf121f30d40d6726","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/js/scroll.js","hash":"e9aaeeae8958b8a06e016edbd17c84b63aea9255","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/js/sidebar.js","hash":"a42109c5a69dedc87e1aaf8cb2383fd43069677e","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/js/transition.js","hash":"11c3b82a5e9ef2bf7bd712b6c211d86426f9a23e","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/js/utils.js","hash":"f514662ad80803e1bb5f6bc653c4b9ad06ea4932","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/includes/404/404-nav.pug","hash":"4cd894857bb90fe44b55e852864692ed06588b8e","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/includes/404/layout.pug","hash":"9c7cdf16a9b9b4aa251dba9378a0f00d985101de","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/includes/comments/disqus.pug","hash":"e62b73df92566806bfb170f204295cffd7074215","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/includes/comments/gitalk.pug","hash":"86bdbc4a52024c3573bea27817394dd118b70a26","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/includes/comments/gitment.pug","hash":"0b7cd8b0b114876238ca022abda4c1fcdfaee12f","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/includes/comments/index.pug","hash":"30db5b0fb5662ecea0012b21d4de28d3963e272f","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/includes/comments/laibili.pug","hash":"97de1d1fb0459e7a2394ac2f5e449adf9b6986cb","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/includes/comments/valine.pug","hash":"bc58746ed5c8cc001ad47f1db30e3bdb1aab5fa9","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/includes/comments/vssue.pug","hash":"4ee6cea08286cbac2648a6032f73e5f8d2b88380","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/includes/comments/waline.pug","hash":"1b2cfeb2b2c67b49f94107c230a64ed0a35eae8d","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/includes/count/busuanzi.pug","hash":"4df5e63ab0113efb93f05ef781b2a7e3f34ba753","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/includes/gallery/layout.pug","hash":"8ff96c4f9afb416c5fc586c9585ae51cb6129529","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/includes/mixins/article-sort.pug","hash":"297b098dc6bba73b76bac4cf6bcd0c29d5dcb2ed","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/includes/mixins/slide.pug","hash":"91975f700b20131ab4df4d2ea3e1acc8bf2d3eef","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/includes/search/algolia.pug","hash":"44d5a061df53a276d22b3855652645d90117d0b6","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/includes/search/index.pug","hash":"b01828b37d789797aeb5433f1705cff3c540a4d5","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/includes/search/local-search.pug","hash":"f88070a84379bc06fb385e1193448fae6a8a54e1","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/includes/share/add-this.pug","hash":"17a11c1c36c9078639c2a82628ce5fc6584daffb","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/includes/share/index.pug","hash":"a2ec6da33cf5fa0ba6c8c38ec3841a0b0003ce98","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/includes/share/share-js.pug","hash":"e612725ba48711fc119f91c6196287ad13f5a2ba","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/includes/slide/layout.pug","hash":"e6963fb20340f60fe9bd2c9dbfff50decee159b3","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/includes/slide/script.pug","hash":"e19439122c18a8bca10819b635cdfed6e9135e46","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/includes/third-party/canvas-ribbon.pug","hash":"39a03f188ac415642766b062a80b1b710f3ea609","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/includes/third-party/katex.pug","hash":"79b2336ad8d921907a5b1badc10ba1651c92843b","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/layout/includes/third-party/mathjax.pug","hash":"33b350f9826795cd59d9e277a24accc8a9bc9076","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/css/_global/index.styl","hash":"2a6195ce7e822362633ebf403c9438b42fa126bb","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/css/_highlight/diff.styl","hash":"ffdfbf088da7bf33899557395abcac0d2bffd67d","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/css/_highlight/highlight.styl","hash":"016c800bf7a0ef6d520e135ab69ef072760483cb","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/css/_highlight/theme.styl","hash":"7d85860927afa1d93b4a39febff3d95a73de4c36","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/css/_layout/comments.styl","hash":"e58602aad6792f1a5dbda0677ecb04d21ac10e97","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/css/_layout/footer.styl","hash":"ca8c816bdb144503bec7e755344fb0e4e370a7bf","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/css/_layout/head.styl","hash":"73488de3f36369c29ecd5e0be9661bb2b508548c","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/css/_layout/page.styl","hash":"38f0efbc9985d2d4e3699d9ac06ab3dba150ce6e","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/css/_layout/pagination.styl","hash":"a3f52d1f7ff1eaead8df016b2a4def6f7b4e9559","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/css/_layout/post.styl","hash":"34a421a32abb8003d7d83de53f42639be4e54daf","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/css/_layout/sidebar.styl","hash":"e8315401a6c791d00617c031be01f45df70fe7fd","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/css/_search/algolia.styl","hash":"534e5641e3efe2452db95cc25ec8da0111ceadcf","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/css/_search/index.styl","hash":"63cae4465ac54b71361c1795206534c7f2e6e5b1","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/css/_search/local-search.styl","hash":"d7970b385265fef782cdcaaf4fe68a2217625467","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/css/_third-party/jquery.fancybox.min.css","hash":"f9c94ec04062a1bfe1ef894c49e6ec33fa121778","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/css/_third-party/normalize.min.css","hash":"e12eef6d6811c132f4f2fcf6c936be384191bcaf","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/js/search/algolia.js","hash":"8d2cc7ac4a015563344a3981c3040d308489935c","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/js/search/local-search.js","hash":"c58bbe874fcdc512cca5244db487745e6a49ef48","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/js/third-party/anime.min.js","hash":"332031949d78a49e8a18611556253660574e47db","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/js/third-party/canvas-ribbon.js","hash":"8fd084e962fb2028be9f748b5cb5f53d030d1d03","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/js/third-party/jquery.fancybox.min.js","hash":"2ec3ef6c31b971ba5e58eb4a0c5ede902bbdd4af","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/js/third-party/velocity.min.js","hash":"69c85b9d6a931a7d3a5b0657e60112c31fb3b286","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/js/third-party/velocity.ui.min.js","hash":"d8124c091d19fa4072616a44a8897fabc6599fce","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/js/third-party/reveal/head.min.js","hash":"8c9495c76d5aa00d3dfb88653c362fba9f10cbb2","modified":1672300004000},{"_id":"node_modules/hexo-theme-melody/source/js/third-party/jquery.min.js","hash":"1055018c28ab41087ef9ccefe411606893dabea2","modified":1672300004000},{"_id":"source/_posts/pictures/e2e_analysis/03FJX.png","hash":"1bab1d556bdbe9b0f8607b8f10ac30c36330fec6","modified":1672389297527},{"_id":"source/_posts/pictures/e2e_analysis/04FJX.png","hash":"b8c89b803f2163d458724bde136468771bab0d6c","modified":1672389300263},{"_id":"source/_posts/pictures/e2e_analysis/06FJX.png","hash":"58539f0673802994edf8a49abbac5ad8d3e730c7","modified":1672389307671},{"_id":"public/404.html","hash":"c5b535ebee947f9808b4938b207fc0462ac71603","modified":1672459490692},{"_id":"public/categories/index.html","hash":"0edb80dc9a8e50c004c9d0ffebae98b63daf0bb4","modified":1672459490692},{"_id":"public/tags/index.html","hash":"36fa87cbda0f8b15b6b18bc7e8e98605748a2e89","modified":1672459490692},{"_id":"public/2022/12/31/request发送请求405/index.html","hash":"11052a98b345da627296fa71a8af7791132cb21e","modified":1672459490692},{"_id":"public/2022/12/31/linuxmodifypasswd/index.html","hash":"1ebab1470e91b39c5a7dfd859439248799642c94","modified":1672459490692},{"_id":"public/archives/index.html","hash":"2fdc4756e48db5eec9924c4324e7a9f58cfe2c8a","modified":1672459490692},{"_id":"public/archives/2022/index.html","hash":"fb5d24051c16d6407c9f4b820f4107e3695db203","modified":1672459490692},{"_id":"public/archives/2022/12/index.html","hash":"5df967e9b38d9b1721d1f2fc303fe347cc1ef139","modified":1672459490692},{"_id":"public/categories/linux/index.html","hash":"80e322ea4fdcd102dfbfe5d647e3024d68caf46e","modified":1672459490692},{"_id":"public/categories/测试理论/index.html","hash":"e164566b5fb6afdd39d6b24588fd5432e148d5fe","modified":1672459490692},{"_id":"public/categories/python/index.html","hash":"f6219bc6bfdb6ad55131f2b4e870c5cfdfd5750b","modified":1672459490692},{"_id":"public/categories/python/爬虫/index.html","hash":"643bf6234b7cd518e5c077e02b6b523d4c87bdcb","modified":1672459490692},{"_id":"public/categories/linux/存储服务/index.html","hash":"e25af22b60bf174149ed3a06971e3ce0b3c721e3","modified":1672459490692},{"_id":"public/index.html","hash":"760e9bfd1899ca7857684f249be089986eba4fe6","modified":1672459490692},{"_id":"public/tags/linux/index.html","hash":"2cf0fe2c7e2d1b9ef6637d5bd5f8befea1af402e","modified":1672459490692},{"_id":"public/tags/测试理论/index.html","hash":"a6e42708cf7e00a4ff65a46844bff36ce3b059e6","modified":1672459490692},{"_id":"public/tags/验收测试/index.html","hash":"d946a3b6ba8b769756adec9a8870f020117eb87b","modified":1672459490692},{"_id":"public/tags/python/index.html","hash":"ead5ddab5ebdd85354811fda0c742c01c88f5cb0","modified":1672459490692},{"_id":"public/tags/任务调度/index.html","hash":"e5e59dbb66ddb0c65214e7dc199a4c42531a3b17","modified":1672459490692},{"_id":"public/tags/爬虫/index.html","hash":"88f2a1a05ace72a6a6d45dba4046b1442a8cc64a","modified":1672459490692},{"_id":"public/tags/requests/index.html","hash":"b7fb0fe23949f91e5b9a502948f03e0b7115c11c","modified":1672459490692},{"_id":"public/tags/ftp/index.html","hash":"fa399eeef83de8966085fbac8926a37063fc9751","modified":1672459490692},{"_id":"public/2022/12/30/python调度框架APScheduler使用详解（非阻塞模式）/index.html","hash":"789ca605f36e5a30a07501f428edd7e3bc4ea371","modified":1672459490692},{"_id":"public/2022/12/30/e2e_analysis/index.html","hash":"08931c10de22da775395c8e95ca1d0aaae41c727","modified":1672459490692},{"_id":"public/2022/12/30/vsftpd的配置/index.html","hash":"4c73a9caaf3caea7653e1653ea2a981d77aa30f3","modified":1672459490692},{"_id":"public/img/algolia.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1672459490692},{"_id":"public/melody-favicon.ico","hash":"e33c804e570eb238fe095ed28346dd1b3a0666ae","modified":1672459490692},{"_id":"public/img/avatar.png","hash":"a44601fac9a81dd7e392d05ea5ddc65c96b051df","modified":1672459490692},{"_id":"public/css/404.css","hash":"712ecbf4ac203ab5f1ea92989c0f0062a3d0aca9","modified":1672459490692},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1672459490692},{"_id":"public/js/copy.js","hash":"ce7f8601c7c75ced79e2e9851beec37299d49fd1","modified":1672459490692},{"_id":"public/js/fancybox.js","hash":"2d3eaa654b2524c41dc5aba1d5e2e7cc9aaefd26","modified":1672459490692},{"_id":"public/js/fireworks.js","hash":"4b6428da34535f0e8fe5a11976b8d89c48736500","modified":1672459490692},{"_id":"public/js/head.js","hash":"555e9caa046d5a174af8d20c75e9e89c25aabb6c","modified":1672459490692},{"_id":"public/js/hexo-theme-melody.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1672459490692},{"_id":"public/js/katex.js","hash":"a5a999b357c0fd9aeacae721bf121f30d40d6726","modified":1672459490692},{"_id":"public/js/scroll.js","hash":"e9aaeeae8958b8a06e016edbd17c84b63aea9255","modified":1672459490692},{"_id":"public/js/sidebar.js","hash":"a42109c5a69dedc87e1aaf8cb2383fd43069677e","modified":1672459490692},{"_id":"public/js/transition.js","hash":"11c3b82a5e9ef2bf7bd712b6c211d86426f9a23e","modified":1672459490692},{"_id":"public/js/utils.js","hash":"f514662ad80803e1bb5f6bc653c4b9ad06ea4932","modified":1672459490692},{"_id":"public/js/search/algolia.js","hash":"8d2cc7ac4a015563344a3981c3040d308489935c","modified":1672459490692},{"_id":"public/js/search/local-search.js","hash":"c58bbe874fcdc512cca5244db487745e6a49ef48","modified":1672459490692},{"_id":"public/js/third-party/canvas-ribbon.js","hash":"8fd084e962fb2028be9f748b5cb5f53d030d1d03","modified":1672459490692},{"_id":"public/js/third-party/velocity.ui.min.js","hash":"d8124c091d19fa4072616a44a8897fabc6599fce","modified":1672459490692},{"_id":"public/js/third-party/reveal/head.min.js","hash":"95c9de30444117adbbb3218070fda00af187a76a","modified":1672459490692},{"_id":"public/css/index.css","hash":"570c435c1cf682a8bdc9522218a6a2e97855d1c9","modified":1672459490692},{"_id":"public/js/third-party/anime.min.js","hash":"332031949d78a49e8a18611556253660574e47db","modified":1672459490692},{"_id":"public/js/third-party/jquery.fancybox.min.js","hash":"2ec3ef6c31b971ba5e58eb4a0c5ede902bbdd4af","modified":1672459490692},{"_id":"public/js/third-party/velocity.min.js","hash":"69c85b9d6a931a7d3a5b0657e60112c31fb3b286","modified":1672459490692},{"_id":"public/js/third-party/jquery.min.js","hash":"1055018c28ab41087ef9ccefe411606893dabea2","modified":1672459490692}],"Category":[{"name":"linux","_id":"clcbf771z00041dxh0jrmd0b8"},{"name":"测试理论","_id":"clcbf772200091dxhhb7tc2vy"},{"name":"python","_id":"clcbf7723000d1dxhcr285150"},{"name":"爬虫","parent":"clcbf7723000d1dxhcr285150","_id":"clcbf7725000m1dxhbwfbdcow"},{"name":"存储服务","parent":"clcbf771z00041dxh0jrmd0b8","_id":"clcbf7728000z1dxhbjx8921k"}],"Data":[],"Page":[{"title":"404","date":"2022-12-29T09:34:33.000Z","layout":"404","_content":"","source":"404/index.md","raw":"---\ntitle: 404\ndate: 2022-12-29 17:34:33\nlayout: 404\npermalink: /404\n---","updated":"2022-12-29T09:35:09.000Z","path":"/404.html","comments":1,"_id":"clcbf771t00001dxhh7ml2950","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"分类","date":"2022-12-28T16:00:00.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2022-12-29 00:00:00\ntype: \"categories\"\n---","updated":"2022-12-29T09:24:44.000Z","path":"categories/index.html","comments":1,"layout":"page","_id":"clcbf771y00021dxhfaz6ajix","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2022-12-29T09:16:52.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate:  2022-12-29 17:16:52\ntype: \"tags\"\n---","updated":"2022-12-29T09:22:58.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"clcbf772100061dxhehrugifx","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"通过live系统修改linux的密码","date":"2022-12-31T02:11:34.000Z","_content":"> 核心思想就是通过live系统进入一个临时系统，然后通过chroot到物理系统的根目录，进行相关密码重置工作。\n\n# Step One:进入live系统\n\n![1.gif](https://storage.deepin.org/thread/202205201618318171_1.gif)\n**很多人可能还不知道如何进入deepin的live系统，可以看上面动图的操作，也是非常简单：**\n\n1. 首先准备好一个装有deepin镜像的启动U盘（推荐使用ventoy）；\n2. 直接走装镜像的路子,启动到系统安装界面；\n3. 唯一区别是在grub安装界面的时候，不要选择任何选项，而是按一下键盘上的 **“E”** 按键（如果是非EFI启动，可能需要按TAB键）；\n4. 按过之后就会出现下图的编辑界面，通过上下左右按键移动到下方红框标识处，删除 **“cd-installer”** 内容；\n\n   ![2.png](https://storage.deepin.org/thread/20220520162047272_2.png)\n5. 然后直接按键盘上F10按键，接下来就会直接进入live系统界面了。\n6. 进入live系统后是如下界面的样子（下图是V20.6的镜像）：\n\n> 特别提醒：在live系统下长时间也会自动锁屏了，如果你也遇到了锁屏发现没有密码无法进入系统，可能你需要重新来一次，此时可以直接通过ctrl+alt+F2 进入TTY，然后在TTY界面设置密码即可：``sudo passwd uos``,然后再切回来用设置的密码登录即可。\n\n![3.png](https://storage.deepin.org/thread/202205201621386209_3.png)\n\n# Step Two:切换chroot目录\n\n1. 在live系统中打开文件管理器；\n2. 找到根目录所在分区（如我这里的Roota）;\n3. 进入目录后，右键点击空白处，打开终端；\n4. 然后输入 ``sudo chroot ./``;\n5. 回车后，我们就切换到原系统的根目录了。\n\n![qiehuanchroot.gif](https://storage.deepin.org/thread/202206011317339861_qiehuanchroot.gif)\n\n# Step Three:修改用户密码\n\n1. 确认你要修改密码的用户名，比如我这里要修改 ‘babyfengfjx’ 用户的密码；\n2. 在上面的终端里，接着执行：``passwd babyfengfjx``    -- 这里记得换成自己的用户名；\n3. 按照提示设置新的密码即可。\n\n![genghuanmima.gif](https://storage.deepin.org/thread/202206011319569555_genghuanmima.gif)\n\n# Step Four:重启系统，使用新的密码登录\n\n完成上述操作后，即可重启系统，使用刚设置的新密码进行登录了。","source":"_posts/linuxmodifypasswd.md","raw":"title: 通过live系统修改linux的密码\ncategories:\n  - linux\ntags:\n  - linux\ndate: 2022-12-31 10:11:34\n---\n> 核心思想就是通过live系统进入一个临时系统，然后通过chroot到物理系统的根目录，进行相关密码重置工作。\n\n# Step One:进入live系统\n\n![1.gif](https://storage.deepin.org/thread/202205201618318171_1.gif)\n**很多人可能还不知道如何进入deepin的live系统，可以看上面动图的操作，也是非常简单：**\n\n1. 首先准备好一个装有deepin镜像的启动U盘（推荐使用ventoy）；\n2. 直接走装镜像的路子,启动到系统安装界面；\n3. 唯一区别是在grub安装界面的时候，不要选择任何选项，而是按一下键盘上的 **“E”** 按键（如果是非EFI启动，可能需要按TAB键）；\n4. 按过之后就会出现下图的编辑界面，通过上下左右按键移动到下方红框标识处，删除 **“cd-installer”** 内容；\n\n   ![2.png](https://storage.deepin.org/thread/20220520162047272_2.png)\n5. 然后直接按键盘上F10按键，接下来就会直接进入live系统界面了。\n6. 进入live系统后是如下界面的样子（下图是V20.6的镜像）：\n\n> 特别提醒：在live系统下长时间也会自动锁屏了，如果你也遇到了锁屏发现没有密码无法进入系统，可能你需要重新来一次，此时可以直接通过ctrl+alt+F2 进入TTY，然后在TTY界面设置密码即可：``sudo passwd uos``,然后再切回来用设置的密码登录即可。\n\n![3.png](https://storage.deepin.org/thread/202205201621386209_3.png)\n\n# Step Two:切换chroot目录\n\n1. 在live系统中打开文件管理器；\n2. 找到根目录所在分区（如我这里的Roota）;\n3. 进入目录后，右键点击空白处，打开终端；\n4. 然后输入 ``sudo chroot ./``;\n5. 回车后，我们就切换到原系统的根目录了。\n\n![qiehuanchroot.gif](https://storage.deepin.org/thread/202206011317339861_qiehuanchroot.gif)\n\n# Step Three:修改用户密码\n\n1. 确认你要修改密码的用户名，比如我这里要修改 ‘babyfengfjx’ 用户的密码；\n2. 在上面的终端里，接着执行：``passwd babyfengfjx``    -- 这里记得换成自己的用户名；\n3. 按照提示设置新的密码即可。\n\n![genghuanmima.gif](https://storage.deepin.org/thread/202206011319569555_genghuanmima.gif)\n\n# Step Four:重启系统，使用新的密码登录\n\n完成上述操作后，即可重启系统，使用刚设置的新密码进行登录了。","slug":"linuxmodifypasswd","published":1,"updated":"2022-12-31T03:47:10.178Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clcbf771w00011dxhanj87ebf","content":"<blockquote>\n<p>核心思想就是通过live系统进入一个临时系统，然后通过chroot到物理系统的根目录，进行相关密码重置工作。</p>\n</blockquote>\n<h1 id=\"Step-One-进入live系统\"><a href=\"#Step-One-进入live系统\" class=\"headerlink\" title=\"Step One:进入live系统\"></a>Step One:进入live系统</h1><p><img src=\"https://storage.deepin.org/thread/202205201618318171_1.gif\" alt=\"1.gif\"><br><strong>很多人可能还不知道如何进入deepin的live系统，可以看上面动图的操作，也是非常简单：</strong></p>\n<ol>\n<li><p>首先准备好一个装有deepin镜像的启动U盘（推荐使用ventoy）；</p>\n</li>\n<li><p>直接走装镜像的路子,启动到系统安装界面；</p>\n</li>\n<li><p>唯一区别是在grub安装界面的时候，不要选择任何选项，而是按一下键盘上的 <strong>“E”</strong> 按键（如果是非EFI启动，可能需要按TAB键）；</p>\n</li>\n<li><p>按过之后就会出现下图的编辑界面，通过上下左右按键移动到下方红框标识处，删除 <strong>“cd-installer”</strong> 内容；</p>\n<p><img src=\"https://storage.deepin.org/thread/20220520162047272_2.png\" alt=\"2.png\"></p>\n</li>\n<li><p>然后直接按键盘上F10按键，接下来就会直接进入live系统界面了。</p>\n</li>\n<li><p>进入live系统后是如下界面的样子（下图是V20.6的镜像）：</p>\n</li>\n</ol>\n<blockquote>\n<p>特别提醒：在live系统下长时间也会自动锁屏了，如果你也遇到了锁屏发现没有密码无法进入系统，可能你需要重新来一次，此时可以直接通过ctrl+alt+F2 进入TTY，然后在TTY界面设置密码即可：<code>sudo passwd uos</code>,然后再切回来用设置的密码登录即可。</p>\n</blockquote>\n<p><img src=\"https://storage.deepin.org/thread/202205201621386209_3.png\" alt=\"3.png\"></p>\n<h1 id=\"Step-Two-切换chroot目录\"><a href=\"#Step-Two-切换chroot目录\" class=\"headerlink\" title=\"Step Two:切换chroot目录\"></a>Step Two:切换chroot目录</h1><ol>\n<li>在live系统中打开文件管理器；</li>\n<li>找到根目录所在分区（如我这里的Roota）;</li>\n<li>进入目录后，右键点击空白处，打开终端；</li>\n<li>然后输入 <code>sudo chroot ./</code>;</li>\n<li>回车后，我们就切换到原系统的根目录了。</li>\n</ol>\n<p><img src=\"https://storage.deepin.org/thread/202206011317339861_qiehuanchroot.gif\" alt=\"qiehuanchroot.gif\"></p>\n<h1 id=\"Step-Three-修改用户密码\"><a href=\"#Step-Three-修改用户密码\" class=\"headerlink\" title=\"Step Three:修改用户密码\"></a>Step Three:修改用户密码</h1><ol>\n<li>确认你要修改密码的用户名，比如我这里要修改 ‘babyfengfjx’ 用户的密码；</li>\n<li>在上面的终端里，接着执行：<code>passwd babyfengfjx</code>    – 这里记得换成自己的用户名；</li>\n<li>按照提示设置新的密码即可。</li>\n</ol>\n<p><img src=\"https://storage.deepin.org/thread/202206011319569555_genghuanmima.gif\" alt=\"genghuanmima.gif\"></p>\n<h1 id=\"Step-Four-重启系统，使用新的密码登录\"><a href=\"#Step-Four-重启系统，使用新的密码登录\" class=\"headerlink\" title=\"Step Four:重启系统，使用新的密码登录\"></a>Step Four:重启系统，使用新的密码登录</h1><p>完成上述操作后，即可重启系统，使用刚设置的新密码进行登录了。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>核心思想就是通过live系统进入一个临时系统，然后通过chroot到物理系统的根目录，进行相关密码重置工作。</p>\n</blockquote>\n<h1 id=\"Step-One-进入live系统\"><a href=\"#Step-One-进入live系统\" class=\"headerlink\" title=\"Step One:进入live系统\"></a>Step One:进入live系统</h1><p><img src=\"https://storage.deepin.org/thread/202205201618318171_1.gif\" alt=\"1.gif\"><br><strong>很多人可能还不知道如何进入deepin的live系统，可以看上面动图的操作，也是非常简单：</strong></p>\n<ol>\n<li><p>首先准备好一个装有deepin镜像的启动U盘（推荐使用ventoy）；</p>\n</li>\n<li><p>直接走装镜像的路子,启动到系统安装界面；</p>\n</li>\n<li><p>唯一区别是在grub安装界面的时候，不要选择任何选项，而是按一下键盘上的 <strong>“E”</strong> 按键（如果是非EFI启动，可能需要按TAB键）；</p>\n</li>\n<li><p>按过之后就会出现下图的编辑界面，通过上下左右按键移动到下方红框标识处，删除 <strong>“cd-installer”</strong> 内容；</p>\n<p><img src=\"https://storage.deepin.org/thread/20220520162047272_2.png\" alt=\"2.png\"></p>\n</li>\n<li><p>然后直接按键盘上F10按键，接下来就会直接进入live系统界面了。</p>\n</li>\n<li><p>进入live系统后是如下界面的样子（下图是V20.6的镜像）：</p>\n</li>\n</ol>\n<blockquote>\n<p>特别提醒：在live系统下长时间也会自动锁屏了，如果你也遇到了锁屏发现没有密码无法进入系统，可能你需要重新来一次，此时可以直接通过ctrl+alt+F2 进入TTY，然后在TTY界面设置密码即可：<code>sudo passwd uos</code>,然后再切回来用设置的密码登录即可。</p>\n</blockquote>\n<p><img src=\"https://storage.deepin.org/thread/202205201621386209_3.png\" alt=\"3.png\"></p>\n<h1 id=\"Step-Two-切换chroot目录\"><a href=\"#Step-Two-切换chroot目录\" class=\"headerlink\" title=\"Step Two:切换chroot目录\"></a>Step Two:切换chroot目录</h1><ol>\n<li>在live系统中打开文件管理器；</li>\n<li>找到根目录所在分区（如我这里的Roota）;</li>\n<li>进入目录后，右键点击空白处，打开终端；</li>\n<li>然后输入 <code>sudo chroot ./</code>;</li>\n<li>回车后，我们就切换到原系统的根目录了。</li>\n</ol>\n<p><img src=\"https://storage.deepin.org/thread/202206011317339861_qiehuanchroot.gif\" alt=\"qiehuanchroot.gif\"></p>\n<h1 id=\"Step-Three-修改用户密码\"><a href=\"#Step-Three-修改用户密码\" class=\"headerlink\" title=\"Step Three:修改用户密码\"></a>Step Three:修改用户密码</h1><ol>\n<li>确认你要修改密码的用户名，比如我这里要修改 ‘babyfengfjx’ 用户的密码；</li>\n<li>在上面的终端里，接着执行：<code>passwd babyfengfjx</code>    – 这里记得换成自己的用户名；</li>\n<li>按照提示设置新的密码即可。</li>\n</ol>\n<p><img src=\"https://storage.deepin.org/thread/202206011319569555_genghuanmima.gif\" alt=\"genghuanmima.gif\"></p>\n<h1 id=\"Step-Four-重启系统，使用新的密码登录\"><a href=\"#Step-Four-重启系统，使用新的密码登录\" class=\"headerlink\" title=\"Step Four:重启系统，使用新的密码登录\"></a>Step Four:重启系统，使用新的密码登录</h1><p>完成上述操作后，即可重启系统，使用刚设置的新密码进行登录了。</p>\n"},{"title":"验收测试E2E分析方法","_content":"\n\n## 前言\n\n对于验收测试工程师来说，编写验收测试分析和测试用例是一项必须且重要的工作内容，但大多数同学在做验收测试分析及用例编写时，仍旧陷入到传统的分析及用例编写思维中，与内部测试团队所输出的内容并无差异，虽然大家在讲述验收工程师职责或者测试分析思路时，都知道说要编写用户场景用例，可实战过程中仍旧是任性的走老套路，犟的很！ \n\n究其原因，还是没有摆脱传统的测试思维，更多的关注点仍旧在文档中罗列的基本需求点，除了字面上描述出来的东西，很难将自己放在用户角色上去想象体验手头的产品，在验收时，又本着任务的压力，只能优先去完成流程上的一些基本任务：验收测试分析、验收测试用例编写、各种会议评审、输出各类报告…… \n\n上述每一个具体事项实际都只是我们工作实施的一个产物体现，并不是最终的目的，也就是说不仅仅为了去完成一篇分析或者用例的编写，就匆匆忙忙开干，在没有深入理解需求，了解用户痛点，及项目意义的情况下，所有的忙碌都不会产生太高价值，看起来长篇大论的文字表格一堆，但其中蕴含的思维和测试覆盖点却很难达到我们的预期，往往后期需要花费大量的精力去查漏补缺，进行各种优化，算算总投入成本那是极不划算的，而且还觉得自己特忙。\n\n对于团队中每一个同学来讲，每个人都有自己的特长和优势，但也会存在部分同学的确存在以上描述的若干问题，所以也就有了此篇文档，作为个人理解的内容，想要起到抛砖引玉的效果，希望在某些方面能够对大家有所帮助，也许能够通过思维的碰撞产生更加适合当前团队的执行方法和流程。\n\n本文会以通俗易懂偏口语化的风格进行阐述，尽量结合当前项目的实际内容来阐述具体思想，文中所有举例只是为了阐述某种思维方式，请读者不要钻牛角尖，而应该深入扩展理解思维背后的原理，内化成自己的经验和做事方法。\n\n## 导读\n\n本文总体文字比较多，且讲述的内容非常基础，可能都是在各位平常工作中已经在实施的部分，只是做了一个系统的呈现，如果看的过程确有共鸣，则可以快速跳过熟知内容，直接查看“精加工生产E2E验收用例”部分内容； \n\n如果前文中部分内容平常未涉及到，则可以细致去想一下描述中的各问题及思维过程，最好是能转化成自己独特的思维逻辑；\n\n如果文章通篇读起来觉得索然无味，也可以私下进行一些深入的交流（排除语文功底因素），这是我极其希望遇到的场景。\n## 我可以怎么做\n\n- 如果你是一位新同学，或者是从传统测试转做验收测试的，下面的几点内容或许对你有所帮助；\n- 当然如果你是老司机，那也可以看看是否有其他更好的点子可以帮到大家。\n\n\n1. 作为验收工程师，首要任务是先把自己以前的思维做一个冻结，把杯子倒空，忘掉过往的所有荣耀与成就，重新出发；**--调整心态**\n2. 清晰认识自己的职责和责任，做的所有事情都不仅仅只是为了完成上级下达的任务，而是为了某一个目标; **--清晰自己工作的价值**\n>  比如XX项目经过你的验收后，可以拍着胸脯对他人说，已经验收通过没有问题，大胆发布，让用户拿去用吧!\n  或者是经过验收后，发现XX模块有风险，具体风险是XX，可能造成XX影响，建议提前采取XX行动，规避方案是XX，提前告知关注者项目的实际情况，即便是发布后真出现了问题，也做到了未雨绸缪。\n\n3. 接触任何一个项目时，首先是要弄清楚该项目的需求背景，直接接口人就是产品经理，从产品经理这里可以获取到项目的最原始信息，包括项目使用者，使用者的一些特点，此项目能够解决他们什么问题，核心价值具体体现在哪里，产品最差做到什么程度用户也能够接受（逐步剥离可以提炼到核心需求）？所有的这些只为弄清楚背景与用户痛点；\n4. 在了解项目的背景与用户痛点后，接下来的工作就需要始终将这些信息放到制高点，任何的思考行为都为这两点服务，你的模块分析是为了更好的保证用户能够流畅满意的使用，你的用例是为了能更全面的覆盖用户的操作行为，你的执行动作就是将自己当做用户来操作使用这个产品；\n5. 通过上述的信息输入后，就可以开展实际的验收测试分析，这里还是推荐使用思维导图的方式来开展此项工作；\n6. 在思维导图分析完成后，接下来就是用例的转化写作了，转化过程只需要抓住一个核心：思维导图中辛苦分析出来的验证点不要漏掉；\n7. 验收执行阶段工作主要是执行用例，在执行每条用例时，同样需要思考用例编写的本意是要验证什么点，切记无脑执行，往往能够发现用例可优化的地方，或者可扩展验证场景。\n\n## 正题\n\n前面的内容主要是一些铺垫，也就是大家说的鸡汤软文，下文主要从上面列出的几个步骤来描述一下个人理解的验收测试用例的生产过程，用例输出绝对不是直接上来就干的事儿，拿到项目一上来就直接干用例的行为那都是莽夫行为，测试最高价值体现就是你的思维，而对思维的加工最终输出的产物才是思维导图、测试用例这些实际的文档，下面会针对每个步骤进行详细的阐述，希望对大家有所帮助。\n### 下文整体思路会以下图思路开展\n\n![](pictures/e2e_analysis/01FJX.png)\n\n## 用例生产过程\n\n### 所需要的原料\n\n - 此部分内容，主要是列出我们在做一个项目的时候，最好弄清楚我们所需要的输入；\n - 包括我们需要具备的一些能力或者了解的知识点；\n - 当然不是所有列出的东西都一定需要具备或者精通，当前不具备的就可以针对性的去提升学习，以便能在工作中能够轻松应对。\n\n**实物原料：**- 项目需求文档；--必选（哪怕是一句话需求）\n\n- 需求原型；--可选\n\n- 研发概要设计文档；--可选\n- 研发详细设计文档；--可选\n- 项目demo；--可选\n- ……\n\n**思想原料：**- 熟悉软件研发流程；\n> 熟悉软件测试基本理论知识:\n1. 黑盒测试基本方法（等价类、边界值、正交、状态迁移、判定表、错误猜测、……）； \n2. 接口测试、安全测试、性能测试、网络基本知识的了解； \n3. 测试思维导图分析方法； \n4. 用例编写的基本原则，测试用例的八大要素；\n\n### 加工流程\n\n> 通过对上述或者更多的原料进行有序加工，我们的思维产物最终会以具体的思维导图、测试用例体现出来。\n\n#### Step1 深入理解项目背景、用户痛点\n\n**实操步骤**\n\n首先我们在接触到一个新项目时,首要的就是拿到该项目的需求文档,如果没有需求文档就直接找产品经理或者一线人员,甚至是直接用户进行沟通,主要目的就是弄清楚如下几个问题: \n\n1. 这个项目产生的原因是什么?--为什么要做这个项目,有钱任性?做着玩? 主要是为了解决用户什么问题,用户在当前碰到了什么难题需要我们来解围?\n2. 不做这个项目行不行?--市面上有没有现成的解决方案?为什么要我们做这个?我们这个项目的优势在哪里?我们能为用户提供什么核心价值?\n3. 我们的核心用户都是哪些人?都是一些什么样的人?这些人有些什么习惯或者特点?在产品使用上会不会有些特殊癖好或者要求?\n4. 我们是怎么解决用户遇到的这个难题的,当前的需求内容是否能够达到解决用户痛点的目的?\n\n经过上述几个问题的自问或者问他人,你一定会获得一些有用的信息,经过对这些信息的消化和理解,你基本上就具备了与产品经理或者用户等位思考的状态,在此状态下,再结合产品经理编写的现成的背景和痛点问题描述,基本上就真正理解了项目的背景了；\n\n如何确定自己已经理解了当前项目背景呢？\n\n**Check点**\n把这个项目介绍给其他人，能够流畅的按照上述几个问题维度来讲解清楚的话，就说明已经达到要求了。\n\n#### Step2 梳理、挖掘基本需求点\n\n> 这一部分内容大家最熟悉，也是一般人上来就开搞的一步，每个人都能整出一篇“丰满”的思维导图出来，全部展开的时候看起来内容丰富，但很多同学的思维导图内容细看后发现缺乏逻辑，有时候会很全，有时候会遗漏一些内容，实际上就是缺乏一些系统的思维。\n\n实际上我们在做项目或者模块分析时还是有套路可以耍的： 1\n\n首先就是把我们软件质量模型这张牌掏出来，如果能熟练的掌握质量模型的6大特性（功能性、可靠性、易用性、效率、可维护性、可移植性），27个子特性，那你做测试分析可能遗漏的几率是很小的。\n实际上很少人能全部掌握，但你需要做到的是6大特性一定要掌握，每个特性大概对应的是哪些维度要非常清楚，质量模型中的维度需要逐项去做分析覆盖，功能性这块基本是个测试都能做到，但如何把功能性做全做深就又是一个挑战；\n\n**功能特性分析：**\n\n1. 功能特性分析基本占据了80%以上的内容，也是我们需要花费80%精力去做好的部分，看起来最简单的部分，也是最难的部分;\n2. 你需要深入理解项目背景和用户痛点，需要了解需求文档中提及的每一个模块功能，以及模块与模块之间的联系；\n3. 需要在没有原型的基础上在脑海里自己勾勒出产品界面的雏形，想象各个功能模块之间的跳转逻辑以及依赖关系；\n4. 通过对SE/开发编写的概要设计、详细设计的仔细研读，了解每个模块的具体后台实现，来挖掘隐藏的测试点和逻辑联系；--这一步至少50%的测试人员做不到，很多人无法理解开发的后台实现逻辑，也就不可能知道该实现可能存在的问题，自然就不可能挖掘出这种隐藏的测试点，往往代码的缺陷就来自于这里，因为开发编码实际上就是把他的思维以代码的方式去呈现出来，那开发自己的想法都可能有问题，我们做测试的不去识别他的想法缺陷，再到后面去弥补，你肯定已经想到这个地方的成本有多高。所以能够落地去做的事情就是仔细研读开发编写的详细设计文档，技术这块不懂的就去查资料去问开发，直到理解他的实现逻辑是什么，在这个过程中你就会找到很多隐藏的测试点，从而能够丰富你的功能分析点。\n5. 对于解决方案类产品（B/S架构），B/S类架构项目都是分前后台的，往往测试分析的时候大家只会去关注前台的显示，文案，按钮这些基本肉眼可见的东西，对于后台数据库的内容往往“视而不见”，在理解开发详细设计时，就要同时清楚他们的数据表设计内容，了解表与表之间的关联关系，字段的具体含义，前端数据获取的地方，以此就非常容易识别前台代码是否写死，是否是按照约定的逻辑来处理加工数据的，也就能提早发现一些设计、实现上不合理的地方。\n\n**思维导图的输出**\n\n>  通过上面的思路分析后，我们就能输出80%的思维导图分析内容，也就抓住了这个项目的80%的测试点。\n\n此时你完成的思维导图大概应该是这个样子：\n![](pictures/e2e_analysis/022FJX.png)\n\n 完成80%内容后，剩下的把其他五大特性的内容进行完善即可，具体每个特性所体现的内容请大家自行学习，并转化成项目中可实施的测试点 此部分完成后思维导图大致会是下面的结构，能够确保质量模型维度的全覆盖，那测试点的梳理基本就完成95%了。\n\n![](pictures/e2e_analysis/03FJX.png)\n\n完成上述测试分析后，实际上我们还有一个很重要的维度容易忽略，那就是异常场景，当然很多同学也容易特立独行，在上面的分析过程中就投入大量精力去搞异常场景，显得自己考虑问题的角度比较深入或者独特。\n\n想法是好的，但这个不是我们主要发力的点，你基本业务流都没整明白，直接到这种容易“钻牛角尖”的胡同里，很容易走火入魔。 \n\n建议上来说，在完成上面的所有分析后，再把自己脱离出来，去思考一些异常场景的补充，此时你的角色就变换成一个“破坏”者，以你能想到的，在日常使用过程中可能发生的一些“可怕”场景都用上来，如果符合当前项目的操作入口，那么就是你异常场景的突破口。\n\n**打比方（也不知道比方会不会怪我老打他）**： \n\n  1. 使用过程中，直接关闭程序（数据都没保存呢……）--程序是否能再次正常启动，数据是否可以恢复到之前打开的状态；\n  2. 直接暴力切断电源，系统重启后，程序是否正常运行，数据是否恢复之前状态；\n  3. 直接关闭浏览器，提交的数据是否能下次恢复，程序是否能拦截并给出提示还有数据未保存；\n  4. 服务器直接断电，被手动关闭，重启服务器后，服务是否能正常拉起，恢复后台服务能力，数据是否均正常；\n  5. 对于存在输入的地方，我们可做的骚操作很多，这里边界值的上点和外点、非等价类的输入就是我们做异常测试的发力点，会不会因为我们的一些上点、内点、非等价类输入，或者特殊字符输入，或者SQL注入的内容输入造成程序崩溃，或者安全漏洞等等；\n  6. 对于图谋不轨的人，我们还需要考虑安全问题，是否存在明文传输（密码全程是否加密），通过浏览器F12调试模式查看接口的传参过程，通过后台数据库查看具体的密码存储形式，通过后台日志查看敏感信息是否脱敏处理……\n  7. 数据传输过程中，直接断开网络，程序下次是否能正常重新处理数据；\n  8. 上传非法格式，非法超大文件前台是否能正常校验拦截，通过接口直接上传，后台是否能正常拦截；\n  9. 程序提供的配置，逻辑上是否有做依赖控制，是否存在前后冲突的配置可以设置，导致部分配置不生效；\n  10. 数据的多次重复提交是否会存在异常；\n  11. 数据的新建=》删除=》再建，是否能正常处理；\n  12. 数据的提交更改后，下次进入展示，回显是否正确；\n  13. 存在数据记忆的场景，是否能够正常记忆；\n  14. 存在回退的场景，数据是否能够正常回滚无残留；\n  15. 存在数据迁移的场景，数据是否能够正常迁移，且兼容新版本的展示结构；\n  16. 存在数据结构升级的场景，是否能向下兼容老旧数据，或者正常转换旧数据结构，从而正常展示在前端；\n  17. 存在可以向后台提交数据的按钮时，是否可以快速频繁的点击提交，可能导致数据异常；\n  18. 存在单选、复选、全选、全不选的场景时，频繁的选择状态切换，选择逻辑是否处理正确，选择数据对象是否准确；\n  19. 存在批量新建、上传、删除等场景时，对于单条数据的批量操作，多条数据的批量操作，是否能正确处理；\n  20. 存在大数据量场景时，需要重点关注接口数据的处理准确性，在实现规格内，提交的大数据请求处理，是否能准确且高效的完成。\n\n此时你的思维导图大概是这个样子：\n\n![](pictures/e2e_analysis/04FJX.png)\n\n#### Step3 精加工生产E2E验收用例\n\n> - 通过上面的生产加工后，想必大家觉得分析工作已经完成了，可以说作为内部测试在完成上面工作后，测试分析工作的确可以告一段落，我也可以打包票说只要你能按照上面提到的维度，每个维度都做出了深入的思考与分析，那你的测试分析是比较完善的；\n> - 但作为验收工程师，最核心的部分还没开始，那就是E2E场景，也就是说，到现在为止，验收工程师的核心工作才刚刚开始……\n\n实际上前面的工作都已经做的比较全了，剩下的部分只需要结合部分思维来串联一下就可以完成，此刻你就变身为一个串珠的人儿了，把你精心准备好的“珍珠”按照某种方式串起来，做成一条条“项链”，这些“项链”就是我们验收的E2E场景用例，其主要会涉及到如下方面内容：\n\n1. 理解何为用户场景？\n> 用户日常使用时，使用产品的操作路径，可能进行的操作流。\n\n2. 写这些E2E场景的意义是什么？ \n尽可能全的模拟覆盖用户日常会操作的路径，提前发现可能存在的问题，确认产品是否能够满足用户日常使用，弥补在模块测试中对模块之间的关联性测试覆盖不足的问题。\n\n3. 用户场景的来源有哪些？ \n- 通过功能点分析，站在用户角度采用状态机思路编写E2E场景用例--你就是用户； \n- 通过分析一线人员提供的问题信息，获得用户使用的场景信息--真实使用者的反馈； \n- 通过一线人员提供的用户群体特征，使用产品的场景等信息，通过关联分析构建用户场景信息--对真实使用者的模拟分析，有时候用户自己都不知道自己需要的是什么，那我们就需要替用户去思考这个问题，如同乔布斯说的：在我发布苹果手机的时候，用户才知道这就是他们想要的。\n\n4. 什么叫做端到端（E2E）场景用例？ \n不同于传统测试过程中仅针对某一个功能点进行深入验证的用例，而是尽可能将多个功能点通过某种思路（如状态机）有目的设计成一连串的操作流，形成的一种用例形式。\n\n5. 场景用例的编写粒度该如何把控？ \n\t在编写这类用例时，很多同学会陷入两难境地，在测试步骤中，不知道编写粒度该控制到哪个层次，写太细了跟传统用例没区别，写太粗了又担心不具备可执行性； \n\t- 实际上这个问题很难按照某种要求去规定，主要把握几个原则： \n\t1.  场景用例编写的前提，一定是内部测试已经有非常详尽的功能用例，覆盖每个功能点，确保了基本功能是没有问题的；--如果担心这个地方有遗漏，说明我们内部测试需要改进，并且在测试执行阶段，验收工程师也需要有能力进行适当发散，做事不能眉毛胡子一把抓，每个阶段的重点核心不同，该放的时候要放，该收的地方得收。 \n\t2. 基于上述前提，就知道我们的场景用例不会写的太细，更多的是一种操作行为流的描述，可以做的是，在每一个操作行为后，预期结果我们尽可能的描述全面； \n\t3. 每一条用例都需要有一个核心目的，要想清楚该用例的核心是为了验证或者保证什么功能，那么用例的步骤描述都需要围绕这个核心去开展，避免一条用例中混杂不同的场景和行为路径，会导致用例缺乏目标，也容易产生冗余用例内容； \n\t4. 用例粒度确保能够清晰引导执行者完成步骤描述内容，在存在依赖的部分交代清楚依赖获取的方式，预期结果明确无歧义； \n\t5. 在编写过程中发现用例步骤太多（超过十几步）,那就需要针对该路径做分离处理，可以分成多条用例来覆盖，避免单条用例步骤过于复杂，可能对后续的执行带来不必要的麻烦；\n\t\n6. 我该如何知道E2E用例步骤该从哪里开始又从哪里结束？ \n\t- 此行为实际上也没有固定的公式可以参考，仍旧是结合部分经验来完成： \n\t1. 把握一个核心目的，场景用例内容必须包含我们前面分析的所有功能点；--如果没有包含在内，则问自己前面的分析是否有必要，如果觉得没必要就裁剪前面的分析； \n\t2. 用例开始起点一般可以采取某个功能模块的入口； \n\t3. 用例的结束就不一定会有唯一的结束点，因为从起点开始后，可能有多个分支均会走向结束，此时则可以分成多条用例来覆盖（对于前面覆盖的步骤则可以作为前置条件，以此精简其他分支的用例内容）； \n\t4. 有些分支走下去发现是一个死循环，无法有效闭环，那此时我们至少需要覆盖以此完整的循环，保证各个状态之间的转换路径均需要覆盖（下文会采用状态机的方式做阐述）\n\n我们先来了解一个概念：\"状态机\"，这个将对我们编写E2E用例有较大帮助，场景用例编写的总体思路我们将采用状态机的套路来进行，所以我们需要先了解这个概念： \n\n#### 状态机含义\n\n> 状态机就是有限状态自动机的简称，是现实事物运行规则抽象而成的一个数学模型 状态机有4 个要素: 现态、条件、动作、次态。 这样的归纳，主要是出于对状态机的内在因果关系的考虑: \n- “现态”和 “条件” 是因，\n> - “动作”和 “次态” 是果。\n\n1. 现态：是指当前所处的状态。\n2. 条件：又称为 “事件”，当一个条件被满足，将会触发一个动作，或者执行一次状态的迁移。\n3. 动作：条件满足后执行的动作。动作执行完毕后，可以迁移到新的状态，也可以仍旧保持原状态。动作不是必需的，当条件满足后，也可以不执任何动作，直接迁移到新状态。\n4. 次态：条件满足后要迁往的新状态。“次态”是相对于 “现态” 而言的，“次态”一旦被激活，就转变成新的 “现态” 了。\n\n**转换状态示意图：**\n下面就是对水在不同状态之间的转换示意图 - 假如水蒸气是现态，在施加降温这个条件后，会发生凝结动作，从而变成次态的液态水；\n> - 当前液态水是现态，在施加降温这个条件后，会发生凝固动作，从而变成次态的冰；\n> - 相反在施加加温这个条件后，冰又能变成液态水，在继续加温后，又能变成水蒸气。\n\n![image-20210903095132477](pictures/e2e_analysis/05FJX.png)\n\n- 说人话呢这个东西就是某物体、某程序功能，会被不同的条件动作触发产生变化，从而形成一种新的状态或者结果（也可能保持不变）；\n- 一般来说程序中的这些变化的状态，肯定是有限的，所以我们也叫有限状态机，正因为是有限的我们才有分析的可能性；\n- 既然是有限的状态，那我们就可以将任何程序采用此思想，将其抽象出一个个的状态；\n- 然后提炼出触发的各种条件，通过在不同状态之间施加不同的触发条件，就能让这些状态不断变化，从而完成我们对程序的不同路径的覆盖；\n- 通过上面的示意图我们也是能很容易去理解这个点的，之所以E2E用例的编写需要去采用这种思维呢，主要就是模拟用户日常可能会触发的各种点，只要我们能触碰到他们会触发的各种操作行为，了解到他们企图达到的最终状态，那我们的验收用例就是有意义的。\n\n> 将上面水的状态变化类比到我们软件产品中来，就是这么个意思：\n- 拿到某个功能模块时，可以选择一个最基础的入口作为起点（现态）；\n> - 确定起点后，可以分析有哪些条件可以来施加，也就是从这个起点开始，有哪些后续的功能按钮可以操作？\n> - 分别操作这些功能按钮后，会跳转到哪个模块或者页面（次态）？\n> - 依照上述思路，针对这些次态继续分析可以施加的条件（可点击的功能按钮），继续往下发觉后续的状态；\n> - 当分析到最后发现已经没有新的状态可以产生了，那就说明这条路径已经走到头，此时就可以结束了；\n> - 如果发现不同状态之间会存在循环，那么我们可以保证完成一次循环即可（比如：固态=》液态=》气态=》液态=》固态）；\n> - 如果发现在某一个次态时，会产生多分支时，那么就需要单独分析每个分支，直到每个分支都走到头才结束；\n> - 针对不同的分支我们就可以梳理出不同的场景用例来。\n\n#### 从一线人员获取灵感\n\n> 大多数同学可能觉得到这里任务就该结束了，实际上上面的所有行为都是我们自己通过功能分析构造的一些场景，仍旧会存在遗漏点，每个人的思维都是存在局限性的，如果条件允许的话，我们可以进一步与一线人员甚至直接用户进行交流，来获取其真实日常是如何开展的，从而获取到最为真实客观的使用场景信息。\n\n- 获取一线用户的真实场景信息并不是所有项目都具备的条件，但条件具备时就一定要充分利用起来；\n- 如果没有此条件，我们也可以主动创造，可以主动申请出差客户现场，进行有效信息的获取；\n- 与一线人员、产品经理进行日常有效交流，从交谈中挖掘有效信息，都是可以帮助到我们丰富场景的；\n- 通过上述各种途径获取到的信息，则可以转化成用例，作为有效的覆盖条件。\n\n#### 过程验收&amp;抽验的遗漏补充\n\n> 怎么还没完没了了？\n到此还没结束？\n当然，因为前期我们的所有行为都是纸上谈兵（做的策略分析），老话说的好，纸上得来终觉浅，绝知此事要躬行，事情还得自己“弯着腰”去做啊…… \n\n在验收的整个生命周期中，我们的时间跨度是非常大的，在前期用例全部编写完成后，还有很长一段时间，此期间伴随着迭代版本的提测，内部测试的测试，验收的抽验，等等过程，\n\n此阶段我们是有机会接触真实的产品形态，也能够去实践之前的策略性动作，在这个过程中，是能够发现一些遗漏点，或者过程性不完善的地方。\n\n- 在过程验收或者抽验阶段，发现的一些遗漏点，需要及时的补充到场景用例中；\n- 发现的一些不合理的地方，需要及时优化调整用例的执行步骤等内容；\n- 对于内部测试发现的BUG分布较多，已经识别风险较大的模块，则需要针对性的增加用例密度，提高用例覆盖粒度，做出针对性预防；--BUG都是集中产生的，容易长虫子的地方，他就会成批成批的长，不用去怀疑这个规律；\n- 过程中发现内部测试狙击不足的模块或者方向，也需要我们针对性的提高预防措施，增加用例密度，明知道前面的兄弟没守住，已经有鬼子进村了，还不做好彻底的预防，那是我们的失职；\n- 上述的策略都是在实战中逐步调整完善，进一步巩固我们的武器装备，布好天罗地网，从而在验收阶段真正做到胸有成竹。\n\n此时思维导图框架大概是这么个样子：\n\n![](pictures/e2e_analysis/06FJX.png)\n#### 转换成用例\n\n实际上在上面过程中就有可能已经完成了用例的转换，所以此阶段并不一定是在最后，我们对于用例的补充和思维导图的维护应该是同步的，避免用例有更新，思维导图有缺失，真正在后续去评审和讲解时都是拿思维导图来展示，用例很难逐条去评审，拿用例评审是无法有效知道是否有遗漏，只能评审用例的规范与否，但思维导图则可以方便点 的查看是否针对某个模块有遗漏的场景。\n\n如何编写转换成最终的用例则不在此文中做讲解，针对用例的编写可以单独进行分享，此文默认大家都能够有效的转换编写用例。\n## 质检\n\n> 在实际生产过程中，都有一个质检环节，我们的工作也不例外，此环节与各位的职位级别、能力无关，再牛皮的人都有出错的时候，那么质检的这个动作我们一定要实施。\n\n- 实际上就是我们的评审过程，当局者迷，有时候就会迷在自己的思维中，而其他评审角色就能够从一些意想不到的角度提出遗漏和不足的地方，以便帮助我们进一步完善分析和用例内容；\n- 永远不要迷恋自己的想法，不要相信自己的分析是完善的，在分析过程中，永远多敲一个回车，预留待填写的空间……\n- 有效的评审能够避免后期的不足，重视此过程是对我们对项目的负责。\n\n## 收工\n此次故事就讲到这里~ \n如果你已经睡着了，我会感到很抱歉，没有吸引到你~ \n如果你感觉有收获，我会感到很欣慰，我真的可以帮助到你~ \n如果你有好的建议提交给我，我会感到很高兴，你可以帮助我进一步成长~ \n如果你有更好的思维与我分享，我会感到兴奋，我想与你把酒言欢~\n\n\n\n\n\n\n\n","source":"_posts/e2e_analysis.md","raw":"---\ntitle: 验收测试E2E分析方法\ncategories: \n- 测试理论\ntags:\n- 测试理论\n- 验收测试\n---\n\n\n## 前言\n\n对于验收测试工程师来说，编写验收测试分析和测试用例是一项必须且重要的工作内容，但大多数同学在做验收测试分析及用例编写时，仍旧陷入到传统的分析及用例编写思维中，与内部测试团队所输出的内容并无差异，虽然大家在讲述验收工程师职责或者测试分析思路时，都知道说要编写用户场景用例，可实战过程中仍旧是任性的走老套路，犟的很！ \n\n究其原因，还是没有摆脱传统的测试思维，更多的关注点仍旧在文档中罗列的基本需求点，除了字面上描述出来的东西，很难将自己放在用户角色上去想象体验手头的产品，在验收时，又本着任务的压力，只能优先去完成流程上的一些基本任务：验收测试分析、验收测试用例编写、各种会议评审、输出各类报告…… \n\n上述每一个具体事项实际都只是我们工作实施的一个产物体现，并不是最终的目的，也就是说不仅仅为了去完成一篇分析或者用例的编写，就匆匆忙忙开干，在没有深入理解需求，了解用户痛点，及项目意义的情况下，所有的忙碌都不会产生太高价值，看起来长篇大论的文字表格一堆，但其中蕴含的思维和测试覆盖点却很难达到我们的预期，往往后期需要花费大量的精力去查漏补缺，进行各种优化，算算总投入成本那是极不划算的，而且还觉得自己特忙。\n\n对于团队中每一个同学来讲，每个人都有自己的特长和优势，但也会存在部分同学的确存在以上描述的若干问题，所以也就有了此篇文档，作为个人理解的内容，想要起到抛砖引玉的效果，希望在某些方面能够对大家有所帮助，也许能够通过思维的碰撞产生更加适合当前团队的执行方法和流程。\n\n本文会以通俗易懂偏口语化的风格进行阐述，尽量结合当前项目的实际内容来阐述具体思想，文中所有举例只是为了阐述某种思维方式，请读者不要钻牛角尖，而应该深入扩展理解思维背后的原理，内化成自己的经验和做事方法。\n\n## 导读\n\n本文总体文字比较多，且讲述的内容非常基础，可能都是在各位平常工作中已经在实施的部分，只是做了一个系统的呈现，如果看的过程确有共鸣，则可以快速跳过熟知内容，直接查看“精加工生产E2E验收用例”部分内容； \n\n如果前文中部分内容平常未涉及到，则可以细致去想一下描述中的各问题及思维过程，最好是能转化成自己独特的思维逻辑；\n\n如果文章通篇读起来觉得索然无味，也可以私下进行一些深入的交流（排除语文功底因素），这是我极其希望遇到的场景。\n## 我可以怎么做\n\n- 如果你是一位新同学，或者是从传统测试转做验收测试的，下面的几点内容或许对你有所帮助；\n- 当然如果你是老司机，那也可以看看是否有其他更好的点子可以帮到大家。\n\n\n1. 作为验收工程师，首要任务是先把自己以前的思维做一个冻结，把杯子倒空，忘掉过往的所有荣耀与成就，重新出发；**--调整心态**\n2. 清晰认识自己的职责和责任，做的所有事情都不仅仅只是为了完成上级下达的任务，而是为了某一个目标; **--清晰自己工作的价值**\n>  比如XX项目经过你的验收后，可以拍着胸脯对他人说，已经验收通过没有问题，大胆发布，让用户拿去用吧!\n  或者是经过验收后，发现XX模块有风险，具体风险是XX，可能造成XX影响，建议提前采取XX行动，规避方案是XX，提前告知关注者项目的实际情况，即便是发布后真出现了问题，也做到了未雨绸缪。\n\n3. 接触任何一个项目时，首先是要弄清楚该项目的需求背景，直接接口人就是产品经理，从产品经理这里可以获取到项目的最原始信息，包括项目使用者，使用者的一些特点，此项目能够解决他们什么问题，核心价值具体体现在哪里，产品最差做到什么程度用户也能够接受（逐步剥离可以提炼到核心需求）？所有的这些只为弄清楚背景与用户痛点；\n4. 在了解项目的背景与用户痛点后，接下来的工作就需要始终将这些信息放到制高点，任何的思考行为都为这两点服务，你的模块分析是为了更好的保证用户能够流畅满意的使用，你的用例是为了能更全面的覆盖用户的操作行为，你的执行动作就是将自己当做用户来操作使用这个产品；\n5. 通过上述的信息输入后，就可以开展实际的验收测试分析，这里还是推荐使用思维导图的方式来开展此项工作；\n6. 在思维导图分析完成后，接下来就是用例的转化写作了，转化过程只需要抓住一个核心：思维导图中辛苦分析出来的验证点不要漏掉；\n7. 验收执行阶段工作主要是执行用例，在执行每条用例时，同样需要思考用例编写的本意是要验证什么点，切记无脑执行，往往能够发现用例可优化的地方，或者可扩展验证场景。\n\n## 正题\n\n前面的内容主要是一些铺垫，也就是大家说的鸡汤软文，下文主要从上面列出的几个步骤来描述一下个人理解的验收测试用例的生产过程，用例输出绝对不是直接上来就干的事儿，拿到项目一上来就直接干用例的行为那都是莽夫行为，测试最高价值体现就是你的思维，而对思维的加工最终输出的产物才是思维导图、测试用例这些实际的文档，下面会针对每个步骤进行详细的阐述，希望对大家有所帮助。\n### 下文整体思路会以下图思路开展\n\n![](pictures/e2e_analysis/01FJX.png)\n\n## 用例生产过程\n\n### 所需要的原料\n\n - 此部分内容，主要是列出我们在做一个项目的时候，最好弄清楚我们所需要的输入；\n - 包括我们需要具备的一些能力或者了解的知识点；\n - 当然不是所有列出的东西都一定需要具备或者精通，当前不具备的就可以针对性的去提升学习，以便能在工作中能够轻松应对。\n\n**实物原料：**- 项目需求文档；--必选（哪怕是一句话需求）\n\n- 需求原型；--可选\n\n- 研发概要设计文档；--可选\n- 研发详细设计文档；--可选\n- 项目demo；--可选\n- ……\n\n**思想原料：**- 熟悉软件研发流程；\n> 熟悉软件测试基本理论知识:\n1. 黑盒测试基本方法（等价类、边界值、正交、状态迁移、判定表、错误猜测、……）； \n2. 接口测试、安全测试、性能测试、网络基本知识的了解； \n3. 测试思维导图分析方法； \n4. 用例编写的基本原则，测试用例的八大要素；\n\n### 加工流程\n\n> 通过对上述或者更多的原料进行有序加工，我们的思维产物最终会以具体的思维导图、测试用例体现出来。\n\n#### Step1 深入理解项目背景、用户痛点\n\n**实操步骤**\n\n首先我们在接触到一个新项目时,首要的就是拿到该项目的需求文档,如果没有需求文档就直接找产品经理或者一线人员,甚至是直接用户进行沟通,主要目的就是弄清楚如下几个问题: \n\n1. 这个项目产生的原因是什么?--为什么要做这个项目,有钱任性?做着玩? 主要是为了解决用户什么问题,用户在当前碰到了什么难题需要我们来解围?\n2. 不做这个项目行不行?--市面上有没有现成的解决方案?为什么要我们做这个?我们这个项目的优势在哪里?我们能为用户提供什么核心价值?\n3. 我们的核心用户都是哪些人?都是一些什么样的人?这些人有些什么习惯或者特点?在产品使用上会不会有些特殊癖好或者要求?\n4. 我们是怎么解决用户遇到的这个难题的,当前的需求内容是否能够达到解决用户痛点的目的?\n\n经过上述几个问题的自问或者问他人,你一定会获得一些有用的信息,经过对这些信息的消化和理解,你基本上就具备了与产品经理或者用户等位思考的状态,在此状态下,再结合产品经理编写的现成的背景和痛点问题描述,基本上就真正理解了项目的背景了；\n\n如何确定自己已经理解了当前项目背景呢？\n\n**Check点**\n把这个项目介绍给其他人，能够流畅的按照上述几个问题维度来讲解清楚的话，就说明已经达到要求了。\n\n#### Step2 梳理、挖掘基本需求点\n\n> 这一部分内容大家最熟悉，也是一般人上来就开搞的一步，每个人都能整出一篇“丰满”的思维导图出来，全部展开的时候看起来内容丰富，但很多同学的思维导图内容细看后发现缺乏逻辑，有时候会很全，有时候会遗漏一些内容，实际上就是缺乏一些系统的思维。\n\n实际上我们在做项目或者模块分析时还是有套路可以耍的： 1\n\n首先就是把我们软件质量模型这张牌掏出来，如果能熟练的掌握质量模型的6大特性（功能性、可靠性、易用性、效率、可维护性、可移植性），27个子特性，那你做测试分析可能遗漏的几率是很小的。\n实际上很少人能全部掌握，但你需要做到的是6大特性一定要掌握，每个特性大概对应的是哪些维度要非常清楚，质量模型中的维度需要逐项去做分析覆盖，功能性这块基本是个测试都能做到，但如何把功能性做全做深就又是一个挑战；\n\n**功能特性分析：**\n\n1. 功能特性分析基本占据了80%以上的内容，也是我们需要花费80%精力去做好的部分，看起来最简单的部分，也是最难的部分;\n2. 你需要深入理解项目背景和用户痛点，需要了解需求文档中提及的每一个模块功能，以及模块与模块之间的联系；\n3. 需要在没有原型的基础上在脑海里自己勾勒出产品界面的雏形，想象各个功能模块之间的跳转逻辑以及依赖关系；\n4. 通过对SE/开发编写的概要设计、详细设计的仔细研读，了解每个模块的具体后台实现，来挖掘隐藏的测试点和逻辑联系；--这一步至少50%的测试人员做不到，很多人无法理解开发的后台实现逻辑，也就不可能知道该实现可能存在的问题，自然就不可能挖掘出这种隐藏的测试点，往往代码的缺陷就来自于这里，因为开发编码实际上就是把他的思维以代码的方式去呈现出来，那开发自己的想法都可能有问题，我们做测试的不去识别他的想法缺陷，再到后面去弥补，你肯定已经想到这个地方的成本有多高。所以能够落地去做的事情就是仔细研读开发编写的详细设计文档，技术这块不懂的就去查资料去问开发，直到理解他的实现逻辑是什么，在这个过程中你就会找到很多隐藏的测试点，从而能够丰富你的功能分析点。\n5. 对于解决方案类产品（B/S架构），B/S类架构项目都是分前后台的，往往测试分析的时候大家只会去关注前台的显示，文案，按钮这些基本肉眼可见的东西，对于后台数据库的内容往往“视而不见”，在理解开发详细设计时，就要同时清楚他们的数据表设计内容，了解表与表之间的关联关系，字段的具体含义，前端数据获取的地方，以此就非常容易识别前台代码是否写死，是否是按照约定的逻辑来处理加工数据的，也就能提早发现一些设计、实现上不合理的地方。\n\n**思维导图的输出**\n\n>  通过上面的思路分析后，我们就能输出80%的思维导图分析内容，也就抓住了这个项目的80%的测试点。\n\n此时你完成的思维导图大概应该是这个样子：\n![](pictures/e2e_analysis/022FJX.png)\n\n 完成80%内容后，剩下的把其他五大特性的内容进行完善即可，具体每个特性所体现的内容请大家自行学习，并转化成项目中可实施的测试点 此部分完成后思维导图大致会是下面的结构，能够确保质量模型维度的全覆盖，那测试点的梳理基本就完成95%了。\n\n![](pictures/e2e_analysis/03FJX.png)\n\n完成上述测试分析后，实际上我们还有一个很重要的维度容易忽略，那就是异常场景，当然很多同学也容易特立独行，在上面的分析过程中就投入大量精力去搞异常场景，显得自己考虑问题的角度比较深入或者独特。\n\n想法是好的，但这个不是我们主要发力的点，你基本业务流都没整明白，直接到这种容易“钻牛角尖”的胡同里，很容易走火入魔。 \n\n建议上来说，在完成上面的所有分析后，再把自己脱离出来，去思考一些异常场景的补充，此时你的角色就变换成一个“破坏”者，以你能想到的，在日常使用过程中可能发生的一些“可怕”场景都用上来，如果符合当前项目的操作入口，那么就是你异常场景的突破口。\n\n**打比方（也不知道比方会不会怪我老打他）**： \n\n  1. 使用过程中，直接关闭程序（数据都没保存呢……）--程序是否能再次正常启动，数据是否可以恢复到之前打开的状态；\n  2. 直接暴力切断电源，系统重启后，程序是否正常运行，数据是否恢复之前状态；\n  3. 直接关闭浏览器，提交的数据是否能下次恢复，程序是否能拦截并给出提示还有数据未保存；\n  4. 服务器直接断电，被手动关闭，重启服务器后，服务是否能正常拉起，恢复后台服务能力，数据是否均正常；\n  5. 对于存在输入的地方，我们可做的骚操作很多，这里边界值的上点和外点、非等价类的输入就是我们做异常测试的发力点，会不会因为我们的一些上点、内点、非等价类输入，或者特殊字符输入，或者SQL注入的内容输入造成程序崩溃，或者安全漏洞等等；\n  6. 对于图谋不轨的人，我们还需要考虑安全问题，是否存在明文传输（密码全程是否加密），通过浏览器F12调试模式查看接口的传参过程，通过后台数据库查看具体的密码存储形式，通过后台日志查看敏感信息是否脱敏处理……\n  7. 数据传输过程中，直接断开网络，程序下次是否能正常重新处理数据；\n  8. 上传非法格式，非法超大文件前台是否能正常校验拦截，通过接口直接上传，后台是否能正常拦截；\n  9. 程序提供的配置，逻辑上是否有做依赖控制，是否存在前后冲突的配置可以设置，导致部分配置不生效；\n  10. 数据的多次重复提交是否会存在异常；\n  11. 数据的新建=》删除=》再建，是否能正常处理；\n  12. 数据的提交更改后，下次进入展示，回显是否正确；\n  13. 存在数据记忆的场景，是否能够正常记忆；\n  14. 存在回退的场景，数据是否能够正常回滚无残留；\n  15. 存在数据迁移的场景，数据是否能够正常迁移，且兼容新版本的展示结构；\n  16. 存在数据结构升级的场景，是否能向下兼容老旧数据，或者正常转换旧数据结构，从而正常展示在前端；\n  17. 存在可以向后台提交数据的按钮时，是否可以快速频繁的点击提交，可能导致数据异常；\n  18. 存在单选、复选、全选、全不选的场景时，频繁的选择状态切换，选择逻辑是否处理正确，选择数据对象是否准确；\n  19. 存在批量新建、上传、删除等场景时，对于单条数据的批量操作，多条数据的批量操作，是否能正确处理；\n  20. 存在大数据量场景时，需要重点关注接口数据的处理准确性，在实现规格内，提交的大数据请求处理，是否能准确且高效的完成。\n\n此时你的思维导图大概是这个样子：\n\n![](pictures/e2e_analysis/04FJX.png)\n\n#### Step3 精加工生产E2E验收用例\n\n> - 通过上面的生产加工后，想必大家觉得分析工作已经完成了，可以说作为内部测试在完成上面工作后，测试分析工作的确可以告一段落，我也可以打包票说只要你能按照上面提到的维度，每个维度都做出了深入的思考与分析，那你的测试分析是比较完善的；\n> - 但作为验收工程师，最核心的部分还没开始，那就是E2E场景，也就是说，到现在为止，验收工程师的核心工作才刚刚开始……\n\n实际上前面的工作都已经做的比较全了，剩下的部分只需要结合部分思维来串联一下就可以完成，此刻你就变身为一个串珠的人儿了，把你精心准备好的“珍珠”按照某种方式串起来，做成一条条“项链”，这些“项链”就是我们验收的E2E场景用例，其主要会涉及到如下方面内容：\n\n1. 理解何为用户场景？\n> 用户日常使用时，使用产品的操作路径，可能进行的操作流。\n\n2. 写这些E2E场景的意义是什么？ \n尽可能全的模拟覆盖用户日常会操作的路径，提前发现可能存在的问题，确认产品是否能够满足用户日常使用，弥补在模块测试中对模块之间的关联性测试覆盖不足的问题。\n\n3. 用户场景的来源有哪些？ \n- 通过功能点分析，站在用户角度采用状态机思路编写E2E场景用例--你就是用户； \n- 通过分析一线人员提供的问题信息，获得用户使用的场景信息--真实使用者的反馈； \n- 通过一线人员提供的用户群体特征，使用产品的场景等信息，通过关联分析构建用户场景信息--对真实使用者的模拟分析，有时候用户自己都不知道自己需要的是什么，那我们就需要替用户去思考这个问题，如同乔布斯说的：在我发布苹果手机的时候，用户才知道这就是他们想要的。\n\n4. 什么叫做端到端（E2E）场景用例？ \n不同于传统测试过程中仅针对某一个功能点进行深入验证的用例，而是尽可能将多个功能点通过某种思路（如状态机）有目的设计成一连串的操作流，形成的一种用例形式。\n\n5. 场景用例的编写粒度该如何把控？ \n\t在编写这类用例时，很多同学会陷入两难境地，在测试步骤中，不知道编写粒度该控制到哪个层次，写太细了跟传统用例没区别，写太粗了又担心不具备可执行性； \n\t- 实际上这个问题很难按照某种要求去规定，主要把握几个原则： \n\t1.  场景用例编写的前提，一定是内部测试已经有非常详尽的功能用例，覆盖每个功能点，确保了基本功能是没有问题的；--如果担心这个地方有遗漏，说明我们内部测试需要改进，并且在测试执行阶段，验收工程师也需要有能力进行适当发散，做事不能眉毛胡子一把抓，每个阶段的重点核心不同，该放的时候要放，该收的地方得收。 \n\t2. 基于上述前提，就知道我们的场景用例不会写的太细，更多的是一种操作行为流的描述，可以做的是，在每一个操作行为后，预期结果我们尽可能的描述全面； \n\t3. 每一条用例都需要有一个核心目的，要想清楚该用例的核心是为了验证或者保证什么功能，那么用例的步骤描述都需要围绕这个核心去开展，避免一条用例中混杂不同的场景和行为路径，会导致用例缺乏目标，也容易产生冗余用例内容； \n\t4. 用例粒度确保能够清晰引导执行者完成步骤描述内容，在存在依赖的部分交代清楚依赖获取的方式，预期结果明确无歧义； \n\t5. 在编写过程中发现用例步骤太多（超过十几步）,那就需要针对该路径做分离处理，可以分成多条用例来覆盖，避免单条用例步骤过于复杂，可能对后续的执行带来不必要的麻烦；\n\t\n6. 我该如何知道E2E用例步骤该从哪里开始又从哪里结束？ \n\t- 此行为实际上也没有固定的公式可以参考，仍旧是结合部分经验来完成： \n\t1. 把握一个核心目的，场景用例内容必须包含我们前面分析的所有功能点；--如果没有包含在内，则问自己前面的分析是否有必要，如果觉得没必要就裁剪前面的分析； \n\t2. 用例开始起点一般可以采取某个功能模块的入口； \n\t3. 用例的结束就不一定会有唯一的结束点，因为从起点开始后，可能有多个分支均会走向结束，此时则可以分成多条用例来覆盖（对于前面覆盖的步骤则可以作为前置条件，以此精简其他分支的用例内容）； \n\t4. 有些分支走下去发现是一个死循环，无法有效闭环，那此时我们至少需要覆盖以此完整的循环，保证各个状态之间的转换路径均需要覆盖（下文会采用状态机的方式做阐述）\n\n我们先来了解一个概念：\"状态机\"，这个将对我们编写E2E用例有较大帮助，场景用例编写的总体思路我们将采用状态机的套路来进行，所以我们需要先了解这个概念： \n\n#### 状态机含义\n\n> 状态机就是有限状态自动机的简称，是现实事物运行规则抽象而成的一个数学模型 状态机有4 个要素: 现态、条件、动作、次态。 这样的归纳，主要是出于对状态机的内在因果关系的考虑: \n- “现态”和 “条件” 是因，\n> - “动作”和 “次态” 是果。\n\n1. 现态：是指当前所处的状态。\n2. 条件：又称为 “事件”，当一个条件被满足，将会触发一个动作，或者执行一次状态的迁移。\n3. 动作：条件满足后执行的动作。动作执行完毕后，可以迁移到新的状态，也可以仍旧保持原状态。动作不是必需的，当条件满足后，也可以不执任何动作，直接迁移到新状态。\n4. 次态：条件满足后要迁往的新状态。“次态”是相对于 “现态” 而言的，“次态”一旦被激活，就转变成新的 “现态” 了。\n\n**转换状态示意图：**\n下面就是对水在不同状态之间的转换示意图 - 假如水蒸气是现态，在施加降温这个条件后，会发生凝结动作，从而变成次态的液态水；\n> - 当前液态水是现态，在施加降温这个条件后，会发生凝固动作，从而变成次态的冰；\n> - 相反在施加加温这个条件后，冰又能变成液态水，在继续加温后，又能变成水蒸气。\n\n![image-20210903095132477](pictures/e2e_analysis/05FJX.png)\n\n- 说人话呢这个东西就是某物体、某程序功能，会被不同的条件动作触发产生变化，从而形成一种新的状态或者结果（也可能保持不变）；\n- 一般来说程序中的这些变化的状态，肯定是有限的，所以我们也叫有限状态机，正因为是有限的我们才有分析的可能性；\n- 既然是有限的状态，那我们就可以将任何程序采用此思想，将其抽象出一个个的状态；\n- 然后提炼出触发的各种条件，通过在不同状态之间施加不同的触发条件，就能让这些状态不断变化，从而完成我们对程序的不同路径的覆盖；\n- 通过上面的示意图我们也是能很容易去理解这个点的，之所以E2E用例的编写需要去采用这种思维呢，主要就是模拟用户日常可能会触发的各种点，只要我们能触碰到他们会触发的各种操作行为，了解到他们企图达到的最终状态，那我们的验收用例就是有意义的。\n\n> 将上面水的状态变化类比到我们软件产品中来，就是这么个意思：\n- 拿到某个功能模块时，可以选择一个最基础的入口作为起点（现态）；\n> - 确定起点后，可以分析有哪些条件可以来施加，也就是从这个起点开始，有哪些后续的功能按钮可以操作？\n> - 分别操作这些功能按钮后，会跳转到哪个模块或者页面（次态）？\n> - 依照上述思路，针对这些次态继续分析可以施加的条件（可点击的功能按钮），继续往下发觉后续的状态；\n> - 当分析到最后发现已经没有新的状态可以产生了，那就说明这条路径已经走到头，此时就可以结束了；\n> - 如果发现不同状态之间会存在循环，那么我们可以保证完成一次循环即可（比如：固态=》液态=》气态=》液态=》固态）；\n> - 如果发现在某一个次态时，会产生多分支时，那么就需要单独分析每个分支，直到每个分支都走到头才结束；\n> - 针对不同的分支我们就可以梳理出不同的场景用例来。\n\n#### 从一线人员获取灵感\n\n> 大多数同学可能觉得到这里任务就该结束了，实际上上面的所有行为都是我们自己通过功能分析构造的一些场景，仍旧会存在遗漏点，每个人的思维都是存在局限性的，如果条件允许的话，我们可以进一步与一线人员甚至直接用户进行交流，来获取其真实日常是如何开展的，从而获取到最为真实客观的使用场景信息。\n\n- 获取一线用户的真实场景信息并不是所有项目都具备的条件，但条件具备时就一定要充分利用起来；\n- 如果没有此条件，我们也可以主动创造，可以主动申请出差客户现场，进行有效信息的获取；\n- 与一线人员、产品经理进行日常有效交流，从交谈中挖掘有效信息，都是可以帮助到我们丰富场景的；\n- 通过上述各种途径获取到的信息，则可以转化成用例，作为有效的覆盖条件。\n\n#### 过程验收&amp;抽验的遗漏补充\n\n> 怎么还没完没了了？\n到此还没结束？\n当然，因为前期我们的所有行为都是纸上谈兵（做的策略分析），老话说的好，纸上得来终觉浅，绝知此事要躬行，事情还得自己“弯着腰”去做啊…… \n\n在验收的整个生命周期中，我们的时间跨度是非常大的，在前期用例全部编写完成后，还有很长一段时间，此期间伴随着迭代版本的提测，内部测试的测试，验收的抽验，等等过程，\n\n此阶段我们是有机会接触真实的产品形态，也能够去实践之前的策略性动作，在这个过程中，是能够发现一些遗漏点，或者过程性不完善的地方。\n\n- 在过程验收或者抽验阶段，发现的一些遗漏点，需要及时的补充到场景用例中；\n- 发现的一些不合理的地方，需要及时优化调整用例的执行步骤等内容；\n- 对于内部测试发现的BUG分布较多，已经识别风险较大的模块，则需要针对性的增加用例密度，提高用例覆盖粒度，做出针对性预防；--BUG都是集中产生的，容易长虫子的地方，他就会成批成批的长，不用去怀疑这个规律；\n- 过程中发现内部测试狙击不足的模块或者方向，也需要我们针对性的提高预防措施，增加用例密度，明知道前面的兄弟没守住，已经有鬼子进村了，还不做好彻底的预防，那是我们的失职；\n- 上述的策略都是在实战中逐步调整完善，进一步巩固我们的武器装备，布好天罗地网，从而在验收阶段真正做到胸有成竹。\n\n此时思维导图框架大概是这么个样子：\n\n![](pictures/e2e_analysis/06FJX.png)\n#### 转换成用例\n\n实际上在上面过程中就有可能已经完成了用例的转换，所以此阶段并不一定是在最后，我们对于用例的补充和思维导图的维护应该是同步的，避免用例有更新，思维导图有缺失，真正在后续去评审和讲解时都是拿思维导图来展示，用例很难逐条去评审，拿用例评审是无法有效知道是否有遗漏，只能评审用例的规范与否，但思维导图则可以方便点 的查看是否针对某个模块有遗漏的场景。\n\n如何编写转换成最终的用例则不在此文中做讲解，针对用例的编写可以单独进行分享，此文默认大家都能够有效的转换编写用例。\n## 质检\n\n> 在实际生产过程中，都有一个质检环节，我们的工作也不例外，此环节与各位的职位级别、能力无关，再牛皮的人都有出错的时候，那么质检的这个动作我们一定要实施。\n\n- 实际上就是我们的评审过程，当局者迷，有时候就会迷在自己的思维中，而其他评审角色就能够从一些意想不到的角度提出遗漏和不足的地方，以便帮助我们进一步完善分析和用例内容；\n- 永远不要迷恋自己的想法，不要相信自己的分析是完善的，在分析过程中，永远多敲一个回车，预留待填写的空间……\n- 有效的评审能够避免后期的不足，重视此过程是对我们对项目的负责。\n\n## 收工\n此次故事就讲到这里~ \n如果你已经睡着了，我会感到很抱歉，没有吸引到你~ \n如果你感觉有收获，我会感到很欣慰，我真的可以帮助到你~ \n如果你有好的建议提交给我，我会感到很高兴，你可以帮助我进一步成长~ \n如果你有更好的思维与我分享，我会感到兴奋，我想与你把酒言欢~\n\n\n\n\n\n\n\n","slug":"e2e_analysis","published":1,"date":"2022-12-30T01:18:10.196Z","updated":"2022-12-30T14:45:33.846Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clcbf771y00031dxhd3b2f567","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>对于验收测试工程师来说，编写验收测试分析和测试用例是一项必须且重要的工作内容，但大多数同学在做验收测试分析及用例编写时，仍旧陷入到传统的分析及用例编写思维中，与内部测试团队所输出的内容并无差异，虽然大家在讲述验收工程师职责或者测试分析思路时，都知道说要编写用户场景用例，可实战过程中仍旧是任性的走老套路，犟的很！ </p>\n<p>究其原因，还是没有摆脱传统的测试思维，更多的关注点仍旧在文档中罗列的基本需求点，除了字面上描述出来的东西，很难将自己放在用户角色上去想象体验手头的产品，在验收时，又本着任务的压力，只能优先去完成流程上的一些基本任务：验收测试分析、验收测试用例编写、各种会议评审、输出各类报告…… </p>\n<p>上述每一个具体事项实际都只是我们工作实施的一个产物体现，并不是最终的目的，也就是说不仅仅为了去完成一篇分析或者用例的编写，就匆匆忙忙开干，在没有深入理解需求，了解用户痛点，及项目意义的情况下，所有的忙碌都不会产生太高价值，看起来长篇大论的文字表格一堆，但其中蕴含的思维和测试覆盖点却很难达到我们的预期，往往后期需要花费大量的精力去查漏补缺，进行各种优化，算算总投入成本那是极不划算的，而且还觉得自己特忙。</p>\n<p>对于团队中每一个同学来讲，每个人都有自己的特长和优势，但也会存在部分同学的确存在以上描述的若干问题，所以也就有了此篇文档，作为个人理解的内容，想要起到抛砖引玉的效果，希望在某些方面能够对大家有所帮助，也许能够通过思维的碰撞产生更加适合当前团队的执行方法和流程。</p>\n<p>本文会以通俗易懂偏口语化的风格进行阐述，尽量结合当前项目的实际内容来阐述具体思想，文中所有举例只是为了阐述某种思维方式，请读者不要钻牛角尖，而应该深入扩展理解思维背后的原理，内化成自己的经验和做事方法。</p>\n<h2 id=\"导读\"><a href=\"#导读\" class=\"headerlink\" title=\"导读\"></a>导读</h2><p>本文总体文字比较多，且讲述的内容非常基础，可能都是在各位平常工作中已经在实施的部分，只是做了一个系统的呈现，如果看的过程确有共鸣，则可以快速跳过熟知内容，直接查看“精加工生产E2E验收用例”部分内容； </p>\n<p>如果前文中部分内容平常未涉及到，则可以细致去想一下描述中的各问题及思维过程，最好是能转化成自己独特的思维逻辑；</p>\n<p>如果文章通篇读起来觉得索然无味，也可以私下进行一些深入的交流（排除语文功底因素），这是我极其希望遇到的场景。</p>\n<h2 id=\"我可以怎么做\"><a href=\"#我可以怎么做\" class=\"headerlink\" title=\"我可以怎么做\"></a>我可以怎么做</h2><ul>\n<li>如果你是一位新同学，或者是从传统测试转做验收测试的，下面的几点内容或许对你有所帮助；</li>\n<li>当然如果你是老司机，那也可以看看是否有其他更好的点子可以帮到大家。</li>\n</ul>\n<ol>\n<li><p>作为验收工程师，首要任务是先把自己以前的思维做一个冻结，把杯子倒空，忘掉过往的所有荣耀与成就，重新出发；**–调整心态**</p>\n</li>\n<li><p>清晰认识自己的职责和责任，做的所有事情都不仅仅只是为了完成上级下达的任务，而是为了某一个目标; <strong>–清晰自己工作的价值</strong></p>\n<blockquote>\n<p> 比如XX项目经过你的验收后，可以拍着胸脯对他人说，已经验收通过没有问题，大胆发布，让用户拿去用吧!<br>  或者是经过验收后，发现XX模块有风险，具体风险是XX，可能造成XX影响，建议提前采取XX行动，规避方案是XX，提前告知关注者项目的实际情况，即便是发布后真出现了问题，也做到了未雨绸缪。</p>\n</blockquote>\n</li>\n<li><p>接触任何一个项目时，首先是要弄清楚该项目的需求背景，直接接口人就是产品经理，从产品经理这里可以获取到项目的最原始信息，包括项目使用者，使用者的一些特点，此项目能够解决他们什么问题，核心价值具体体现在哪里，产品最差做到什么程度用户也能够接受（逐步剥离可以提炼到核心需求）？所有的这些只为弄清楚背景与用户痛点；</p>\n</li>\n<li><p>在了解项目的背景与用户痛点后，接下来的工作就需要始终将这些信息放到制高点，任何的思考行为都为这两点服务，你的模块分析是为了更好的保证用户能够流畅满意的使用，你的用例是为了能更全面的覆盖用户的操作行为，你的执行动作就是将自己当做用户来操作使用这个产品；</p>\n</li>\n<li><p>通过上述的信息输入后，就可以开展实际的验收测试分析，这里还是推荐使用思维导图的方式来开展此项工作；</p>\n</li>\n<li><p>在思维导图分析完成后，接下来就是用例的转化写作了，转化过程只需要抓住一个核心：思维导图中辛苦分析出来的验证点不要漏掉；</p>\n</li>\n<li><p>验收执行阶段工作主要是执行用例，在执行每条用例时，同样需要思考用例编写的本意是要验证什么点，切记无脑执行，往往能够发现用例可优化的地方，或者可扩展验证场景。</p>\n</li>\n</ol>\n<h2 id=\"正题\"><a href=\"#正题\" class=\"headerlink\" title=\"正题\"></a>正题</h2><p>前面的内容主要是一些铺垫，也就是大家说的鸡汤软文，下文主要从上面列出的几个步骤来描述一下个人理解的验收测试用例的生产过程，用例输出绝对不是直接上来就干的事儿，拿到项目一上来就直接干用例的行为那都是莽夫行为，测试最高价值体现就是你的思维，而对思维的加工最终输出的产物才是思维导图、测试用例这些实际的文档，下面会针对每个步骤进行详细的阐述，希望对大家有所帮助。</p>\n<h3 id=\"下文整体思路会以下图思路开展\"><a href=\"#下文整体思路会以下图思路开展\" class=\"headerlink\" title=\"下文整体思路会以下图思路开展\"></a>下文整体思路会以下图思路开展</h3><p><img src=\"/pictures/e2e_analysis/01FJX.png\"></p>\n<h2 id=\"用例生产过程\"><a href=\"#用例生产过程\" class=\"headerlink\" title=\"用例生产过程\"></a>用例生产过程</h2><h3 id=\"所需要的原料\"><a href=\"#所需要的原料\" class=\"headerlink\" title=\"所需要的原料\"></a>所需要的原料</h3><ul>\n<li>此部分内容，主要是列出我们在做一个项目的时候，最好弄清楚我们所需要的输入；</li>\n<li>包括我们需要具备的一些能力或者了解的知识点；</li>\n<li>当然不是所有列出的东西都一定需要具备或者精通，当前不具备的就可以针对性的去提升学习，以便能在工作中能够轻松应对。</li>\n</ul>\n<p><strong>实物原料：</strong>- 项目需求文档；–必选（哪怕是一句话需求）</p>\n<ul>\n<li><p>需求原型；–可选</p>\n</li>\n<li><p>研发概要设计文档；–可选</p>\n</li>\n<li><p>研发详细设计文档；–可选</p>\n</li>\n<li><p>项目demo；–可选</p>\n</li>\n<li><p>……</p>\n</li>\n</ul>\n<p><strong>思想原料：</strong>- 熟悉软件研发流程；</p>\n<blockquote>\n<p>熟悉软件测试基本理论知识:</p>\n</blockquote>\n<ol>\n<li>黑盒测试基本方法（等价类、边界值、正交、状态迁移、判定表、错误猜测、……）； </li>\n<li>接口测试、安全测试、性能测试、网络基本知识的了解； </li>\n<li>测试思维导图分析方法； </li>\n<li>用例编写的基本原则，测试用例的八大要素；</li>\n</ol>\n<h3 id=\"加工流程\"><a href=\"#加工流程\" class=\"headerlink\" title=\"加工流程\"></a>加工流程</h3><blockquote>\n<p>通过对上述或者更多的原料进行有序加工，我们的思维产物最终会以具体的思维导图、测试用例体现出来。</p>\n</blockquote>\n<h4 id=\"Step1-深入理解项目背景、用户痛点\"><a href=\"#Step1-深入理解项目背景、用户痛点\" class=\"headerlink\" title=\"Step1 深入理解项目背景、用户痛点\"></a>Step1 深入理解项目背景、用户痛点</h4><p><strong>实操步骤</strong></p>\n<p>首先我们在接触到一个新项目时,首要的就是拿到该项目的需求文档,如果没有需求文档就直接找产品经理或者一线人员,甚至是直接用户进行沟通,主要目的就是弄清楚如下几个问题: </p>\n<ol>\n<li>这个项目产生的原因是什么?–为什么要做这个项目,有钱任性?做着玩? 主要是为了解决用户什么问题,用户在当前碰到了什么难题需要我们来解围?</li>\n<li>不做这个项目行不行?–市面上有没有现成的解决方案?为什么要我们做这个?我们这个项目的优势在哪里?我们能为用户提供什么核心价值?</li>\n<li>我们的核心用户都是哪些人?都是一些什么样的人?这些人有些什么习惯或者特点?在产品使用上会不会有些特殊癖好或者要求?</li>\n<li>我们是怎么解决用户遇到的这个难题的,当前的需求内容是否能够达到解决用户痛点的目的?</li>\n</ol>\n<p>经过上述几个问题的自问或者问他人,你一定会获得一些有用的信息,经过对这些信息的消化和理解,你基本上就具备了与产品经理或者用户等位思考的状态,在此状态下,再结合产品经理编写的现成的背景和痛点问题描述,基本上就真正理解了项目的背景了；</p>\n<p>如何确定自己已经理解了当前项目背景呢？</p>\n<p><strong>Check点</strong><br>把这个项目介绍给其他人，能够流畅的按照上述几个问题维度来讲解清楚的话，就说明已经达到要求了。</p>\n<h4 id=\"Step2-梳理、挖掘基本需求点\"><a href=\"#Step2-梳理、挖掘基本需求点\" class=\"headerlink\" title=\"Step2 梳理、挖掘基本需求点\"></a>Step2 梳理、挖掘基本需求点</h4><blockquote>\n<p>这一部分内容大家最熟悉，也是一般人上来就开搞的一步，每个人都能整出一篇“丰满”的思维导图出来，全部展开的时候看起来内容丰富，但很多同学的思维导图内容细看后发现缺乏逻辑，有时候会很全，有时候会遗漏一些内容，实际上就是缺乏一些系统的思维。</p>\n</blockquote>\n<p>实际上我们在做项目或者模块分析时还是有套路可以耍的： 1</p>\n<p>首先就是把我们软件质量模型这张牌掏出来，如果能熟练的掌握质量模型的6大特性（功能性、可靠性、易用性、效率、可维护性、可移植性），27个子特性，那你做测试分析可能遗漏的几率是很小的。<br>实际上很少人能全部掌握，但你需要做到的是6大特性一定要掌握，每个特性大概对应的是哪些维度要非常清楚，质量模型中的维度需要逐项去做分析覆盖，功能性这块基本是个测试都能做到，但如何把功能性做全做深就又是一个挑战；</p>\n<p><strong>功能特性分析：</strong></p>\n<ol>\n<li>功能特性分析基本占据了80%以上的内容，也是我们需要花费80%精力去做好的部分，看起来最简单的部分，也是最难的部分;</li>\n<li>你需要深入理解项目背景和用户痛点，需要了解需求文档中提及的每一个模块功能，以及模块与模块之间的联系；</li>\n<li>需要在没有原型的基础上在脑海里自己勾勒出产品界面的雏形，想象各个功能模块之间的跳转逻辑以及依赖关系；</li>\n<li>通过对SE&#x2F;开发编写的概要设计、详细设计的仔细研读，了解每个模块的具体后台实现，来挖掘隐藏的测试点和逻辑联系；–这一步至少50%的测试人员做不到，很多人无法理解开发的后台实现逻辑，也就不可能知道该实现可能存在的问题，自然就不可能挖掘出这种隐藏的测试点，往往代码的缺陷就来自于这里，因为开发编码实际上就是把他的思维以代码的方式去呈现出来，那开发自己的想法都可能有问题，我们做测试的不去识别他的想法缺陷，再到后面去弥补，你肯定已经想到这个地方的成本有多高。所以能够落地去做的事情就是仔细研读开发编写的详细设计文档，技术这块不懂的就去查资料去问开发，直到理解他的实现逻辑是什么，在这个过程中你就会找到很多隐藏的测试点，从而能够丰富你的功能分析点。</li>\n<li>对于解决方案类产品（B&#x2F;S架构），B&#x2F;S类架构项目都是分前后台的，往往测试分析的时候大家只会去关注前台的显示，文案，按钮这些基本肉眼可见的东西，对于后台数据库的内容往往“视而不见”，在理解开发详细设计时，就要同时清楚他们的数据表设计内容，了解表与表之间的关联关系，字段的具体含义，前端数据获取的地方，以此就非常容易识别前台代码是否写死，是否是按照约定的逻辑来处理加工数据的，也就能提早发现一些设计、实现上不合理的地方。</li>\n</ol>\n<p><strong>思维导图的输出</strong></p>\n<blockquote>\n<p> 通过上面的思路分析后，我们就能输出80%的思维导图分析内容，也就抓住了这个项目的80%的测试点。</p>\n</blockquote>\n<p>此时你完成的思维导图大概应该是这个样子：<br><img src=\"/pictures/e2e_analysis/022FJX.png\"></p>\n<p> 完成80%内容后，剩下的把其他五大特性的内容进行完善即可，具体每个特性所体现的内容请大家自行学习，并转化成项目中可实施的测试点 此部分完成后思维导图大致会是下面的结构，能够确保质量模型维度的全覆盖，那测试点的梳理基本就完成95%了。</p>\n<p><img src=\"/pictures/e2e_analysis/03FJX.png\"></p>\n<p>完成上述测试分析后，实际上我们还有一个很重要的维度容易忽略，那就是异常场景，当然很多同学也容易特立独行，在上面的分析过程中就投入大量精力去搞异常场景，显得自己考虑问题的角度比较深入或者独特。</p>\n<p>想法是好的，但这个不是我们主要发力的点，你基本业务流都没整明白，直接到这种容易“钻牛角尖”的胡同里，很容易走火入魔。 </p>\n<p>建议上来说，在完成上面的所有分析后，再把自己脱离出来，去思考一些异常场景的补充，此时你的角色就变换成一个“破坏”者，以你能想到的，在日常使用过程中可能发生的一些“可怕”场景都用上来，如果符合当前项目的操作入口，那么就是你异常场景的突破口。</p>\n<p><strong>打比方（也不知道比方会不会怪我老打他）</strong>： </p>\n<ol>\n<li>使用过程中，直接关闭程序（数据都没保存呢……）–程序是否能再次正常启动，数据是否可以恢复到之前打开的状态；</li>\n<li>直接暴力切断电源，系统重启后，程序是否正常运行，数据是否恢复之前状态；</li>\n<li>直接关闭浏览器，提交的数据是否能下次恢复，程序是否能拦截并给出提示还有数据未保存；</li>\n<li>服务器直接断电，被手动关闭，重启服务器后，服务是否能正常拉起，恢复后台服务能力，数据是否均正常；</li>\n<li>对于存在输入的地方，我们可做的骚操作很多，这里边界值的上点和外点、非等价类的输入就是我们做异常测试的发力点，会不会因为我们的一些上点、内点、非等价类输入，或者特殊字符输入，或者SQL注入的内容输入造成程序崩溃，或者安全漏洞等等；</li>\n<li>对于图谋不轨的人，我们还需要考虑安全问题，是否存在明文传输（密码全程是否加密），通过浏览器F12调试模式查看接口的传参过程，通过后台数据库查看具体的密码存储形式，通过后台日志查看敏感信息是否脱敏处理……</li>\n<li>数据传输过程中，直接断开网络，程序下次是否能正常重新处理数据；</li>\n<li>上传非法格式，非法超大文件前台是否能正常校验拦截，通过接口直接上传，后台是否能正常拦截；</li>\n<li>程序提供的配置，逻辑上是否有做依赖控制，是否存在前后冲突的配置可以设置，导致部分配置不生效；</li>\n<li>数据的多次重复提交是否会存在异常；</li>\n<li>数据的新建&#x3D;》删除&#x3D;》再建，是否能正常处理；</li>\n<li>数据的提交更改后，下次进入展示，回显是否正确；</li>\n<li>存在数据记忆的场景，是否能够正常记忆；</li>\n<li>存在回退的场景，数据是否能够正常回滚无残留；</li>\n<li>存在数据迁移的场景，数据是否能够正常迁移，且兼容新版本的展示结构；</li>\n<li>存在数据结构升级的场景，是否能向下兼容老旧数据，或者正常转换旧数据结构，从而正常展示在前端；</li>\n<li>存在可以向后台提交数据的按钮时，是否可以快速频繁的点击提交，可能导致数据异常；</li>\n<li>存在单选、复选、全选、全不选的场景时，频繁的选择状态切换，选择逻辑是否处理正确，选择数据对象是否准确；</li>\n<li>存在批量新建、上传、删除等场景时，对于单条数据的批量操作，多条数据的批量操作，是否能正确处理；</li>\n<li>存在大数据量场景时，需要重点关注接口数据的处理准确性，在实现规格内，提交的大数据请求处理，是否能准确且高效的完成。</li>\n</ol>\n<p>此时你的思维导图大概是这个样子：</p>\n<p><img src=\"/pictures/e2e_analysis/04FJX.png\"></p>\n<h4 id=\"Step3-精加工生产E2E验收用例\"><a href=\"#Step3-精加工生产E2E验收用例\" class=\"headerlink\" title=\"Step3 精加工生产E2E验收用例\"></a>Step3 精加工生产E2E验收用例</h4><blockquote>\n<ul>\n<li>通过上面的生产加工后，想必大家觉得分析工作已经完成了，可以说作为内部测试在完成上面工作后，测试分析工作的确可以告一段落，我也可以打包票说只要你能按照上面提到的维度，每个维度都做出了深入的思考与分析，那你的测试分析是比较完善的；</li>\n<li>但作为验收工程师，最核心的部分还没开始，那就是E2E场景，也就是说，到现在为止，验收工程师的核心工作才刚刚开始……</li>\n</ul>\n</blockquote>\n<p>实际上前面的工作都已经做的比较全了，剩下的部分只需要结合部分思维来串联一下就可以完成，此刻你就变身为一个串珠的人儿了，把你精心准备好的“珍珠”按照某种方式串起来，做成一条条“项链”，这些“项链”就是我们验收的E2E场景用例，其主要会涉及到如下方面内容：</p>\n<ol>\n<li><p>理解何为用户场景？</p>\n<blockquote>\n<p>用户日常使用时，使用产品的操作路径，可能进行的操作流。</p>\n</blockquote>\n</li>\n<li><p>写这些E2E场景的意义是什么？<br>尽可能全的模拟覆盖用户日常会操作的路径，提前发现可能存在的问题，确认产品是否能够满足用户日常使用，弥补在模块测试中对模块之间的关联性测试覆盖不足的问题。</p>\n</li>\n<li><p>用户场景的来源有哪些？</p>\n</li>\n</ol>\n<ul>\n<li>通过功能点分析，站在用户角度采用状态机思路编写E2E场景用例–你就是用户； </li>\n<li>通过分析一线人员提供的问题信息，获得用户使用的场景信息–真实使用者的反馈； </li>\n<li>通过一线人员提供的用户群体特征，使用产品的场景等信息，通过关联分析构建用户场景信息–对真实使用者的模拟分析，有时候用户自己都不知道自己需要的是什么，那我们就需要替用户去思考这个问题，如同乔布斯说的：在我发布苹果手机的时候，用户才知道这就是他们想要的。</li>\n</ul>\n<ol start=\"4\">\n<li><p>什么叫做端到端（E2E）场景用例？<br>不同于传统测试过程中仅针对某一个功能点进行深入验证的用例，而是尽可能将多个功能点通过某种思路（如状态机）有目的设计成一连串的操作流，形成的一种用例形式。</p>\n</li>\n<li><p>场景用例的编写粒度该如何把控？<br> 在编写这类用例时，很多同学会陷入两难境地，在测试步骤中，不知道编写粒度该控制到哪个层次，写太细了跟传统用例没区别，写太粗了又担心不具备可执行性； </p>\n<ul>\n<li>实际上这个问题很难按照某种要求去规定，主要把握几个原则：</li>\n</ul>\n<ol>\n<li>场景用例编写的前提，一定是内部测试已经有非常详尽的功能用例，覆盖每个功能点，确保了基本功能是没有问题的；–如果担心这个地方有遗漏，说明我们内部测试需要改进，并且在测试执行阶段，验收工程师也需要有能力进行适当发散，做事不能眉毛胡子一把抓，每个阶段的重点核心不同，该放的时候要放，该收的地方得收。 </li>\n<li>基于上述前提，就知道我们的场景用例不会写的太细，更多的是一种操作行为流的描述，可以做的是，在每一个操作行为后，预期结果我们尽可能的描述全面； </li>\n<li>每一条用例都需要有一个核心目的，要想清楚该用例的核心是为了验证或者保证什么功能，那么用例的步骤描述都需要围绕这个核心去开展，避免一条用例中混杂不同的场景和行为路径，会导致用例缺乏目标，也容易产生冗余用例内容； </li>\n<li>用例粒度确保能够清晰引导执行者完成步骤描述内容，在存在依赖的部分交代清楚依赖获取的方式，预期结果明确无歧义； </li>\n<li>在编写过程中发现用例步骤太多（超过十几步）,那就需要针对该路径做分离处理，可以分成多条用例来覆盖，避免单条用例步骤过于复杂，可能对后续的执行带来不必要的麻烦；</li>\n</ol>\n</li>\n<li><p>我该如何知道E2E用例步骤该从哪里开始又从哪里结束？ </p>\n<ul>\n<li>此行为实际上也没有固定的公式可以参考，仍旧是结合部分经验来完成：</li>\n</ul>\n<ol>\n<li>把握一个核心目的，场景用例内容必须包含我们前面分析的所有功能点；–如果没有包含在内，则问自己前面的分析是否有必要，如果觉得没必要就裁剪前面的分析； </li>\n<li>用例开始起点一般可以采取某个功能模块的入口； </li>\n<li>用例的结束就不一定会有唯一的结束点，因为从起点开始后，可能有多个分支均会走向结束，此时则可以分成多条用例来覆盖（对于前面覆盖的步骤则可以作为前置条件，以此精简其他分支的用例内容）； </li>\n<li>有些分支走下去发现是一个死循环，无法有效闭环，那此时我们至少需要覆盖以此完整的循环，保证各个状态之间的转换路径均需要覆盖（下文会采用状态机的方式做阐述）</li>\n</ol>\n</li>\n</ol>\n<p>我们先来了解一个概念：”状态机”，这个将对我们编写E2E用例有较大帮助，场景用例编写的总体思路我们将采用状态机的套路来进行，所以我们需要先了解这个概念： </p>\n<h4 id=\"状态机含义\"><a href=\"#状态机含义\" class=\"headerlink\" title=\"状态机含义\"></a>状态机含义</h4><blockquote>\n<p>状态机就是有限状态自动机的简称，是现实事物运行规则抽象而成的一个数学模型 状态机有4 个要素: 现态、条件、动作、次态。 这样的归纳，主要是出于对状态机的内在因果关系的考虑: </p>\n</blockquote>\n<ul>\n<li>“现态”和 “条件” 是因，<blockquote>\n<ul>\n<li>“动作”和 “次态” 是果。</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<ol>\n<li>现态：是指当前所处的状态。</li>\n<li>条件：又称为 “事件”，当一个条件被满足，将会触发一个动作，或者执行一次状态的迁移。</li>\n<li>动作：条件满足后执行的动作。动作执行完毕后，可以迁移到新的状态，也可以仍旧保持原状态。动作不是必需的，当条件满足后，也可以不执任何动作，直接迁移到新状态。</li>\n<li>次态：条件满足后要迁往的新状态。“次态”是相对于 “现态” 而言的，“次态”一旦被激活，就转变成新的 “现态” 了。</li>\n</ol>\n<p><strong>转换状态示意图：</strong><br>下面就是对水在不同状态之间的转换示意图 - 假如水蒸气是现态，在施加降温这个条件后，会发生凝结动作，从而变成次态的液态水；</p>\n<blockquote>\n<ul>\n<li>当前液态水是现态，在施加降温这个条件后，会发生凝固动作，从而变成次态的冰；</li>\n<li>相反在施加加温这个条件后，冰又能变成液态水，在继续加温后，又能变成水蒸气。</li>\n</ul>\n</blockquote>\n<p><img src=\"/pictures/e2e_analysis/05FJX.png\" alt=\"image-20210903095132477\"></p>\n<ul>\n<li>说人话呢这个东西就是某物体、某程序功能，会被不同的条件动作触发产生变化，从而形成一种新的状态或者结果（也可能保持不变）；</li>\n<li>一般来说程序中的这些变化的状态，肯定是有限的，所以我们也叫有限状态机，正因为是有限的我们才有分析的可能性；</li>\n<li>既然是有限的状态，那我们就可以将任何程序采用此思想，将其抽象出一个个的状态；</li>\n<li>然后提炼出触发的各种条件，通过在不同状态之间施加不同的触发条件，就能让这些状态不断变化，从而完成我们对程序的不同路径的覆盖；</li>\n<li>通过上面的示意图我们也是能很容易去理解这个点的，之所以E2E用例的编写需要去采用这种思维呢，主要就是模拟用户日常可能会触发的各种点，只要我们能触碰到他们会触发的各种操作行为，了解到他们企图达到的最终状态，那我们的验收用例就是有意义的。</li>\n</ul>\n<blockquote>\n<p>将上面水的状态变化类比到我们软件产品中来，就是这么个意思：</p>\n</blockquote>\n<ul>\n<li>拿到某个功能模块时，可以选择一个最基础的入口作为起点（现态）；<blockquote>\n<ul>\n<li>确定起点后，可以分析有哪些条件可以来施加，也就是从这个起点开始，有哪些后续的功能按钮可以操作？</li>\n<li>分别操作这些功能按钮后，会跳转到哪个模块或者页面（次态）？</li>\n<li>依照上述思路，针对这些次态继续分析可以施加的条件（可点击的功能按钮），继续往下发觉后续的状态；</li>\n<li>当分析到最后发现已经没有新的状态可以产生了，那就说明这条路径已经走到头，此时就可以结束了；</li>\n<li>如果发现不同状态之间会存在循环，那么我们可以保证完成一次循环即可（比如：固态&#x3D;》液态&#x3D;》气态&#x3D;》液态&#x3D;》固态）；</li>\n<li>如果发现在某一个次态时，会产生多分支时，那么就需要单独分析每个分支，直到每个分支都走到头才结束；</li>\n<li>针对不同的分支我们就可以梳理出不同的场景用例来。</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"从一线人员获取灵感\"><a href=\"#从一线人员获取灵感\" class=\"headerlink\" title=\"从一线人员获取灵感\"></a>从一线人员获取灵感</h4><blockquote>\n<p>大多数同学可能觉得到这里任务就该结束了，实际上上面的所有行为都是我们自己通过功能分析构造的一些场景，仍旧会存在遗漏点，每个人的思维都是存在局限性的，如果条件允许的话，我们可以进一步与一线人员甚至直接用户进行交流，来获取其真实日常是如何开展的，从而获取到最为真实客观的使用场景信息。</p>\n</blockquote>\n<ul>\n<li>获取一线用户的真实场景信息并不是所有项目都具备的条件，但条件具备时就一定要充分利用起来；</li>\n<li>如果没有此条件，我们也可以主动创造，可以主动申请出差客户现场，进行有效信息的获取；</li>\n<li>与一线人员、产品经理进行日常有效交流，从交谈中挖掘有效信息，都是可以帮助到我们丰富场景的；</li>\n<li>通过上述各种途径获取到的信息，则可以转化成用例，作为有效的覆盖条件。</li>\n</ul>\n<h4 id=\"过程验收-amp-抽验的遗漏补充\"><a href=\"#过程验收-amp-抽验的遗漏补充\" class=\"headerlink\" title=\"过程验收&amp;抽验的遗漏补充\"></a>过程验收&amp;抽验的遗漏补充</h4><blockquote>\n<p>怎么还没完没了了？<br>到此还没结束？<br>当然，因为前期我们的所有行为都是纸上谈兵（做的策略分析），老话说的好，纸上得来终觉浅，绝知此事要躬行，事情还得自己“弯着腰”去做啊…… </p>\n</blockquote>\n<p>在验收的整个生命周期中，我们的时间跨度是非常大的，在前期用例全部编写完成后，还有很长一段时间，此期间伴随着迭代版本的提测，内部测试的测试，验收的抽验，等等过程，</p>\n<p>此阶段我们是有机会接触真实的产品形态，也能够去实践之前的策略性动作，在这个过程中，是能够发现一些遗漏点，或者过程性不完善的地方。</p>\n<ul>\n<li>在过程验收或者抽验阶段，发现的一些遗漏点，需要及时的补充到场景用例中；</li>\n<li>发现的一些不合理的地方，需要及时优化调整用例的执行步骤等内容；</li>\n<li>对于内部测试发现的BUG分布较多，已经识别风险较大的模块，则需要针对性的增加用例密度，提高用例覆盖粒度，做出针对性预防；–BUG都是集中产生的，容易长虫子的地方，他就会成批成批的长，不用去怀疑这个规律；</li>\n<li>过程中发现内部测试狙击不足的模块或者方向，也需要我们针对性的提高预防措施，增加用例密度，明知道前面的兄弟没守住，已经有鬼子进村了，还不做好彻底的预防，那是我们的失职；</li>\n<li>上述的策略都是在实战中逐步调整完善，进一步巩固我们的武器装备，布好天罗地网，从而在验收阶段真正做到胸有成竹。</li>\n</ul>\n<p>此时思维导图框架大概是这么个样子：</p>\n<p><img src=\"/pictures/e2e_analysis/06FJX.png\"></p>\n<h4 id=\"转换成用例\"><a href=\"#转换成用例\" class=\"headerlink\" title=\"转换成用例\"></a>转换成用例</h4><p>实际上在上面过程中就有可能已经完成了用例的转换，所以此阶段并不一定是在最后，我们对于用例的补充和思维导图的维护应该是同步的，避免用例有更新，思维导图有缺失，真正在后续去评审和讲解时都是拿思维导图来展示，用例很难逐条去评审，拿用例评审是无法有效知道是否有遗漏，只能评审用例的规范与否，但思维导图则可以方便点 的查看是否针对某个模块有遗漏的场景。</p>\n<p>如何编写转换成最终的用例则不在此文中做讲解，针对用例的编写可以单独进行分享，此文默认大家都能够有效的转换编写用例。</p>\n<h2 id=\"质检\"><a href=\"#质检\" class=\"headerlink\" title=\"质检\"></a>质检</h2><blockquote>\n<p>在实际生产过程中，都有一个质检环节，我们的工作也不例外，此环节与各位的职位级别、能力无关，再牛皮的人都有出错的时候，那么质检的这个动作我们一定要实施。</p>\n</blockquote>\n<ul>\n<li>实际上就是我们的评审过程，当局者迷，有时候就会迷在自己的思维中，而其他评审角色就能够从一些意想不到的角度提出遗漏和不足的地方，以便帮助我们进一步完善分析和用例内容；</li>\n<li>永远不要迷恋自己的想法，不要相信自己的分析是完善的，在分析过程中，永远多敲一个回车，预留待填写的空间……</li>\n<li>有效的评审能够避免后期的不足，重视此过程是对我们对项目的负责。</li>\n</ul>\n<h2 id=\"收工\"><a href=\"#收工\" class=\"headerlink\" title=\"收工\"></a>收工</h2><p>此次故事就讲到这里~<br>如果你已经睡着了，我会感到很抱歉，没有吸引到你~<br>如果你感觉有收获，我会感到很欣慰，我真的可以帮助到你~<br>如果你有好的建议提交给我，我会感到很高兴，你可以帮助我进一步成长~<br>如果你有更好的思维与我分享，我会感到兴奋，我想与你把酒言欢~</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>对于验收测试工程师来说，编写验收测试分析和测试用例是一项必须且重要的工作内容，但大多数同学在做验收测试分析及用例编写时，仍旧陷入到传统的分析及用例编写思维中，与内部测试团队所输出的内容并无差异，虽然大家在讲述验收工程师职责或者测试分析思路时，都知道说要编写用户场景用例，可实战过程中仍旧是任性的走老套路，犟的很！ </p>\n<p>究其原因，还是没有摆脱传统的测试思维，更多的关注点仍旧在文档中罗列的基本需求点，除了字面上描述出来的东西，很难将自己放在用户角色上去想象体验手头的产品，在验收时，又本着任务的压力，只能优先去完成流程上的一些基本任务：验收测试分析、验收测试用例编写、各种会议评审、输出各类报告…… </p>\n<p>上述每一个具体事项实际都只是我们工作实施的一个产物体现，并不是最终的目的，也就是说不仅仅为了去完成一篇分析或者用例的编写，就匆匆忙忙开干，在没有深入理解需求，了解用户痛点，及项目意义的情况下，所有的忙碌都不会产生太高价值，看起来长篇大论的文字表格一堆，但其中蕴含的思维和测试覆盖点却很难达到我们的预期，往往后期需要花费大量的精力去查漏补缺，进行各种优化，算算总投入成本那是极不划算的，而且还觉得自己特忙。</p>\n<p>对于团队中每一个同学来讲，每个人都有自己的特长和优势，但也会存在部分同学的确存在以上描述的若干问题，所以也就有了此篇文档，作为个人理解的内容，想要起到抛砖引玉的效果，希望在某些方面能够对大家有所帮助，也许能够通过思维的碰撞产生更加适合当前团队的执行方法和流程。</p>\n<p>本文会以通俗易懂偏口语化的风格进行阐述，尽量结合当前项目的实际内容来阐述具体思想，文中所有举例只是为了阐述某种思维方式，请读者不要钻牛角尖，而应该深入扩展理解思维背后的原理，内化成自己的经验和做事方法。</p>\n<h2 id=\"导读\"><a href=\"#导读\" class=\"headerlink\" title=\"导读\"></a>导读</h2><p>本文总体文字比较多，且讲述的内容非常基础，可能都是在各位平常工作中已经在实施的部分，只是做了一个系统的呈现，如果看的过程确有共鸣，则可以快速跳过熟知内容，直接查看“精加工生产E2E验收用例”部分内容； </p>\n<p>如果前文中部分内容平常未涉及到，则可以细致去想一下描述中的各问题及思维过程，最好是能转化成自己独特的思维逻辑；</p>\n<p>如果文章通篇读起来觉得索然无味，也可以私下进行一些深入的交流（排除语文功底因素），这是我极其希望遇到的场景。</p>\n<h2 id=\"我可以怎么做\"><a href=\"#我可以怎么做\" class=\"headerlink\" title=\"我可以怎么做\"></a>我可以怎么做</h2><ul>\n<li>如果你是一位新同学，或者是从传统测试转做验收测试的，下面的几点内容或许对你有所帮助；</li>\n<li>当然如果你是老司机，那也可以看看是否有其他更好的点子可以帮到大家。</li>\n</ul>\n<ol>\n<li><p>作为验收工程师，首要任务是先把自己以前的思维做一个冻结，把杯子倒空，忘掉过往的所有荣耀与成就，重新出发；**–调整心态**</p>\n</li>\n<li><p>清晰认识自己的职责和责任，做的所有事情都不仅仅只是为了完成上级下达的任务，而是为了某一个目标; <strong>–清晰自己工作的价值</strong></p>\n<blockquote>\n<p> 比如XX项目经过你的验收后，可以拍着胸脯对他人说，已经验收通过没有问题，大胆发布，让用户拿去用吧!<br>  或者是经过验收后，发现XX模块有风险，具体风险是XX，可能造成XX影响，建议提前采取XX行动，规避方案是XX，提前告知关注者项目的实际情况，即便是发布后真出现了问题，也做到了未雨绸缪。</p>\n</blockquote>\n</li>\n<li><p>接触任何一个项目时，首先是要弄清楚该项目的需求背景，直接接口人就是产品经理，从产品经理这里可以获取到项目的最原始信息，包括项目使用者，使用者的一些特点，此项目能够解决他们什么问题，核心价值具体体现在哪里，产品最差做到什么程度用户也能够接受（逐步剥离可以提炼到核心需求）？所有的这些只为弄清楚背景与用户痛点；</p>\n</li>\n<li><p>在了解项目的背景与用户痛点后，接下来的工作就需要始终将这些信息放到制高点，任何的思考行为都为这两点服务，你的模块分析是为了更好的保证用户能够流畅满意的使用，你的用例是为了能更全面的覆盖用户的操作行为，你的执行动作就是将自己当做用户来操作使用这个产品；</p>\n</li>\n<li><p>通过上述的信息输入后，就可以开展实际的验收测试分析，这里还是推荐使用思维导图的方式来开展此项工作；</p>\n</li>\n<li><p>在思维导图分析完成后，接下来就是用例的转化写作了，转化过程只需要抓住一个核心：思维导图中辛苦分析出来的验证点不要漏掉；</p>\n</li>\n<li><p>验收执行阶段工作主要是执行用例，在执行每条用例时，同样需要思考用例编写的本意是要验证什么点，切记无脑执行，往往能够发现用例可优化的地方，或者可扩展验证场景。</p>\n</li>\n</ol>\n<h2 id=\"正题\"><a href=\"#正题\" class=\"headerlink\" title=\"正题\"></a>正题</h2><p>前面的内容主要是一些铺垫，也就是大家说的鸡汤软文，下文主要从上面列出的几个步骤来描述一下个人理解的验收测试用例的生产过程，用例输出绝对不是直接上来就干的事儿，拿到项目一上来就直接干用例的行为那都是莽夫行为，测试最高价值体现就是你的思维，而对思维的加工最终输出的产物才是思维导图、测试用例这些实际的文档，下面会针对每个步骤进行详细的阐述，希望对大家有所帮助。</p>\n<h3 id=\"下文整体思路会以下图思路开展\"><a href=\"#下文整体思路会以下图思路开展\" class=\"headerlink\" title=\"下文整体思路会以下图思路开展\"></a>下文整体思路会以下图思路开展</h3><p><img src=\"/pictures/e2e_analysis/01FJX.png\"></p>\n<h2 id=\"用例生产过程\"><a href=\"#用例生产过程\" class=\"headerlink\" title=\"用例生产过程\"></a>用例生产过程</h2><h3 id=\"所需要的原料\"><a href=\"#所需要的原料\" class=\"headerlink\" title=\"所需要的原料\"></a>所需要的原料</h3><ul>\n<li>此部分内容，主要是列出我们在做一个项目的时候，最好弄清楚我们所需要的输入；</li>\n<li>包括我们需要具备的一些能力或者了解的知识点；</li>\n<li>当然不是所有列出的东西都一定需要具备或者精通，当前不具备的就可以针对性的去提升学习，以便能在工作中能够轻松应对。</li>\n</ul>\n<p><strong>实物原料：</strong>- 项目需求文档；–必选（哪怕是一句话需求）</p>\n<ul>\n<li><p>需求原型；–可选</p>\n</li>\n<li><p>研发概要设计文档；–可选</p>\n</li>\n<li><p>研发详细设计文档；–可选</p>\n</li>\n<li><p>项目demo；–可选</p>\n</li>\n<li><p>……</p>\n</li>\n</ul>\n<p><strong>思想原料：</strong>- 熟悉软件研发流程；</p>\n<blockquote>\n<p>熟悉软件测试基本理论知识:</p>\n</blockquote>\n<ol>\n<li>黑盒测试基本方法（等价类、边界值、正交、状态迁移、判定表、错误猜测、……）； </li>\n<li>接口测试、安全测试、性能测试、网络基本知识的了解； </li>\n<li>测试思维导图分析方法； </li>\n<li>用例编写的基本原则，测试用例的八大要素；</li>\n</ol>\n<h3 id=\"加工流程\"><a href=\"#加工流程\" class=\"headerlink\" title=\"加工流程\"></a>加工流程</h3><blockquote>\n<p>通过对上述或者更多的原料进行有序加工，我们的思维产物最终会以具体的思维导图、测试用例体现出来。</p>\n</blockquote>\n<h4 id=\"Step1-深入理解项目背景、用户痛点\"><a href=\"#Step1-深入理解项目背景、用户痛点\" class=\"headerlink\" title=\"Step1 深入理解项目背景、用户痛点\"></a>Step1 深入理解项目背景、用户痛点</h4><p><strong>实操步骤</strong></p>\n<p>首先我们在接触到一个新项目时,首要的就是拿到该项目的需求文档,如果没有需求文档就直接找产品经理或者一线人员,甚至是直接用户进行沟通,主要目的就是弄清楚如下几个问题: </p>\n<ol>\n<li>这个项目产生的原因是什么?–为什么要做这个项目,有钱任性?做着玩? 主要是为了解决用户什么问题,用户在当前碰到了什么难题需要我们来解围?</li>\n<li>不做这个项目行不行?–市面上有没有现成的解决方案?为什么要我们做这个?我们这个项目的优势在哪里?我们能为用户提供什么核心价值?</li>\n<li>我们的核心用户都是哪些人?都是一些什么样的人?这些人有些什么习惯或者特点?在产品使用上会不会有些特殊癖好或者要求?</li>\n<li>我们是怎么解决用户遇到的这个难题的,当前的需求内容是否能够达到解决用户痛点的目的?</li>\n</ol>\n<p>经过上述几个问题的自问或者问他人,你一定会获得一些有用的信息,经过对这些信息的消化和理解,你基本上就具备了与产品经理或者用户等位思考的状态,在此状态下,再结合产品经理编写的现成的背景和痛点问题描述,基本上就真正理解了项目的背景了；</p>\n<p>如何确定自己已经理解了当前项目背景呢？</p>\n<p><strong>Check点</strong><br>把这个项目介绍给其他人，能够流畅的按照上述几个问题维度来讲解清楚的话，就说明已经达到要求了。</p>\n<h4 id=\"Step2-梳理、挖掘基本需求点\"><a href=\"#Step2-梳理、挖掘基本需求点\" class=\"headerlink\" title=\"Step2 梳理、挖掘基本需求点\"></a>Step2 梳理、挖掘基本需求点</h4><blockquote>\n<p>这一部分内容大家最熟悉，也是一般人上来就开搞的一步，每个人都能整出一篇“丰满”的思维导图出来，全部展开的时候看起来内容丰富，但很多同学的思维导图内容细看后发现缺乏逻辑，有时候会很全，有时候会遗漏一些内容，实际上就是缺乏一些系统的思维。</p>\n</blockquote>\n<p>实际上我们在做项目或者模块分析时还是有套路可以耍的： 1</p>\n<p>首先就是把我们软件质量模型这张牌掏出来，如果能熟练的掌握质量模型的6大特性（功能性、可靠性、易用性、效率、可维护性、可移植性），27个子特性，那你做测试分析可能遗漏的几率是很小的。<br>实际上很少人能全部掌握，但你需要做到的是6大特性一定要掌握，每个特性大概对应的是哪些维度要非常清楚，质量模型中的维度需要逐项去做分析覆盖，功能性这块基本是个测试都能做到，但如何把功能性做全做深就又是一个挑战；</p>\n<p><strong>功能特性分析：</strong></p>\n<ol>\n<li>功能特性分析基本占据了80%以上的内容，也是我们需要花费80%精力去做好的部分，看起来最简单的部分，也是最难的部分;</li>\n<li>你需要深入理解项目背景和用户痛点，需要了解需求文档中提及的每一个模块功能，以及模块与模块之间的联系；</li>\n<li>需要在没有原型的基础上在脑海里自己勾勒出产品界面的雏形，想象各个功能模块之间的跳转逻辑以及依赖关系；</li>\n<li>通过对SE&#x2F;开发编写的概要设计、详细设计的仔细研读，了解每个模块的具体后台实现，来挖掘隐藏的测试点和逻辑联系；–这一步至少50%的测试人员做不到，很多人无法理解开发的后台实现逻辑，也就不可能知道该实现可能存在的问题，自然就不可能挖掘出这种隐藏的测试点，往往代码的缺陷就来自于这里，因为开发编码实际上就是把他的思维以代码的方式去呈现出来，那开发自己的想法都可能有问题，我们做测试的不去识别他的想法缺陷，再到后面去弥补，你肯定已经想到这个地方的成本有多高。所以能够落地去做的事情就是仔细研读开发编写的详细设计文档，技术这块不懂的就去查资料去问开发，直到理解他的实现逻辑是什么，在这个过程中你就会找到很多隐藏的测试点，从而能够丰富你的功能分析点。</li>\n<li>对于解决方案类产品（B&#x2F;S架构），B&#x2F;S类架构项目都是分前后台的，往往测试分析的时候大家只会去关注前台的显示，文案，按钮这些基本肉眼可见的东西，对于后台数据库的内容往往“视而不见”，在理解开发详细设计时，就要同时清楚他们的数据表设计内容，了解表与表之间的关联关系，字段的具体含义，前端数据获取的地方，以此就非常容易识别前台代码是否写死，是否是按照约定的逻辑来处理加工数据的，也就能提早发现一些设计、实现上不合理的地方。</li>\n</ol>\n<p><strong>思维导图的输出</strong></p>\n<blockquote>\n<p> 通过上面的思路分析后，我们就能输出80%的思维导图分析内容，也就抓住了这个项目的80%的测试点。</p>\n</blockquote>\n<p>此时你完成的思维导图大概应该是这个样子：<br><img src=\"/pictures/e2e_analysis/022FJX.png\"></p>\n<p> 完成80%内容后，剩下的把其他五大特性的内容进行完善即可，具体每个特性所体现的内容请大家自行学习，并转化成项目中可实施的测试点 此部分完成后思维导图大致会是下面的结构，能够确保质量模型维度的全覆盖，那测试点的梳理基本就完成95%了。</p>\n<p><img src=\"/pictures/e2e_analysis/03FJX.png\"></p>\n<p>完成上述测试分析后，实际上我们还有一个很重要的维度容易忽略，那就是异常场景，当然很多同学也容易特立独行，在上面的分析过程中就投入大量精力去搞异常场景，显得自己考虑问题的角度比较深入或者独特。</p>\n<p>想法是好的，但这个不是我们主要发力的点，你基本业务流都没整明白，直接到这种容易“钻牛角尖”的胡同里，很容易走火入魔。 </p>\n<p>建议上来说，在完成上面的所有分析后，再把自己脱离出来，去思考一些异常场景的补充，此时你的角色就变换成一个“破坏”者，以你能想到的，在日常使用过程中可能发生的一些“可怕”场景都用上来，如果符合当前项目的操作入口，那么就是你异常场景的突破口。</p>\n<p><strong>打比方（也不知道比方会不会怪我老打他）</strong>： </p>\n<ol>\n<li>使用过程中，直接关闭程序（数据都没保存呢……）–程序是否能再次正常启动，数据是否可以恢复到之前打开的状态；</li>\n<li>直接暴力切断电源，系统重启后，程序是否正常运行，数据是否恢复之前状态；</li>\n<li>直接关闭浏览器，提交的数据是否能下次恢复，程序是否能拦截并给出提示还有数据未保存；</li>\n<li>服务器直接断电，被手动关闭，重启服务器后，服务是否能正常拉起，恢复后台服务能力，数据是否均正常；</li>\n<li>对于存在输入的地方，我们可做的骚操作很多，这里边界值的上点和外点、非等价类的输入就是我们做异常测试的发力点，会不会因为我们的一些上点、内点、非等价类输入，或者特殊字符输入，或者SQL注入的内容输入造成程序崩溃，或者安全漏洞等等；</li>\n<li>对于图谋不轨的人，我们还需要考虑安全问题，是否存在明文传输（密码全程是否加密），通过浏览器F12调试模式查看接口的传参过程，通过后台数据库查看具体的密码存储形式，通过后台日志查看敏感信息是否脱敏处理……</li>\n<li>数据传输过程中，直接断开网络，程序下次是否能正常重新处理数据；</li>\n<li>上传非法格式，非法超大文件前台是否能正常校验拦截，通过接口直接上传，后台是否能正常拦截；</li>\n<li>程序提供的配置，逻辑上是否有做依赖控制，是否存在前后冲突的配置可以设置，导致部分配置不生效；</li>\n<li>数据的多次重复提交是否会存在异常；</li>\n<li>数据的新建&#x3D;》删除&#x3D;》再建，是否能正常处理；</li>\n<li>数据的提交更改后，下次进入展示，回显是否正确；</li>\n<li>存在数据记忆的场景，是否能够正常记忆；</li>\n<li>存在回退的场景，数据是否能够正常回滚无残留；</li>\n<li>存在数据迁移的场景，数据是否能够正常迁移，且兼容新版本的展示结构；</li>\n<li>存在数据结构升级的场景，是否能向下兼容老旧数据，或者正常转换旧数据结构，从而正常展示在前端；</li>\n<li>存在可以向后台提交数据的按钮时，是否可以快速频繁的点击提交，可能导致数据异常；</li>\n<li>存在单选、复选、全选、全不选的场景时，频繁的选择状态切换，选择逻辑是否处理正确，选择数据对象是否准确；</li>\n<li>存在批量新建、上传、删除等场景时，对于单条数据的批量操作，多条数据的批量操作，是否能正确处理；</li>\n<li>存在大数据量场景时，需要重点关注接口数据的处理准确性，在实现规格内，提交的大数据请求处理，是否能准确且高效的完成。</li>\n</ol>\n<p>此时你的思维导图大概是这个样子：</p>\n<p><img src=\"/pictures/e2e_analysis/04FJX.png\"></p>\n<h4 id=\"Step3-精加工生产E2E验收用例\"><a href=\"#Step3-精加工生产E2E验收用例\" class=\"headerlink\" title=\"Step3 精加工生产E2E验收用例\"></a>Step3 精加工生产E2E验收用例</h4><blockquote>\n<ul>\n<li>通过上面的生产加工后，想必大家觉得分析工作已经完成了，可以说作为内部测试在完成上面工作后，测试分析工作的确可以告一段落，我也可以打包票说只要你能按照上面提到的维度，每个维度都做出了深入的思考与分析，那你的测试分析是比较完善的；</li>\n<li>但作为验收工程师，最核心的部分还没开始，那就是E2E场景，也就是说，到现在为止，验收工程师的核心工作才刚刚开始……</li>\n</ul>\n</blockquote>\n<p>实际上前面的工作都已经做的比较全了，剩下的部分只需要结合部分思维来串联一下就可以完成，此刻你就变身为一个串珠的人儿了，把你精心准备好的“珍珠”按照某种方式串起来，做成一条条“项链”，这些“项链”就是我们验收的E2E场景用例，其主要会涉及到如下方面内容：</p>\n<ol>\n<li><p>理解何为用户场景？</p>\n<blockquote>\n<p>用户日常使用时，使用产品的操作路径，可能进行的操作流。</p>\n</blockquote>\n</li>\n<li><p>写这些E2E场景的意义是什么？<br>尽可能全的模拟覆盖用户日常会操作的路径，提前发现可能存在的问题，确认产品是否能够满足用户日常使用，弥补在模块测试中对模块之间的关联性测试覆盖不足的问题。</p>\n</li>\n<li><p>用户场景的来源有哪些？</p>\n</li>\n</ol>\n<ul>\n<li>通过功能点分析，站在用户角度采用状态机思路编写E2E场景用例–你就是用户； </li>\n<li>通过分析一线人员提供的问题信息，获得用户使用的场景信息–真实使用者的反馈； </li>\n<li>通过一线人员提供的用户群体特征，使用产品的场景等信息，通过关联分析构建用户场景信息–对真实使用者的模拟分析，有时候用户自己都不知道自己需要的是什么，那我们就需要替用户去思考这个问题，如同乔布斯说的：在我发布苹果手机的时候，用户才知道这就是他们想要的。</li>\n</ul>\n<ol start=\"4\">\n<li><p>什么叫做端到端（E2E）场景用例？<br>不同于传统测试过程中仅针对某一个功能点进行深入验证的用例，而是尽可能将多个功能点通过某种思路（如状态机）有目的设计成一连串的操作流，形成的一种用例形式。</p>\n</li>\n<li><p>场景用例的编写粒度该如何把控？<br> 在编写这类用例时，很多同学会陷入两难境地，在测试步骤中，不知道编写粒度该控制到哪个层次，写太细了跟传统用例没区别，写太粗了又担心不具备可执行性； </p>\n<ul>\n<li>实际上这个问题很难按照某种要求去规定，主要把握几个原则：</li>\n</ul>\n<ol>\n<li>场景用例编写的前提，一定是内部测试已经有非常详尽的功能用例，覆盖每个功能点，确保了基本功能是没有问题的；–如果担心这个地方有遗漏，说明我们内部测试需要改进，并且在测试执行阶段，验收工程师也需要有能力进行适当发散，做事不能眉毛胡子一把抓，每个阶段的重点核心不同，该放的时候要放，该收的地方得收。 </li>\n<li>基于上述前提，就知道我们的场景用例不会写的太细，更多的是一种操作行为流的描述，可以做的是，在每一个操作行为后，预期结果我们尽可能的描述全面； </li>\n<li>每一条用例都需要有一个核心目的，要想清楚该用例的核心是为了验证或者保证什么功能，那么用例的步骤描述都需要围绕这个核心去开展，避免一条用例中混杂不同的场景和行为路径，会导致用例缺乏目标，也容易产生冗余用例内容； </li>\n<li>用例粒度确保能够清晰引导执行者完成步骤描述内容，在存在依赖的部分交代清楚依赖获取的方式，预期结果明确无歧义； </li>\n<li>在编写过程中发现用例步骤太多（超过十几步）,那就需要针对该路径做分离处理，可以分成多条用例来覆盖，避免单条用例步骤过于复杂，可能对后续的执行带来不必要的麻烦；</li>\n</ol>\n</li>\n<li><p>我该如何知道E2E用例步骤该从哪里开始又从哪里结束？ </p>\n<ul>\n<li>此行为实际上也没有固定的公式可以参考，仍旧是结合部分经验来完成：</li>\n</ul>\n<ol>\n<li>把握一个核心目的，场景用例内容必须包含我们前面分析的所有功能点；–如果没有包含在内，则问自己前面的分析是否有必要，如果觉得没必要就裁剪前面的分析； </li>\n<li>用例开始起点一般可以采取某个功能模块的入口； </li>\n<li>用例的结束就不一定会有唯一的结束点，因为从起点开始后，可能有多个分支均会走向结束，此时则可以分成多条用例来覆盖（对于前面覆盖的步骤则可以作为前置条件，以此精简其他分支的用例内容）； </li>\n<li>有些分支走下去发现是一个死循环，无法有效闭环，那此时我们至少需要覆盖以此完整的循环，保证各个状态之间的转换路径均需要覆盖（下文会采用状态机的方式做阐述）</li>\n</ol>\n</li>\n</ol>\n<p>我们先来了解一个概念：”状态机”，这个将对我们编写E2E用例有较大帮助，场景用例编写的总体思路我们将采用状态机的套路来进行，所以我们需要先了解这个概念： </p>\n<h4 id=\"状态机含义\"><a href=\"#状态机含义\" class=\"headerlink\" title=\"状态机含义\"></a>状态机含义</h4><blockquote>\n<p>状态机就是有限状态自动机的简称，是现实事物运行规则抽象而成的一个数学模型 状态机有4 个要素: 现态、条件、动作、次态。 这样的归纳，主要是出于对状态机的内在因果关系的考虑: </p>\n</blockquote>\n<ul>\n<li>“现态”和 “条件” 是因，<blockquote>\n<ul>\n<li>“动作”和 “次态” 是果。</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<ol>\n<li>现态：是指当前所处的状态。</li>\n<li>条件：又称为 “事件”，当一个条件被满足，将会触发一个动作，或者执行一次状态的迁移。</li>\n<li>动作：条件满足后执行的动作。动作执行完毕后，可以迁移到新的状态，也可以仍旧保持原状态。动作不是必需的，当条件满足后，也可以不执任何动作，直接迁移到新状态。</li>\n<li>次态：条件满足后要迁往的新状态。“次态”是相对于 “现态” 而言的，“次态”一旦被激活，就转变成新的 “现态” 了。</li>\n</ol>\n<p><strong>转换状态示意图：</strong><br>下面就是对水在不同状态之间的转换示意图 - 假如水蒸气是现态，在施加降温这个条件后，会发生凝结动作，从而变成次态的液态水；</p>\n<blockquote>\n<ul>\n<li>当前液态水是现态，在施加降温这个条件后，会发生凝固动作，从而变成次态的冰；</li>\n<li>相反在施加加温这个条件后，冰又能变成液态水，在继续加温后，又能变成水蒸气。</li>\n</ul>\n</blockquote>\n<p><img src=\"/pictures/e2e_analysis/05FJX.png\" alt=\"image-20210903095132477\"></p>\n<ul>\n<li>说人话呢这个东西就是某物体、某程序功能，会被不同的条件动作触发产生变化，从而形成一种新的状态或者结果（也可能保持不变）；</li>\n<li>一般来说程序中的这些变化的状态，肯定是有限的，所以我们也叫有限状态机，正因为是有限的我们才有分析的可能性；</li>\n<li>既然是有限的状态，那我们就可以将任何程序采用此思想，将其抽象出一个个的状态；</li>\n<li>然后提炼出触发的各种条件，通过在不同状态之间施加不同的触发条件，就能让这些状态不断变化，从而完成我们对程序的不同路径的覆盖；</li>\n<li>通过上面的示意图我们也是能很容易去理解这个点的，之所以E2E用例的编写需要去采用这种思维呢，主要就是模拟用户日常可能会触发的各种点，只要我们能触碰到他们会触发的各种操作行为，了解到他们企图达到的最终状态，那我们的验收用例就是有意义的。</li>\n</ul>\n<blockquote>\n<p>将上面水的状态变化类比到我们软件产品中来，就是这么个意思：</p>\n</blockquote>\n<ul>\n<li>拿到某个功能模块时，可以选择一个最基础的入口作为起点（现态）；<blockquote>\n<ul>\n<li>确定起点后，可以分析有哪些条件可以来施加，也就是从这个起点开始，有哪些后续的功能按钮可以操作？</li>\n<li>分别操作这些功能按钮后，会跳转到哪个模块或者页面（次态）？</li>\n<li>依照上述思路，针对这些次态继续分析可以施加的条件（可点击的功能按钮），继续往下发觉后续的状态；</li>\n<li>当分析到最后发现已经没有新的状态可以产生了，那就说明这条路径已经走到头，此时就可以结束了；</li>\n<li>如果发现不同状态之间会存在循环，那么我们可以保证完成一次循环即可（比如：固态&#x3D;》液态&#x3D;》气态&#x3D;》液态&#x3D;》固态）；</li>\n<li>如果发现在某一个次态时，会产生多分支时，那么就需要单独分析每个分支，直到每个分支都走到头才结束；</li>\n<li>针对不同的分支我们就可以梳理出不同的场景用例来。</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"从一线人员获取灵感\"><a href=\"#从一线人员获取灵感\" class=\"headerlink\" title=\"从一线人员获取灵感\"></a>从一线人员获取灵感</h4><blockquote>\n<p>大多数同学可能觉得到这里任务就该结束了，实际上上面的所有行为都是我们自己通过功能分析构造的一些场景，仍旧会存在遗漏点，每个人的思维都是存在局限性的，如果条件允许的话，我们可以进一步与一线人员甚至直接用户进行交流，来获取其真实日常是如何开展的，从而获取到最为真实客观的使用场景信息。</p>\n</blockquote>\n<ul>\n<li>获取一线用户的真实场景信息并不是所有项目都具备的条件，但条件具备时就一定要充分利用起来；</li>\n<li>如果没有此条件，我们也可以主动创造，可以主动申请出差客户现场，进行有效信息的获取；</li>\n<li>与一线人员、产品经理进行日常有效交流，从交谈中挖掘有效信息，都是可以帮助到我们丰富场景的；</li>\n<li>通过上述各种途径获取到的信息，则可以转化成用例，作为有效的覆盖条件。</li>\n</ul>\n<h4 id=\"过程验收-amp-抽验的遗漏补充\"><a href=\"#过程验收-amp-抽验的遗漏补充\" class=\"headerlink\" title=\"过程验收&amp;抽验的遗漏补充\"></a>过程验收&amp;抽验的遗漏补充</h4><blockquote>\n<p>怎么还没完没了了？<br>到此还没结束？<br>当然，因为前期我们的所有行为都是纸上谈兵（做的策略分析），老话说的好，纸上得来终觉浅，绝知此事要躬行，事情还得自己“弯着腰”去做啊…… </p>\n</blockquote>\n<p>在验收的整个生命周期中，我们的时间跨度是非常大的，在前期用例全部编写完成后，还有很长一段时间，此期间伴随着迭代版本的提测，内部测试的测试，验收的抽验，等等过程，</p>\n<p>此阶段我们是有机会接触真实的产品形态，也能够去实践之前的策略性动作，在这个过程中，是能够发现一些遗漏点，或者过程性不完善的地方。</p>\n<ul>\n<li>在过程验收或者抽验阶段，发现的一些遗漏点，需要及时的补充到场景用例中；</li>\n<li>发现的一些不合理的地方，需要及时优化调整用例的执行步骤等内容；</li>\n<li>对于内部测试发现的BUG分布较多，已经识别风险较大的模块，则需要针对性的增加用例密度，提高用例覆盖粒度，做出针对性预防；–BUG都是集中产生的，容易长虫子的地方，他就会成批成批的长，不用去怀疑这个规律；</li>\n<li>过程中发现内部测试狙击不足的模块或者方向，也需要我们针对性的提高预防措施，增加用例密度，明知道前面的兄弟没守住，已经有鬼子进村了，还不做好彻底的预防，那是我们的失职；</li>\n<li>上述的策略都是在实战中逐步调整完善，进一步巩固我们的武器装备，布好天罗地网，从而在验收阶段真正做到胸有成竹。</li>\n</ul>\n<p>此时思维导图框架大概是这么个样子：</p>\n<p><img src=\"/pictures/e2e_analysis/06FJX.png\"></p>\n<h4 id=\"转换成用例\"><a href=\"#转换成用例\" class=\"headerlink\" title=\"转换成用例\"></a>转换成用例</h4><p>实际上在上面过程中就有可能已经完成了用例的转换，所以此阶段并不一定是在最后，我们对于用例的补充和思维导图的维护应该是同步的，避免用例有更新，思维导图有缺失，真正在后续去评审和讲解时都是拿思维导图来展示，用例很难逐条去评审，拿用例评审是无法有效知道是否有遗漏，只能评审用例的规范与否，但思维导图则可以方便点 的查看是否针对某个模块有遗漏的场景。</p>\n<p>如何编写转换成最终的用例则不在此文中做讲解，针对用例的编写可以单独进行分享，此文默认大家都能够有效的转换编写用例。</p>\n<h2 id=\"质检\"><a href=\"#质检\" class=\"headerlink\" title=\"质检\"></a>质检</h2><blockquote>\n<p>在实际生产过程中，都有一个质检环节，我们的工作也不例外，此环节与各位的职位级别、能力无关，再牛皮的人都有出错的时候，那么质检的这个动作我们一定要实施。</p>\n</blockquote>\n<ul>\n<li>实际上就是我们的评审过程，当局者迷，有时候就会迷在自己的思维中，而其他评审角色就能够从一些意想不到的角度提出遗漏和不足的地方，以便帮助我们进一步完善分析和用例内容；</li>\n<li>永远不要迷恋自己的想法，不要相信自己的分析是完善的，在分析过程中，永远多敲一个回车，预留待填写的空间……</li>\n<li>有效的评审能够避免后期的不足，重视此过程是对我们对项目的负责。</li>\n</ul>\n<h2 id=\"收工\"><a href=\"#收工\" class=\"headerlink\" title=\"收工\"></a>收工</h2><p>此次故事就讲到这里~<br>如果你已经睡着了，我会感到很抱歉，没有吸引到你~<br>如果你感觉有收获，我会感到很欣慰，我真的可以帮助到你~<br>如果你有好的建议提交给我，我会感到很高兴，你可以帮助我进一步成长~<br>如果你有更好的思维与我分享，我会感到兴奋，我想与你把酒言欢~</p>\n"},{"title":"python调度框架APScheduler使用详解（非阻塞模式)","_content":"\n## 定时任务设置：\n\n定时任务，有阻塞和非阻塞方式两种，这个部分需要取分清楚:\n\n- ```from apscheduler.schedulers.background import BackgroundScheduler``` 这个是非阻塞的；\n\n- ```from apscheduler.schedulers.blocking import BlockingScheduler``` 这个是阻塞的，在没有其他主程序时，就需要用阻塞的方式，不然代码执行完主程序就结束了。\n\n\n\n```Python\n# coding=utf-8\n\"\"\"\nDemonstrates how to use the background scheduler to schedule a job that executes on 3 second\nintervals.\n\"\"\"\n \nfrom datetime import datetime\nimport time\nimport os\n \nfrom apscheduler.schedulers.background import BackgroundScheduler\n \n \ndef tick():\n    print('Tick! The time is: %s' % datetime.now())\n \n \nif __name__ == '__main__':\n    scheduler = BackgroundScheduler()\n    scheduler.add_job(tick, 'interval', seconds=3)　　#间隔3秒钟执行一次\n    scheduler.start()    #这里的调度任务是独立的一个线程\n    print('Press Ctrl+{0} to exit'.format('Break' if os.name == 'nt' else 'C'))\n \n    try:\n        # This is here to simulate application activity (which keeps the main thread alive).\n        while True:\n            time.sleep(2)    #其他任务是独立的线程执行\n            print('sleep!')\n    except (KeyboardInterrupt, SystemExit):\n        # Not strictly necessary if daemonic mode is enabled but should be done if possible\n        scheduler.shutdown()\n        print('Exit The Job!')\n```\n\n# 非阻塞调度，在指定的时间执行一次\n\n```Python\n# coding=utf-8\n\"\"\"\nDemonstrates how to use the background scheduler to schedule a job that executes on 3 second\nintervals.\n\"\"\"\n \nfrom datetime import datetime\nimport time\nimport os\n \nfrom apscheduler.schedulers.background import BackgroundScheduler\n \n \ndef tick():\n    print('Tick! The time is: %s' % datetime.now())\n \n \nif __name__ == '__main__':\n    scheduler = BackgroundScheduler()\n    #scheduler.add_job(tick, 'interval', seconds=3)\n    scheduler.add_job(tick, 'date', run_date='2016-02-14 15:01:05')　　#在指定的时间，只执行一次\n    scheduler.start()    #这里的调度任务是独立的一个线程\n    print('Press Ctrl+{0} to exit'.format('Break' if os.name == 'nt' else 'C'))\n \n    try:\n        # This is here to simulate application activity (which keeps the main thread alive).\n        while True:\n            time.sleep(2)    #其他任务是独立的线程执行\n            print('sleep!')\n    except (KeyboardInterrupt, SystemExit):\n        # Not strictly necessary if daemonic mode is enabled but should be done if possible\n        scheduler.shutdown()\n        print('Exit The Job!')\n```\n\n# 非阻塞的方式，采用cron的方式执行\n\n```Python\n# coding=utf-8\n\"\"\"\nDemonstrates how to use the background scheduler to schedule a job that executes on 3 second\nintervals.\n\"\"\"\n \nfrom datetime import datetime\nimport time\nimport os\n \nfrom apscheduler.schedulers.background import BackgroundScheduler\n \n \ndef tick():\n    print('Tick! The time is: %s' % datetime.now())\n \n \nif __name__ == '__main__':\n    scheduler = BackgroundScheduler()\n    #scheduler.add_job(tick, 'interval', seconds=3)\n    #scheduler.add_job(tick, 'date', run_date='2016-02-14 15:01:05')\n    scheduler.add_job(tick, 'cron', day_of_week='6', second='*/5')\n    '''\n        year (int|str) – 4-digit year\n        month (int|str) – month (1-12)\n        day (int|str) – day of the (1-31)\n        week (int|str) – ISO week (1-53)\n        day_of_week (int|str) – number or name of weekday (0-6 or mon,tue,wed,thu,fri,sat,sun)\n        hour (int|str) – hour (0-23)\n        minute (int|str) – minute (0-59)\n        second (int|str) – second (0-59)\n        \n        start_date (datetime|str) – earliest possible date/time to trigger on (inclusive)\n        end_date (datetime|str) – latest possible date/time to trigger on (inclusive)\n        timezone (datetime.tzinfo|str) – time zone to use for the date/time calculations (defaults to scheduler timezone)\n    \n        *    any    Fire on every value\n        */a    any    Fire every a values, starting from the minimum\n        a-b    any    Fire on any value within the a-b range (a must be smaller than b)\n        a-b/c    any    Fire every c values within the a-b range\n        xth y    day    Fire on the x -th occurrence of weekday y within the month\n        last x    day    Fire on the last occurrence of weekday x within the month\n        last    day    Fire on the last day within the month\n        x,y,z    any    Fire on any matching expression; can combine any number of any of the above expressions\n    '''\n    scheduler.start()    #这里的调度任务是独立的一个线程\n    print('Press Ctrl+{0} to exit'.format('Break' if os.name == 'nt' else 'C'))\n \n    try:\n        # This is here to simulate application activity (which keeps the main thread alive).\n        while True:\n            time.sleep(2)    #其他任务是独立的线程执行\n            print('sleep!')\n    except (KeyboardInterruptSystemExit):\n        # Not strictly necessary if daemonic mode is enabled but should be done if possible\n        scheduler.shutdown()\n        print('Exit The Job!')\n```\n\n# 阻塞的方式，间隔3秒执行一次\n\n```Python\n# coding=utf-8\n\"\"\"\nDemonstrates how to use the background scheduler to schedule a job that executes on 3 second\nintervals.\n\"\"\"\n \nfrom datetime import datetime\nimport os\n \nfrom apscheduler.schedulers.blocking import BlockingScheduler\n \n \ndef tick():\n    print('Tick! The time is: %s' % datetime.now())\n \n \nif __name__ == '__main__':\n    scheduler = BlockingScheduler()\n    scheduler.add_job(tick, 'interval', seconds=3)\n    \n    print('Press Ctrl+{0} to exit'.format('Break' if os.name == 'nt' else 'C'))\n \n    try:\n        scheduler.start()    #采用的是阻塞的方式，只有一个线程专职做调度的任务\n    except (KeyboardInterrupt, SystemExit):\n        # Not strictly necessary if daemonic mode is enabled but should be done if possible\n        scheduler.shutdown()\n        print('Exit The Job!')\n```\n\n# 采用阻塞的方法，只执行一次\n\n```Python\n# coding=utf-8\n\"\"\"\nDemonstrates how to use the background scheduler to schedule a job that executes on 3 second\nintervals.\n\"\"\"\n \nfrom datetime import datetime\nimport os\n \nfrom apscheduler.schedulers.blocking import BlockingScheduler\n \n \ndef tick():\n    print('Tick! The time is: %s' % datetime.now())\n \n \nif __name__ == '__main__':\n    scheduler = BlockingScheduler()\n    scheduler.add_job(tick, 'date', run_date='2016-02-14 15:23:05')\n    \n    print('Press Ctrl+{0} to exit'.format('Break' if os.name == 'nt' else 'C'))\n \n    try:\n        scheduler.start()    #采用的是阻塞的方式，只有一个线程专职做调度的任务\n    except (KeyboardInterrupt, SystemExit):\n        # Not strictly necessary if daemonic mode is enabled but should be done if possible\n        scheduler.shutdown()\n        print('Exit The Job!')\n```\n\n# 采用阻塞的方式，使用cron的调度方法\n\n```Python\n# coding=utf-8\n\"\"\"\nDemonstrates how to use the background scheduler to schedule a job that executes on 3 second\nintervals.\n\"\"\"\n \nfrom datetime import datetime\nimport os\n \nfrom apscheduler.schedulers.blocking import BlockingScheduler\n \n \ndef tick():\n    print('Tick! The time is: %s' % datetime.now())\n \n \nif __name__ == '__main__':\n    scheduler = BlockingScheduler()\n    scheduler.add_job(tick, 'cron', day_of_week='6', second='*/5')\n    '''\n        year (int|str) – 4-digit year\n        month (int|str) – month (1-12)\n        day (int|str) – day of the (1-31)\n        week (int|str) – ISO week (1-53)\n        day_of_week (int|str) – number or name of weekday (0-6 or mon,tue,wed,thu,fri,sat,sun)\n        hour (int|str) – hour (0-23)\n        minute (int|str) – minute (0-59)\n        second (int|str) – second (0-59)\n        \n        start_date (datetime|str) – earliest possible date/time to trigger on (inclusive)\n        end_date (datetime|str) – latest possible date/time to trigger on (inclusive)\n        timezone (datetime.tzinfo|str) – time zone to use for the date/time calculations (defaults to scheduler timezone)\n    \n        *    any    Fire on every value\n        */a    any    Fire every a values, starting from the minimum\n        a-b    any    Fire on any value within the a-b range (a must be smaller than b)\n        a-b/c    any    Fire every c values within the a-b range\n        xth y    day    Fire on the x -th occurrence of weekday y within the month\n        last x    day    Fire on the last occurrence of weekday x within the month\n        last    day    Fire on the last day within the month\n        x,y,z    any    Fire on any matching expression; can combine any number of any of the above expressions\n    '''\n    \n    print('Press Ctrl+{0} to exit'.format('Break' if os.name == 'nt' else 'C'))\n \n    try:\n        scheduler.start()    #采用的是阻塞的方式，只有一个线程专职做调度的任务\n    except (KeyboardInterrupt, SystemExit):\n        # Not strictly necessary if daemonic mode is enabled but should be done if possible\n        scheduler.shutdown()\n        print('Exit The Job!')\n```\n\n[转自此链接](https://www.cnblogs.com/cangqinglang/p/14338220.html)\n","source":"_posts/python调度框架APScheduler使用详解（非阻塞模式）.md","raw":"---\ntitle: python调度框架APScheduler使用详解（非阻塞模式)\ncategories: \n- python\ntags:\n- python\n- 任务调度\n---\n\n## 定时任务设置：\n\n定时任务，有阻塞和非阻塞方式两种，这个部分需要取分清楚:\n\n- ```from apscheduler.schedulers.background import BackgroundScheduler``` 这个是非阻塞的；\n\n- ```from apscheduler.schedulers.blocking import BlockingScheduler``` 这个是阻塞的，在没有其他主程序时，就需要用阻塞的方式，不然代码执行完主程序就结束了。\n\n\n\n```Python\n# coding=utf-8\n\"\"\"\nDemonstrates how to use the background scheduler to schedule a job that executes on 3 second\nintervals.\n\"\"\"\n \nfrom datetime import datetime\nimport time\nimport os\n \nfrom apscheduler.schedulers.background import BackgroundScheduler\n \n \ndef tick():\n    print('Tick! The time is: %s' % datetime.now())\n \n \nif __name__ == '__main__':\n    scheduler = BackgroundScheduler()\n    scheduler.add_job(tick, 'interval', seconds=3)　　#间隔3秒钟执行一次\n    scheduler.start()    #这里的调度任务是独立的一个线程\n    print('Press Ctrl+{0} to exit'.format('Break' if os.name == 'nt' else 'C'))\n \n    try:\n        # This is here to simulate application activity (which keeps the main thread alive).\n        while True:\n            time.sleep(2)    #其他任务是独立的线程执行\n            print('sleep!')\n    except (KeyboardInterrupt, SystemExit):\n        # Not strictly necessary if daemonic mode is enabled but should be done if possible\n        scheduler.shutdown()\n        print('Exit The Job!')\n```\n\n# 非阻塞调度，在指定的时间执行一次\n\n```Python\n# coding=utf-8\n\"\"\"\nDemonstrates how to use the background scheduler to schedule a job that executes on 3 second\nintervals.\n\"\"\"\n \nfrom datetime import datetime\nimport time\nimport os\n \nfrom apscheduler.schedulers.background import BackgroundScheduler\n \n \ndef tick():\n    print('Tick! The time is: %s' % datetime.now())\n \n \nif __name__ == '__main__':\n    scheduler = BackgroundScheduler()\n    #scheduler.add_job(tick, 'interval', seconds=3)\n    scheduler.add_job(tick, 'date', run_date='2016-02-14 15:01:05')　　#在指定的时间，只执行一次\n    scheduler.start()    #这里的调度任务是独立的一个线程\n    print('Press Ctrl+{0} to exit'.format('Break' if os.name == 'nt' else 'C'))\n \n    try:\n        # This is here to simulate application activity (which keeps the main thread alive).\n        while True:\n            time.sleep(2)    #其他任务是独立的线程执行\n            print('sleep!')\n    except (KeyboardInterrupt, SystemExit):\n        # Not strictly necessary if daemonic mode is enabled but should be done if possible\n        scheduler.shutdown()\n        print('Exit The Job!')\n```\n\n# 非阻塞的方式，采用cron的方式执行\n\n```Python\n# coding=utf-8\n\"\"\"\nDemonstrates how to use the background scheduler to schedule a job that executes on 3 second\nintervals.\n\"\"\"\n \nfrom datetime import datetime\nimport time\nimport os\n \nfrom apscheduler.schedulers.background import BackgroundScheduler\n \n \ndef tick():\n    print('Tick! The time is: %s' % datetime.now())\n \n \nif __name__ == '__main__':\n    scheduler = BackgroundScheduler()\n    #scheduler.add_job(tick, 'interval', seconds=3)\n    #scheduler.add_job(tick, 'date', run_date='2016-02-14 15:01:05')\n    scheduler.add_job(tick, 'cron', day_of_week='6', second='*/5')\n    '''\n        year (int|str) – 4-digit year\n        month (int|str) – month (1-12)\n        day (int|str) – day of the (1-31)\n        week (int|str) – ISO week (1-53)\n        day_of_week (int|str) – number or name of weekday (0-6 or mon,tue,wed,thu,fri,sat,sun)\n        hour (int|str) – hour (0-23)\n        minute (int|str) – minute (0-59)\n        second (int|str) – second (0-59)\n        \n        start_date (datetime|str) – earliest possible date/time to trigger on (inclusive)\n        end_date (datetime|str) – latest possible date/time to trigger on (inclusive)\n        timezone (datetime.tzinfo|str) – time zone to use for the date/time calculations (defaults to scheduler timezone)\n    \n        *    any    Fire on every value\n        */a    any    Fire every a values, starting from the minimum\n        a-b    any    Fire on any value within the a-b range (a must be smaller than b)\n        a-b/c    any    Fire every c values within the a-b range\n        xth y    day    Fire on the x -th occurrence of weekday y within the month\n        last x    day    Fire on the last occurrence of weekday x within the month\n        last    day    Fire on the last day within the month\n        x,y,z    any    Fire on any matching expression; can combine any number of any of the above expressions\n    '''\n    scheduler.start()    #这里的调度任务是独立的一个线程\n    print('Press Ctrl+{0} to exit'.format('Break' if os.name == 'nt' else 'C'))\n \n    try:\n        # This is here to simulate application activity (which keeps the main thread alive).\n        while True:\n            time.sleep(2)    #其他任务是独立的线程执行\n            print('sleep!')\n    except (KeyboardInterruptSystemExit):\n        # Not strictly necessary if daemonic mode is enabled but should be done if possible\n        scheduler.shutdown()\n        print('Exit The Job!')\n```\n\n# 阻塞的方式，间隔3秒执行一次\n\n```Python\n# coding=utf-8\n\"\"\"\nDemonstrates how to use the background scheduler to schedule a job that executes on 3 second\nintervals.\n\"\"\"\n \nfrom datetime import datetime\nimport os\n \nfrom apscheduler.schedulers.blocking import BlockingScheduler\n \n \ndef tick():\n    print('Tick! The time is: %s' % datetime.now())\n \n \nif __name__ == '__main__':\n    scheduler = BlockingScheduler()\n    scheduler.add_job(tick, 'interval', seconds=3)\n    \n    print('Press Ctrl+{0} to exit'.format('Break' if os.name == 'nt' else 'C'))\n \n    try:\n        scheduler.start()    #采用的是阻塞的方式，只有一个线程专职做调度的任务\n    except (KeyboardInterrupt, SystemExit):\n        # Not strictly necessary if daemonic mode is enabled but should be done if possible\n        scheduler.shutdown()\n        print('Exit The Job!')\n```\n\n# 采用阻塞的方法，只执行一次\n\n```Python\n# coding=utf-8\n\"\"\"\nDemonstrates how to use the background scheduler to schedule a job that executes on 3 second\nintervals.\n\"\"\"\n \nfrom datetime import datetime\nimport os\n \nfrom apscheduler.schedulers.blocking import BlockingScheduler\n \n \ndef tick():\n    print('Tick! The time is: %s' % datetime.now())\n \n \nif __name__ == '__main__':\n    scheduler = BlockingScheduler()\n    scheduler.add_job(tick, 'date', run_date='2016-02-14 15:23:05')\n    \n    print('Press Ctrl+{0} to exit'.format('Break' if os.name == 'nt' else 'C'))\n \n    try:\n        scheduler.start()    #采用的是阻塞的方式，只有一个线程专职做调度的任务\n    except (KeyboardInterrupt, SystemExit):\n        # Not strictly necessary if daemonic mode is enabled but should be done if possible\n        scheduler.shutdown()\n        print('Exit The Job!')\n```\n\n# 采用阻塞的方式，使用cron的调度方法\n\n```Python\n# coding=utf-8\n\"\"\"\nDemonstrates how to use the background scheduler to schedule a job that executes on 3 second\nintervals.\n\"\"\"\n \nfrom datetime import datetime\nimport os\n \nfrom apscheduler.schedulers.blocking import BlockingScheduler\n \n \ndef tick():\n    print('Tick! The time is: %s' % datetime.now())\n \n \nif __name__ == '__main__':\n    scheduler = BlockingScheduler()\n    scheduler.add_job(tick, 'cron', day_of_week='6', second='*/5')\n    '''\n        year (int|str) – 4-digit year\n        month (int|str) – month (1-12)\n        day (int|str) – day of the (1-31)\n        week (int|str) – ISO week (1-53)\n        day_of_week (int|str) – number or name of weekday (0-6 or mon,tue,wed,thu,fri,sat,sun)\n        hour (int|str) – hour (0-23)\n        minute (int|str) – minute (0-59)\n        second (int|str) – second (0-59)\n        \n        start_date (datetime|str) – earliest possible date/time to trigger on (inclusive)\n        end_date (datetime|str) – latest possible date/time to trigger on (inclusive)\n        timezone (datetime.tzinfo|str) – time zone to use for the date/time calculations (defaults to scheduler timezone)\n    \n        *    any    Fire on every value\n        */a    any    Fire every a values, starting from the minimum\n        a-b    any    Fire on any value within the a-b range (a must be smaller than b)\n        a-b/c    any    Fire every c values within the a-b range\n        xth y    day    Fire on the x -th occurrence of weekday y within the month\n        last x    day    Fire on the last occurrence of weekday x within the month\n        last    day    Fire on the last day within the month\n        x,y,z    any    Fire on any matching expression; can combine any number of any of the above expressions\n    '''\n    \n    print('Press Ctrl+{0} to exit'.format('Break' if os.name == 'nt' else 'C'))\n \n    try:\n        scheduler.start()    #采用的是阻塞的方式，只有一个线程专职做调度的任务\n    except (KeyboardInterrupt, SystemExit):\n        # Not strictly necessary if daemonic mode is enabled but should be done if possible\n        scheduler.shutdown()\n        print('Exit The Job!')\n```\n\n[转自此链接](https://www.cnblogs.com/cangqinglang/p/14338220.html)\n","slug":"python调度框架APScheduler使用详解（非阻塞模式）","published":1,"date":"2022-12-30T14:52:02.088Z","updated":"2022-12-30T14:56:18.565Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clcbf772100071dxhhzee4ki4","content":"<h2 id=\"定时任务设置：\"><a href=\"#定时任务设置：\" class=\"headerlink\" title=\"定时任务设置：\"></a>定时任务设置：</h2><p>定时任务，有阻塞和非阻塞方式两种，这个部分需要取分清楚:</p>\n<ul>\n<li><p><code>from apscheduler.schedulers.background import BackgroundScheduler</code> 这个是非阻塞的；</p>\n</li>\n<li><p><code>from apscheduler.schedulers.blocking import BlockingScheduler</code> 这个是阻塞的，在没有其他主程序时，就需要用阻塞的方式，不然代码执行完主程序就结束了。</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># coding=utf-8</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">Demonstrates how to use the background scheduler to schedule a job that executes on 3 second</span></span><br><span class=\"line\"><span class=\"string\">intervals.</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">from</span> datetime <span class=\"keyword\">import</span> datetime</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">from</span> apscheduler.schedulers.background <span class=\"keyword\">import</span> BackgroundScheduler</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">tick</span>():</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Tick! The time is: %s&#x27;</span> % datetime.now())</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    scheduler = BackgroundScheduler()</span><br><span class=\"line\">    scheduler.add_job(tick, <span class=\"string\">&#x27;interval&#x27;</span>, seconds=<span class=\"number\">3</span>)　　<span class=\"comment\">#间隔3秒钟执行一次</span></span><br><span class=\"line\">    scheduler.start()    <span class=\"comment\">#这里的调度任务是独立的一个线程</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Press Ctrl+&#123;0&#125; to exit&#x27;</span>.<span class=\"built_in\">format</span>(<span class=\"string\">&#x27;Break&#x27;</span> <span class=\"keyword\">if</span> os.name == <span class=\"string\">&#x27;nt&#x27;</span> <span class=\"keyword\">else</span> <span class=\"string\">&#x27;C&#x27;</span>))</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"comment\"># This is here to simulate application activity (which keeps the main thread alive).</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">            time.sleep(<span class=\"number\">2</span>)    <span class=\"comment\">#其他任务是独立的线程执行</span></span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;sleep!&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> (KeyboardInterrupt, SystemExit):</span><br><span class=\"line\">        <span class=\"comment\"># Not strictly necessary if daemonic mode is enabled but should be done if possible</span></span><br><span class=\"line\">        scheduler.shutdown()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Exit The Job!&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"非阻塞调度，在指定的时间执行一次\"><a href=\"#非阻塞调度，在指定的时间执行一次\" class=\"headerlink\" title=\"非阻塞调度，在指定的时间执行一次\"></a>非阻塞调度，在指定的时间执行一次</h1><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># coding=utf-8</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">Demonstrates how to use the background scheduler to schedule a job that executes on 3 second</span></span><br><span class=\"line\"><span class=\"string\">intervals.</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">from</span> datetime <span class=\"keyword\">import</span> datetime</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">from</span> apscheduler.schedulers.background <span class=\"keyword\">import</span> BackgroundScheduler</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">tick</span>():</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Tick! The time is: %s&#x27;</span> % datetime.now())</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    scheduler = BackgroundScheduler()</span><br><span class=\"line\">    <span class=\"comment\">#scheduler.add_job(tick, &#x27;interval&#x27;, seconds=3)</span></span><br><span class=\"line\">    scheduler.add_job(tick, <span class=\"string\">&#x27;date&#x27;</span>, run_date=<span class=\"string\">&#x27;2016-02-14 15:01:05&#x27;</span>)　　<span class=\"comment\">#在指定的时间，只执行一次</span></span><br><span class=\"line\">    scheduler.start()    <span class=\"comment\">#这里的调度任务是独立的一个线程</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Press Ctrl+&#123;0&#125; to exit&#x27;</span>.<span class=\"built_in\">format</span>(<span class=\"string\">&#x27;Break&#x27;</span> <span class=\"keyword\">if</span> os.name == <span class=\"string\">&#x27;nt&#x27;</span> <span class=\"keyword\">else</span> <span class=\"string\">&#x27;C&#x27;</span>))</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"comment\"># This is here to simulate application activity (which keeps the main thread alive).</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">            time.sleep(<span class=\"number\">2</span>)    <span class=\"comment\">#其他任务是独立的线程执行</span></span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;sleep!&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> (KeyboardInterrupt, SystemExit):</span><br><span class=\"line\">        <span class=\"comment\"># Not strictly necessary if daemonic mode is enabled but should be done if possible</span></span><br><span class=\"line\">        scheduler.shutdown()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Exit The Job!&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"非阻塞的方式，采用cron的方式执行\"><a href=\"#非阻塞的方式，采用cron的方式执行\" class=\"headerlink\" title=\"非阻塞的方式，采用cron的方式执行\"></a>非阻塞的方式，采用cron的方式执行</h1><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># coding=utf-8</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">Demonstrates how to use the background scheduler to schedule a job that executes on 3 second</span></span><br><span class=\"line\"><span class=\"string\">intervals.</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">from</span> datetime <span class=\"keyword\">import</span> datetime</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">from</span> apscheduler.schedulers.background <span class=\"keyword\">import</span> BackgroundScheduler</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">tick</span>():</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Tick! The time is: %s&#x27;</span> % datetime.now())</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    scheduler = BackgroundScheduler()</span><br><span class=\"line\">    <span class=\"comment\">#scheduler.add_job(tick, &#x27;interval&#x27;, seconds=3)</span></span><br><span class=\"line\">    <span class=\"comment\">#scheduler.add_job(tick, &#x27;date&#x27;, run_date=&#x27;2016-02-14 15:01:05&#x27;)</span></span><br><span class=\"line\">    scheduler.add_job(tick, <span class=\"string\">&#x27;cron&#x27;</span>, day_of_week=<span class=\"string\">&#x27;6&#x27;</span>, second=<span class=\"string\">&#x27;*/5&#x27;</span>)</span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">        year (int|str) – 4-digit year</span></span><br><span class=\"line\"><span class=\"string\">        month (int|str) – month (1-12)</span></span><br><span class=\"line\"><span class=\"string\">        day (int|str) – day of the (1-31)</span></span><br><span class=\"line\"><span class=\"string\">        week (int|str) – ISO week (1-53)</span></span><br><span class=\"line\"><span class=\"string\">        day_of_week (int|str) – number or name of weekday (0-6 or mon,tue,wed,thu,fri,sat,sun)</span></span><br><span class=\"line\"><span class=\"string\">        hour (int|str) – hour (0-23)</span></span><br><span class=\"line\"><span class=\"string\">        minute (int|str) – minute (0-59)</span></span><br><span class=\"line\"><span class=\"string\">        second (int|str) – second (0-59)</span></span><br><span class=\"line\"><span class=\"string\">        </span></span><br><span class=\"line\"><span class=\"string\">        start_date (datetime|str) – earliest possible date/time to trigger on (inclusive)</span></span><br><span class=\"line\"><span class=\"string\">        end_date (datetime|str) – latest possible date/time to trigger on (inclusive)</span></span><br><span class=\"line\"><span class=\"string\">        timezone (datetime.tzinfo|str) – time zone to use for the date/time calculations (defaults to scheduler timezone)</span></span><br><span class=\"line\"><span class=\"string\">    </span></span><br><span class=\"line\"><span class=\"string\">        *    any    Fire on every value</span></span><br><span class=\"line\"><span class=\"string\">        */a    any    Fire every a values, starting from the minimum</span></span><br><span class=\"line\"><span class=\"string\">        a-b    any    Fire on any value within the a-b range (a must be smaller than b)</span></span><br><span class=\"line\"><span class=\"string\">        a-b/c    any    Fire every c values within the a-b range</span></span><br><span class=\"line\"><span class=\"string\">        xth y    day    Fire on the x -th occurrence of weekday y within the month</span></span><br><span class=\"line\"><span class=\"string\">        last x    day    Fire on the last occurrence of weekday x within the month</span></span><br><span class=\"line\"><span class=\"string\">        last    day    Fire on the last day within the month</span></span><br><span class=\"line\"><span class=\"string\">        x,y,z    any    Fire on any matching expression; can combine any number of any of the above expressions</span></span><br><span class=\"line\"><span class=\"string\">    &#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    scheduler.start()    <span class=\"comment\">#这里的调度任务是独立的一个线程</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Press Ctrl+&#123;0&#125; to exit&#x27;</span>.<span class=\"built_in\">format</span>(<span class=\"string\">&#x27;Break&#x27;</span> <span class=\"keyword\">if</span> os.name == <span class=\"string\">&#x27;nt&#x27;</span> <span class=\"keyword\">else</span> <span class=\"string\">&#x27;C&#x27;</span>))</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"comment\"># This is here to simulate application activity (which keeps the main thread alive).</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">            time.sleep(<span class=\"number\">2</span>)    <span class=\"comment\">#其他任务是独立的线程执行</span></span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;sleep!&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> (KeyboardInterruptSystemExit):</span><br><span class=\"line\">        <span class=\"comment\"># Not strictly necessary if daemonic mode is enabled but should be done if possible</span></span><br><span class=\"line\">        scheduler.shutdown()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Exit The Job!&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"阻塞的方式，间隔3秒执行一次\"><a href=\"#阻塞的方式，间隔3秒执行一次\" class=\"headerlink\" title=\"阻塞的方式，间隔3秒执行一次\"></a>阻塞的方式，间隔3秒执行一次</h1><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># coding=utf-8</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">Demonstrates how to use the background scheduler to schedule a job that executes on 3 second</span></span><br><span class=\"line\"><span class=\"string\">intervals.</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">from</span> datetime <span class=\"keyword\">import</span> datetime</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">from</span> apscheduler.schedulers.blocking <span class=\"keyword\">import</span> BlockingScheduler</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">tick</span>():</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Tick! The time is: %s&#x27;</span> % datetime.now())</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    scheduler = BlockingScheduler()</span><br><span class=\"line\">    scheduler.add_job(tick, <span class=\"string\">&#x27;interval&#x27;</span>, seconds=<span class=\"number\">3</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Press Ctrl+&#123;0&#125; to exit&#x27;</span>.<span class=\"built_in\">format</span>(<span class=\"string\">&#x27;Break&#x27;</span> <span class=\"keyword\">if</span> os.name == <span class=\"string\">&#x27;nt&#x27;</span> <span class=\"keyword\">else</span> <span class=\"string\">&#x27;C&#x27;</span>))</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        scheduler.start()    <span class=\"comment\">#采用的是阻塞的方式，只有一个线程专职做调度的任务</span></span><br><span class=\"line\">    <span class=\"keyword\">except</span> (KeyboardInterrupt, SystemExit):</span><br><span class=\"line\">        <span class=\"comment\"># Not strictly necessary if daemonic mode is enabled but should be done if possible</span></span><br><span class=\"line\">        scheduler.shutdown()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Exit The Job!&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"采用阻塞的方法，只执行一次\"><a href=\"#采用阻塞的方法，只执行一次\" class=\"headerlink\" title=\"采用阻塞的方法，只执行一次\"></a>采用阻塞的方法，只执行一次</h1><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># coding=utf-8</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">Demonstrates how to use the background scheduler to schedule a job that executes on 3 second</span></span><br><span class=\"line\"><span class=\"string\">intervals.</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">from</span> datetime <span class=\"keyword\">import</span> datetime</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">from</span> apscheduler.schedulers.blocking <span class=\"keyword\">import</span> BlockingScheduler</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">tick</span>():</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Tick! The time is: %s&#x27;</span> % datetime.now())</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    scheduler = BlockingScheduler()</span><br><span class=\"line\">    scheduler.add_job(tick, <span class=\"string\">&#x27;date&#x27;</span>, run_date=<span class=\"string\">&#x27;2016-02-14 15:23:05&#x27;</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Press Ctrl+&#123;0&#125; to exit&#x27;</span>.<span class=\"built_in\">format</span>(<span class=\"string\">&#x27;Break&#x27;</span> <span class=\"keyword\">if</span> os.name == <span class=\"string\">&#x27;nt&#x27;</span> <span class=\"keyword\">else</span> <span class=\"string\">&#x27;C&#x27;</span>))</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        scheduler.start()    <span class=\"comment\">#采用的是阻塞的方式，只有一个线程专职做调度的任务</span></span><br><span class=\"line\">    <span class=\"keyword\">except</span> (KeyboardInterrupt, SystemExit):</span><br><span class=\"line\">        <span class=\"comment\"># Not strictly necessary if daemonic mode is enabled but should be done if possible</span></span><br><span class=\"line\">        scheduler.shutdown()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Exit The Job!&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"采用阻塞的方式，使用cron的调度方法\"><a href=\"#采用阻塞的方式，使用cron的调度方法\" class=\"headerlink\" title=\"采用阻塞的方式，使用cron的调度方法\"></a>采用阻塞的方式，使用cron的调度方法</h1><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># coding=utf-8</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">Demonstrates how to use the background scheduler to schedule a job that executes on 3 second</span></span><br><span class=\"line\"><span class=\"string\">intervals.</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">from</span> datetime <span class=\"keyword\">import</span> datetime</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">from</span> apscheduler.schedulers.blocking <span class=\"keyword\">import</span> BlockingScheduler</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">tick</span>():</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Tick! The time is: %s&#x27;</span> % datetime.now())</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    scheduler = BlockingScheduler()</span><br><span class=\"line\">    scheduler.add_job(tick, <span class=\"string\">&#x27;cron&#x27;</span>, day_of_week=<span class=\"string\">&#x27;6&#x27;</span>, second=<span class=\"string\">&#x27;*/5&#x27;</span>)</span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">        year (int|str) – 4-digit year</span></span><br><span class=\"line\"><span class=\"string\">        month (int|str) – month (1-12)</span></span><br><span class=\"line\"><span class=\"string\">        day (int|str) – day of the (1-31)</span></span><br><span class=\"line\"><span class=\"string\">        week (int|str) – ISO week (1-53)</span></span><br><span class=\"line\"><span class=\"string\">        day_of_week (int|str) – number or name of weekday (0-6 or mon,tue,wed,thu,fri,sat,sun)</span></span><br><span class=\"line\"><span class=\"string\">        hour (int|str) – hour (0-23)</span></span><br><span class=\"line\"><span class=\"string\">        minute (int|str) – minute (0-59)</span></span><br><span class=\"line\"><span class=\"string\">        second (int|str) – second (0-59)</span></span><br><span class=\"line\"><span class=\"string\">        </span></span><br><span class=\"line\"><span class=\"string\">        start_date (datetime|str) – earliest possible date/time to trigger on (inclusive)</span></span><br><span class=\"line\"><span class=\"string\">        end_date (datetime|str) – latest possible date/time to trigger on (inclusive)</span></span><br><span class=\"line\"><span class=\"string\">        timezone (datetime.tzinfo|str) – time zone to use for the date/time calculations (defaults to scheduler timezone)</span></span><br><span class=\"line\"><span class=\"string\">    </span></span><br><span class=\"line\"><span class=\"string\">        *    any    Fire on every value</span></span><br><span class=\"line\"><span class=\"string\">        */a    any    Fire every a values, starting from the minimum</span></span><br><span class=\"line\"><span class=\"string\">        a-b    any    Fire on any value within the a-b range (a must be smaller than b)</span></span><br><span class=\"line\"><span class=\"string\">        a-b/c    any    Fire every c values within the a-b range</span></span><br><span class=\"line\"><span class=\"string\">        xth y    day    Fire on the x -th occurrence of weekday y within the month</span></span><br><span class=\"line\"><span class=\"string\">        last x    day    Fire on the last occurrence of weekday x within the month</span></span><br><span class=\"line\"><span class=\"string\">        last    day    Fire on the last day within the month</span></span><br><span class=\"line\"><span class=\"string\">        x,y,z    any    Fire on any matching expression; can combine any number of any of the above expressions</span></span><br><span class=\"line\"><span class=\"string\">    &#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Press Ctrl+&#123;0&#125; to exit&#x27;</span>.<span class=\"built_in\">format</span>(<span class=\"string\">&#x27;Break&#x27;</span> <span class=\"keyword\">if</span> os.name == <span class=\"string\">&#x27;nt&#x27;</span> <span class=\"keyword\">else</span> <span class=\"string\">&#x27;C&#x27;</span>))</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        scheduler.start()    <span class=\"comment\">#采用的是阻塞的方式，只有一个线程专职做调度的任务</span></span><br><span class=\"line\">    <span class=\"keyword\">except</span> (KeyboardInterrupt, SystemExit):</span><br><span class=\"line\">        <span class=\"comment\"># Not strictly necessary if daemonic mode is enabled but should be done if possible</span></span><br><span class=\"line\">        scheduler.shutdown()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Exit The Job!&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://www.cnblogs.com/cangqinglang/p/14338220.html\">转自此链接</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"定时任务设置：\"><a href=\"#定时任务设置：\" class=\"headerlink\" title=\"定时任务设置：\"></a>定时任务设置：</h2><p>定时任务，有阻塞和非阻塞方式两种，这个部分需要取分清楚:</p>\n<ul>\n<li><p><code>from apscheduler.schedulers.background import BackgroundScheduler</code> 这个是非阻塞的；</p>\n</li>\n<li><p><code>from apscheduler.schedulers.blocking import BlockingScheduler</code> 这个是阻塞的，在没有其他主程序时，就需要用阻塞的方式，不然代码执行完主程序就结束了。</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># coding=utf-8</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">Demonstrates how to use the background scheduler to schedule a job that executes on 3 second</span></span><br><span class=\"line\"><span class=\"string\">intervals.</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">from</span> datetime <span class=\"keyword\">import</span> datetime</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">from</span> apscheduler.schedulers.background <span class=\"keyword\">import</span> BackgroundScheduler</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">tick</span>():</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Tick! The time is: %s&#x27;</span> % datetime.now())</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    scheduler = BackgroundScheduler()</span><br><span class=\"line\">    scheduler.add_job(tick, <span class=\"string\">&#x27;interval&#x27;</span>, seconds=<span class=\"number\">3</span>)　　<span class=\"comment\">#间隔3秒钟执行一次</span></span><br><span class=\"line\">    scheduler.start()    <span class=\"comment\">#这里的调度任务是独立的一个线程</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Press Ctrl+&#123;0&#125; to exit&#x27;</span>.<span class=\"built_in\">format</span>(<span class=\"string\">&#x27;Break&#x27;</span> <span class=\"keyword\">if</span> os.name == <span class=\"string\">&#x27;nt&#x27;</span> <span class=\"keyword\">else</span> <span class=\"string\">&#x27;C&#x27;</span>))</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"comment\"># This is here to simulate application activity (which keeps the main thread alive).</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">            time.sleep(<span class=\"number\">2</span>)    <span class=\"comment\">#其他任务是独立的线程执行</span></span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;sleep!&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> (KeyboardInterrupt, SystemExit):</span><br><span class=\"line\">        <span class=\"comment\"># Not strictly necessary if daemonic mode is enabled but should be done if possible</span></span><br><span class=\"line\">        scheduler.shutdown()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Exit The Job!&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"非阻塞调度，在指定的时间执行一次\"><a href=\"#非阻塞调度，在指定的时间执行一次\" class=\"headerlink\" title=\"非阻塞调度，在指定的时间执行一次\"></a>非阻塞调度，在指定的时间执行一次</h1><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># coding=utf-8</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">Demonstrates how to use the background scheduler to schedule a job that executes on 3 second</span></span><br><span class=\"line\"><span class=\"string\">intervals.</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">from</span> datetime <span class=\"keyword\">import</span> datetime</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">from</span> apscheduler.schedulers.background <span class=\"keyword\">import</span> BackgroundScheduler</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">tick</span>():</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Tick! The time is: %s&#x27;</span> % datetime.now())</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    scheduler = BackgroundScheduler()</span><br><span class=\"line\">    <span class=\"comment\">#scheduler.add_job(tick, &#x27;interval&#x27;, seconds=3)</span></span><br><span class=\"line\">    scheduler.add_job(tick, <span class=\"string\">&#x27;date&#x27;</span>, run_date=<span class=\"string\">&#x27;2016-02-14 15:01:05&#x27;</span>)　　<span class=\"comment\">#在指定的时间，只执行一次</span></span><br><span class=\"line\">    scheduler.start()    <span class=\"comment\">#这里的调度任务是独立的一个线程</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Press Ctrl+&#123;0&#125; to exit&#x27;</span>.<span class=\"built_in\">format</span>(<span class=\"string\">&#x27;Break&#x27;</span> <span class=\"keyword\">if</span> os.name == <span class=\"string\">&#x27;nt&#x27;</span> <span class=\"keyword\">else</span> <span class=\"string\">&#x27;C&#x27;</span>))</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"comment\"># This is here to simulate application activity (which keeps the main thread alive).</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">            time.sleep(<span class=\"number\">2</span>)    <span class=\"comment\">#其他任务是独立的线程执行</span></span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;sleep!&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> (KeyboardInterrupt, SystemExit):</span><br><span class=\"line\">        <span class=\"comment\"># Not strictly necessary if daemonic mode is enabled but should be done if possible</span></span><br><span class=\"line\">        scheduler.shutdown()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Exit The Job!&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"非阻塞的方式，采用cron的方式执行\"><a href=\"#非阻塞的方式，采用cron的方式执行\" class=\"headerlink\" title=\"非阻塞的方式，采用cron的方式执行\"></a>非阻塞的方式，采用cron的方式执行</h1><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># coding=utf-8</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">Demonstrates how to use the background scheduler to schedule a job that executes on 3 second</span></span><br><span class=\"line\"><span class=\"string\">intervals.</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">from</span> datetime <span class=\"keyword\">import</span> datetime</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">from</span> apscheduler.schedulers.background <span class=\"keyword\">import</span> BackgroundScheduler</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">tick</span>():</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Tick! The time is: %s&#x27;</span> % datetime.now())</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    scheduler = BackgroundScheduler()</span><br><span class=\"line\">    <span class=\"comment\">#scheduler.add_job(tick, &#x27;interval&#x27;, seconds=3)</span></span><br><span class=\"line\">    <span class=\"comment\">#scheduler.add_job(tick, &#x27;date&#x27;, run_date=&#x27;2016-02-14 15:01:05&#x27;)</span></span><br><span class=\"line\">    scheduler.add_job(tick, <span class=\"string\">&#x27;cron&#x27;</span>, day_of_week=<span class=\"string\">&#x27;6&#x27;</span>, second=<span class=\"string\">&#x27;*/5&#x27;</span>)</span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">        year (int|str) – 4-digit year</span></span><br><span class=\"line\"><span class=\"string\">        month (int|str) – month (1-12)</span></span><br><span class=\"line\"><span class=\"string\">        day (int|str) – day of the (1-31)</span></span><br><span class=\"line\"><span class=\"string\">        week (int|str) – ISO week (1-53)</span></span><br><span class=\"line\"><span class=\"string\">        day_of_week (int|str) – number or name of weekday (0-6 or mon,tue,wed,thu,fri,sat,sun)</span></span><br><span class=\"line\"><span class=\"string\">        hour (int|str) – hour (0-23)</span></span><br><span class=\"line\"><span class=\"string\">        minute (int|str) – minute (0-59)</span></span><br><span class=\"line\"><span class=\"string\">        second (int|str) – second (0-59)</span></span><br><span class=\"line\"><span class=\"string\">        </span></span><br><span class=\"line\"><span class=\"string\">        start_date (datetime|str) – earliest possible date/time to trigger on (inclusive)</span></span><br><span class=\"line\"><span class=\"string\">        end_date (datetime|str) – latest possible date/time to trigger on (inclusive)</span></span><br><span class=\"line\"><span class=\"string\">        timezone (datetime.tzinfo|str) – time zone to use for the date/time calculations (defaults to scheduler timezone)</span></span><br><span class=\"line\"><span class=\"string\">    </span></span><br><span class=\"line\"><span class=\"string\">        *    any    Fire on every value</span></span><br><span class=\"line\"><span class=\"string\">        */a    any    Fire every a values, starting from the minimum</span></span><br><span class=\"line\"><span class=\"string\">        a-b    any    Fire on any value within the a-b range (a must be smaller than b)</span></span><br><span class=\"line\"><span class=\"string\">        a-b/c    any    Fire every c values within the a-b range</span></span><br><span class=\"line\"><span class=\"string\">        xth y    day    Fire on the x -th occurrence of weekday y within the month</span></span><br><span class=\"line\"><span class=\"string\">        last x    day    Fire on the last occurrence of weekday x within the month</span></span><br><span class=\"line\"><span class=\"string\">        last    day    Fire on the last day within the month</span></span><br><span class=\"line\"><span class=\"string\">        x,y,z    any    Fire on any matching expression; can combine any number of any of the above expressions</span></span><br><span class=\"line\"><span class=\"string\">    &#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    scheduler.start()    <span class=\"comment\">#这里的调度任务是独立的一个线程</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Press Ctrl+&#123;0&#125; to exit&#x27;</span>.<span class=\"built_in\">format</span>(<span class=\"string\">&#x27;Break&#x27;</span> <span class=\"keyword\">if</span> os.name == <span class=\"string\">&#x27;nt&#x27;</span> <span class=\"keyword\">else</span> <span class=\"string\">&#x27;C&#x27;</span>))</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"comment\"># This is here to simulate application activity (which keeps the main thread alive).</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">            time.sleep(<span class=\"number\">2</span>)    <span class=\"comment\">#其他任务是独立的线程执行</span></span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;sleep!&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> (KeyboardInterruptSystemExit):</span><br><span class=\"line\">        <span class=\"comment\"># Not strictly necessary if daemonic mode is enabled but should be done if possible</span></span><br><span class=\"line\">        scheduler.shutdown()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Exit The Job!&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"阻塞的方式，间隔3秒执行一次\"><a href=\"#阻塞的方式，间隔3秒执行一次\" class=\"headerlink\" title=\"阻塞的方式，间隔3秒执行一次\"></a>阻塞的方式，间隔3秒执行一次</h1><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># coding=utf-8</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">Demonstrates how to use the background scheduler to schedule a job that executes on 3 second</span></span><br><span class=\"line\"><span class=\"string\">intervals.</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">from</span> datetime <span class=\"keyword\">import</span> datetime</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">from</span> apscheduler.schedulers.blocking <span class=\"keyword\">import</span> BlockingScheduler</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">tick</span>():</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Tick! The time is: %s&#x27;</span> % datetime.now())</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    scheduler = BlockingScheduler()</span><br><span class=\"line\">    scheduler.add_job(tick, <span class=\"string\">&#x27;interval&#x27;</span>, seconds=<span class=\"number\">3</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Press Ctrl+&#123;0&#125; to exit&#x27;</span>.<span class=\"built_in\">format</span>(<span class=\"string\">&#x27;Break&#x27;</span> <span class=\"keyword\">if</span> os.name == <span class=\"string\">&#x27;nt&#x27;</span> <span class=\"keyword\">else</span> <span class=\"string\">&#x27;C&#x27;</span>))</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        scheduler.start()    <span class=\"comment\">#采用的是阻塞的方式，只有一个线程专职做调度的任务</span></span><br><span class=\"line\">    <span class=\"keyword\">except</span> (KeyboardInterrupt, SystemExit):</span><br><span class=\"line\">        <span class=\"comment\"># Not strictly necessary if daemonic mode is enabled but should be done if possible</span></span><br><span class=\"line\">        scheduler.shutdown()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Exit The Job!&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"采用阻塞的方法，只执行一次\"><a href=\"#采用阻塞的方法，只执行一次\" class=\"headerlink\" title=\"采用阻塞的方法，只执行一次\"></a>采用阻塞的方法，只执行一次</h1><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># coding=utf-8</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">Demonstrates how to use the background scheduler to schedule a job that executes on 3 second</span></span><br><span class=\"line\"><span class=\"string\">intervals.</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">from</span> datetime <span class=\"keyword\">import</span> datetime</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">from</span> apscheduler.schedulers.blocking <span class=\"keyword\">import</span> BlockingScheduler</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">tick</span>():</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Tick! The time is: %s&#x27;</span> % datetime.now())</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    scheduler = BlockingScheduler()</span><br><span class=\"line\">    scheduler.add_job(tick, <span class=\"string\">&#x27;date&#x27;</span>, run_date=<span class=\"string\">&#x27;2016-02-14 15:23:05&#x27;</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Press Ctrl+&#123;0&#125; to exit&#x27;</span>.<span class=\"built_in\">format</span>(<span class=\"string\">&#x27;Break&#x27;</span> <span class=\"keyword\">if</span> os.name == <span class=\"string\">&#x27;nt&#x27;</span> <span class=\"keyword\">else</span> <span class=\"string\">&#x27;C&#x27;</span>))</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        scheduler.start()    <span class=\"comment\">#采用的是阻塞的方式，只有一个线程专职做调度的任务</span></span><br><span class=\"line\">    <span class=\"keyword\">except</span> (KeyboardInterrupt, SystemExit):</span><br><span class=\"line\">        <span class=\"comment\"># Not strictly necessary if daemonic mode is enabled but should be done if possible</span></span><br><span class=\"line\">        scheduler.shutdown()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Exit The Job!&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"采用阻塞的方式，使用cron的调度方法\"><a href=\"#采用阻塞的方式，使用cron的调度方法\" class=\"headerlink\" title=\"采用阻塞的方式，使用cron的调度方法\"></a>采用阻塞的方式，使用cron的调度方法</h1><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># coding=utf-8</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">Demonstrates how to use the background scheduler to schedule a job that executes on 3 second</span></span><br><span class=\"line\"><span class=\"string\">intervals.</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">from</span> datetime <span class=\"keyword\">import</span> datetime</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">from</span> apscheduler.schedulers.blocking <span class=\"keyword\">import</span> BlockingScheduler</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">tick</span>():</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Tick! The time is: %s&#x27;</span> % datetime.now())</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    scheduler = BlockingScheduler()</span><br><span class=\"line\">    scheduler.add_job(tick, <span class=\"string\">&#x27;cron&#x27;</span>, day_of_week=<span class=\"string\">&#x27;6&#x27;</span>, second=<span class=\"string\">&#x27;*/5&#x27;</span>)</span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">        year (int|str) – 4-digit year</span></span><br><span class=\"line\"><span class=\"string\">        month (int|str) – month (1-12)</span></span><br><span class=\"line\"><span class=\"string\">        day (int|str) – day of the (1-31)</span></span><br><span class=\"line\"><span class=\"string\">        week (int|str) – ISO week (1-53)</span></span><br><span class=\"line\"><span class=\"string\">        day_of_week (int|str) – number or name of weekday (0-6 or mon,tue,wed,thu,fri,sat,sun)</span></span><br><span class=\"line\"><span class=\"string\">        hour (int|str) – hour (0-23)</span></span><br><span class=\"line\"><span class=\"string\">        minute (int|str) – minute (0-59)</span></span><br><span class=\"line\"><span class=\"string\">        second (int|str) – second (0-59)</span></span><br><span class=\"line\"><span class=\"string\">        </span></span><br><span class=\"line\"><span class=\"string\">        start_date (datetime|str) – earliest possible date/time to trigger on (inclusive)</span></span><br><span class=\"line\"><span class=\"string\">        end_date (datetime|str) – latest possible date/time to trigger on (inclusive)</span></span><br><span class=\"line\"><span class=\"string\">        timezone (datetime.tzinfo|str) – time zone to use for the date/time calculations (defaults to scheduler timezone)</span></span><br><span class=\"line\"><span class=\"string\">    </span></span><br><span class=\"line\"><span class=\"string\">        *    any    Fire on every value</span></span><br><span class=\"line\"><span class=\"string\">        */a    any    Fire every a values, starting from the minimum</span></span><br><span class=\"line\"><span class=\"string\">        a-b    any    Fire on any value within the a-b range (a must be smaller than b)</span></span><br><span class=\"line\"><span class=\"string\">        a-b/c    any    Fire every c values within the a-b range</span></span><br><span class=\"line\"><span class=\"string\">        xth y    day    Fire on the x -th occurrence of weekday y within the month</span></span><br><span class=\"line\"><span class=\"string\">        last x    day    Fire on the last occurrence of weekday x within the month</span></span><br><span class=\"line\"><span class=\"string\">        last    day    Fire on the last day within the month</span></span><br><span class=\"line\"><span class=\"string\">        x,y,z    any    Fire on any matching expression; can combine any number of any of the above expressions</span></span><br><span class=\"line\"><span class=\"string\">    &#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Press Ctrl+&#123;0&#125; to exit&#x27;</span>.<span class=\"built_in\">format</span>(<span class=\"string\">&#x27;Break&#x27;</span> <span class=\"keyword\">if</span> os.name == <span class=\"string\">&#x27;nt&#x27;</span> <span class=\"keyword\">else</span> <span class=\"string\">&#x27;C&#x27;</span>))</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        scheduler.start()    <span class=\"comment\">#采用的是阻塞的方式，只有一个线程专职做调度的任务</span></span><br><span class=\"line\">    <span class=\"keyword\">except</span> (KeyboardInterrupt, SystemExit):</span><br><span class=\"line\">        <span class=\"comment\"># Not strictly necessary if daemonic mode is enabled but should be done if possible</span></span><br><span class=\"line\">        scheduler.shutdown()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Exit The Job!&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://www.cnblogs.com/cangqinglang/p/14338220.html\">转自此链接</a></p>\n"},{"title":"requests发送post请求返回405的处理方法","date":"2022-12-31T03:11:34.000Z","_content":"## Requests 请求返回405\n\n> 主要是因为API请求方式要求是json,但我们在分析不清楚的接口时，一般都按照惯性在传递参数的时候是以data方式，所以在使用requests时，不仅要用data=  xxx  ，还要看json= xxx  这种场景。\n\n下面这个代码当时使用请求时，是使用的是：res_data = requests.post(apiurl,**data=**body,headers=headers)   这里你的data= 并不是网站所需要的，其需要的是json,所以改成json= 就可以了。\n\n```Python\ndef get_cookie():\n    \"\"\"\n    从明道云拉取cookie信息\n    \"\"\"\n    apiurl = 'https://cooperation.xxx.com:443/api/v2/open/worksheet/getFilterRows'\n    headers = {\"User-Agent\": \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/101.0.4951.54 Safari/537.36 Edg/101.0.1210.39\"}\n    body = {\n              \"appKey\": \"f7b8e6816d39a931\",\n              \"sign\": \"ODlkNTVhNDdjZDhjNmYwODhjYjExZTU4NGFmODFkZDQzZjRlNGMzMzJlODdhNzhmNTVjYmQ4ZTA1MzAzNzc3Mw==\",\n              \"worksheetId\": \"hxggzjxx\",\n              \"viewId\": \"634509562b5b0f8d7a182f39\",\n              \"pageSize\": 5000,\n              \"pageIndex\": 1,\n              \"filters\":[\n              {\n                \"controlId\": \"leibie\",\n                \"dataType\": 2,\n                \"spliceType\": 1,\n                \"filterType\": 2,\n                \"values\": [\"应用商店审核平台\"]}   ]\n                }\n\n    res_data = requests.post(apiurl, json=body, headers=headers)  # 关键就是这里的传参方式改成json\n    print(res_data)\n\nget_cookie()\n```","source":"_posts/request发送请求405.md","raw":"title: requests发送post请求返回405的处理方法\ncategories:\n  - python\n  - 爬虫\ntags:\n  - python\n  - 爬虫\n  - requests\ndate: 2022-12-31 11:11:34\n---\n## Requests 请求返回405\n\n> 主要是因为API请求方式要求是json,但我们在分析不清楚的接口时，一般都按照惯性在传递参数的时候是以data方式，所以在使用requests时，不仅要用data=  xxx  ，还要看json= xxx  这种场景。\n\n下面这个代码当时使用请求时，是使用的是：res_data = requests.post(apiurl,**data=**body,headers=headers)   这里你的data= 并不是网站所需要的，其需要的是json,所以改成json= 就可以了。\n\n```Python\ndef get_cookie():\n    \"\"\"\n    从明道云拉取cookie信息\n    \"\"\"\n    apiurl = 'https://cooperation.xxx.com:443/api/v2/open/worksheet/getFilterRows'\n    headers = {\"User-Agent\": \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/101.0.4951.54 Safari/537.36 Edg/101.0.1210.39\"}\n    body = {\n              \"appKey\": \"f7b8e6816d39a931\",\n              \"sign\": \"ODlkNTVhNDdjZDhjNmYwODhjYjExZTU4NGFmODFkZDQzZjRlNGMzMzJlODdhNzhmNTVjYmQ4ZTA1MzAzNzc3Mw==\",\n              \"worksheetId\": \"hxggzjxx\",\n              \"viewId\": \"634509562b5b0f8d7a182f39\",\n              \"pageSize\": 5000,\n              \"pageIndex\": 1,\n              \"filters\":[\n              {\n                \"controlId\": \"leibie\",\n                \"dataType\": 2,\n                \"spliceType\": 1,\n                \"filterType\": 2,\n                \"values\": [\"应用商店审核平台\"]}   ]\n                }\n\n    res_data = requests.post(apiurl, json=body, headers=headers)  # 关键就是这里的传参方式改成json\n    print(res_data)\n\nget_cookie()\n```","slug":"request发送请求405","published":1,"updated":"2022-12-31T03:58:41.300Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clcbf772200081dxhchhhbtjm","content":"<h2 id=\"Requests-请求返回405\"><a href=\"#Requests-请求返回405\" class=\"headerlink\" title=\"Requests 请求返回405\"></a>Requests 请求返回405</h2><blockquote>\n<p>主要是因为API请求方式要求是json,但我们在分析不清楚的接口时，一般都按照惯性在传递参数的时候是以data方式，所以在使用requests时，不仅要用data&#x3D;  xxx  ，还要看json&#x3D; xxx  这种场景。</p>\n</blockquote>\n<p>下面这个代码当时使用请求时，是使用的是：res_data &#x3D; requests.post(apiurl,**data&#x3D;**body,headers&#x3D;headers)   这里你的data&#x3D; 并不是网站所需要的，其需要的是json,所以改成json&#x3D; 就可以了。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_cookie</span>():</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    从明道云拉取cookie信息</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    apiurl = <span class=\"string\">&#x27;https://cooperation.xxx.com:443/api/v2/open/worksheet/getFilterRows&#x27;</span></span><br><span class=\"line\">    headers = &#123;<span class=\"string\">&quot;User-Agent&quot;</span>: <span class=\"string\">&quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/101.0.4951.54 Safari/537.36 Edg/101.0.1210.39&quot;</span>&#125;</span><br><span class=\"line\">    body = &#123;</span><br><span class=\"line\">              <span class=\"string\">&quot;appKey&quot;</span>: <span class=\"string\">&quot;f7b8e6816d39a931&quot;</span>,</span><br><span class=\"line\">              <span class=\"string\">&quot;sign&quot;</span>: <span class=\"string\">&quot;ODlkNTVhNDdjZDhjNmYwODhjYjExZTU4NGFmODFkZDQzZjRlNGMzMzJlODdhNzhmNTVjYmQ4ZTA1MzAzNzc3Mw==&quot;</span>,</span><br><span class=\"line\">              <span class=\"string\">&quot;worksheetId&quot;</span>: <span class=\"string\">&quot;hxggzjxx&quot;</span>,</span><br><span class=\"line\">              <span class=\"string\">&quot;viewId&quot;</span>: <span class=\"string\">&quot;634509562b5b0f8d7a182f39&quot;</span>,</span><br><span class=\"line\">              <span class=\"string\">&quot;pageSize&quot;</span>: <span class=\"number\">5000</span>,</span><br><span class=\"line\">              <span class=\"string\">&quot;pageIndex&quot;</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">              <span class=\"string\">&quot;filters&quot;</span>:[</span><br><span class=\"line\">              &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;controlId&quot;</span>: <span class=\"string\">&quot;leibie&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;dataType&quot;</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;spliceType&quot;</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;filterType&quot;</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;values&quot;</span>: [<span class=\"string\">&quot;应用商店审核平台&quot;</span>]&#125;   ]</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    res_data = requests.post(apiurl, json=body, headers=headers)  <span class=\"comment\"># 关键就是这里的传参方式改成json</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(res_data)</span><br><span class=\"line\"></span><br><span class=\"line\">get_cookie()</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Requests-请求返回405\"><a href=\"#Requests-请求返回405\" class=\"headerlink\" title=\"Requests 请求返回405\"></a>Requests 请求返回405</h2><blockquote>\n<p>主要是因为API请求方式要求是json,但我们在分析不清楚的接口时，一般都按照惯性在传递参数的时候是以data方式，所以在使用requests时，不仅要用data&#x3D;  xxx  ，还要看json&#x3D; xxx  这种场景。</p>\n</blockquote>\n<p>下面这个代码当时使用请求时，是使用的是：res_data &#x3D; requests.post(apiurl,**data&#x3D;**body,headers&#x3D;headers)   这里你的data&#x3D; 并不是网站所需要的，其需要的是json,所以改成json&#x3D; 就可以了。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_cookie</span>():</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    从明道云拉取cookie信息</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    apiurl = <span class=\"string\">&#x27;https://cooperation.xxx.com:443/api/v2/open/worksheet/getFilterRows&#x27;</span></span><br><span class=\"line\">    headers = &#123;<span class=\"string\">&quot;User-Agent&quot;</span>: <span class=\"string\">&quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/101.0.4951.54 Safari/537.36 Edg/101.0.1210.39&quot;</span>&#125;</span><br><span class=\"line\">    body = &#123;</span><br><span class=\"line\">              <span class=\"string\">&quot;appKey&quot;</span>: <span class=\"string\">&quot;f7b8e6816d39a931&quot;</span>,</span><br><span class=\"line\">              <span class=\"string\">&quot;sign&quot;</span>: <span class=\"string\">&quot;ODlkNTVhNDdjZDhjNmYwODhjYjExZTU4NGFmODFkZDQzZjRlNGMzMzJlODdhNzhmNTVjYmQ4ZTA1MzAzNzc3Mw==&quot;</span>,</span><br><span class=\"line\">              <span class=\"string\">&quot;worksheetId&quot;</span>: <span class=\"string\">&quot;hxggzjxx&quot;</span>,</span><br><span class=\"line\">              <span class=\"string\">&quot;viewId&quot;</span>: <span class=\"string\">&quot;634509562b5b0f8d7a182f39&quot;</span>,</span><br><span class=\"line\">              <span class=\"string\">&quot;pageSize&quot;</span>: <span class=\"number\">5000</span>,</span><br><span class=\"line\">              <span class=\"string\">&quot;pageIndex&quot;</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">              <span class=\"string\">&quot;filters&quot;</span>:[</span><br><span class=\"line\">              &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;controlId&quot;</span>: <span class=\"string\">&quot;leibie&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;dataType&quot;</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;spliceType&quot;</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;filterType&quot;</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;values&quot;</span>: [<span class=\"string\">&quot;应用商店审核平台&quot;</span>]&#125;   ]</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    res_data = requests.post(apiurl, json=body, headers=headers)  <span class=\"comment\"># 关键就是这里的传参方式改成json</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(res_data)</span><br><span class=\"line\"></span><br><span class=\"line\">get_cookie()</span><br></pre></td></tr></table></figure>"},{"title":"vsftpd配置使用","_content":"# vsftpd配置使用\n\n## 概述\n\n> - vsftpd 是Linus上非常安全好用的ftp服务，只需要简单的安装后就可以搭建起ftp服务；\n>\n> - 该服务主要的配置文件就是vsftpd.conf ,在deepin/uos系统中的绝对路径是：```/etc/vsftpd.conf ```\n\n## 安装\n\n```bash\n# 只需要简单的进行安装配置即可，前提是你开启了开发者模式我们才能通过终端安装软件\nsudo apt install vsftpd\n\n# 如果提示没有找到对应安装包，则可能是没有进行仓库的更新连接，执行如下命令即可\nsudo apt update \n```\n\n## 服务的启停配置\n\n```bash\n# 启动服务\nservice vsftpd start\n# 停止服务\nservice vsftpd stop\n# 重启服务\nservice vsftpd restart\n# 查看服务状态\nservice vsftpd status\n#执行后结果如下：active则表示正常运行，如果失败了则可以通过提示信息查询对应问题\nbabyfengfjx@babyfengfjx:~$ service vsftpd status \n● vsftpd.service - vsftpd FTP server\n   Loaded: loaded (/lib/systemd/system/vsftpd.service; enabled; vendor preset: enabled)\n   Active: active (running) since Sat 2021-10-09 16:22:48 CST; 1s ago\n  Process: 18334 ExecStartPre=/bin/mkdir -p /var/run/vsftpd/empty (code=exited, status=0/SUCCESS)\n Main PID: 18335 (vsftpd)\n    Tasks: 1 (limit: 4915)\n   Memory: 568.0K\n   CGroup: /system.slice/vsftpd.service\n           └─18335 /usr/sbin/vsftpd /etc/vsftpd.conf\n```\n\n## 配置文件展示\n\n> 在使用该服务过程中，主要就是这些配置文件该如何配置，很多同学在实际配置过程中很难一次配置成功，这里就给出一个实际可用的配置参数以供参考\n\n\n\n### 下面就是基于uos安装的3.0.3-12版本附带的原配置文件进行的配置\n\n> 配置过程中尽量是将匿名登录关闭，使用本地用户登录，以确保安全。\n\n```bash\n# Example config file /etc/vsftpd.conf\n#\n# The default compiled in settings are fairly paranoid. This sample file\n# loosens things up a bit, to make the ftp daemon more usable.\n# Please see vsftpd.conf.5 for all compiled in defaults.\n#\n# READ THIS: This example file is NOT an exhaustive list of vsftpd options.\n# Please read the vsftpd.conf.5 manual page to get a full idea of vsftpd's\n# capabilities.\n#\n#\n# Run standalone?  vsftpd can run either from an inetd or as a standalone\n# daemon started from an initscript.\nlisten=YES\n#\n# This directive enables listening on IPv6 sockets. By default, listening\n# on the IPv6 \"any\" address (::) will accept connections from both IPv6\n# and IPv4 clients. It is not necessary to listen on *both* IPv4 and IPv6\n# sockets. If you want that (perhaps because you want to listen on specific\n# addresses) then you must run two copies of vsftpd with two configuration\n# files.\nlisten_ipv6=NO\n#\n# Allow anonymous FTP? (Disabled by default).\nanonymous_enable=NO\n#\n# Uncomment this to allow local users to log in.\nlocal_enable=YES\n#\n# Uncomment this to enable any form of FTP write command.\nwrite_enable=YES\n#\n# Default umask for local users is 077. You may wish to change this to 022,\n# if your users expect that (022 is used by most other ftpd's)\n#local_umask=022\n#\n# Uncomment this to allow the anonymous FTP user to upload files. This only\n# has an effect if the above global write enable is activated. Also, you will\n# obviously need to create a directory writable by the FTP user.\n#anon_upload_enable=YES\n#\n# Uncomment this if you want the anonymous FTP user to be able to create\n# new directories.\n#anon_mkdir_write_enable=YES\n#\n# Activate directory messages - messages given to remote users when they\n# go into a certain directory.\ndirmessage_enable=YES\n#\n# If enabled, vsftpd will display directory listings with the time\n# in  your  local  time  zone.  The default is to display GMT. The\n# times returned by the MDTM FTP command are also affected by this\n# option.\nuse_localtime=YES\n#\n# Activate logging of uploads/downloads.\nxferlog_enable=YES\n#\n# Make sure PORT transfer connections originate from port 20 (ftp-data).\nconnect_from_port_20=YES\n#\n# If you want, you can arrange for uploaded anonymous files to be owned by\n# a different user. Note! Using \"root\" for uploaded files is not\n# recommended!\n#chown_uploads=YES\n#chown_username=whoever\n#\n# You may override where the log file goes if you like. The default is shown\n# below.\n#xferlog_file=/var/log/vsftpd.log\n#\n# If you want, you can have your log file in standard ftpd xferlog format.\n# Note that the default log file location is /var/log/xferlog in this case.\n#xferlog_std_format=YES\n#\n# You may change the default value for timing out an idle session.\n#idle_session_timeout=600\n#\n# You may change the default value for timing out a data connection.\n#data_connection_timeout=120\n#\n# It is recommended that you define on your system a unique user which the\n# ftp server can use as a totally isolated and unprivileged user.\n#nopriv_user=ftpsecure\n#\n# Enable this and the server will recognise asynchronous ABOR requests. Not\n# recommended for security (the code is non-trivial). Not enabling it,\n# however, may confuse older FTP clients.\n#async_abor_enable=YES\n#\n# By default the server will pretend to allow ASCII mode but in fact ignore\n# the request. Turn on the below options to have the server actually do ASCII\n# mangling on files when in ASCII mode.\n# Beware that on some FTP servers, ASCII support allows a denial of service\n# attack (DoS) via the command \"SIZE /big/file\" in ASCII mode. vsftpd\n# predicted this attack and has always been safe, reporting the size of the\n# raw file.\n# ASCII mangling is a horrible feature of the protocol.\n#ascii_upload_enable=YES\n#ascii_download_enable=YES\n#\n# You may fully customise the login banner string:\n#ftpd_banner=Welcome to blah FTP service.\n#\n# You may specify a file of disallowed anonymous e-mail addresses. Apparently\n# useful for combatting certain DoS attacks.\n#deny_email_enable=YES\n# (default follows)\n#banned_email_file=/etc/vsftpd.banned_emails\n#\n# You may restrict local users to their home directories.  See the FAQ for\n# the possible risks in this before using chroot_local_user or\n# chroot_list_enable below.\n# chroot_local_user=YES\n#\n# You may specify an explicit list of local users to chroot() to their home\n# directory. If chroot_local_user is YES, then this list becomes a list of\n# users to NOT chroot().\n# (Warning! chroot'ing can be very dangerous. If using chroot, make sure that\n# the user does not have write access to the top level directory within the\n# chroot)\n# chroot_local_user=YES\n# chroot_list_enable=YES\n# (default follows)\n# chroot_list_file=/etc/vsftpd.chroot_list\n#\n# You may activate the \"-R\" option to the builtin ls. This is disabled by\n# default to avoid remote users being able to cause excessive I/O on large\n# sites. However, some broken FTP clients such as \"ncftp\" and \"mirror\" assume\n# the presence of the \"-R\" option, so there is a strong case for enabling it.\n#ls_recurse_enable=YES\n#\n# Customization\n#\n# Some of vsftpd's settings don't fit the filesystem layout by\n# default.\n#\n# This option should be the name of a directory which is empty.  Also, the\n# directory should not be writable by the ftp user. This directory is used\n# as a secure chroot() jail at times vsftpd does not require filesystem\n# access.\nsecure_chroot_dir=/var/run/vsftpd/empty\n#\n# This string is the name of the PAM service vsftpd will use.\npam_service_name=vsftpd\n#\n# This option specifies the location of the RSA certificate to use for SSL\n# encrypted connections.\nrsa_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pem\nrsa_private_key_file=/etc/ssl/private/ssl-cert-snakeoil.key\nssl_enable=NO\n\n#\n# Uncomment this to indicate that vsftpd use a utf8 filesystem.\n#utf8_filesystem=YES\n```\n\n实际开启的配置项如下：\n\n> 按照如下简单的配置就可以通过本地用户进行访问了\n\n```bash\nlisten=YES\nlisten_ipv6=NO\nanonymous_enable=NO\nlocal_enable=YES\nwrite_enable=YES\ndirmessage_enable=YES\nuse_localtime=YES\nxferlog_enable=YES\nconnect_from_port_20=YES\nsecure_chroot_dir=/var/run/vsftpd/empty\npam_service_name=vsftpd\nrsa_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pem\nrsa_private_key_file=/etc/ssl/private/ssl-cert-snakeoil.key\nssl_enable=NO\n```\n\n## 遇到的问题\n\n- 无法配置指定根目录，也就是任何本地账户登录后的目录都是根目录，无法自定义配置指定目录，配置后也不生效；\n- 在添加新用户配置成nologin时，是无法正常使用该类用户进行访问的；\n- 添加的新用户，需要先登录一次后，方可使用该账号访问ftp;\n\n","source":"_posts/vsftpd的配置.md","raw":"---\ntitle: vsftpd配置使用\ncategories: \n- linux\n- 存储服务\ntags:\n- linux\n- ftp\n---\n# vsftpd配置使用\n\n## 概述\n\n> - vsftpd 是Linus上非常安全好用的ftp服务，只需要简单的安装后就可以搭建起ftp服务；\n>\n> - 该服务主要的配置文件就是vsftpd.conf ,在deepin/uos系统中的绝对路径是：```/etc/vsftpd.conf ```\n\n## 安装\n\n```bash\n# 只需要简单的进行安装配置即可，前提是你开启了开发者模式我们才能通过终端安装软件\nsudo apt install vsftpd\n\n# 如果提示没有找到对应安装包，则可能是没有进行仓库的更新连接，执行如下命令即可\nsudo apt update \n```\n\n## 服务的启停配置\n\n```bash\n# 启动服务\nservice vsftpd start\n# 停止服务\nservice vsftpd stop\n# 重启服务\nservice vsftpd restart\n# 查看服务状态\nservice vsftpd status\n#执行后结果如下：active则表示正常运行，如果失败了则可以通过提示信息查询对应问题\nbabyfengfjx@babyfengfjx:~$ service vsftpd status \n● vsftpd.service - vsftpd FTP server\n   Loaded: loaded (/lib/systemd/system/vsftpd.service; enabled; vendor preset: enabled)\n   Active: active (running) since Sat 2021-10-09 16:22:48 CST; 1s ago\n  Process: 18334 ExecStartPre=/bin/mkdir -p /var/run/vsftpd/empty (code=exited, status=0/SUCCESS)\n Main PID: 18335 (vsftpd)\n    Tasks: 1 (limit: 4915)\n   Memory: 568.0K\n   CGroup: /system.slice/vsftpd.service\n           └─18335 /usr/sbin/vsftpd /etc/vsftpd.conf\n```\n\n## 配置文件展示\n\n> 在使用该服务过程中，主要就是这些配置文件该如何配置，很多同学在实际配置过程中很难一次配置成功，这里就给出一个实际可用的配置参数以供参考\n\n\n\n### 下面就是基于uos安装的3.0.3-12版本附带的原配置文件进行的配置\n\n> 配置过程中尽量是将匿名登录关闭，使用本地用户登录，以确保安全。\n\n```bash\n# Example config file /etc/vsftpd.conf\n#\n# The default compiled in settings are fairly paranoid. This sample file\n# loosens things up a bit, to make the ftp daemon more usable.\n# Please see vsftpd.conf.5 for all compiled in defaults.\n#\n# READ THIS: This example file is NOT an exhaustive list of vsftpd options.\n# Please read the vsftpd.conf.5 manual page to get a full idea of vsftpd's\n# capabilities.\n#\n#\n# Run standalone?  vsftpd can run either from an inetd or as a standalone\n# daemon started from an initscript.\nlisten=YES\n#\n# This directive enables listening on IPv6 sockets. By default, listening\n# on the IPv6 \"any\" address (::) will accept connections from both IPv6\n# and IPv4 clients. It is not necessary to listen on *both* IPv4 and IPv6\n# sockets. If you want that (perhaps because you want to listen on specific\n# addresses) then you must run two copies of vsftpd with two configuration\n# files.\nlisten_ipv6=NO\n#\n# Allow anonymous FTP? (Disabled by default).\nanonymous_enable=NO\n#\n# Uncomment this to allow local users to log in.\nlocal_enable=YES\n#\n# Uncomment this to enable any form of FTP write command.\nwrite_enable=YES\n#\n# Default umask for local users is 077. You may wish to change this to 022,\n# if your users expect that (022 is used by most other ftpd's)\n#local_umask=022\n#\n# Uncomment this to allow the anonymous FTP user to upload files. This only\n# has an effect if the above global write enable is activated. Also, you will\n# obviously need to create a directory writable by the FTP user.\n#anon_upload_enable=YES\n#\n# Uncomment this if you want the anonymous FTP user to be able to create\n# new directories.\n#anon_mkdir_write_enable=YES\n#\n# Activate directory messages - messages given to remote users when they\n# go into a certain directory.\ndirmessage_enable=YES\n#\n# If enabled, vsftpd will display directory listings with the time\n# in  your  local  time  zone.  The default is to display GMT. The\n# times returned by the MDTM FTP command are also affected by this\n# option.\nuse_localtime=YES\n#\n# Activate logging of uploads/downloads.\nxferlog_enable=YES\n#\n# Make sure PORT transfer connections originate from port 20 (ftp-data).\nconnect_from_port_20=YES\n#\n# If you want, you can arrange for uploaded anonymous files to be owned by\n# a different user. Note! Using \"root\" for uploaded files is not\n# recommended!\n#chown_uploads=YES\n#chown_username=whoever\n#\n# You may override where the log file goes if you like. The default is shown\n# below.\n#xferlog_file=/var/log/vsftpd.log\n#\n# If you want, you can have your log file in standard ftpd xferlog format.\n# Note that the default log file location is /var/log/xferlog in this case.\n#xferlog_std_format=YES\n#\n# You may change the default value for timing out an idle session.\n#idle_session_timeout=600\n#\n# You may change the default value for timing out a data connection.\n#data_connection_timeout=120\n#\n# It is recommended that you define on your system a unique user which the\n# ftp server can use as a totally isolated and unprivileged user.\n#nopriv_user=ftpsecure\n#\n# Enable this and the server will recognise asynchronous ABOR requests. Not\n# recommended for security (the code is non-trivial). Not enabling it,\n# however, may confuse older FTP clients.\n#async_abor_enable=YES\n#\n# By default the server will pretend to allow ASCII mode but in fact ignore\n# the request. Turn on the below options to have the server actually do ASCII\n# mangling on files when in ASCII mode.\n# Beware that on some FTP servers, ASCII support allows a denial of service\n# attack (DoS) via the command \"SIZE /big/file\" in ASCII mode. vsftpd\n# predicted this attack and has always been safe, reporting the size of the\n# raw file.\n# ASCII mangling is a horrible feature of the protocol.\n#ascii_upload_enable=YES\n#ascii_download_enable=YES\n#\n# You may fully customise the login banner string:\n#ftpd_banner=Welcome to blah FTP service.\n#\n# You may specify a file of disallowed anonymous e-mail addresses. Apparently\n# useful for combatting certain DoS attacks.\n#deny_email_enable=YES\n# (default follows)\n#banned_email_file=/etc/vsftpd.banned_emails\n#\n# You may restrict local users to their home directories.  See the FAQ for\n# the possible risks in this before using chroot_local_user or\n# chroot_list_enable below.\n# chroot_local_user=YES\n#\n# You may specify an explicit list of local users to chroot() to their home\n# directory. If chroot_local_user is YES, then this list becomes a list of\n# users to NOT chroot().\n# (Warning! chroot'ing can be very dangerous. If using chroot, make sure that\n# the user does not have write access to the top level directory within the\n# chroot)\n# chroot_local_user=YES\n# chroot_list_enable=YES\n# (default follows)\n# chroot_list_file=/etc/vsftpd.chroot_list\n#\n# You may activate the \"-R\" option to the builtin ls. This is disabled by\n# default to avoid remote users being able to cause excessive I/O on large\n# sites. However, some broken FTP clients such as \"ncftp\" and \"mirror\" assume\n# the presence of the \"-R\" option, so there is a strong case for enabling it.\n#ls_recurse_enable=YES\n#\n# Customization\n#\n# Some of vsftpd's settings don't fit the filesystem layout by\n# default.\n#\n# This option should be the name of a directory which is empty.  Also, the\n# directory should not be writable by the ftp user. This directory is used\n# as a secure chroot() jail at times vsftpd does not require filesystem\n# access.\nsecure_chroot_dir=/var/run/vsftpd/empty\n#\n# This string is the name of the PAM service vsftpd will use.\npam_service_name=vsftpd\n#\n# This option specifies the location of the RSA certificate to use for SSL\n# encrypted connections.\nrsa_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pem\nrsa_private_key_file=/etc/ssl/private/ssl-cert-snakeoil.key\nssl_enable=NO\n\n#\n# Uncomment this to indicate that vsftpd use a utf8 filesystem.\n#utf8_filesystem=YES\n```\n\n实际开启的配置项如下：\n\n> 按照如下简单的配置就可以通过本地用户进行访问了\n\n```bash\nlisten=YES\nlisten_ipv6=NO\nanonymous_enable=NO\nlocal_enable=YES\nwrite_enable=YES\ndirmessage_enable=YES\nuse_localtime=YES\nxferlog_enable=YES\nconnect_from_port_20=YES\nsecure_chroot_dir=/var/run/vsftpd/empty\npam_service_name=vsftpd\nrsa_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pem\nrsa_private_key_file=/etc/ssl/private/ssl-cert-snakeoil.key\nssl_enable=NO\n```\n\n## 遇到的问题\n\n- 无法配置指定根目录，也就是任何本地账户登录后的目录都是根目录，无法自定义配置指定目录，配置后也不生效；\n- 在添加新用户配置成nologin时，是无法正常使用该类用户进行访问的；\n- 添加的新用户，需要先登录一次后，方可使用该账号访问ftp;\n\n","slug":"vsftpd的配置","published":1,"date":"2022-12-30T01:18:10.196Z","updated":"2022-12-30T14:45:06.407Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clcbf7727000x1dxhhy3sd7p2","content":"<h1 id=\"vsftpd配置使用\"><a href=\"#vsftpd配置使用\" class=\"headerlink\" title=\"vsftpd配置使用\"></a>vsftpd配置使用</h1><h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><blockquote>\n<ul>\n<li><p>vsftpd 是Linus上非常安全好用的ftp服务，只需要简单的安装后就可以搭建起ftp服务；</p>\n</li>\n<li><p>该服务主要的配置文件就是vsftpd.conf ,在deepin&#x2F;uos系统中的绝对路径是：<code>/etc/vsftpd.conf </code></p>\n</li>\n</ul>\n</blockquote>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 只需要简单的进行安装配置即可，前提是你开启了开发者模式我们才能通过终端安装软件</span></span><br><span class=\"line\">sudo apt install vsftpd</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如果提示没有找到对应安装包，则可能是没有进行仓库的更新连接，执行如下命令即可</span></span><br><span class=\"line\">sudo apt update </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"服务的启停配置\"><a href=\"#服务的启停配置\" class=\"headerlink\" title=\"服务的启停配置\"></a>服务的启停配置</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启动服务</span></span><br><span class=\"line\">service vsftpd start</span><br><span class=\"line\"><span class=\"comment\"># 停止服务</span></span><br><span class=\"line\">service vsftpd stop</span><br><span class=\"line\"><span class=\"comment\"># 重启服务</span></span><br><span class=\"line\">service vsftpd restart</span><br><span class=\"line\"><span class=\"comment\"># 查看服务状态</span></span><br><span class=\"line\">service vsftpd status</span><br><span class=\"line\"><span class=\"comment\">#执行后结果如下：active则表示正常运行，如果失败了则可以通过提示信息查询对应问题</span></span><br><span class=\"line\">babyfengfjx@babyfengfjx:~$ service vsftpd status </span><br><span class=\"line\">● vsftpd.service - vsftpd FTP server</span><br><span class=\"line\">   Loaded: loaded (/lib/systemd/system/vsftpd.service; enabled; vendor preset: enabled)</span><br><span class=\"line\">   Active: active (running) since Sat 2021-10-09 16:22:48 CST; 1s ago</span><br><span class=\"line\">  Process: 18334 ExecStartPre=/bin/mkdir -p /var/run/vsftpd/empty (code=exited, status=0/SUCCESS)</span><br><span class=\"line\"> Main PID: 18335 (vsftpd)</span><br><span class=\"line\">    Tasks: 1 (<span class=\"built_in\">limit</span>: 4915)</span><br><span class=\"line\">   Memory: 568.0K</span><br><span class=\"line\">   CGroup: /system.slice/vsftpd.service</span><br><span class=\"line\">           └─18335 /usr/sbin/vsftpd /etc/vsftpd.conf</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配置文件展示\"><a href=\"#配置文件展示\" class=\"headerlink\" title=\"配置文件展示\"></a>配置文件展示</h2><blockquote>\n<p>在使用该服务过程中，主要就是这些配置文件该如何配置，很多同学在实际配置过程中很难一次配置成功，这里就给出一个实际可用的配置参数以供参考</p>\n</blockquote>\n<h3 id=\"下面就是基于uos安装的3-0-3-12版本附带的原配置文件进行的配置\"><a href=\"#下面就是基于uos安装的3-0-3-12版本附带的原配置文件进行的配置\" class=\"headerlink\" title=\"下面就是基于uos安装的3.0.3-12版本附带的原配置文件进行的配置\"></a>下面就是基于uos安装的3.0.3-12版本附带的原配置文件进行的配置</h3><blockquote>\n<p>配置过程中尽量是将匿名登录关闭，使用本地用户登录，以确保安全。</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Example config file /etc/vsftpd.conf</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># The default compiled in settings are fairly paranoid. This sample file</span></span><br><span class=\"line\"><span class=\"comment\"># loosens things up a bit, to make the ftp daemon more usable.</span></span><br><span class=\"line\"><span class=\"comment\"># Please see vsftpd.conf.5 for all compiled in defaults.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># READ THIS: This example file is NOT an exhaustive list of vsftpd options.</span></span><br><span class=\"line\"><span class=\"comment\"># Please read the vsftpd.conf.5 manual page to get a full idea of vsftpd&#x27;s</span></span><br><span class=\"line\"><span class=\"comment\"># capabilities.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Run standalone?  vsftpd can run either from an inetd or as a standalone</span></span><br><span class=\"line\"><span class=\"comment\"># daemon started from an initscript.</span></span><br><span class=\"line\">listen=YES</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># This directive enables listening on IPv6 sockets. By default, listening</span></span><br><span class=\"line\"><span class=\"comment\"># on the IPv6 &quot;any&quot; address (::) will accept connections from both IPv6</span></span><br><span class=\"line\"><span class=\"comment\"># and IPv4 clients. It is not necessary to listen on *both* IPv4 and IPv6</span></span><br><span class=\"line\"><span class=\"comment\"># sockets. If you want that (perhaps because you want to listen on specific</span></span><br><span class=\"line\"><span class=\"comment\"># addresses) then you must run two copies of vsftpd with two configuration</span></span><br><span class=\"line\"><span class=\"comment\"># files.</span></span><br><span class=\"line\">listen_ipv6=NO</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Allow anonymous FTP? (Disabled by default).</span></span><br><span class=\"line\">anonymous_enable=NO</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Uncomment this to allow local users to log in.</span></span><br><span class=\"line\">local_enable=YES</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Uncomment this to enable any form of FTP write command.</span></span><br><span class=\"line\">write_enable=YES</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Default umask for local users is 077. You may wish to change this to 022,</span></span><br><span class=\"line\"><span class=\"comment\"># if your users expect that (022 is used by most other ftpd&#x27;s)</span></span><br><span class=\"line\"><span class=\"comment\">#local_umask=022</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Uncomment this to allow the anonymous FTP user to upload files. This only</span></span><br><span class=\"line\"><span class=\"comment\"># has an effect if the above global write enable is activated. Also, you will</span></span><br><span class=\"line\"><span class=\"comment\"># obviously need to create a directory writable by the FTP user.</span></span><br><span class=\"line\"><span class=\"comment\">#anon_upload_enable=YES</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Uncomment this if you want the anonymous FTP user to be able to create</span></span><br><span class=\"line\"><span class=\"comment\"># new directories.</span></span><br><span class=\"line\"><span class=\"comment\">#anon_mkdir_write_enable=YES</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Activate directory messages - messages given to remote users when they</span></span><br><span class=\"line\"><span class=\"comment\"># go into a certain directory.</span></span><br><span class=\"line\">dirmessage_enable=YES</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># If enabled, vsftpd will display directory listings with the time</span></span><br><span class=\"line\"><span class=\"comment\"># in  your  local  time  zone.  The default is to display GMT. The</span></span><br><span class=\"line\"><span class=\"comment\"># times returned by the MDTM FTP command are also affected by this</span></span><br><span class=\"line\"><span class=\"comment\"># option.</span></span><br><span class=\"line\">use_localtime=YES</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Activate logging of uploads/downloads.</span></span><br><span class=\"line\">xferlog_enable=YES</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Make sure PORT transfer connections originate from port 20 (ftp-data).</span></span><br><span class=\"line\">connect_from_port_20=YES</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># If you want, you can arrange for uploaded anonymous files to be owned by</span></span><br><span class=\"line\"><span class=\"comment\"># a different user. Note! Using &quot;root&quot; for uploaded files is not</span></span><br><span class=\"line\"><span class=\"comment\"># recommended!</span></span><br><span class=\"line\"><span class=\"comment\">#chown_uploads=YES</span></span><br><span class=\"line\"><span class=\"comment\">#chown_username=whoever</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># You may override where the log file goes if you like. The default is shown</span></span><br><span class=\"line\"><span class=\"comment\"># below.</span></span><br><span class=\"line\"><span class=\"comment\">#xferlog_file=/var/log/vsftpd.log</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># If you want, you can have your log file in standard ftpd xferlog format.</span></span><br><span class=\"line\"><span class=\"comment\"># Note that the default log file location is /var/log/xferlog in this case.</span></span><br><span class=\"line\"><span class=\"comment\">#xferlog_std_format=YES</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># You may change the default value for timing out an idle session.</span></span><br><span class=\"line\"><span class=\"comment\">#idle_session_timeout=600</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># You may change the default value for timing out a data connection.</span></span><br><span class=\"line\"><span class=\"comment\">#data_connection_timeout=120</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># It is recommended that you define on your system a unique user which the</span></span><br><span class=\"line\"><span class=\"comment\"># ftp server can use as a totally isolated and unprivileged user.</span></span><br><span class=\"line\"><span class=\"comment\">#nopriv_user=ftpsecure</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Enable this and the server will recognise asynchronous ABOR requests. Not</span></span><br><span class=\"line\"><span class=\"comment\"># recommended for security (the code is non-trivial). Not enabling it,</span></span><br><span class=\"line\"><span class=\"comment\"># however, may confuse older FTP clients.</span></span><br><span class=\"line\"><span class=\"comment\">#async_abor_enable=YES</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># By default the server will pretend to allow ASCII mode but in fact ignore</span></span><br><span class=\"line\"><span class=\"comment\"># the request. Turn on the below options to have the server actually do ASCII</span></span><br><span class=\"line\"><span class=\"comment\"># mangling on files when in ASCII mode.</span></span><br><span class=\"line\"><span class=\"comment\"># Beware that on some FTP servers, ASCII support allows a denial of service</span></span><br><span class=\"line\"><span class=\"comment\"># attack (DoS) via the command &quot;SIZE /big/file&quot; in ASCII mode. vsftpd</span></span><br><span class=\"line\"><span class=\"comment\"># predicted this attack and has always been safe, reporting the size of the</span></span><br><span class=\"line\"><span class=\"comment\"># raw file.</span></span><br><span class=\"line\"><span class=\"comment\"># ASCII mangling is a horrible feature of the protocol.</span></span><br><span class=\"line\"><span class=\"comment\">#ascii_upload_enable=YES</span></span><br><span class=\"line\"><span class=\"comment\">#ascii_download_enable=YES</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># You may fully customise the login banner string:</span></span><br><span class=\"line\"><span class=\"comment\">#ftpd_banner=Welcome to blah FTP service.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># You may specify a file of disallowed anonymous e-mail addresses. Apparently</span></span><br><span class=\"line\"><span class=\"comment\"># useful for combatting certain DoS attacks.</span></span><br><span class=\"line\"><span class=\"comment\">#deny_email_enable=YES</span></span><br><span class=\"line\"><span class=\"comment\"># (default follows)</span></span><br><span class=\"line\"><span class=\"comment\">#banned_email_file=/etc/vsftpd.banned_emails</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># You may restrict local users to their home directories.  See the FAQ for</span></span><br><span class=\"line\"><span class=\"comment\"># the possible risks in this before using chroot_local_user or</span></span><br><span class=\"line\"><span class=\"comment\"># chroot_list_enable below.</span></span><br><span class=\"line\"><span class=\"comment\"># chroot_local_user=YES</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># You may specify an explicit list of local users to chroot() to their home</span></span><br><span class=\"line\"><span class=\"comment\"># directory. If chroot_local_user is YES, then this list becomes a list of</span></span><br><span class=\"line\"><span class=\"comment\"># users to NOT chroot().</span></span><br><span class=\"line\"><span class=\"comment\"># (Warning! chroot&#x27;ing can be very dangerous. If using chroot, make sure that</span></span><br><span class=\"line\"><span class=\"comment\"># the user does not have write access to the top level directory within the</span></span><br><span class=\"line\"><span class=\"comment\"># chroot)</span></span><br><span class=\"line\"><span class=\"comment\"># chroot_local_user=YES</span></span><br><span class=\"line\"><span class=\"comment\"># chroot_list_enable=YES</span></span><br><span class=\"line\"><span class=\"comment\"># (default follows)</span></span><br><span class=\"line\"><span class=\"comment\"># chroot_list_file=/etc/vsftpd.chroot_list</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># You may activate the &quot;-R&quot; option to the builtin ls. This is disabled by</span></span><br><span class=\"line\"><span class=\"comment\"># default to avoid remote users being able to cause excessive I/O on large</span></span><br><span class=\"line\"><span class=\"comment\"># sites. However, some broken FTP clients such as &quot;ncftp&quot; and &quot;mirror&quot; assume</span></span><br><span class=\"line\"><span class=\"comment\"># the presence of the &quot;-R&quot; option, so there is a strong case for enabling it.</span></span><br><span class=\"line\"><span class=\"comment\">#ls_recurse_enable=YES</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Customization</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Some of vsftpd&#x27;s settings don&#x27;t fit the filesystem layout by</span></span><br><span class=\"line\"><span class=\"comment\"># default.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># This option should be the name of a directory which is empty.  Also, the</span></span><br><span class=\"line\"><span class=\"comment\"># directory should not be writable by the ftp user. This directory is used</span></span><br><span class=\"line\"><span class=\"comment\"># as a secure chroot() jail at times vsftpd does not require filesystem</span></span><br><span class=\"line\"><span class=\"comment\"># access.</span></span><br><span class=\"line\">secure_chroot_dir=/var/run/vsftpd/empty</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># This string is the name of the PAM service vsftpd will use.</span></span><br><span class=\"line\">pam_service_name=vsftpd</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># This option specifies the location of the RSA certificate to use for SSL</span></span><br><span class=\"line\"><span class=\"comment\"># encrypted connections.</span></span><br><span class=\"line\">rsa_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pem</span><br><span class=\"line\">rsa_private_key_file=/etc/ssl/private/ssl-cert-snakeoil.key</span><br><span class=\"line\">ssl_enable=NO</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Uncomment this to indicate that vsftpd use a utf8 filesystem.</span></span><br><span class=\"line\"><span class=\"comment\">#utf8_filesystem=YES</span></span><br></pre></td></tr></table></figure>\n\n<p>实际开启的配置项如下：</p>\n<blockquote>\n<p>按照如下简单的配置就可以通过本地用户进行访问了</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">listen=YES</span><br><span class=\"line\">listen_ipv6=NO</span><br><span class=\"line\">anonymous_enable=NO</span><br><span class=\"line\">local_enable=YES</span><br><span class=\"line\">write_enable=YES</span><br><span class=\"line\">dirmessage_enable=YES</span><br><span class=\"line\">use_localtime=YES</span><br><span class=\"line\">xferlog_enable=YES</span><br><span class=\"line\">connect_from_port_20=YES</span><br><span class=\"line\">secure_chroot_dir=/var/run/vsftpd/empty</span><br><span class=\"line\">pam_service_name=vsftpd</span><br><span class=\"line\">rsa_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pem</span><br><span class=\"line\">rsa_private_key_file=/etc/ssl/private/ssl-cert-snakeoil.key</span><br><span class=\"line\">ssl_enable=NO</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h2><ul>\n<li>无法配置指定根目录，也就是任何本地账户登录后的目录都是根目录，无法自定义配置指定目录，配置后也不生效；</li>\n<li>在添加新用户配置成nologin时，是无法正常使用该类用户进行访问的；</li>\n<li>添加的新用户，需要先登录一次后，方可使用该账号访问ftp;</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"vsftpd配置使用\"><a href=\"#vsftpd配置使用\" class=\"headerlink\" title=\"vsftpd配置使用\"></a>vsftpd配置使用</h1><h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><blockquote>\n<ul>\n<li><p>vsftpd 是Linus上非常安全好用的ftp服务，只需要简单的安装后就可以搭建起ftp服务；</p>\n</li>\n<li><p>该服务主要的配置文件就是vsftpd.conf ,在deepin&#x2F;uos系统中的绝对路径是：<code>/etc/vsftpd.conf </code></p>\n</li>\n</ul>\n</blockquote>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 只需要简单的进行安装配置即可，前提是你开启了开发者模式我们才能通过终端安装软件</span></span><br><span class=\"line\">sudo apt install vsftpd</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如果提示没有找到对应安装包，则可能是没有进行仓库的更新连接，执行如下命令即可</span></span><br><span class=\"line\">sudo apt update </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"服务的启停配置\"><a href=\"#服务的启停配置\" class=\"headerlink\" title=\"服务的启停配置\"></a>服务的启停配置</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启动服务</span></span><br><span class=\"line\">service vsftpd start</span><br><span class=\"line\"><span class=\"comment\"># 停止服务</span></span><br><span class=\"line\">service vsftpd stop</span><br><span class=\"line\"><span class=\"comment\"># 重启服务</span></span><br><span class=\"line\">service vsftpd restart</span><br><span class=\"line\"><span class=\"comment\"># 查看服务状态</span></span><br><span class=\"line\">service vsftpd status</span><br><span class=\"line\"><span class=\"comment\">#执行后结果如下：active则表示正常运行，如果失败了则可以通过提示信息查询对应问题</span></span><br><span class=\"line\">babyfengfjx@babyfengfjx:~$ service vsftpd status </span><br><span class=\"line\">● vsftpd.service - vsftpd FTP server</span><br><span class=\"line\">   Loaded: loaded (/lib/systemd/system/vsftpd.service; enabled; vendor preset: enabled)</span><br><span class=\"line\">   Active: active (running) since Sat 2021-10-09 16:22:48 CST; 1s ago</span><br><span class=\"line\">  Process: 18334 ExecStartPre=/bin/mkdir -p /var/run/vsftpd/empty (code=exited, status=0/SUCCESS)</span><br><span class=\"line\"> Main PID: 18335 (vsftpd)</span><br><span class=\"line\">    Tasks: 1 (<span class=\"built_in\">limit</span>: 4915)</span><br><span class=\"line\">   Memory: 568.0K</span><br><span class=\"line\">   CGroup: /system.slice/vsftpd.service</span><br><span class=\"line\">           └─18335 /usr/sbin/vsftpd /etc/vsftpd.conf</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配置文件展示\"><a href=\"#配置文件展示\" class=\"headerlink\" title=\"配置文件展示\"></a>配置文件展示</h2><blockquote>\n<p>在使用该服务过程中，主要就是这些配置文件该如何配置，很多同学在实际配置过程中很难一次配置成功，这里就给出一个实际可用的配置参数以供参考</p>\n</blockquote>\n<h3 id=\"下面就是基于uos安装的3-0-3-12版本附带的原配置文件进行的配置\"><a href=\"#下面就是基于uos安装的3-0-3-12版本附带的原配置文件进行的配置\" class=\"headerlink\" title=\"下面就是基于uos安装的3.0.3-12版本附带的原配置文件进行的配置\"></a>下面就是基于uos安装的3.0.3-12版本附带的原配置文件进行的配置</h3><blockquote>\n<p>配置过程中尽量是将匿名登录关闭，使用本地用户登录，以确保安全。</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Example config file /etc/vsftpd.conf</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># The default compiled in settings are fairly paranoid. This sample file</span></span><br><span class=\"line\"><span class=\"comment\"># loosens things up a bit, to make the ftp daemon more usable.</span></span><br><span class=\"line\"><span class=\"comment\"># Please see vsftpd.conf.5 for all compiled in defaults.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># READ THIS: This example file is NOT an exhaustive list of vsftpd options.</span></span><br><span class=\"line\"><span class=\"comment\"># Please read the vsftpd.conf.5 manual page to get a full idea of vsftpd&#x27;s</span></span><br><span class=\"line\"><span class=\"comment\"># capabilities.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Run standalone?  vsftpd can run either from an inetd or as a standalone</span></span><br><span class=\"line\"><span class=\"comment\"># daemon started from an initscript.</span></span><br><span class=\"line\">listen=YES</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># This directive enables listening on IPv6 sockets. By default, listening</span></span><br><span class=\"line\"><span class=\"comment\"># on the IPv6 &quot;any&quot; address (::) will accept connections from both IPv6</span></span><br><span class=\"line\"><span class=\"comment\"># and IPv4 clients. It is not necessary to listen on *both* IPv4 and IPv6</span></span><br><span class=\"line\"><span class=\"comment\"># sockets. If you want that (perhaps because you want to listen on specific</span></span><br><span class=\"line\"><span class=\"comment\"># addresses) then you must run two copies of vsftpd with two configuration</span></span><br><span class=\"line\"><span class=\"comment\"># files.</span></span><br><span class=\"line\">listen_ipv6=NO</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Allow anonymous FTP? (Disabled by default).</span></span><br><span class=\"line\">anonymous_enable=NO</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Uncomment this to allow local users to log in.</span></span><br><span class=\"line\">local_enable=YES</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Uncomment this to enable any form of FTP write command.</span></span><br><span class=\"line\">write_enable=YES</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Default umask for local users is 077. You may wish to change this to 022,</span></span><br><span class=\"line\"><span class=\"comment\"># if your users expect that (022 is used by most other ftpd&#x27;s)</span></span><br><span class=\"line\"><span class=\"comment\">#local_umask=022</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Uncomment this to allow the anonymous FTP user to upload files. This only</span></span><br><span class=\"line\"><span class=\"comment\"># has an effect if the above global write enable is activated. Also, you will</span></span><br><span class=\"line\"><span class=\"comment\"># obviously need to create a directory writable by the FTP user.</span></span><br><span class=\"line\"><span class=\"comment\">#anon_upload_enable=YES</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Uncomment this if you want the anonymous FTP user to be able to create</span></span><br><span class=\"line\"><span class=\"comment\"># new directories.</span></span><br><span class=\"line\"><span class=\"comment\">#anon_mkdir_write_enable=YES</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Activate directory messages - messages given to remote users when they</span></span><br><span class=\"line\"><span class=\"comment\"># go into a certain directory.</span></span><br><span class=\"line\">dirmessage_enable=YES</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># If enabled, vsftpd will display directory listings with the time</span></span><br><span class=\"line\"><span class=\"comment\"># in  your  local  time  zone.  The default is to display GMT. The</span></span><br><span class=\"line\"><span class=\"comment\"># times returned by the MDTM FTP command are also affected by this</span></span><br><span class=\"line\"><span class=\"comment\"># option.</span></span><br><span class=\"line\">use_localtime=YES</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Activate logging of uploads/downloads.</span></span><br><span class=\"line\">xferlog_enable=YES</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Make sure PORT transfer connections originate from port 20 (ftp-data).</span></span><br><span class=\"line\">connect_from_port_20=YES</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># If you want, you can arrange for uploaded anonymous files to be owned by</span></span><br><span class=\"line\"><span class=\"comment\"># a different user. Note! Using &quot;root&quot; for uploaded files is not</span></span><br><span class=\"line\"><span class=\"comment\"># recommended!</span></span><br><span class=\"line\"><span class=\"comment\">#chown_uploads=YES</span></span><br><span class=\"line\"><span class=\"comment\">#chown_username=whoever</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># You may override where the log file goes if you like. The default is shown</span></span><br><span class=\"line\"><span class=\"comment\"># below.</span></span><br><span class=\"line\"><span class=\"comment\">#xferlog_file=/var/log/vsftpd.log</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># If you want, you can have your log file in standard ftpd xferlog format.</span></span><br><span class=\"line\"><span class=\"comment\"># Note that the default log file location is /var/log/xferlog in this case.</span></span><br><span class=\"line\"><span class=\"comment\">#xferlog_std_format=YES</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># You may change the default value for timing out an idle session.</span></span><br><span class=\"line\"><span class=\"comment\">#idle_session_timeout=600</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># You may change the default value for timing out a data connection.</span></span><br><span class=\"line\"><span class=\"comment\">#data_connection_timeout=120</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># It is recommended that you define on your system a unique user which the</span></span><br><span class=\"line\"><span class=\"comment\"># ftp server can use as a totally isolated and unprivileged user.</span></span><br><span class=\"line\"><span class=\"comment\">#nopriv_user=ftpsecure</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Enable this and the server will recognise asynchronous ABOR requests. Not</span></span><br><span class=\"line\"><span class=\"comment\"># recommended for security (the code is non-trivial). Not enabling it,</span></span><br><span class=\"line\"><span class=\"comment\"># however, may confuse older FTP clients.</span></span><br><span class=\"line\"><span class=\"comment\">#async_abor_enable=YES</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># By default the server will pretend to allow ASCII mode but in fact ignore</span></span><br><span class=\"line\"><span class=\"comment\"># the request. Turn on the below options to have the server actually do ASCII</span></span><br><span class=\"line\"><span class=\"comment\"># mangling on files when in ASCII mode.</span></span><br><span class=\"line\"><span class=\"comment\"># Beware that on some FTP servers, ASCII support allows a denial of service</span></span><br><span class=\"line\"><span class=\"comment\"># attack (DoS) via the command &quot;SIZE /big/file&quot; in ASCII mode. vsftpd</span></span><br><span class=\"line\"><span class=\"comment\"># predicted this attack and has always been safe, reporting the size of the</span></span><br><span class=\"line\"><span class=\"comment\"># raw file.</span></span><br><span class=\"line\"><span class=\"comment\"># ASCII mangling is a horrible feature of the protocol.</span></span><br><span class=\"line\"><span class=\"comment\">#ascii_upload_enable=YES</span></span><br><span class=\"line\"><span class=\"comment\">#ascii_download_enable=YES</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># You may fully customise the login banner string:</span></span><br><span class=\"line\"><span class=\"comment\">#ftpd_banner=Welcome to blah FTP service.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># You may specify a file of disallowed anonymous e-mail addresses. Apparently</span></span><br><span class=\"line\"><span class=\"comment\"># useful for combatting certain DoS attacks.</span></span><br><span class=\"line\"><span class=\"comment\">#deny_email_enable=YES</span></span><br><span class=\"line\"><span class=\"comment\"># (default follows)</span></span><br><span class=\"line\"><span class=\"comment\">#banned_email_file=/etc/vsftpd.banned_emails</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># You may restrict local users to their home directories.  See the FAQ for</span></span><br><span class=\"line\"><span class=\"comment\"># the possible risks in this before using chroot_local_user or</span></span><br><span class=\"line\"><span class=\"comment\"># chroot_list_enable below.</span></span><br><span class=\"line\"><span class=\"comment\"># chroot_local_user=YES</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># You may specify an explicit list of local users to chroot() to their home</span></span><br><span class=\"line\"><span class=\"comment\"># directory. If chroot_local_user is YES, then this list becomes a list of</span></span><br><span class=\"line\"><span class=\"comment\"># users to NOT chroot().</span></span><br><span class=\"line\"><span class=\"comment\"># (Warning! chroot&#x27;ing can be very dangerous. If using chroot, make sure that</span></span><br><span class=\"line\"><span class=\"comment\"># the user does not have write access to the top level directory within the</span></span><br><span class=\"line\"><span class=\"comment\"># chroot)</span></span><br><span class=\"line\"><span class=\"comment\"># chroot_local_user=YES</span></span><br><span class=\"line\"><span class=\"comment\"># chroot_list_enable=YES</span></span><br><span class=\"line\"><span class=\"comment\"># (default follows)</span></span><br><span class=\"line\"><span class=\"comment\"># chroot_list_file=/etc/vsftpd.chroot_list</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># You may activate the &quot;-R&quot; option to the builtin ls. This is disabled by</span></span><br><span class=\"line\"><span class=\"comment\"># default to avoid remote users being able to cause excessive I/O on large</span></span><br><span class=\"line\"><span class=\"comment\"># sites. However, some broken FTP clients such as &quot;ncftp&quot; and &quot;mirror&quot; assume</span></span><br><span class=\"line\"><span class=\"comment\"># the presence of the &quot;-R&quot; option, so there is a strong case for enabling it.</span></span><br><span class=\"line\"><span class=\"comment\">#ls_recurse_enable=YES</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Customization</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Some of vsftpd&#x27;s settings don&#x27;t fit the filesystem layout by</span></span><br><span class=\"line\"><span class=\"comment\"># default.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># This option should be the name of a directory which is empty.  Also, the</span></span><br><span class=\"line\"><span class=\"comment\"># directory should not be writable by the ftp user. This directory is used</span></span><br><span class=\"line\"><span class=\"comment\"># as a secure chroot() jail at times vsftpd does not require filesystem</span></span><br><span class=\"line\"><span class=\"comment\"># access.</span></span><br><span class=\"line\">secure_chroot_dir=/var/run/vsftpd/empty</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># This string is the name of the PAM service vsftpd will use.</span></span><br><span class=\"line\">pam_service_name=vsftpd</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># This option specifies the location of the RSA certificate to use for SSL</span></span><br><span class=\"line\"><span class=\"comment\"># encrypted connections.</span></span><br><span class=\"line\">rsa_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pem</span><br><span class=\"line\">rsa_private_key_file=/etc/ssl/private/ssl-cert-snakeoil.key</span><br><span class=\"line\">ssl_enable=NO</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Uncomment this to indicate that vsftpd use a utf8 filesystem.</span></span><br><span class=\"line\"><span class=\"comment\">#utf8_filesystem=YES</span></span><br></pre></td></tr></table></figure>\n\n<p>实际开启的配置项如下：</p>\n<blockquote>\n<p>按照如下简单的配置就可以通过本地用户进行访问了</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">listen=YES</span><br><span class=\"line\">listen_ipv6=NO</span><br><span class=\"line\">anonymous_enable=NO</span><br><span class=\"line\">local_enable=YES</span><br><span class=\"line\">write_enable=YES</span><br><span class=\"line\">dirmessage_enable=YES</span><br><span class=\"line\">use_localtime=YES</span><br><span class=\"line\">xferlog_enable=YES</span><br><span class=\"line\">connect_from_port_20=YES</span><br><span class=\"line\">secure_chroot_dir=/var/run/vsftpd/empty</span><br><span class=\"line\">pam_service_name=vsftpd</span><br><span class=\"line\">rsa_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pem</span><br><span class=\"line\">rsa_private_key_file=/etc/ssl/private/ssl-cert-snakeoil.key</span><br><span class=\"line\">ssl_enable=NO</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h2><ul>\n<li>无法配置指定根目录，也就是任何本地账户登录后的目录都是根目录，无法自定义配置指定目录，配置后也不生效；</li>\n<li>在添加新用户配置成nologin时，是无法正常使用该类用户进行访问的；</li>\n<li>添加的新用户，需要先登录一次后，方可使用该账号访问ftp;</li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"clcbf771w00011dxhanj87ebf","category_id":"clcbf771z00041dxh0jrmd0b8","_id":"clcbf7723000c1dxh8xxhabmm"},{"post_id":"clcbf771y00031dxhd3b2f567","category_id":"clcbf772200091dxhhb7tc2vy","_id":"clcbf7723000f1dxh6vochsw6"},{"post_id":"clcbf772100071dxhhzee4ki4","category_id":"clcbf7723000d1dxhcr285150","_id":"clcbf7725000k1dxh2msya2bt"},{"post_id":"clcbf772200081dxhchhhbtjm","category_id":"clcbf7723000d1dxhcr285150","_id":"clcbf7726000r1dxh061082kl"},{"post_id":"clcbf772200081dxhchhhbtjm","category_id":"clcbf7725000m1dxhbwfbdcow","_id":"clcbf7726000s1dxhh4gfhy49"},{"post_id":"clcbf7727000x1dxhhy3sd7p2","category_id":"clcbf771z00041dxh0jrmd0b8","_id":"clcbf772800121dxhfxnnfean"},{"post_id":"clcbf7727000x1dxhhy3sd7p2","category_id":"clcbf7728000z1dxhbjx8921k","_id":"clcbf772800131dxh22wc5uzs"}],"PostTag":[{"post_id":"clcbf771w00011dxhanj87ebf","tag_id":"clcbf772000051dxh0ak9emmi","_id":"clcbf7723000b1dxh7cil5nhr"},{"post_id":"clcbf771y00031dxhd3b2f567","tag_id":"clcbf7722000a1dxh21qm5oqb","_id":"clcbf7724000i1dxh58gxdr3q"},{"post_id":"clcbf771y00031dxhd3b2f567","tag_id":"clcbf7723000e1dxh45p3bkjg","_id":"clcbf7725000j1dxh0j501mjf"},{"post_id":"clcbf772100071dxhhzee4ki4","tag_id":"clcbf7723000h1dxh9ezl3s6b","_id":"clcbf7725000o1dxh2zyh8a8j"},{"post_id":"clcbf772100071dxhhzee4ki4","tag_id":"clcbf7725000l1dxh55p4as5c","_id":"clcbf7725000p1dxhddpy05gn"},{"post_id":"clcbf772200081dxhchhhbtjm","tag_id":"clcbf7723000h1dxh9ezl3s6b","_id":"clcbf7726000u1dxhg7i35yna"},{"post_id":"clcbf772200081dxhchhhbtjm","tag_id":"clcbf7725000q1dxhdqgpbsqb","_id":"clcbf7726000v1dxh0nfu8wq8"},{"post_id":"clcbf772200081dxhchhhbtjm","tag_id":"clcbf7726000t1dxh9nyk9mya","_id":"clcbf7726000w1dxhdi8sb0fz"},{"post_id":"clcbf7727000x1dxhhy3sd7p2","tag_id":"clcbf772000051dxh0ak9emmi","_id":"clcbf772800101dxh3fkfaadn"},{"post_id":"clcbf7727000x1dxhhy3sd7p2","tag_id":"clcbf7727000y1dxh21i285nb","_id":"clcbf772800111dxh4e6mepa9"}],"Tag":[{"name":"linux","_id":"clcbf772000051dxh0ak9emmi"},{"name":"测试理论","_id":"clcbf7722000a1dxh21qm5oqb"},{"name":"验收测试","_id":"clcbf7723000e1dxh45p3bkjg"},{"name":"python","_id":"clcbf7723000h1dxh9ezl3s6b"},{"name":"任务调度","_id":"clcbf7725000l1dxh55p4as5c"},{"name":"爬虫","_id":"clcbf7725000q1dxhdqgpbsqb"},{"name":"requests","_id":"clcbf7726000t1dxh9nyk9mya"},{"name":"ftp","_id":"clcbf7727000y1dxh21i285nb"}]}}